STATIC edge: staticinvoke <dummyMainClass: com.example.notificationtest.MyNotification dummyMainMethod_com_example_notificationtest_MyNotification(android.content.Intent)>(null) in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <dummyMainClass: com.example.notificationtest.MyNotification dummyMainMethod_com_example_notificationtest_MyNotification(android.content.Intent)>
STATIC edge: staticinvoke <dummyMainClass: com.example.notificationtest.MyBroadcastReceiver dummyMainMethod_com_example_notificationtest_MyBroadcastReceiver(android.content.Intent)>(null) in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <dummyMainClass: com.example.notificationtest.MyBroadcastReceiver dummyMainMethod_com_example_notificationtest_MyBroadcastReceiver(android.content.Intent)>
STATIC edge: staticinvoke <dummyMainClass: androidx.profileinstaller.ProfileInstallReceiver dummyMainMethod_androidx_profileinstaller_ProfileInstallReceiver(android.content.Intent)>(null) in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <dummyMainClass: androidx.profileinstaller.ProfileInstallReceiver dummyMainMethod_androidx_profileinstaller_ProfileInstallReceiver(android.content.Intent)>
STATIC edge: staticinvoke <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)>(null) in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)>
STATIC edge: staticinvoke <dummyMainClass: androidx.startup.InitializationProvider dummyMainMethod_androidx_startup_InitializationProvider(android.content.Intent)>(null) in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <dummyMainClass: androidx.startup.InitializationProvider dummyMainMethod_androidx_startup_InitializationProvider(android.content.Intent)>
CLINIT edge: $r0 = new com.example.notificationtest.MainActivity in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <com.example.notificationtest.MainActivity: void <clinit>()>
CLINIT edge: $r30 = new androidx.lifecycle.ReportFragment$LifecycleCallbacks in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <androidx.lifecycle.ReportFragment$LifecycleCallbacks: void <clinit>()>
CLINIT edge: $r10 = new androidx.appcompat.app.AppCompatDelegateImpl in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <androidx.appcompat.app.AppCompatDelegate: void <clinit>()>
CLINIT edge: $r10 = new androidx.appcompat.app.AppCompatDelegateImpl in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: void <clinit>()>
CLINIT edge: $r2 = new androidx.fragment.app.Fragment in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <androidx.fragment.app.Fragment: void <clinit>()>
CLINIT edge: $r1 = newarray (java.lang.String)[1] in <dummyMainClass: androidx.startup.InitializationProvider dummyMainMethod_androidx_startup_InitializationProvider(android.content.Intent)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r7 = newarray (java.lang.String)[1] in <dummyMainClass: androidx.startup.InitializationProvider dummyMainMethod_androidx_startup_InitializationProvider(android.content.Intent)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r2 = new androidx.collection.ArraySet in <androidx.appcompat.app.AppCompatDelegate: void <clinit>()> ==> <androidx.collection.ArraySet: void <clinit>()>
CLINIT edge: <androidx.appcompat.app.AppCompatDelegateImpl: androidx.collection.SimpleArrayMap sLocalNightModes> = $r0 in <androidx.appcompat.app.AppCompatDelegateImpl: void <clinit>()> ==> <androidx.appcompat.app.AppCompatDelegate: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<androidx.collection.SimpleArrayMap: void <init>()>() in <androidx.appcompat.app.AppCompatDelegateImpl: void <clinit>()> ==> <androidx.collection.SimpleArrayMap: void <init>()>
CLINIT edge: $r1 = <androidx.collection.ContainerHelpers: int[] EMPTY_INTS> in <androidx.collection.SimpleArrayMap: void <init>()> ==> <androidx.collection.ContainerHelpers: void <clinit>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.collection.SimpleArrayMap: void <init>()> ==> <java.lang.Object: void <init>()>
FINALIZE edge: null in <java.lang.Object: void <init>()> ==> <java.lang.Object: void finalize()>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.RuntimeException: void <init>(java.lang.String)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Exception: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Exception: void <init>()> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Throwable: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r3.<java.lang.Object: void <init>()>() in <androidx.appcompat.app.AppCompatDelegate: void <clinit>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r3.<java.lang.Object: void <init>()>() in <androidx.appcompat.app.AppCompatDelegate: void <clinit>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r2.<androidx.collection.ArraySet: void <init>()>() in <androidx.appcompat.app.AppCompatDelegate: void <clinit>()> ==> <androidx.collection.ArraySet: void <init>()>
SPECIAL edge: specialinvoke r0.<androidx.collection.ArraySet: void <init>(int)>(0) in <androidx.collection.ArraySet: void <init>()> ==> <androidx.collection.ArraySet: void <init>(int)>
CLINIT edge: $r1 = <androidx.collection.ArraySet: int[] INT> in <androidx.collection.ArraySet: void <init>(int)> ==> <androidx.collection.ArraySet: void <clinit>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.collection.ArraySet: void <init>(int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<androidx.collection.ArraySet: void allocArrays(int)>($i0) in <androidx.collection.ArraySet: void <init>(int)> ==> <androidx.collection.ArraySet: void allocArrays(int)>
CLINIT edge: $r1 = <androidx.collection.ArraySet: java.lang.Object[] sTwiceBaseCache> in <androidx.collection.ArraySet: void allocArrays(int)> ==> <androidx.collection.ArraySet: void <clinit>()>
CLINIT edge: $r1 = <androidx.collection.ArraySet: java.lang.Object[] sBaseCache> in <androidx.collection.ArraySet: void allocArrays(int)> ==> <androidx.collection.ArraySet: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<androidx.appcompat.app.AppLocalesStorageHelper$ThreadPerTaskExecutor: void <init>()>() in <androidx.appcompat.app.AppCompatDelegate: void <clinit>()> ==> <androidx.appcompat.app.AppLocalesStorageHelper$ThreadPerTaskExecutor: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.appcompat.app.AppLocalesStorageHelper$ThreadPerTaskExecutor: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<androidx.appcompat.app.AppLocalesStorageHelper$SerialExecutor: void <init>(java.util.concurrent.Executor)>($r0) in <androidx.appcompat.app.AppCompatDelegate: void <clinit>()> ==> <androidx.appcompat.app.AppLocalesStorageHelper$SerialExecutor: void <init>(java.util.concurrent.Executor)>
SPECIAL edge: specialinvoke $r2.<java.lang.Object: void <init>()>() in <androidx.appcompat.app.AppLocalesStorageHelper$SerialExecutor: void <init>(java.util.concurrent.Executor)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <androidx.fragment.app.Fragment: void <clinit>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<androidx.lifecycle.ReportFragment$LifecycleCallbacks$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null) in <androidx.lifecycle.ReportFragment$LifecycleCallbacks: void <clinit>()> ==> <androidx.lifecycle.ReportFragment$LifecycleCallbacks$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>
SPECIAL edge: specialinvoke r0.<androidx.lifecycle.ReportFragment$LifecycleCallbacks$Companion: void <init>()>() in <androidx.lifecycle.ReportFragment$LifecycleCallbacks$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)> ==> <androidx.lifecycle.ReportFragment$LifecycleCallbacks$Companion: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.lifecycle.ReportFragment$LifecycleCallbacks$Companion: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3) in <androidx.appcompat.app.AppCompatDelegateImpl: void <clinit>()> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<androidx.startup.InitializationProvider: void <init>()>() in <dummyMainClass: androidx.startup.InitializationProvider dummyMainMethod_androidx_startup_InitializationProvider(android.content.Intent)> ==> <androidx.startup.InitializationProvider: void <init>()>
VIRTUAL edge: $i1 = virtualinvoke $r0.<androidx.startup.InitializationProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])>(null, "", $r1) in <dummyMainClass: androidx.startup.InitializationProvider dummyMainMethod_androidx_startup_InitializationProvider(android.content.Intent)> ==> <androidx.startup.InitializationProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])>
VIRTUAL edge: $r2 = virtualinvoke $r0.<androidx.startup.InitializationProvider: java.lang.String getType(android.net.Uri)>(null) in <dummyMainClass: androidx.startup.InitializationProvider dummyMainMethod_androidx_startup_InitializationProvider(android.content.Intent)> ==> <androidx.startup.InitializationProvider: java.lang.String getType(android.net.Uri)>
VIRTUAL edge: $r3 = virtualinvoke $r0.<androidx.startup.InitializationProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>(null, null) in <dummyMainClass: androidx.startup.InitializationProvider dummyMainMethod_androidx_startup_InitializationProvider(android.content.Intent)> ==> <androidx.startup.InitializationProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>
VIRTUAL edge: $r6 = virtualinvoke $r0.<androidx.startup.InitializationProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>(null, $r4, "", $r5, "") in <dummyMainClass: androidx.startup.InitializationProvider dummyMainMethod_androidx_startup_InitializationProvider(android.content.Intent)> ==> <androidx.startup.InitializationProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
VIRTUAL edge: $i2 = virtualinvoke $r0.<androidx.startup.InitializationProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>(null, null, "", $r7) in <dummyMainClass: androidx.startup.InitializationProvider dummyMainMethod_androidx_startup_InitializationProvider(android.content.Intent)> ==> <androidx.startup.InitializationProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>
SPECIAL edge: specialinvoke $r34.<androidx.core.view.ViewPropertyAnimatorCompat$$ExternalSyntheticLambda0: void <init>(androidx.core.view.ViewPropertyAnimatorUpdateListener,android.view.View)>(null, null) in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <androidx.core.view.ViewPropertyAnimatorCompat$$ExternalSyntheticLambda0: void <init>(androidx.core.view.ViewPropertyAnimatorUpdateListener,android.view.View)>
VIRTUAL edge: virtualinvoke $r34.<androidx.core.view.ViewPropertyAnimatorCompat$$ExternalSyntheticLambda0: void onAnimationUpdate(android.animation.ValueAnimator)>(null) in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <androidx.core.view.ViewPropertyAnimatorCompat$$ExternalSyntheticLambda0: void onAnimationUpdate(android.animation.ValueAnimator)>
STATIC edge: staticinvoke <androidx.core.view.ViewPropertyAnimatorCompat: void lambda$setUpdateListener$0(androidx.core.view.ViewPropertyAnimatorUpdateListener,android.view.View,android.animation.ValueAnimator)>($r2, $r3, $r1) in <androidx.core.view.ViewPropertyAnimatorCompat$$ExternalSyntheticLambda0: void onAnimationUpdate(android.animation.ValueAnimator)> ==> <androidx.core.view.ViewPropertyAnimatorCompat: void lambda$setUpdateListener$0(androidx.core.view.ViewPropertyAnimatorUpdateListener,android.view.View,android.animation.ValueAnimator)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.core.view.ViewPropertyAnimatorCompat$$ExternalSyntheticLambda0: void <init>(androidx.core.view.ViewPropertyAnimatorUpdateListener,android.view.View)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r33.<androidx.fragment.app.FragmentTransitionCompat21$4: void <init>(androidx.fragment.app.FragmentTransitionCompat21,java.lang.Runnable)>($r32, null) in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <androidx.fragment.app.FragmentTransitionCompat21$4: void <init>(androidx.fragment.app.FragmentTransitionCompat21,java.lang.Runnable)>
VIRTUAL edge: virtualinvoke $r33.<androidx.fragment.app.FragmentTransitionCompat21$4: void onTransitionEnd(android.transition.Transition)>(null) in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <androidx.fragment.app.FragmentTransitionCompat21$4: void onTransitionEnd(android.transition.Transition)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.fragment.app.FragmentTransitionCompat21$4: void <init>(androidx.fragment.app.FragmentTransitionCompat21,java.lang.Runnable)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r32.<androidx.fragment.app.FragmentTransitionCompat21: void <init>()>() in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <androidx.fragment.app.FragmentTransitionCompat21: void <init>()>
SPECIAL edge: specialinvoke r0.<androidx.fragment.app.FragmentTransitionImpl: void <init>()>() in <androidx.fragment.app.FragmentTransitionCompat21: void <init>()> ==> <androidx.fragment.app.FragmentTransitionImpl: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.fragment.app.FragmentTransitionImpl: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r31.<androidx.appcompat.view.menu.ListMenuPresenter: void <init>(android.content.Context,int)>($r0, 0) in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <androidx.appcompat.view.menu.ListMenuPresenter: void <init>(android.content.Context,int)>
VIRTUAL edge: virtualinvoke $r31.<androidx.appcompat.view.menu.ListMenuPresenter: void onItemClick(android.widget.AdapterView,android.view.View,int,long)>(null, null, 0, 0L) in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <androidx.appcompat.view.menu.ListMenuPresenter: void onItemClick(android.widget.AdapterView,android.view.View,int,long)>
SPECIAL edge: specialinvoke r0.<androidx.appcompat.view.menu.ListMenuPresenter: void <init>(int,int)>($i0, 0) in <androidx.appcompat.view.menu.ListMenuPresenter: void <init>(android.content.Context,int)> ==> <androidx.appcompat.view.menu.ListMenuPresenter: void <init>(int,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.appcompat.view.menu.ListMenuPresenter: void <init>(int,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r30.<androidx.lifecycle.ReportFragment$LifecycleCallbacks: void <init>()>() in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <androidx.lifecycle.ReportFragment$LifecycleCallbacks: void <init>()>
VIRTUAL edge: virtualinvoke $r30.<androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityStopped(android.app.Activity)>($r0) in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityStopped(android.app.Activity)>
VIRTUAL edge: virtualinvoke $r30.<androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPaused(android.app.Activity)>($r0) in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPaused(android.app.Activity)>
VIRTUAL edge: virtualinvoke $r30.<androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivitySaveInstanceState(android.app.Activity,android.os.Bundle)>($r0, null) in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivitySaveInstanceState(android.app.Activity,android.os.Bundle)>
VIRTUAL edge: virtualinvoke $r30.<androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPreStopped(android.app.Activity)>($r0) in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPreStopped(android.app.Activity)>
VIRTUAL edge: virtualinvoke $r30.<androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPreDestroyed(android.app.Activity)>($r0) in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPreDestroyed(android.app.Activity)>
VIRTUAL edge: virtualinvoke $r30.<androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityDestroyed(android.app.Activity)>($r0) in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityDestroyed(android.app.Activity)>
VIRTUAL edge: virtualinvoke $r30.<androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPostCreated(android.app.Activity,android.os.Bundle)>($r0, null) in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPostCreated(android.app.Activity,android.os.Bundle)>
VIRTUAL edge: virtualinvoke $r30.<androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityResumed(android.app.Activity)>($r0) in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityResumed(android.app.Activity)>
VIRTUAL edge: virtualinvoke $r30.<androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityStarted(android.app.Activity)>($r0) in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityStarted(android.app.Activity)>
VIRTUAL edge: virtualinvoke $r30.<androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPostStarted(android.app.Activity)>($r0) in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPostStarted(android.app.Activity)>
VIRTUAL edge: virtualinvoke $r30.<androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPrePaused(android.app.Activity)>($r0) in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPrePaused(android.app.Activity)>
VIRTUAL edge: virtualinvoke $r30.<androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPostResumed(android.app.Activity)>($r0) in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPostResumed(android.app.Activity)>
VIRTUAL edge: virtualinvoke $r30.<androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityCreated(android.app.Activity,android.os.Bundle)>($r0, null) in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityCreated(android.app.Activity,android.os.Bundle)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "activity") in <androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityStopped(android.app.Activity)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "activity") in <androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPaused(android.app.Activity)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "activity") in <androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivitySaveInstanceState(android.app.Activity,android.os.Bundle)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
CLINIT edge: $r3 = <androidx.lifecycle.ReportFragment: androidx.lifecycle.ReportFragment$Companion Companion> in <androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPreStopped(android.app.Activity)> ==> <androidx.lifecycle.ReportFragment: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "activity") in <androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPreStopped(android.app.Activity)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
CLINIT edge: $r2 = <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_STOP> in <androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPreStopped(android.app.Activity)> ==> <androidx.lifecycle.Lifecycle$Event: void <clinit>()>
CLINIT edge: $r3 = <androidx.lifecycle.ReportFragment: androidx.lifecycle.ReportFragment$Companion Companion> in <androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPreDestroyed(android.app.Activity)> ==> <androidx.lifecycle.ReportFragment: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "activity") in <androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPreDestroyed(android.app.Activity)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
CLINIT edge: $r2 = <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_DESTROY> in <androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPreDestroyed(android.app.Activity)> ==> <androidx.lifecycle.Lifecycle$Event: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "activity") in <androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityDestroyed(android.app.Activity)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
CLINIT edge: $r4 = <androidx.lifecycle.ReportFragment: androidx.lifecycle.ReportFragment$Companion Companion> in <androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPostCreated(android.app.Activity,android.os.Bundle)> ==> <androidx.lifecycle.ReportFragment: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "activity") in <androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPostCreated(android.app.Activity,android.os.Bundle)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
CLINIT edge: $r2 = <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_CREATE> in <androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPostCreated(android.app.Activity,android.os.Bundle)> ==> <androidx.lifecycle.Lifecycle$Event: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "activity") in <androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityResumed(android.app.Activity)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "activity") in <androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityStarted(android.app.Activity)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
CLINIT edge: $r3 = <androidx.lifecycle.ReportFragment: androidx.lifecycle.ReportFragment$Companion Companion> in <androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPostStarted(android.app.Activity)> ==> <androidx.lifecycle.ReportFragment: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "activity") in <androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPostStarted(android.app.Activity)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
CLINIT edge: $r2 = <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_START> in <androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPostStarted(android.app.Activity)> ==> <androidx.lifecycle.Lifecycle$Event: void <clinit>()>
CLINIT edge: $r3 = <androidx.lifecycle.ReportFragment: androidx.lifecycle.ReportFragment$Companion Companion> in <androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPrePaused(android.app.Activity)> ==> <androidx.lifecycle.ReportFragment: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "activity") in <androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPrePaused(android.app.Activity)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
CLINIT edge: $r2 = <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_PAUSE> in <androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPrePaused(android.app.Activity)> ==> <androidx.lifecycle.Lifecycle$Event: void <clinit>()>
CLINIT edge: $r3 = <androidx.lifecycle.ReportFragment: androidx.lifecycle.ReportFragment$Companion Companion> in <androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPostResumed(android.app.Activity)> ==> <androidx.lifecycle.ReportFragment: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "activity") in <androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPostResumed(android.app.Activity)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
CLINIT edge: $r2 = <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_RESUME> in <androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPostResumed(android.app.Activity)> ==> <androidx.lifecycle.Lifecycle$Event: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "activity") in <androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityCreated(android.app.Activity,android.os.Bundle)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void throwParameterIsNullNPE(java.lang.String)>($r1) in <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)> ==> <kotlin.jvm.internal.Intrinsics: void throwParameterIsNullNPE(java.lang.String)>
STATIC edge: $r0 = staticinvoke <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event[] $values()>() in <androidx.lifecycle.Lifecycle$Event: void <clinit>()> ==> <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event[] $values()>
STATIC edge: $r1 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.String createParameterIsNullExceptionMessage(java.lang.String)>($r1) in <kotlin.jvm.internal.Intrinsics: void throwParameterIsNullNPE(java.lang.String)> ==> <kotlin.jvm.internal.Intrinsics: java.lang.String createParameterIsNullExceptionMessage(java.lang.String)>
STATIC edge: $r2 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.Throwable sanitizeStackTrace(java.lang.Throwable)>($r0) in <kotlin.jvm.internal.Intrinsics: void throwParameterIsNullNPE(java.lang.String)> ==> <kotlin.jvm.internal.Intrinsics: java.lang.Throwable sanitizeStackTrace(java.lang.Throwable)>
STATIC edge: $r0 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.Throwable sanitizeStackTrace(java.lang.Throwable,java.lang.String)>($r0, $r2) in <kotlin.jvm.internal.Intrinsics: java.lang.Throwable sanitizeStackTrace(java.lang.Throwable)> ==> <kotlin.jvm.internal.Intrinsics: java.lang.Throwable sanitizeStackTrace(java.lang.Throwable,java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.Thread: java.lang.StackTraceElement[] getStackTrace()>() in <kotlin.jvm.internal.Intrinsics: java.lang.String createParameterIsNullExceptionMessage(java.lang.String)> ==> <java.lang.Thread: java.lang.StackTraceElement[] getStackTrace()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.StackTraceElement[] getStackTrace()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>() in <kotlin.jvm.internal.Intrinsics: java.lang.Throwable sanitizeStackTrace(java.lang.Throwable)> ==> <java.lang.Class: java.lang.String getName()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.String getName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke $r0.<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>() in <kotlin.jvm.internal.Intrinsics: java.lang.Throwable sanitizeStackTrace(java.lang.Throwable,java.lang.String)> ==> <java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>
VIRTUAL edge: virtualinvoke $r0.<java.lang.Throwable: void setStackTrace(java.lang.StackTraceElement[])>($r2) in <kotlin.jvm.internal.Intrinsics: java.lang.Throwable sanitizeStackTrace(java.lang.Throwable,java.lang.String)> ==> <java.lang.Throwable: void setStackTrace(java.lang.StackTraceElement[])>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void setStackTrace(java.lang.StackTraceElement[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>() in <kotlin.jvm.internal.Intrinsics: java.lang.String createParameterIsNullExceptionMessage(java.lang.String)> ==> <java.lang.Class: java.lang.String getName()>
SPECIAL edge: specialinvoke $r0.<java.lang.NullPointerException: void <init>(java.lang.String)>($r1) in <kotlin.jvm.internal.Intrinsics: void throwParameterIsNullNPE(java.lang.String)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NullPointerException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.NullPointerException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.RuntimeException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.RuntimeException: void <init>()> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r2.<androidx.lifecycle.Lifecycle$Event$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null) in <androidx.lifecycle.Lifecycle$Event: void <clinit>()> ==> <androidx.lifecycle.Lifecycle$Event$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>
SPECIAL edge: specialinvoke r0.<androidx.lifecycle.Lifecycle$Event$Companion: void <init>()>() in <androidx.lifecycle.Lifecycle$Event$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)> ==> <androidx.lifecycle.Lifecycle$Event$Companion: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.lifecycle.Lifecycle$Event$Companion: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<androidx.lifecycle.Lifecycle$Event: void <init>(java.lang.String,int)>("ON_CREATE", 0) in <androidx.lifecycle.Lifecycle$Event: void <clinit>()> ==> <androidx.lifecycle.Lifecycle$Event: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r1.<androidx.lifecycle.Lifecycle$Event: void <init>(java.lang.String,int)>("ON_STOP", 4) in <androidx.lifecycle.Lifecycle$Event: void <clinit>()> ==> <androidx.lifecycle.Lifecycle$Event: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r1.<androidx.lifecycle.Lifecycle$Event: void <init>(java.lang.String,int)>("ON_ANY", 6) in <androidx.lifecycle.Lifecycle$Event: void <clinit>()> ==> <androidx.lifecycle.Lifecycle$Event: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>($r1, $i0) in <androidx.lifecycle.Lifecycle$Event: void <init>(java.lang.String,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
FINALIZE edge: null in <java.lang.Enum: void <init>(java.lang.String,int)> ==> <java.lang.Enum: void finalize()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: void finalize()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: void <init>(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Enum: void <init>(java.lang.String,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<androidx.lifecycle.ReportFragment$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null) in <androidx.lifecycle.ReportFragment: void <clinit>()> ==> <androidx.lifecycle.ReportFragment$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>
SPECIAL edge: specialinvoke r0.<androidx.lifecycle.ReportFragment$Companion: void <init>()>() in <androidx.lifecycle.ReportFragment$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)> ==> <androidx.lifecycle.ReportFragment$Companion: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.lifecycle.ReportFragment$Companion: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r3.<androidx.lifecycle.ReportFragment$Companion: void dispatch$lifecycle_runtime_release(android.app.Activity,androidx.lifecycle.Lifecycle$Event)>($r1, $r2) in <androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPostResumed(android.app.Activity)> ==> <androidx.lifecycle.ReportFragment$Companion: void dispatch$lifecycle_runtime_release(android.app.Activity,androidx.lifecycle.Lifecycle$Event)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "activity") in <androidx.lifecycle.ReportFragment$Companion: void dispatch$lifecycle_runtime_release(android.app.Activity,androidx.lifecycle.Lifecycle$Event)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
INTERFACE edge: $r6 = interfaceinvoke $r5.<androidx.lifecycle.LifecycleOwner: androidx.lifecycle.Lifecycle getLifecycle()>() in <androidx.lifecycle.ReportFragment$Companion: void dispatch$lifecycle_runtime_release(android.app.Activity,androidx.lifecycle.Lifecycle$Event)> ==> <androidx.activity.ComponentActivity: androidx.lifecycle.Lifecycle getLifecycle()>
VIRTUAL edge: virtualinvoke $r3.<androidx.lifecycle.ReportFragment$Companion: void dispatch$lifecycle_runtime_release(android.app.Activity,androidx.lifecycle.Lifecycle$Event)>($r1, $r2) in <androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPrePaused(android.app.Activity)> ==> <androidx.lifecycle.ReportFragment$Companion: void dispatch$lifecycle_runtime_release(android.app.Activity,androidx.lifecycle.Lifecycle$Event)>
VIRTUAL edge: virtualinvoke $r3.<androidx.lifecycle.ReportFragment$Companion: void dispatch$lifecycle_runtime_release(android.app.Activity,androidx.lifecycle.Lifecycle$Event)>($r1, $r2) in <androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPostStarted(android.app.Activity)> ==> <androidx.lifecycle.ReportFragment$Companion: void dispatch$lifecycle_runtime_release(android.app.Activity,androidx.lifecycle.Lifecycle$Event)>
VIRTUAL edge: virtualinvoke $r4.<androidx.lifecycle.ReportFragment$Companion: void dispatch$lifecycle_runtime_release(android.app.Activity,androidx.lifecycle.Lifecycle$Event)>($r1, $r2) in <androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPostCreated(android.app.Activity,android.os.Bundle)> ==> <androidx.lifecycle.ReportFragment$Companion: void dispatch$lifecycle_runtime_release(android.app.Activity,androidx.lifecycle.Lifecycle$Event)>
VIRTUAL edge: virtualinvoke $r3.<androidx.lifecycle.ReportFragment$Companion: void dispatch$lifecycle_runtime_release(android.app.Activity,androidx.lifecycle.Lifecycle$Event)>($r1, $r2) in <androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPreDestroyed(android.app.Activity)> ==> <androidx.lifecycle.ReportFragment$Companion: void dispatch$lifecycle_runtime_release(android.app.Activity,androidx.lifecycle.Lifecycle$Event)>
VIRTUAL edge: virtualinvoke $r3.<androidx.lifecycle.ReportFragment$Companion: void dispatch$lifecycle_runtime_release(android.app.Activity,androidx.lifecycle.Lifecycle$Event)>($r1, $r2) in <androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPreStopped(android.app.Activity)> ==> <androidx.lifecycle.ReportFragment$Companion: void dispatch$lifecycle_runtime_release(android.app.Activity,androidx.lifecycle.Lifecycle$Event)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.lifecycle.ReportFragment$LifecycleCallbacks: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r29.<androidx.fragment.app.FragmentStateManager$1: void <init>(androidx.fragment.app.FragmentStateManager,android.view.View)>($r28, null) in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <androidx.fragment.app.FragmentStateManager$1: void <init>(androidx.fragment.app.FragmentStateManager,android.view.View)>
VIRTUAL edge: virtualinvoke $r29.<androidx.fragment.app.FragmentStateManager$1: void onViewAttachedToWindow(android.view.View)>(null) in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <androidx.fragment.app.FragmentStateManager$1: void onViewAttachedToWindow(android.view.View)>
CLINIT edge: staticinvoke <androidx.core.view.ViewCompat: void requestApplyInsets(android.view.View)>($r1) in <androidx.fragment.app.FragmentStateManager$1: void onViewAttachedToWindow(android.view.View)> ==> <androidx.core.view.ViewCompat: void <clinit>()>
STATIC edge: staticinvoke <androidx.core.view.ViewCompat: void requestApplyInsets(android.view.View)>($r1) in <androidx.fragment.app.FragmentStateManager$1: void onViewAttachedToWindow(android.view.View)> ==> <androidx.core.view.ViewCompat: void requestApplyInsets(android.view.View)>
STATIC edge: staticinvoke <androidx.core.view.ViewCompat$Api20Impl: void requestApplyInsets(android.view.View)>($r0) in <androidx.core.view.ViewCompat: void requestApplyInsets(android.view.View)> ==> <androidx.core.view.ViewCompat$Api20Impl: void requestApplyInsets(android.view.View)>
SPECIAL edge: specialinvoke $r3.<androidx.core.view.ViewCompat$AccessibilityPaneVisibilityManager: void <init>()>() in <androidx.core.view.ViewCompat: void <clinit>()> ==> <androidx.core.view.ViewCompat$AccessibilityPaneVisibilityManager: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.core.view.ViewCompat$AccessibilityPaneVisibilityManager: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r2.<androidx.core.view.ViewCompat$$ExternalSyntheticLambda0: void <init>()>() in <androidx.core.view.ViewCompat: void <clinit>()> ==> <androidx.core.view.ViewCompat$$ExternalSyntheticLambda0: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.core.view.ViewCompat$$ExternalSyntheticLambda0: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.fragment.app.FragmentStateManager$1: void <init>(androidx.fragment.app.FragmentStateManager,android.view.View)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r28.<androidx.fragment.app.FragmentStateManager: void <init>(androidx.fragment.app.FragmentLifecycleCallbacksDispatcher,androidx.fragment.app.FragmentStore,androidx.fragment.app.Fragment)>($r25, $r26, $r27) in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <androidx.fragment.app.FragmentStateManager: void <init>(androidx.fragment.app.FragmentLifecycleCallbacksDispatcher,androidx.fragment.app.FragmentStore,androidx.fragment.app.Fragment)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.fragment.app.FragmentStateManager: void <init>(androidx.fragment.app.FragmentLifecycleCallbacksDispatcher,androidx.fragment.app.FragmentStore,androidx.fragment.app.Fragment)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r27.<androidx.fragment.app.Fragment: void <init>()>() in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <androidx.fragment.app.Fragment: void <init>()>
CLINIT edge: $r4 = new androidx.fragment.app.FragmentManagerImpl in <androidx.fragment.app.Fragment: void <init>()> ==> <androidx.fragment.app.FragmentManager: void <clinit>()>
CLINIT edge: $r6 = new androidx.lifecycle.MutableLiveData in <androidx.fragment.app.Fragment: void <init>()> ==> <androidx.lifecycle.LiveData: void <clinit>()>
CLINIT edge: $r3 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State RESUMED> in <androidx.fragment.app.Fragment: void <init>()> ==> <androidx.lifecycle.Lifecycle$State: void <clinit>()>
STATIC edge: $r0 = staticinvoke <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State[] $values()>() in <androidx.lifecycle.Lifecycle$State: void <clinit>()> ==> <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State[] $values()>
SPECIAL edge: specialinvoke $r1.<androidx.lifecycle.Lifecycle$State: void <init>(java.lang.String,int)>("DESTROYED", 0) in <androidx.lifecycle.Lifecycle$State: void <clinit>()> ==> <androidx.lifecycle.Lifecycle$State: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r1.<androidx.lifecycle.Lifecycle$State: void <init>(java.lang.String,int)>("RESUMED", 4) in <androidx.lifecycle.Lifecycle$State: void <clinit>()> ==> <androidx.lifecycle.Lifecycle$State: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>($r1, $i0) in <androidx.lifecycle.Lifecycle$State: void <init>(java.lang.String,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <androidx.lifecycle.LiveData: void <clinit>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r6.<androidx.lifecycle.MutableLiveData: void <init>()>() in <androidx.fragment.app.Fragment: void <init>()> ==> <androidx.lifecycle.MutableLiveData: void <init>()>
SPECIAL edge: specialinvoke r0.<androidx.lifecycle.LiveData: void <init>()>() in <androidx.lifecycle.MutableLiveData: void <init>()> ==> <androidx.lifecycle.LiveData: void <init>()>
CLINIT edge: $r1 = <androidx.lifecycle.LiveData: java.lang.Object NOT_SET> in <androidx.lifecycle.LiveData: void <init>()> ==> <androidx.lifecycle.LiveData: void <clinit>()>
SPECIAL edge: specialinvoke $r4.<androidx.lifecycle.LiveData$1: void <init>(androidx.lifecycle.LiveData)>(r0) in <androidx.lifecycle.LiveData: void <init>()> ==> <androidx.lifecycle.LiveData$1: void <init>(androidx.lifecycle.LiveData)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.lifecycle.LiveData$1: void <init>(androidx.lifecycle.LiveData)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r3.<androidx.arch.core.internal.SafeIterableMap: void <init>()>() in <androidx.lifecycle.LiveData: void <init>()> ==> <androidx.arch.core.internal.SafeIterableMap: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.arch.core.internal.SafeIterableMap: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r2.<java.lang.Object: void <init>()>() in <androidx.lifecycle.LiveData: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.lifecycle.LiveData: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r5.<androidx.fragment.app.Fragment$1: void <init>(androidx.fragment.app.Fragment)>(r0) in <androidx.fragment.app.Fragment: void <init>()> ==> <androidx.fragment.app.Fragment$1: void <init>(androidx.fragment.app.Fragment)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.fragment.app.Fragment$1: void <init>(androidx.fragment.app.Fragment)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r4.<androidx.fragment.app.FragmentManagerImpl: void <init>()>() in <androidx.fragment.app.Fragment: void <init>()> ==> <androidx.fragment.app.FragmentManagerImpl: void <init>()>
SPECIAL edge: specialinvoke r0.<androidx.fragment.app.FragmentManager: void <init>()>() in <androidx.fragment.app.FragmentManagerImpl: void <init>()> ==> <androidx.fragment.app.FragmentManager: void <init>()>
CLINIT edge: $r11 = new androidx.fragment.app.FragmentManager$3 in <androidx.fragment.app.FragmentManager: void <init>()> ==> <androidx.fragment.app.FragmentFactory: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<androidx.collection.SimpleArrayMap: void <init>()>() in <androidx.fragment.app.FragmentFactory: void <clinit>()> ==> <androidx.collection.SimpleArrayMap: void <init>()>
SPECIAL edge: specialinvoke $r14.<androidx.fragment.app.FragmentManager$5: void <init>(androidx.fragment.app.FragmentManager)>(r0) in <androidx.fragment.app.FragmentManager: void <init>()> ==> <androidx.fragment.app.FragmentManager$5: void <init>(androidx.fragment.app.FragmentManager)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.fragment.app.FragmentManager$5: void <init>(androidx.fragment.app.FragmentManager)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r12.<androidx.fragment.app.FragmentManager$4: void <init>(androidx.fragment.app.FragmentManager)>(r0) in <androidx.fragment.app.FragmentManager: void <init>()> ==> <androidx.fragment.app.FragmentManager$4: void <init>(androidx.fragment.app.FragmentManager)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.fragment.app.FragmentManager$4: void <init>(androidx.fragment.app.FragmentManager)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r11.<androidx.fragment.app.FragmentManager$3: void <init>(androidx.fragment.app.FragmentManager)>(r0) in <androidx.fragment.app.FragmentManager: void <init>()> ==> <androidx.fragment.app.FragmentManager$3: void <init>(androidx.fragment.app.FragmentManager)>
SPECIAL edge: specialinvoke r0.<androidx.fragment.app.FragmentFactory: void <init>()>() in <androidx.fragment.app.FragmentManager$3: void <init>(androidx.fragment.app.FragmentManager)> ==> <androidx.fragment.app.FragmentFactory: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.fragment.app.FragmentFactory: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r9.<androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void <init>(androidx.fragment.app.FragmentManager)>(r0) in <androidx.fragment.app.FragmentManager: void <init>()> ==> <androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void <init>(androidx.fragment.app.FragmentManager)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void <init>(androidx.fragment.app.FragmentManager)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r8.<androidx.fragment.app.FragmentManager$2: void <init>(androidx.fragment.app.FragmentManager)>(r0) in <androidx.fragment.app.FragmentManager: void <init>()> ==> <androidx.fragment.app.FragmentManager$2: void <init>(androidx.fragment.app.FragmentManager)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.fragment.app.FragmentManager$2: void <init>(androidx.fragment.app.FragmentManager)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r5.<androidx.fragment.app.FragmentManager$1: void <init>(androidx.fragment.app.FragmentManager,boolean)>(r0, 0) in <androidx.fragment.app.FragmentManager: void <init>()> ==> <androidx.fragment.app.FragmentManager$1: void <init>(androidx.fragment.app.FragmentManager,boolean)>
SPECIAL edge: specialinvoke r0.<androidx.activity.OnBackPressedCallback: void <init>(boolean)>($z0) in <androidx.fragment.app.FragmentManager$1: void <init>(androidx.fragment.app.FragmentManager,boolean)> ==> <androidx.activity.OnBackPressedCallback: void <init>(boolean)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.activity.OnBackPressedCallback: void <init>(boolean)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r4.<androidx.fragment.app.FragmentLayoutInflaterFactory: void <init>(androidx.fragment.app.FragmentManager)>(r0) in <androidx.fragment.app.FragmentManager: void <init>()> ==> <androidx.fragment.app.FragmentLayoutInflaterFactory: void <init>(androidx.fragment.app.FragmentManager)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.fragment.app.FragmentLayoutInflaterFactory: void <init>(androidx.fragment.app.FragmentManager)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r3.<androidx.fragment.app.FragmentStore: void <init>()>() in <androidx.fragment.app.FragmentManager: void <init>()> ==> <androidx.fragment.app.FragmentStore: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.fragment.app.FragmentStore: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.fragment.app.FragmentManager: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.fragment.app.Fragment: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<androidx.fragment.app.Fragment: void initLifecycle()>() in <androidx.fragment.app.Fragment: void <init>()> ==> <androidx.fragment.app.Fragment: void initLifecycle()>
CLINIT edge: $r2 = new androidx.lifecycle.LifecycleRegistry in <androidx.fragment.app.Fragment: void initLifecycle()> ==> <androidx.lifecycle.LifecycleRegistry: void <clinit>()>
STATIC edge: $r1 = staticinvoke <androidx.savedstate.SavedStateRegistryController: androidx.savedstate.SavedStateRegistryController create(androidx.savedstate.SavedStateRegistryOwner)>(r0) in <androidx.fragment.app.Fragment: void initLifecycle()> ==> <androidx.savedstate.SavedStateRegistryController: androidx.savedstate.SavedStateRegistryController create(androidx.savedstate.SavedStateRegistryOwner)>
CLINIT edge: $r1 = staticinvoke <androidx.savedstate.SavedStateRegistryController: androidx.savedstate.SavedStateRegistryController create(androidx.savedstate.SavedStateRegistryOwner)>(r0) in <androidx.fragment.app.Fragment: void initLifecycle()> ==> <androidx.savedstate.SavedStateRegistryController: void <clinit>()>
CLINIT edge: $r0 = <androidx.savedstate.SavedStateRegistryController: androidx.savedstate.SavedStateRegistryController$Companion Companion> in <androidx.savedstate.SavedStateRegistryController: androidx.savedstate.SavedStateRegistryController create(androidx.savedstate.SavedStateRegistryOwner)> ==> <androidx.savedstate.SavedStateRegistryController: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<androidx.savedstate.SavedStateRegistryController$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null) in <androidx.savedstate.SavedStateRegistryController: void <clinit>()> ==> <androidx.savedstate.SavedStateRegistryController$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>
SPECIAL edge: specialinvoke r0.<androidx.savedstate.SavedStateRegistryController$Companion: void <init>()>() in <androidx.savedstate.SavedStateRegistryController$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)> ==> <androidx.savedstate.SavedStateRegistryController$Companion: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.savedstate.SavedStateRegistryController$Companion: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<androidx.savedstate.SavedStateRegistryController$Companion: androidx.savedstate.SavedStateRegistryController create(androidx.savedstate.SavedStateRegistryOwner)>($r2) in <androidx.savedstate.SavedStateRegistryController: androidx.savedstate.SavedStateRegistryController create(androidx.savedstate.SavedStateRegistryOwner)> ==> <androidx.savedstate.SavedStateRegistryController$Companion: androidx.savedstate.SavedStateRegistryController create(androidx.savedstate.SavedStateRegistryOwner)>
CLINIT edge: $r2 = new androidx.savedstate.SavedStateRegistryController in <androidx.savedstate.SavedStateRegistryController$Companion: androidx.savedstate.SavedStateRegistryController create(androidx.savedstate.SavedStateRegistryOwner)> ==> <androidx.savedstate.SavedStateRegistryController: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "owner") in <androidx.savedstate.SavedStateRegistryController$Companion: androidx.savedstate.SavedStateRegistryController create(androidx.savedstate.SavedStateRegistryOwner)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke $r2.<androidx.savedstate.SavedStateRegistryController: void <init>(androidx.savedstate.SavedStateRegistryOwner,kotlin.jvm.internal.DefaultConstructorMarker)>($r1, null) in <androidx.savedstate.SavedStateRegistryController$Companion: androidx.savedstate.SavedStateRegistryController create(androidx.savedstate.SavedStateRegistryOwner)> ==> <androidx.savedstate.SavedStateRegistryController: void <init>(androidx.savedstate.SavedStateRegistryOwner,kotlin.jvm.internal.DefaultConstructorMarker)>
SPECIAL edge: specialinvoke r0.<androidx.savedstate.SavedStateRegistryController: void <init>(androidx.savedstate.SavedStateRegistryOwner)>($r1) in <androidx.savedstate.SavedStateRegistryController: void <init>(androidx.savedstate.SavedStateRegistryOwner,kotlin.jvm.internal.DefaultConstructorMarker)> ==> <androidx.savedstate.SavedStateRegistryController: void <init>(androidx.savedstate.SavedStateRegistryOwner)>
CLINIT edge: $r2 = new androidx.savedstate.SavedStateRegistry in <androidx.savedstate.SavedStateRegistryController: void <init>(androidx.savedstate.SavedStateRegistryOwner)> ==> <androidx.savedstate.SavedStateRegistry: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<androidx.savedstate.SavedStateRegistry$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null) in <androidx.savedstate.SavedStateRegistry: void <clinit>()> ==> <androidx.savedstate.SavedStateRegistry$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>
SPECIAL edge: specialinvoke r0.<androidx.savedstate.SavedStateRegistry$Companion: void <init>()>() in <androidx.savedstate.SavedStateRegistry$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)> ==> <androidx.savedstate.SavedStateRegistry$Companion: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.savedstate.SavedStateRegistry$Companion: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r2.<androidx.savedstate.SavedStateRegistry: void <init>()>() in <androidx.savedstate.SavedStateRegistryController: void <init>(androidx.savedstate.SavedStateRegistryOwner)> ==> <androidx.savedstate.SavedStateRegistry: void <init>()>
SPECIAL edge: specialinvoke $r1.<androidx.arch.core.internal.SafeIterableMap: void <init>()>() in <androidx.savedstate.SavedStateRegistry: void <init>()> ==> <androidx.arch.core.internal.SafeIterableMap: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.savedstate.SavedStateRegistry: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.savedstate.SavedStateRegistryController: void <init>(androidx.savedstate.SavedStateRegistryOwner)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<androidx.lifecycle.LifecycleRegistry$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null) in <androidx.lifecycle.LifecycleRegistry: void <clinit>()> ==> <androidx.lifecycle.LifecycleRegistry$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>
SPECIAL edge: specialinvoke r0.<androidx.lifecycle.LifecycleRegistry$Companion: void <init>()>() in <androidx.lifecycle.LifecycleRegistry$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)> ==> <androidx.lifecycle.LifecycleRegistry$Companion: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.lifecycle.LifecycleRegistry$Companion: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r2.<androidx.lifecycle.LifecycleRegistry: void <init>(androidx.lifecycle.LifecycleOwner)>(r0) in <androidx.fragment.app.Fragment: void initLifecycle()> ==> <androidx.lifecycle.LifecycleRegistry: void <init>(androidx.lifecycle.LifecycleOwner)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "provider") in <androidx.lifecycle.LifecycleRegistry: void <init>(androidx.lifecycle.LifecycleOwner)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke r0.<androidx.lifecycle.LifecycleRegistry: void <init>(androidx.lifecycle.LifecycleOwner,boolean)>($r1, 1) in <androidx.lifecycle.LifecycleRegistry: void <init>(androidx.lifecycle.LifecycleOwner)> ==> <androidx.lifecycle.LifecycleRegistry: void <init>(androidx.lifecycle.LifecycleOwner,boolean)>
CLINIT edge: $r3 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State INITIALIZED> in <androidx.lifecycle.LifecycleRegistry: void <init>(androidx.lifecycle.LifecycleOwner,boolean)> ==> <androidx.lifecycle.Lifecycle$State: void <clinit>()>
SPECIAL edge: specialinvoke $r2.<androidx.arch.core.internal.FastSafeIterableMap: void <init>()>() in <androidx.lifecycle.LifecycleRegistry: void <init>(androidx.lifecycle.LifecycleOwner,boolean)> ==> <androidx.arch.core.internal.FastSafeIterableMap: void <init>()>
SPECIAL edge: specialinvoke r0.<androidx.arch.core.internal.SafeIterableMap: void <init>()>() in <androidx.arch.core.internal.FastSafeIterableMap: void <init>()> ==> <androidx.arch.core.internal.SafeIterableMap: void <init>()>
SPECIAL edge: specialinvoke r0.<androidx.lifecycle.Lifecycle: void <init>()>() in <androidx.lifecycle.LifecycleRegistry: void <init>(androidx.lifecycle.LifecycleOwner,boolean)> ==> <androidx.lifecycle.Lifecycle: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.lifecycle.Lifecycle: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r26.<androidx.fragment.app.FragmentStore: void <init>()>() in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <androidx.fragment.app.FragmentStore: void <init>()>
SPECIAL edge: specialinvoke $r25.<androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void <init>(androidx.fragment.app.FragmentManager)>(null) in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void <init>(androidx.fragment.app.FragmentManager)>
SPECIAL edge: specialinvoke $r23.<androidx.fragment.app.FragmentTransitionCompat21$5: void <init>(androidx.fragment.app.FragmentTransitionCompat21,android.graphics.Rect)>($r22, null) in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <androidx.fragment.app.FragmentTransitionCompat21$5: void <init>(androidx.fragment.app.FragmentTransitionCompat21,android.graphics.Rect)>
VIRTUAL edge: $r24 = virtualinvoke $r23.<androidx.fragment.app.FragmentTransitionCompat21$5: android.graphics.Rect onGetEpicenter(android.transition.Transition)>(null) in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <androidx.fragment.app.FragmentTransitionCompat21$5: android.graphics.Rect onGetEpicenter(android.transition.Transition)>
SPECIAL edge: specialinvoke $r20.<androidx.fragment.app.FragmentTransitionCompat21$1: void <init>(androidx.fragment.app.FragmentTransitionCompat21,android.graphics.Rect)>($r19, null) in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <androidx.fragment.app.FragmentTransitionCompat21$1: void <init>(androidx.fragment.app.FragmentTransitionCompat21,android.graphics.Rect)>
VIRTUAL edge: $r21 = virtualinvoke $r20.<androidx.fragment.app.FragmentTransitionCompat21$1: android.graphics.Rect onGetEpicenter(android.transition.Transition)>(null) in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <androidx.fragment.app.FragmentTransitionCompat21$1: android.graphics.Rect onGetEpicenter(android.transition.Transition)>
SPECIAL edge: specialinvoke $r18.<androidx.fragment.app.FragmentTransitionCompat21$2: void <init>(androidx.fragment.app.FragmentTransitionCompat21,android.view.View,java.util.ArrayList)>($r17, null, null) in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <androidx.fragment.app.FragmentTransitionCompat21$2: void <init>(androidx.fragment.app.FragmentTransitionCompat21,android.view.View,java.util.ArrayList)>
VIRTUAL edge: virtualinvoke $r18.<androidx.fragment.app.FragmentTransitionCompat21$2: void onTransitionEnd(android.transition.Transition)>(null) in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <androidx.fragment.app.FragmentTransitionCompat21$2: void onTransitionEnd(android.transition.Transition)>
VIRTUAL edge: virtualinvoke $r18.<androidx.fragment.app.FragmentTransitionCompat21$2: void onTransitionStart(android.transition.Transition)>(null) in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <androidx.fragment.app.FragmentTransitionCompat21$2: void onTransitionStart(android.transition.Transition)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.fragment.app.FragmentTransitionCompat21$2: void <init>(androidx.fragment.app.FragmentTransitionCompat21,android.view.View,java.util.ArrayList)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r15.<androidx.core.view.ViewCompat$Api21Impl$1: void <init>(android.view.View,androidx.core.view.OnApplyWindowInsetsListener)>(null, null) in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <androidx.core.view.ViewCompat$Api21Impl$1: void <init>(android.view.View,androidx.core.view.OnApplyWindowInsetsListener)>
VIRTUAL edge: $r16 = virtualinvoke $r15.<androidx.core.view.ViewCompat$Api21Impl$1: android.view.WindowInsets onApplyWindowInsets(android.view.View,android.view.WindowInsets)>(null, null) in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <androidx.core.view.ViewCompat$Api21Impl$1: android.view.WindowInsets onApplyWindowInsets(android.view.View,android.view.WindowInsets)>
CLINIT edge: $r3 = staticinvoke <androidx.core.view.WindowInsetsCompat: androidx.core.view.WindowInsetsCompat toWindowInsetsCompat(android.view.WindowInsets,android.view.View)>($r2, $r1) in <androidx.core.view.ViewCompat$Api21Impl$1: android.view.WindowInsets onApplyWindowInsets(android.view.View,android.view.WindowInsets)> ==> <androidx.core.view.WindowInsetsCompat: void <clinit>()>
STATIC edge: staticinvoke <androidx.core.view.ViewCompat: void requestApplyInsets(android.view.View)>($r1) in <androidx.core.view.ViewCompat$Api21Impl$1: android.view.WindowInsets onApplyWindowInsets(android.view.View,android.view.WindowInsets)> ==> <androidx.core.view.ViewCompat: void requestApplyInsets(android.view.View)>
STATIC edge: staticinvoke <androidx.core.view.ViewCompat$Api21Impl: void callCompatInsetAnimationCallback(android.view.WindowInsets,android.view.View)>($r2, $r4) in <androidx.core.view.ViewCompat$Api21Impl$1: android.view.WindowInsets onApplyWindowInsets(android.view.View,android.view.WindowInsets)> ==> <androidx.core.view.ViewCompat$Api21Impl: void callCompatInsetAnimationCallback(android.view.WindowInsets,android.view.View)>
STATIC edge: $r3 = staticinvoke <androidx.core.view.WindowInsetsCompat: androidx.core.view.WindowInsetsCompat toWindowInsetsCompat(android.view.WindowInsets,android.view.View)>($r2, $r1) in <androidx.core.view.ViewCompat$Api21Impl$1: android.view.WindowInsets onApplyWindowInsets(android.view.View,android.view.WindowInsets)> ==> <androidx.core.view.WindowInsetsCompat: androidx.core.view.WindowInsetsCompat toWindowInsetsCompat(android.view.WindowInsets,android.view.View)>
CLINIT edge: staticinvoke <androidx.core.view.ViewCompat: void requestApplyInsets(android.view.View)>($r1) in <androidx.core.view.ViewCompat$Api21Impl$1: android.view.WindowInsets onApplyWindowInsets(android.view.View,android.view.WindowInsets)> ==> <androidx.core.view.ViewCompat: void <clinit>()>
CLINIT edge: $r0 = <androidx.core.view.WindowInsetsCompat$Impl: androidx.core.view.WindowInsetsCompat CONSUMED> in <androidx.core.view.WindowInsetsCompat: void <clinit>()> ==> <androidx.core.view.WindowInsetsCompat$Impl: void <clinit>()>
CLINIT edge: $r0 = <androidx.core.view.WindowInsetsCompat$Impl30: androidx.core.view.WindowInsetsCompat CONSUMED> in <androidx.core.view.WindowInsetsCompat: void <clinit>()> ==> <androidx.core.view.WindowInsetsCompat$Impl20: void <clinit>()>
CLINIT edge: $r0 = <androidx.core.view.WindowInsetsCompat$Impl30: androidx.core.view.WindowInsetsCompat CONSUMED> in <androidx.core.view.WindowInsetsCompat: void <clinit>()> ==> <androidx.core.view.WindowInsetsCompat$Impl30: void <clinit>()>
STATIC edge: $r4 = staticinvoke <androidx.core.view.ViewCompat: androidx.core.view.WindowInsetsCompat getRootWindowInsets(android.view.View)>($r0) in <androidx.core.view.WindowInsetsCompat: androidx.core.view.WindowInsetsCompat toWindowInsetsCompat(android.view.WindowInsets,android.view.View)> ==> <androidx.core.view.ViewCompat: androidx.core.view.WindowInsetsCompat getRootWindowInsets(android.view.View)>
STATIC edge: $z0 = staticinvoke <androidx.core.view.ViewCompat: boolean isAttachedToWindow(android.view.View)>($r0) in <androidx.core.view.WindowInsetsCompat: androidx.core.view.WindowInsetsCompat toWindowInsetsCompat(android.view.WindowInsets,android.view.View)> ==> <androidx.core.view.ViewCompat: boolean isAttachedToWindow(android.view.View)>
STATIC edge: $r3 = staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r2) in <androidx.core.view.WindowInsetsCompat: androidx.core.view.WindowInsetsCompat toWindowInsetsCompat(android.view.WindowInsets,android.view.View)> ==> <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>
CLINIT edge: $z0 = staticinvoke <androidx.core.view.ViewCompat: boolean isAttachedToWindow(android.view.View)>($r0) in <androidx.core.view.WindowInsetsCompat: androidx.core.view.WindowInsetsCompat toWindowInsetsCompat(android.view.WindowInsets,android.view.View)> ==> <androidx.core.view.ViewCompat: void <clinit>()>
STATIC edge: $r0 = staticinvoke <androidx.core.view.WindowInsetsCompat: androidx.core.view.WindowInsetsCompat toWindowInsetsCompat(android.view.WindowInsets)>($r1) in <androidx.core.view.WindowInsetsCompat$Impl30: void <clinit>()> ==> <androidx.core.view.WindowInsetsCompat: androidx.core.view.WindowInsetsCompat toWindowInsetsCompat(android.view.WindowInsets)>
CLINIT edge: <androidx.core.view.WindowInsetsCompat$Impl30: androidx.core.view.WindowInsetsCompat CONSUMED> = $r0 in <androidx.core.view.WindowInsetsCompat$Impl30: void <clinit>()> ==> <androidx.core.view.WindowInsetsCompat$Impl: void <clinit>()>
CLINIT edge: <androidx.core.view.WindowInsetsCompat$Impl30: androidx.core.view.WindowInsetsCompat CONSUMED> = $r0 in <androidx.core.view.WindowInsetsCompat$Impl30: void <clinit>()> ==> <androidx.core.view.WindowInsetsCompat$Impl20: void <clinit>()>
CLINIT edge: $r0 = staticinvoke <androidx.core.view.WindowInsetsCompat: androidx.core.view.WindowInsetsCompat toWindowInsetsCompat(android.view.WindowInsets)>($r1) in <androidx.core.view.WindowInsetsCompat$Impl30: void <clinit>()> ==> <androidx.core.view.WindowInsetsCompat: void <clinit>()>
STATIC edge: $r0 = staticinvoke <androidx.core.view.ViewCompat$Api23Impl: androidx.core.view.WindowInsetsCompat getRootWindowInsets(android.view.View)>($r1) in <androidx.core.view.ViewCompat: androidx.core.view.WindowInsetsCompat getRootWindowInsets(android.view.View)> ==> <androidx.core.view.ViewCompat$Api23Impl: androidx.core.view.WindowInsetsCompat getRootWindowInsets(android.view.View)>
STATIC edge: $z0 = staticinvoke <androidx.core.view.ViewCompat$Api19Impl: boolean isAttachedToWindow(android.view.View)>($r0) in <androidx.core.view.ViewCompat: boolean isAttachedToWindow(android.view.View)> ==> <androidx.core.view.ViewCompat$Api19Impl: boolean isAttachedToWindow(android.view.View)>
STATIC edge: $r0 = staticinvoke <androidx.core.view.WindowInsetsCompat: androidx.core.view.WindowInsetsCompat toWindowInsetsCompat(android.view.WindowInsets,android.view.View)>($r1, null) in <androidx.core.view.WindowInsetsCompat: androidx.core.view.WindowInsetsCompat toWindowInsetsCompat(android.view.WindowInsets)> ==> <androidx.core.view.WindowInsetsCompat: androidx.core.view.WindowInsetsCompat toWindowInsetsCompat(android.view.WindowInsets,android.view.View)>
CLINIT edge: $r2 = staticinvoke <androidx.core.view.WindowInsetsCompat: androidx.core.view.WindowInsetsCompat toWindowInsetsCompat(android.view.WindowInsets)>($r1) in <androidx.core.view.ViewCompat$Api23Impl: androidx.core.view.WindowInsetsCompat getRootWindowInsets(android.view.View)> ==> <androidx.core.view.WindowInsetsCompat: void <clinit>()>
STATIC edge: $r2 = staticinvoke <androidx.core.view.WindowInsetsCompat: androidx.core.view.WindowInsetsCompat toWindowInsetsCompat(android.view.WindowInsets)>($r1) in <androidx.core.view.ViewCompat$Api23Impl: androidx.core.view.WindowInsetsCompat getRootWindowInsets(android.view.View)> ==> <androidx.core.view.WindowInsetsCompat: androidx.core.view.WindowInsetsCompat toWindowInsetsCompat(android.view.WindowInsets)>
VIRTUAL edge: virtualinvoke $r2.<androidx.core.view.WindowInsetsCompat: void setRootWindowInsets(androidx.core.view.WindowInsetsCompat)>($r2) in <androidx.core.view.ViewCompat$Api23Impl: androidx.core.view.WindowInsetsCompat getRootWindowInsets(android.view.View)> ==> <androidx.core.view.WindowInsetsCompat: void setRootWindowInsets(androidx.core.view.WindowInsetsCompat)>
VIRTUAL edge: virtualinvoke $r2.<androidx.core.view.WindowInsetsCompat: void copyRootViewBounds(android.view.View)>($r0) in <androidx.core.view.ViewCompat$Api23Impl: androidx.core.view.WindowInsetsCompat getRootWindowInsets(android.view.View)> ==> <androidx.core.view.WindowInsetsCompat: void copyRootViewBounds(android.view.View)>
SPECIAL edge: specialinvoke $r0.<androidx.core.view.WindowInsetsCompat$Builder: void <init>()>() in <androidx.core.view.WindowInsetsCompat$Impl: void <clinit>()> ==> <androidx.core.view.WindowInsetsCompat$Builder: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<androidx.core.view.WindowInsetsCompat$Builder: androidx.core.view.WindowInsetsCompat build()>() in <androidx.core.view.WindowInsetsCompat$Impl: void <clinit>()> ==> <androidx.core.view.WindowInsetsCompat$Builder: androidx.core.view.WindowInsetsCompat build()>
CLINIT edge: $r3 = new androidx.core.view.WindowInsetsCompat$BuilderImpl20 in <androidx.core.view.WindowInsetsCompat$Builder: void <init>()> ==> <androidx.core.view.WindowInsetsCompat$BuilderImpl20: void <clinit>()>
SPECIAL edge: specialinvoke $r3.<androidx.core.view.WindowInsetsCompat$BuilderImpl20: void <init>()>() in <androidx.core.view.WindowInsetsCompat$Builder: void <init>()> ==> <androidx.core.view.WindowInsetsCompat$BuilderImpl20: void <init>()>
CLINIT edge: $r1 = staticinvoke <androidx.core.view.WindowInsetsCompat$BuilderImpl20: android.view.WindowInsets createWindowInsetsInstance()>() in <androidx.core.view.WindowInsetsCompat$BuilderImpl20: void <init>()> ==> <androidx.core.view.WindowInsetsCompat$BuilderImpl20: void <clinit>()>
STATIC edge: $r1 = staticinvoke <androidx.core.view.WindowInsetsCompat$BuilderImpl20: android.view.WindowInsets createWindowInsetsInstance()>() in <androidx.core.view.WindowInsetsCompat$BuilderImpl20: void <init>()> ==> <androidx.core.view.WindowInsetsCompat$BuilderImpl20: android.view.WindowInsets createWindowInsetsInstance()>
CLINIT edge: $z0 = <androidx.core.view.WindowInsetsCompat$BuilderImpl20: boolean sConsumedFieldFetched> in <androidx.core.view.WindowInsetsCompat$BuilderImpl20: android.view.WindowInsets createWindowInsetsInstance()> ==> <androidx.core.view.WindowInsetsCompat$BuilderImpl20: void <clinit>()>
CLINIT edge: $z0 = <androidx.core.view.WindowInsetsCompat$BuilderImpl20: boolean sConstructorFetched> in <androidx.core.view.WindowInsetsCompat$BuilderImpl20: android.view.WindowInsets createWindowInsetsInstance()> ==> <androidx.core.view.WindowInsetsCompat$BuilderImpl20: void <clinit>()>
CLINIT edge: <androidx.core.view.WindowInsetsCompat$BuilderImpl20: boolean sConsumedFieldFetched> = 1 in <androidx.core.view.WindowInsetsCompat$BuilderImpl20: android.view.WindowInsets createWindowInsetsInstance()> ==> <androidx.core.view.WindowInsetsCompat$BuilderImpl20: void <clinit>()>
VIRTUAL edge: $r8 = virtualinvoke $r0.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r7) in <androidx.core.view.WindowInsetsCompat$BuilderImpl20: android.view.WindowInsets createWindowInsetsInstance()> ==> <java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<androidx.core.view.WindowInsetsCompat$BuilderImpl: void <init>()>() in <androidx.core.view.WindowInsetsCompat$BuilderImpl20: void <init>()> ==> <androidx.core.view.WindowInsetsCompat$BuilderImpl: void <init>()>
SPECIAL edge: specialinvoke $r1.<androidx.core.view.WindowInsetsCompat: void <init>(androidx.core.view.WindowInsetsCompat)>(null) in <androidx.core.view.WindowInsetsCompat$BuilderImpl: void <init>()> ==> <androidx.core.view.WindowInsetsCompat: void <init>(androidx.core.view.WindowInsetsCompat)>
CLINIT edge: $r2 = new androidx.core.view.WindowInsetsCompat$Impl in <androidx.core.view.WindowInsetsCompat: void <init>(androidx.core.view.WindowInsetsCompat)> ==> <androidx.core.view.WindowInsetsCompat$Impl: void <clinit>()>
CLINIT edge: $r13 = new androidx.core.view.WindowInsetsCompat$Impl in <androidx.core.view.WindowInsetsCompat: void <init>(androidx.core.view.WindowInsetsCompat)> ==> <androidx.core.view.WindowInsetsCompat$Impl: void <clinit>()>
CLINIT edge: $r11 = new androidx.core.view.WindowInsetsCompat$Impl20 in <androidx.core.view.WindowInsetsCompat: void <init>(androidx.core.view.WindowInsetsCompat)> ==> <androidx.core.view.WindowInsetsCompat$Impl: void <clinit>()>
CLINIT edge: $r11 = new androidx.core.view.WindowInsetsCompat$Impl20 in <androidx.core.view.WindowInsetsCompat: void <init>(androidx.core.view.WindowInsetsCompat)> ==> <androidx.core.view.WindowInsetsCompat$Impl20: void <clinit>()>
CLINIT edge: $r9 = new androidx.core.view.WindowInsetsCompat$Impl21 in <androidx.core.view.WindowInsetsCompat: void <init>(androidx.core.view.WindowInsetsCompat)> ==> <androidx.core.view.WindowInsetsCompat$Impl20: void <clinit>()>
SPECIAL edge: specialinvoke $r13.<androidx.core.view.WindowInsetsCompat$Impl: void <init>(androidx.core.view.WindowInsetsCompat)>(r0) in <androidx.core.view.WindowInsetsCompat: void <init>(androidx.core.view.WindowInsetsCompat)> ==> <androidx.core.view.WindowInsetsCompat$Impl: void <init>(androidx.core.view.WindowInsetsCompat)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.core.view.WindowInsetsCompat$Impl: void <init>(androidx.core.view.WindowInsetsCompat)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r11.<androidx.core.view.WindowInsetsCompat$Impl20: void <init>(androidx.core.view.WindowInsetsCompat,androidx.core.view.WindowInsetsCompat$Impl20)>(r0, $r12) in <androidx.core.view.WindowInsetsCompat: void <init>(androidx.core.view.WindowInsetsCompat)> ==> <androidx.core.view.WindowInsetsCompat$Impl20: void <init>(androidx.core.view.WindowInsetsCompat,androidx.core.view.WindowInsetsCompat$Impl20)>
SPECIAL edge: specialinvoke r0.<androidx.core.view.WindowInsetsCompat$Impl20: void <init>(androidx.core.view.WindowInsetsCompat,android.view.WindowInsets)>($r1, $r2) in <androidx.core.view.WindowInsetsCompat$Impl20: void <init>(androidx.core.view.WindowInsetsCompat,androidx.core.view.WindowInsetsCompat$Impl20)> ==> <androidx.core.view.WindowInsetsCompat$Impl20: void <init>(androidx.core.view.WindowInsetsCompat,android.view.WindowInsets)>
SPECIAL edge: specialinvoke r0.<androidx.core.view.WindowInsetsCompat$Impl: void <init>(androidx.core.view.WindowInsetsCompat)>($r2) in <androidx.core.view.WindowInsetsCompat$Impl20: void <init>(androidx.core.view.WindowInsetsCompat,android.view.WindowInsets)> ==> <androidx.core.view.WindowInsetsCompat$Impl: void <init>(androidx.core.view.WindowInsetsCompat)>
SPECIAL edge: specialinvoke $r9.<androidx.core.view.WindowInsetsCompat$Impl21: void <init>(androidx.core.view.WindowInsetsCompat,androidx.core.view.WindowInsetsCompat$Impl21)>(r0, $r10) in <androidx.core.view.WindowInsetsCompat: void <init>(androidx.core.view.WindowInsetsCompat)> ==> <androidx.core.view.WindowInsetsCompat$Impl21: void <init>(androidx.core.view.WindowInsetsCompat,androidx.core.view.WindowInsetsCompat$Impl21)>
SPECIAL edge: specialinvoke r0.<androidx.core.view.WindowInsetsCompat$Impl20: void <init>(androidx.core.view.WindowInsetsCompat,androidx.core.view.WindowInsetsCompat$Impl20)>($r2, $r1) in <androidx.core.view.WindowInsetsCompat$Impl21: void <init>(androidx.core.view.WindowInsetsCompat,androidx.core.view.WindowInsetsCompat$Impl21)> ==> <androidx.core.view.WindowInsetsCompat$Impl20: void <init>(androidx.core.view.WindowInsetsCompat,androidx.core.view.WindowInsetsCompat$Impl20)>
SPECIAL edge: specialinvoke $r7.<androidx.core.view.WindowInsetsCompat$Impl28: void <init>(androidx.core.view.WindowInsetsCompat,androidx.core.view.WindowInsetsCompat$Impl28)>(r0, $r8) in <androidx.core.view.WindowInsetsCompat: void <init>(androidx.core.view.WindowInsetsCompat)> ==> <androidx.core.view.WindowInsetsCompat$Impl28: void <init>(androidx.core.view.WindowInsetsCompat,androidx.core.view.WindowInsetsCompat$Impl28)>
SPECIAL edge: specialinvoke r0.<androidx.core.view.WindowInsetsCompat$Impl21: void <init>(androidx.core.view.WindowInsetsCompat,androidx.core.view.WindowInsetsCompat$Impl21)>($r1, $r2) in <androidx.core.view.WindowInsetsCompat$Impl28: void <init>(androidx.core.view.WindowInsetsCompat,androidx.core.view.WindowInsetsCompat$Impl28)> ==> <androidx.core.view.WindowInsetsCompat$Impl21: void <init>(androidx.core.view.WindowInsetsCompat,androidx.core.view.WindowInsetsCompat$Impl21)>
SPECIAL edge: specialinvoke $r5.<androidx.core.view.WindowInsetsCompat$Impl29: void <init>(androidx.core.view.WindowInsetsCompat,androidx.core.view.WindowInsetsCompat$Impl29)>(r0, $r6) in <androidx.core.view.WindowInsetsCompat: void <init>(androidx.core.view.WindowInsetsCompat)> ==> <androidx.core.view.WindowInsetsCompat$Impl29: void <init>(androidx.core.view.WindowInsetsCompat,androidx.core.view.WindowInsetsCompat$Impl29)>
SPECIAL edge: specialinvoke r0.<androidx.core.view.WindowInsetsCompat$Impl28: void <init>(androidx.core.view.WindowInsetsCompat,androidx.core.view.WindowInsetsCompat$Impl28)>($r2, $r1) in <androidx.core.view.WindowInsetsCompat$Impl29: void <init>(androidx.core.view.WindowInsetsCompat,androidx.core.view.WindowInsetsCompat$Impl29)> ==> <androidx.core.view.WindowInsetsCompat$Impl28: void <init>(androidx.core.view.WindowInsetsCompat,androidx.core.view.WindowInsetsCompat$Impl28)>
SPECIAL edge: specialinvoke $r3.<androidx.core.view.WindowInsetsCompat$Impl30: void <init>(androidx.core.view.WindowInsetsCompat,androidx.core.view.WindowInsetsCompat$Impl30)>(r0, $r4) in <androidx.core.view.WindowInsetsCompat: void <init>(androidx.core.view.WindowInsetsCompat)> ==> <androidx.core.view.WindowInsetsCompat$Impl30: void <init>(androidx.core.view.WindowInsetsCompat,androidx.core.view.WindowInsetsCompat$Impl30)>
SPECIAL edge: specialinvoke r0.<androidx.core.view.WindowInsetsCompat$Impl29: void <init>(androidx.core.view.WindowInsetsCompat,androidx.core.view.WindowInsetsCompat$Impl29)>($r1, $r2) in <androidx.core.view.WindowInsetsCompat$Impl30: void <init>(androidx.core.view.WindowInsetsCompat,androidx.core.view.WindowInsetsCompat$Impl30)> ==> <androidx.core.view.WindowInsetsCompat$Impl29: void <init>(androidx.core.view.WindowInsetsCompat,androidx.core.view.WindowInsetsCompat$Impl29)>
VIRTUAL edge: virtualinvoke $r2.<androidx.core.view.WindowInsetsCompat$Impl: void copyWindowDataInto(androidx.core.view.WindowInsetsCompat)>(r0) in <androidx.core.view.WindowInsetsCompat: void <init>(androidx.core.view.WindowInsetsCompat)> ==> <androidx.core.view.WindowInsetsCompat$Impl: void copyWindowDataInto(androidx.core.view.WindowInsetsCompat)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.core.view.WindowInsetsCompat: void <init>(androidx.core.view.WindowInsetsCompat)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<androidx.core.view.WindowInsetsCompat$BuilderImpl: void <init>(androidx.core.view.WindowInsetsCompat)>($r1) in <androidx.core.view.WindowInsetsCompat$BuilderImpl: void <init>()> ==> <androidx.core.view.WindowInsetsCompat$BuilderImpl: void <init>(androidx.core.view.WindowInsetsCompat)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.core.view.WindowInsetsCompat$BuilderImpl: void <init>(androidx.core.view.WindowInsetsCompat)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r2.<androidx.core.view.WindowInsetsCompat$BuilderImpl29: void <init>()>() in <androidx.core.view.WindowInsetsCompat$Builder: void <init>()> ==> <androidx.core.view.WindowInsetsCompat$BuilderImpl29: void <init>()>
SPECIAL edge: specialinvoke r0.<androidx.core.view.WindowInsetsCompat$BuilderImpl: void <init>()>() in <androidx.core.view.WindowInsetsCompat$BuilderImpl29: void <init>()> ==> <androidx.core.view.WindowInsetsCompat$BuilderImpl: void <init>()>
SPECIAL edge: specialinvoke $r1.<androidx.core.view.WindowInsetsCompat$BuilderImpl30: void <init>()>() in <androidx.core.view.WindowInsetsCompat$Builder: void <init>()> ==> <androidx.core.view.WindowInsetsCompat$BuilderImpl30: void <init>()>
SPECIAL edge: specialinvoke r0.<androidx.core.view.WindowInsetsCompat$BuilderImpl29: void <init>()>() in <androidx.core.view.WindowInsetsCompat$BuilderImpl30: void <init>()> ==> <androidx.core.view.WindowInsetsCompat$BuilderImpl29: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.core.view.WindowInsetsCompat$Builder: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<androidx.core.view.WindowInsetsCompat: void <init>(android.view.WindowInsets)>($r2) in <androidx.core.view.WindowInsetsCompat: androidx.core.view.WindowInsetsCompat toWindowInsetsCompat(android.view.WindowInsets,android.view.View)> ==> <androidx.core.view.WindowInsetsCompat: void <init>(android.view.WindowInsets)>
VIRTUAL edge: virtualinvoke $r1.<androidx.core.view.WindowInsetsCompat: void setRootWindowInsets(androidx.core.view.WindowInsetsCompat)>($r4) in <androidx.core.view.WindowInsetsCompat: androidx.core.view.WindowInsetsCompat toWindowInsetsCompat(android.view.WindowInsets,android.view.View)> ==> <androidx.core.view.WindowInsetsCompat: void setRootWindowInsets(androidx.core.view.WindowInsetsCompat)>
VIRTUAL edge: virtualinvoke $r1.<androidx.core.view.WindowInsetsCompat: void copyRootViewBounds(android.view.View)>($r0) in <androidx.core.view.WindowInsetsCompat: androidx.core.view.WindowInsetsCompat toWindowInsetsCompat(android.view.WindowInsets,android.view.View)> ==> <androidx.core.view.WindowInsetsCompat: void copyRootViewBounds(android.view.View)>
CLINIT edge: $r5 = new androidx.core.view.WindowInsetsCompat$Impl21 in <androidx.core.view.WindowInsetsCompat: void <init>(android.view.WindowInsets)> ==> <androidx.core.view.WindowInsetsCompat$Impl20: void <clinit>()>
CLINIT edge: $r4 = new androidx.core.view.WindowInsetsCompat$Impl28 in <androidx.core.view.WindowInsetsCompat: void <init>(android.view.WindowInsets)> ==> <androidx.core.view.WindowInsetsCompat$Impl: void <clinit>()>
CLINIT edge: $r3 = new androidx.core.view.WindowInsetsCompat$Impl29 in <androidx.core.view.WindowInsetsCompat: void <init>(android.view.WindowInsets)> ==> <androidx.core.view.WindowInsetsCompat$Impl: void <clinit>()>
CLINIT edge: $r3 = new androidx.core.view.WindowInsetsCompat$Impl29 in <androidx.core.view.WindowInsetsCompat: void <init>(android.view.WindowInsets)> ==> <androidx.core.view.WindowInsetsCompat$Impl20: void <clinit>()>
SPECIAL edge: specialinvoke $r5.<androidx.core.view.WindowInsetsCompat$Impl21: void <init>(androidx.core.view.WindowInsetsCompat,android.view.WindowInsets)>(r0, $r1) in <androidx.core.view.WindowInsetsCompat: void <init>(android.view.WindowInsets)> ==> <androidx.core.view.WindowInsetsCompat$Impl21: void <init>(androidx.core.view.WindowInsetsCompat,android.view.WindowInsets)>
SPECIAL edge: specialinvoke r0.<androidx.core.view.WindowInsetsCompat$Impl20: void <init>(androidx.core.view.WindowInsetsCompat,android.view.WindowInsets)>($r2, $r1) in <androidx.core.view.WindowInsetsCompat$Impl21: void <init>(androidx.core.view.WindowInsetsCompat,android.view.WindowInsets)> ==> <androidx.core.view.WindowInsetsCompat$Impl20: void <init>(androidx.core.view.WindowInsetsCompat,android.view.WindowInsets)>
SPECIAL edge: specialinvoke $r4.<androidx.core.view.WindowInsetsCompat$Impl28: void <init>(androidx.core.view.WindowInsetsCompat,android.view.WindowInsets)>(r0, $r1) in <androidx.core.view.WindowInsetsCompat: void <init>(android.view.WindowInsets)> ==> <androidx.core.view.WindowInsetsCompat$Impl28: void <init>(androidx.core.view.WindowInsetsCompat,android.view.WindowInsets)>
SPECIAL edge: specialinvoke r0.<androidx.core.view.WindowInsetsCompat$Impl21: void <init>(androidx.core.view.WindowInsetsCompat,android.view.WindowInsets)>($r1, $r2) in <androidx.core.view.WindowInsetsCompat$Impl28: void <init>(androidx.core.view.WindowInsetsCompat,android.view.WindowInsets)> ==> <androidx.core.view.WindowInsetsCompat$Impl21: void <init>(androidx.core.view.WindowInsetsCompat,android.view.WindowInsets)>
SPECIAL edge: specialinvoke $r3.<androidx.core.view.WindowInsetsCompat$Impl29: void <init>(androidx.core.view.WindowInsetsCompat,android.view.WindowInsets)>(r0, $r1) in <androidx.core.view.WindowInsetsCompat: void <init>(android.view.WindowInsets)> ==> <androidx.core.view.WindowInsetsCompat$Impl29: void <init>(androidx.core.view.WindowInsetsCompat,android.view.WindowInsets)>
SPECIAL edge: specialinvoke r0.<androidx.core.view.WindowInsetsCompat$Impl28: void <init>(androidx.core.view.WindowInsetsCompat,android.view.WindowInsets)>($r2, $r1) in <androidx.core.view.WindowInsetsCompat$Impl29: void <init>(androidx.core.view.WindowInsetsCompat,android.view.WindowInsets)> ==> <androidx.core.view.WindowInsetsCompat$Impl28: void <init>(androidx.core.view.WindowInsetsCompat,android.view.WindowInsets)>
SPECIAL edge: specialinvoke $r2.<androidx.core.view.WindowInsetsCompat$Impl30: void <init>(androidx.core.view.WindowInsetsCompat,android.view.WindowInsets)>(r0, $r1) in <androidx.core.view.WindowInsetsCompat: void <init>(android.view.WindowInsets)> ==> <androidx.core.view.WindowInsetsCompat$Impl30: void <init>(androidx.core.view.WindowInsetsCompat,android.view.WindowInsets)>
SPECIAL edge: specialinvoke r0.<androidx.core.view.WindowInsetsCompat$Impl29: void <init>(androidx.core.view.WindowInsetsCompat,android.view.WindowInsets)>($r1, $r2) in <androidx.core.view.WindowInsetsCompat$Impl30: void <init>(androidx.core.view.WindowInsetsCompat,android.view.WindowInsets)> ==> <androidx.core.view.WindowInsetsCompat$Impl29: void <init>(androidx.core.view.WindowInsetsCompat,android.view.WindowInsets)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.core.view.WindowInsetsCompat: void <init>(android.view.WindowInsets)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r3.<androidx.core.view.WindowInsetsCompat: boolean equals(java.lang.Object)>($r5) in <androidx.core.view.ViewCompat$Api21Impl$1: android.view.WindowInsets onApplyWindowInsets(android.view.View,android.view.WindowInsets)> ==> <androidx.core.view.WindowInsetsCompat: boolean equals(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke $r3.<androidx.core.view.WindowInsetsCompat: android.view.WindowInsets toWindowInsets()>() in <androidx.core.view.ViewCompat$Api21Impl$1: android.view.WindowInsets onApplyWindowInsets(android.view.View,android.view.WindowInsets)> ==> <androidx.core.view.WindowInsetsCompat: android.view.WindowInsets toWindowInsets()>
VIRTUAL edge: $r2 = virtualinvoke $r3.<androidx.core.view.WindowInsetsCompat: android.view.WindowInsets toWindowInsets()>() in <androidx.core.view.ViewCompat$Api21Impl$1: android.view.WindowInsets onApplyWindowInsets(android.view.View,android.view.WindowInsets)> ==> <androidx.core.view.WindowInsetsCompat: android.view.WindowInsets toWindowInsets()>
STATIC edge: $z0 = staticinvoke <androidx.core.util.ObjectsCompat: boolean equals(java.lang.Object,java.lang.Object)>($r3, $r4) in <androidx.core.view.WindowInsetsCompat: boolean equals(java.lang.Object)> ==> <androidx.core.util.ObjectsCompat: boolean equals(java.lang.Object,java.lang.Object)>
STATIC edge: $z0 = staticinvoke <androidx.core.util.ObjectsCompat$Api19Impl: boolean equals(java.lang.Object,java.lang.Object)>($r1, $r0) in <androidx.core.util.ObjectsCompat: boolean equals(java.lang.Object,java.lang.Object)> ==> <androidx.core.util.ObjectsCompat$Api19Impl: boolean equals(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>() in <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)> ==> <java.lang.Object: java.lang.Class getClass()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: java.lang.Class getClass()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.core.view.ViewCompat$Api21Impl$1: void <init>(android.view.View,androidx.core.view.OnApplyWindowInsetsListener)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r11.<androidx.appcompat.app.AppCompatDelegateImpl$AppCompatWindowCallback: void <init>(androidx.appcompat.app.AppCompatDelegateImpl,android.view.Window$Callback)>($r10, $r0) in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <androidx.appcompat.app.AppCompatDelegateImpl$AppCompatWindowCallback: void <init>(androidx.appcompat.app.AppCompatDelegateImpl,android.view.Window$Callback)>
VIRTUAL edge: virtualinvoke $r11.<androidx.appcompat.app.AppCompatDelegateImpl$AppCompatWindowCallback: void onContentChanged()>() in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <androidx.appcompat.app.AppCompatDelegateImpl$AppCompatWindowCallback: void onContentChanged()>
VIRTUAL edge: virtualinvoke $r11.<androidx.appcompat.app.AppCompatDelegateImpl$AppCompatWindowCallback: void onPanelClosed(int,android.view.Menu)>(0, null) in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <androidx.appcompat.app.AppCompatDelegateImpl$AppCompatWindowCallback: void onPanelClosed(int,android.view.Menu)>
VIRTUAL edge: $z7 = virtualinvoke $r11.<androidx.appcompat.app.AppCompatDelegateImpl$AppCompatWindowCallback: boolean dispatchKeyShortcutEvent(android.view.KeyEvent)>(null) in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <androidx.appcompat.app.AppCompatDelegateImpl$AppCompatWindowCallback: boolean dispatchKeyShortcutEvent(android.view.KeyEvent)>
VIRTUAL edge: $z8 = virtualinvoke $r11.<androidx.appcompat.app.AppCompatDelegateImpl$AppCompatWindowCallback: boolean onCreatePanelMenu(int,android.view.Menu)>(0, null) in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <androidx.appcompat.app.AppCompatDelegateImpl$AppCompatWindowCallback: boolean onCreatePanelMenu(int,android.view.Menu)>
VIRTUAL edge: virtualinvoke $r11.<androidx.appcompat.app.AppCompatDelegateImpl$AppCompatWindowCallback: void onProvideKeyboardShortcuts(java.util.List,android.view.Menu,int)>(null, null, 0) in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <androidx.appcompat.app.AppCompatDelegateImpl$AppCompatWindowCallback: void onProvideKeyboardShortcuts(java.util.List,android.view.Menu,int)>
VIRTUAL edge: $z9 = virtualinvoke $r11.<androidx.appcompat.app.AppCompatDelegateImpl$AppCompatWindowCallback: boolean onMenuOpened(int,android.view.Menu)>(0, null) in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <androidx.appcompat.app.AppCompatDelegateImpl$AppCompatWindowCallback: boolean onMenuOpened(int,android.view.Menu)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<androidx.appcompat.app.AppCompatDelegateImpl$AppCompatWindowCallback: android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback,int)>(null, 0) in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <androidx.appcompat.app.AppCompatDelegateImpl$AppCompatWindowCallback: android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback,int)>
VIRTUAL edge: $z10 = virtualinvoke $r11.<androidx.appcompat.app.AppCompatDelegateImpl$AppCompatWindowCallback: boolean onPreparePanel(int,android.view.View,android.view.Menu)>(0, null, null) in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <androidx.appcompat.app.AppCompatDelegateImpl$AppCompatWindowCallback: boolean onPreparePanel(int,android.view.View,android.view.Menu)>
VIRTUAL edge: $r13 = virtualinvoke $r11.<androidx.appcompat.app.AppCompatDelegateImpl$AppCompatWindowCallback: android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback)>(null) in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <androidx.appcompat.app.AppCompatDelegateImpl$AppCompatWindowCallback: android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback)>
VIRTUAL edge: $z11 = virtualinvoke $r11.<androidx.appcompat.app.AppCompatDelegateImpl$AppCompatWindowCallback: boolean dispatchKeyEvent(android.view.KeyEvent)>(null) in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <androidx.appcompat.app.AppCompatDelegateImpl$AppCompatWindowCallback: boolean dispatchKeyEvent(android.view.KeyEvent)>
VIRTUAL edge: $r14 = virtualinvoke $r11.<androidx.appcompat.app.AppCompatDelegateImpl$AppCompatWindowCallback: android.view.View onCreatePanelView(int)>(0) in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <androidx.appcompat.app.AppCompatDelegateImpl$AppCompatWindowCallback: android.view.View onCreatePanelView(int)>
SPECIAL edge: $r2 = specialinvoke r0.<androidx.appcompat.view.WindowCallbackWrapper: android.view.View onCreatePanelView(int)>($i0) in <androidx.appcompat.app.AppCompatDelegateImpl$AppCompatWindowCallback: android.view.View onCreatePanelView(int)> ==> <androidx.appcompat.view.WindowCallbackWrapper: android.view.View onCreatePanelView(int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl$AppCompatWindowCallback: android.view.Window$Callback getWrapped()>() in <androidx.appcompat.app.AppCompatDelegateImpl$AppCompatWindowCallback: boolean dispatchKeyEvent(android.view.KeyEvent)> ==> <androidx.appcompat.view.WindowCallbackWrapper: android.view.Window$Callback getWrapped()>
SPECIAL edge: $z0 = specialinvoke r0.<androidx.appcompat.view.WindowCallbackWrapper: boolean dispatchKeyEvent(android.view.KeyEvent)>($r1) in <androidx.appcompat.app.AppCompatDelegateImpl$AppCompatWindowCallback: boolean dispatchKeyEvent(android.view.KeyEvent)> ==> <androidx.appcompat.view.WindowCallbackWrapper: boolean dispatchKeyEvent(android.view.KeyEvent)>
SPECIAL edge: $z0 = specialinvoke r0.<androidx.appcompat.view.WindowCallbackWrapper: boolean onPreparePanel(int,android.view.View,android.view.Menu)>($i0, $r1, $r2) in <androidx.appcompat.app.AppCompatDelegateImpl$AppCompatWindowCallback: boolean onPreparePanel(int,android.view.View,android.view.Menu)> ==> <androidx.appcompat.view.WindowCallbackWrapper: boolean onPreparePanel(int,android.view.View,android.view.Menu)>
VIRTUAL edge: $r3 = virtualinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl$AppCompatWindowCallback: android.view.ActionMode startAsSupportActionMode(android.view.ActionMode$Callback)>($r1) in <androidx.appcompat.app.AppCompatDelegateImpl$AppCompatWindowCallback: android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback,int)> ==> <androidx.appcompat.app.AppCompatDelegateImpl$AppCompatWindowCallback: android.view.ActionMode startAsSupportActionMode(android.view.ActionMode$Callback)>
SPECIAL edge: $r3 = specialinvoke r0.<androidx.appcompat.view.WindowCallbackWrapper: android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback,int)>($r1, $i0) in <androidx.appcompat.app.AppCompatDelegateImpl$AppCompatWindowCallback: android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback,int)> ==> <androidx.appcompat.view.WindowCallbackWrapper: android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback,int)>
STATIC edge: $r2 = staticinvoke <androidx.appcompat.view.WindowCallbackWrapper$Api23Impl: android.view.ActionMode onWindowStartingActionMode(android.view.Window$Callback,android.view.ActionMode$Callback,int)>($r1, $r3, $i0) in <androidx.appcompat.view.WindowCallbackWrapper: android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback,int)> ==> <androidx.appcompat.view.WindowCallbackWrapper$Api23Impl: android.view.ActionMode onWindowStartingActionMode(android.view.Window$Callback,android.view.ActionMode$Callback,int)>
SPECIAL edge: specialinvoke $r1.<androidx.appcompat.view.SupportActionModeWrapper$CallbackWrapper: void <init>(android.content.Context,android.view.ActionMode$Callback)>($r4, $r2) in <androidx.appcompat.app.AppCompatDelegateImpl$AppCompatWindowCallback: android.view.ActionMode startAsSupportActionMode(android.view.ActionMode$Callback)> ==> <androidx.appcompat.view.SupportActionModeWrapper$CallbackWrapper: void <init>(android.content.Context,android.view.ActionMode$Callback)>
VIRTUAL edge: $r6 = virtualinvoke $r1.<androidx.appcompat.view.SupportActionModeWrapper$CallbackWrapper: android.view.ActionMode getActionModeWrapper(androidx.appcompat.view.ActionMode)>($r5) in <androidx.appcompat.app.AppCompatDelegateImpl$AppCompatWindowCallback: android.view.ActionMode startAsSupportActionMode(android.view.ActionMode$Callback)> ==> <androidx.appcompat.view.SupportActionModeWrapper$CallbackWrapper: android.view.ActionMode getActionModeWrapper(androidx.appcompat.view.ActionMode)>
SPECIAL edge: specialinvoke $r5.<androidx.appcompat.view.SupportActionModeWrapper: void <init>(android.content.Context,androidx.appcompat.view.ActionMode)>($r6, $r2) in <androidx.appcompat.view.SupportActionModeWrapper$CallbackWrapper: android.view.ActionMode getActionModeWrapper(androidx.appcompat.view.ActionMode)> ==> <androidx.appcompat.view.SupportActionModeWrapper: void <init>(android.content.Context,androidx.appcompat.view.ActionMode)>
SPECIAL edge: specialinvoke $r4.<androidx.collection.SimpleArrayMap: void <init>()>() in <androidx.appcompat.view.SupportActionModeWrapper$CallbackWrapper: void <init>(android.content.Context,android.view.ActionMode$Callback)> ==> <androidx.collection.SimpleArrayMap: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.appcompat.view.SupportActionModeWrapper$CallbackWrapper: void <init>(android.content.Context,android.view.ActionMode$Callback)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<androidx.appcompat.view.WindowCallbackWrapper: boolean onMenuOpened(int,android.view.Menu)>($i0, $r1) in <androidx.appcompat.app.AppCompatDelegateImpl$AppCompatWindowCallback: boolean onMenuOpened(int,android.view.Menu)> ==> <androidx.appcompat.view.WindowCallbackWrapper: boolean onMenuOpened(int,android.view.Menu)>
SPECIAL edge: specialinvoke r0.<androidx.appcompat.view.WindowCallbackWrapper: void onProvideKeyboardShortcuts(java.util.List,android.view.Menu,int)>($r1, $r5, $i0) in <androidx.appcompat.app.AppCompatDelegateImpl$AppCompatWindowCallback: void onProvideKeyboardShortcuts(java.util.List,android.view.Menu,int)> ==> <androidx.appcompat.view.WindowCallbackWrapper: void onProvideKeyboardShortcuts(java.util.List,android.view.Menu,int)>
STATIC edge: staticinvoke <androidx.appcompat.view.WindowCallbackWrapper$Api24Impl: void onProvideKeyboardShortcuts(android.view.Window$Callback,java.util.List,android.view.Menu,int)>($r3, $r1, $r2, $i0) in <androidx.appcompat.view.WindowCallbackWrapper: void onProvideKeyboardShortcuts(java.util.List,android.view.Menu,int)> ==> <androidx.appcompat.view.WindowCallbackWrapper$Api24Impl: void onProvideKeyboardShortcuts(android.view.Window$Callback,java.util.List,android.view.Menu,int)>
SPECIAL edge: $z0 = specialinvoke r0.<androidx.appcompat.view.WindowCallbackWrapper: boolean onCreatePanelMenu(int,android.view.Menu)>($i0, $r1) in <androidx.appcompat.app.AppCompatDelegateImpl$AppCompatWindowCallback: boolean onCreatePanelMenu(int,android.view.Menu)> ==> <androidx.appcompat.view.WindowCallbackWrapper: boolean onCreatePanelMenu(int,android.view.Menu)>
SPECIAL edge: $z0 = specialinvoke r0.<androidx.appcompat.view.WindowCallbackWrapper: boolean dispatchKeyShortcutEvent(android.view.KeyEvent)>($r1) in <androidx.appcompat.app.AppCompatDelegateImpl$AppCompatWindowCallback: boolean dispatchKeyShortcutEvent(android.view.KeyEvent)> ==> <androidx.appcompat.view.WindowCallbackWrapper: boolean dispatchKeyShortcutEvent(android.view.KeyEvent)>
VIRTUAL edge: $r1 = virtualinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl$AppCompatWindowCallback: android.view.Window$Callback getWrapped()>() in <androidx.appcompat.app.AppCompatDelegateImpl$AppCompatWindowCallback: void onPanelClosed(int,android.view.Menu)> ==> <androidx.appcompat.view.WindowCallbackWrapper: android.view.Window$Callback getWrapped()>
SPECIAL edge: specialinvoke r0.<androidx.appcompat.view.WindowCallbackWrapper: void onPanelClosed(int,android.view.Menu)>($i0, $r2) in <androidx.appcompat.app.AppCompatDelegateImpl$AppCompatWindowCallback: void onPanelClosed(int,android.view.Menu)> ==> <androidx.appcompat.view.WindowCallbackWrapper: void onPanelClosed(int,android.view.Menu)>
VIRTUAL edge: $r1 = virtualinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl$AppCompatWindowCallback: android.view.Window$Callback getWrapped()>() in <androidx.appcompat.app.AppCompatDelegateImpl$AppCompatWindowCallback: void onContentChanged()> ==> <androidx.appcompat.view.WindowCallbackWrapper: android.view.Window$Callback getWrapped()>
SPECIAL edge: specialinvoke r0.<androidx.appcompat.view.WindowCallbackWrapper: void <init>(android.view.Window$Callback)>($r2) in <androidx.appcompat.app.AppCompatDelegateImpl$AppCompatWindowCallback: void <init>(androidx.appcompat.app.AppCompatDelegateImpl,android.view.Window$Callback)> ==> <androidx.appcompat.view.WindowCallbackWrapper: void <init>(android.view.Window$Callback)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.appcompat.view.WindowCallbackWrapper: void <init>(android.view.Window$Callback)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r10.<androidx.appcompat.app.AppCompatDelegateImpl: void <init>(android.app.Activity,androidx.appcompat.app.AppCompatCallback)>($r0, $r0) in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: void <init>(android.app.Activity,androidx.appcompat.app.AppCompatCallback)>
SPECIAL edge: specialinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: void <init>(android.content.Context,android.view.Window,androidx.appcompat.app.AppCompatCallback,java.lang.Object)>($r1, null, $r2, $r1) in <androidx.appcompat.app.AppCompatDelegateImpl: void <init>(android.app.Activity,androidx.appcompat.app.AppCompatCallback)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: void <init>(android.content.Context,android.view.Window,androidx.appcompat.app.AppCompatCallback,java.lang.Object)>
CLINIT edge: $r7 = <androidx.appcompat.app.AppCompatDelegateImpl: androidx.collection.SimpleArrayMap sLocalNightModes> in <androidx.appcompat.app.AppCompatDelegateImpl: void <init>(android.content.Context,android.view.Window,androidx.appcompat.app.AppCompatCallback,java.lang.Object)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: void <clinit>()>
STATIC edge: staticinvoke <androidx.appcompat.widget.AppCompatDrawableManager: void preload()>() in <androidx.appcompat.app.AppCompatDelegateImpl: void <init>(android.content.Context,android.view.Window,androidx.appcompat.app.AppCompatCallback,java.lang.Object)> ==> <androidx.appcompat.widget.AppCompatDrawableManager: void preload()>
CLINIT edge: staticinvoke <androidx.appcompat.widget.AppCompatDrawableManager: void preload()>() in <androidx.appcompat.app.AppCompatDelegateImpl: void <init>(android.content.Context,android.view.Window,androidx.appcompat.app.AppCompatCallback,java.lang.Object)> ==> <androidx.appcompat.widget.AppCompatDrawableManager: void <clinit>()>
CLINIT edge: $r7 = <androidx.appcompat.app.AppCompatDelegateImpl: androidx.collection.SimpleArrayMap sLocalNightModes> in <androidx.appcompat.app.AppCompatDelegateImpl: void <init>(android.content.Context,android.view.Window,androidx.appcompat.app.AppCompatCallback,java.lang.Object)> ==> <androidx.appcompat.app.AppCompatDelegate: void <clinit>()>
CLINIT edge: $r1 = <androidx.appcompat.widget.AppCompatDrawableManager: androidx.appcompat.widget.AppCompatDrawableManager INSTANCE> in <androidx.appcompat.widget.AppCompatDrawableManager: void preload()> ==> <androidx.appcompat.widget.AppCompatDrawableManager: void <clinit>()>
STATIC edge: $r0 = staticinvoke <androidx.appcompat.widget.ResourceManagerInternal: androidx.appcompat.widget.ResourceManagerInternal get()>() in <androidx.appcompat.widget.AppCompatDrawableManager: void preload()> ==> <androidx.appcompat.widget.ResourceManagerInternal: androidx.appcompat.widget.ResourceManagerInternal get()>
CLINIT edge: $r0 = staticinvoke <androidx.appcompat.widget.ResourceManagerInternal: androidx.appcompat.widget.ResourceManagerInternal get()>() in <androidx.appcompat.widget.AppCompatDrawableManager: void preload()> ==> <androidx.appcompat.widget.ResourceManagerInternal: void <clinit>()>
CLINIT edge: $r0 = <androidx.appcompat.widget.ResourceManagerInternal: androidx.appcompat.widget.ResourceManagerInternal INSTANCE> in <androidx.appcompat.widget.ResourceManagerInternal: androidx.appcompat.widget.ResourceManagerInternal get()> ==> <androidx.appcompat.widget.ResourceManagerInternal: void <clinit>()>
STATIC edge: staticinvoke <androidx.appcompat.widget.ResourceManagerInternal: void installDefaultInflateDelegates(androidx.appcompat.widget.ResourceManagerInternal)>($r0) in <androidx.appcompat.widget.ResourceManagerInternal: androidx.appcompat.widget.ResourceManagerInternal get()> ==> <androidx.appcompat.widget.ResourceManagerInternal: void installDefaultInflateDelegates(androidx.appcompat.widget.ResourceManagerInternal)>
SPECIAL edge: specialinvoke $r1.<androidx.appcompat.widget.ResourceManagerInternal$ColorFilterLruCache: void <init>(int)>(6) in <androidx.appcompat.widget.ResourceManagerInternal: void <clinit>()> ==> <androidx.appcompat.widget.ResourceManagerInternal$ColorFilterLruCache: void <init>(int)>
SPECIAL edge: specialinvoke r0.<androidx.collection.LruCache: void <init>(int)>($i0) in <androidx.appcompat.widget.ResourceManagerInternal$ColorFilterLruCache: void <init>(int)> ==> <androidx.collection.LruCache: void <init>(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.collection.LruCache: void <init>(int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<androidx.appcompat.widget.ResourceManagerInternal: void <init>()>() in <androidx.appcompat.widget.ResourceManagerInternal: androidx.appcompat.widget.ResourceManagerInternal get()> ==> <androidx.appcompat.widget.ResourceManagerInternal: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.appcompat.widget.ResourceManagerInternal: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r2.<androidx.appcompat.widget.AppCompatDrawableManager$1: void <init>()>() in <androidx.appcompat.widget.AppCompatDrawableManager: void preload()> ==> <androidx.appcompat.widget.AppCompatDrawableManager$1: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.appcompat.widget.AppCompatDrawableManager$1: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r0.<androidx.appcompat.widget.ResourceManagerInternal: void setHooks(androidx.appcompat.widget.ResourceManagerInternal$ResourceManagerHooks)>($r2) in <androidx.appcompat.widget.AppCompatDrawableManager: void preload()> ==> <androidx.appcompat.widget.ResourceManagerInternal: void setHooks(androidx.appcompat.widget.ResourceManagerInternal$ResourceManagerHooks)>
SPECIAL edge: specialinvoke $r1.<androidx.appcompat.widget.AppCompatDrawableManager: void <init>()>() in <androidx.appcompat.widget.AppCompatDrawableManager: void preload()> ==> <androidx.appcompat.widget.AppCompatDrawableManager: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.appcompat.widget.AppCompatDrawableManager: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r10 = virtualinvoke $r7.<androidx.collection.SimpleArrayMap: java.lang.Object get(java.lang.Object)>($r9) in <androidx.appcompat.app.AppCompatDelegateImpl: void <init>(android.content.Context,android.view.Window,androidx.appcompat.app.AppCompatCallback,java.lang.Object)> ==> <androidx.collection.SimpleArrayMap: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r7.<androidx.collection.SimpleArrayMap: java.lang.Object remove(java.lang.Object)>($r9) in <androidx.appcompat.app.AppCompatDelegateImpl: void <init>(android.content.Context,android.view.Window,androidx.appcompat.app.AppCompatCallback,java.lang.Object)> ==> <androidx.collection.SimpleArrayMap: java.lang.Object remove(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke r0.<androidx.collection.SimpleArrayMap: int indexOfKey(java.lang.Object)>($r1) in <androidx.collection.SimpleArrayMap: java.lang.Object remove(java.lang.Object)> ==> <androidx.collection.SimpleArrayMap: int indexOfKey(java.lang.Object)>
VIRTUAL edge: $r1 = virtualinvoke r0.<androidx.collection.SimpleArrayMap: java.lang.Object removeAt(int)>($i0) in <androidx.collection.SimpleArrayMap: java.lang.Object remove(java.lang.Object)> ==> <androidx.collection.SimpleArrayMap: java.lang.Object removeAt(int)>
CLINIT edge: $r1 = <androidx.collection.ContainerHelpers: int[] EMPTY_INTS> in <androidx.collection.SimpleArrayMap: java.lang.Object removeAt(int)> ==> <androidx.collection.ContainerHelpers: void <clinit>()>
STATIC edge: staticinvoke <androidx.collection.SimpleArrayMap: void freeArrays(int[],java.lang.Object[],int)>($r1, $r2, $i0) in <androidx.collection.SimpleArrayMap: java.lang.Object removeAt(int)> ==> <androidx.collection.SimpleArrayMap: void freeArrays(int[],java.lang.Object[],int)>
SPECIAL edge: specialinvoke r0.<androidx.collection.SimpleArrayMap: void allocArrays(int)>($i5) in <androidx.collection.SimpleArrayMap: java.lang.Object removeAt(int)> ==> <androidx.collection.SimpleArrayMap: void allocArrays(int)>
VIRTUAL edge: $i0 = virtualinvoke r0.<androidx.collection.SimpleArrayMap: int indexOfNull()>() in <androidx.collection.SimpleArrayMap: int indexOfKey(java.lang.Object)> ==> <androidx.collection.SimpleArrayMap: int indexOfNull()>
VIRTUAL edge: $i0 = virtualinvoke r0.<androidx.collection.SimpleArrayMap: int indexOf(java.lang.Object,int)>($r1, $i0) in <androidx.collection.SimpleArrayMap: int indexOfKey(java.lang.Object)> ==> <androidx.collection.SimpleArrayMap: int indexOf(java.lang.Object,int)>
STATIC edge: $i1 = staticinvoke <androidx.collection.SimpleArrayMap: int binarySearchHashes(int[],int,int)>($r1, $i2, 0) in <androidx.collection.SimpleArrayMap: int indexOfNull()> ==> <androidx.collection.SimpleArrayMap: int binarySearchHashes(int[],int,int)>
STATIC edge: $i3 = staticinvoke <androidx.collection.SimpleArrayMap: int binarySearchHashes(int[],int,int)>($r2, $i2, $i0) in <androidx.collection.SimpleArrayMap: int indexOf(java.lang.Object,int)> ==> <androidx.collection.SimpleArrayMap: int binarySearchHashes(int[],int,int)>
CLINIT edge: $i0 = staticinvoke <androidx.collection.ContainerHelpers: int binarySearch(int[],int,int)>($r1, $i0, $i1) in <androidx.collection.SimpleArrayMap: int binarySearchHashes(int[],int,int)> ==> <androidx.collection.ContainerHelpers: void <clinit>()>
STATIC edge: $i0 = staticinvoke <androidx.collection.ContainerHelpers: int binarySearch(int[],int,int)>($r1, $i0, $i1) in <androidx.collection.SimpleArrayMap: int binarySearchHashes(int[],int,int)> ==> <androidx.collection.ContainerHelpers: int binarySearch(int[],int,int)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <androidx.collection.SimpleArrayMap: int indexOfKey(java.lang.Object)> ==> <java.lang.Object: int hashCode()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <androidx.collection.SimpleArrayMap: int indexOf(java.lang.Object,int)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <androidx.collection.SimpleArrayMap: int indexOf(java.lang.Object,int)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <androidx.collection.SimpleArrayMap: int indexOf(java.lang.Object,int)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<androidx.collection.SimpleArrayMap: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>($r1, null) in <androidx.collection.SimpleArrayMap: java.lang.Object get(java.lang.Object)> ==> <androidx.collection.SimpleArrayMap: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke r0.<androidx.collection.SimpleArrayMap: int indexOfKey(java.lang.Object)>($r1) in <androidx.collection.SimpleArrayMap: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)> ==> <androidx.collection.SimpleArrayMap: int indexOfKey(java.lang.Object)>
SPECIAL edge: specialinvoke $r12.<androidx.appcompat.app.AppCompatDelegateImpl$2: void <init>(androidx.appcompat.app.AppCompatDelegateImpl)>(r0) in <androidx.appcompat.app.AppCompatDelegateImpl: void <init>(android.content.Context,android.view.Window,androidx.appcompat.app.AppCompatCallback,java.lang.Object)> ==> <androidx.appcompat.app.AppCompatDelegateImpl$2: void <init>(androidx.appcompat.app.AppCompatDelegateImpl)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.appcompat.app.AppCompatDelegateImpl$2: void <init>(androidx.appcompat.app.AppCompatDelegateImpl)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r8 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>() in <androidx.appcompat.app.AppCompatDelegateImpl: void <init>(android.content.Context,android.view.Window,androidx.appcompat.app.AppCompatCallback,java.lang.Object)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r8 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>() in <androidx.appcompat.app.AppCompatDelegateImpl: void <init>(android.content.Context,android.view.Window,androidx.appcompat.app.AppCompatCallback,java.lang.Object)> ==> <java.lang.Object: java.lang.Class getClass()>
SPECIAL edge: specialinvoke r0.<androidx.appcompat.app.AppCompatDelegate: void <init>()>() in <androidx.appcompat.app.AppCompatDelegateImpl: void <init>(android.content.Context,android.view.Window,androidx.appcompat.app.AppCompatCallback,java.lang.Object)> ==> <androidx.appcompat.app.AppCompatDelegate: void <init>()>
SPECIAL edge: $r5 = specialinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.app.AppCompatActivity tryUnwrapContext()>() in <androidx.appcompat.app.AppCompatDelegateImpl: void <init>(android.content.Context,android.view.Window,androidx.appcompat.app.AppCompatCallback,java.lang.Object)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.app.AppCompatActivity tryUnwrapContext()>
SPECIAL edge: specialinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: void attachToWindow(android.view.Window)>($r1) in <androidx.appcompat.app.AppCompatDelegateImpl: void <init>(android.content.Context,android.view.Window,androidx.appcompat.app.AppCompatCallback,java.lang.Object)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: void attachToWindow(android.view.Window)>
CLINIT edge: $r6 = <androidx.appcompat.app.AppCompatDelegateImpl: int[] sWindowBackgroundStyleable> in <androidx.appcompat.app.AppCompatDelegateImpl: void attachToWindow(android.view.Window)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: void <clinit>()>
STATIC edge: $r7 = staticinvoke <androidx.appcompat.widget.TintTypedArray: androidx.appcompat.widget.TintTypedArray obtainStyledAttributes(android.content.Context,android.util.AttributeSet,int[])>($r5, null, $r6) in <androidx.appcompat.app.AppCompatDelegateImpl: void attachToWindow(android.view.Window)> ==> <androidx.appcompat.widget.TintTypedArray: androidx.appcompat.widget.TintTypedArray obtainStyledAttributes(android.content.Context,android.util.AttributeSet,int[])>
CLINIT edge: $r6 = <androidx.appcompat.app.AppCompatDelegateImpl: int[] sWindowBackgroundStyleable> in <androidx.appcompat.app.AppCompatDelegateImpl: void attachToWindow(android.view.Window)> ==> <androidx.appcompat.app.AppCompatDelegate: void <clinit>()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<androidx.appcompat.widget.TintTypedArray: android.graphics.drawable.Drawable getDrawableIfKnown(int)>(0) in <androidx.appcompat.app.AppCompatDelegateImpl: void attachToWindow(android.view.Window)> ==> <androidx.appcompat.widget.TintTypedArray: android.graphics.drawable.Drawable getDrawableIfKnown(int)>
VIRTUAL edge: virtualinvoke $r7.<androidx.appcompat.widget.TintTypedArray: void recycle()>() in <androidx.appcompat.app.AppCompatDelegateImpl: void attachToWindow(android.view.Window)> ==> <androidx.appcompat.widget.TintTypedArray: void recycle()>
CLINIT edge: $r2 = staticinvoke <androidx.appcompat.widget.AppCompatDrawableManager: androidx.appcompat.widget.AppCompatDrawableManager get()>() in <androidx.appcompat.widget.TintTypedArray: android.graphics.drawable.Drawable getDrawableIfKnown(int)> ==> <androidx.appcompat.widget.AppCompatDrawableManager: void <clinit>()>
STATIC edge: $r2 = staticinvoke <androidx.appcompat.widget.AppCompatDrawableManager: androidx.appcompat.widget.AppCompatDrawableManager get()>() in <androidx.appcompat.widget.TintTypedArray: android.graphics.drawable.Drawable getDrawableIfKnown(int)> ==> <androidx.appcompat.widget.AppCompatDrawableManager: androidx.appcompat.widget.AppCompatDrawableManager get()>
CLINIT edge: $r0 = <androidx.appcompat.widget.AppCompatDrawableManager: androidx.appcompat.widget.AppCompatDrawableManager INSTANCE> in <androidx.appcompat.widget.AppCompatDrawableManager: androidx.appcompat.widget.AppCompatDrawableManager get()> ==> <androidx.appcompat.widget.AppCompatDrawableManager: void <clinit>()>
STATIC edge: staticinvoke <androidx.appcompat.widget.AppCompatDrawableManager: void preload()>() in <androidx.appcompat.widget.AppCompatDrawableManager: androidx.appcompat.widget.AppCompatDrawableManager get()> ==> <androidx.appcompat.widget.AppCompatDrawableManager: void preload()>
VIRTUAL edge: $r4 = virtualinvoke $r2.<androidx.appcompat.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable getDrawable(android.content.Context,int,boolean)>($r3, $i0, 1) in <androidx.appcompat.widget.TintTypedArray: android.graphics.drawable.Drawable getDrawableIfKnown(int)> ==> <androidx.appcompat.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable getDrawable(android.content.Context,int,boolean)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<androidx.appcompat.widget.ResourceManagerInternal: android.graphics.drawable.Drawable getDrawable(android.content.Context,int,boolean)>($r3, $i0, $z0) in <androidx.appcompat.widget.AppCompatDrawableManager: android.graphics.drawable.Drawable getDrawable(android.content.Context,int,boolean)> ==> <androidx.appcompat.widget.ResourceManagerInternal: android.graphics.drawable.Drawable getDrawable(android.content.Context,int,boolean)>
CLINIT edge: $r3 = staticinvoke <androidx.core.content.ContextCompat: android.graphics.drawable.Drawable getDrawable(android.content.Context,int)>($r1, $i0) in <androidx.appcompat.widget.ResourceManagerInternal: android.graphics.drawable.Drawable getDrawable(android.content.Context,int,boolean)> ==> <androidx.core.content.ContextCompat: void <clinit>()>
STATIC edge: staticinvoke <androidx.appcompat.widget.DrawableUtils: void fixDrawable(android.graphics.drawable.Drawable)>($r3) in <androidx.appcompat.widget.ResourceManagerInternal: android.graphics.drawable.Drawable getDrawable(android.content.Context,int,boolean)> ==> <androidx.appcompat.widget.DrawableUtils: void fixDrawable(android.graphics.drawable.Drawable)>
STATIC edge: $r3 = staticinvoke <androidx.core.content.ContextCompat: android.graphics.drawable.Drawable getDrawable(android.content.Context,int)>($r1, $i0) in <androidx.appcompat.widget.ResourceManagerInternal: android.graphics.drawable.Drawable getDrawable(android.content.Context,int,boolean)> ==> <androidx.core.content.ContextCompat: android.graphics.drawable.Drawable getDrawable(android.content.Context,int)>
CLINIT edge: staticinvoke <androidx.appcompat.widget.DrawableUtils: void fixDrawable(android.graphics.drawable.Drawable)>($r3) in <androidx.appcompat.widget.ResourceManagerInternal: android.graphics.drawable.Drawable getDrawable(android.content.Context,int,boolean)> ==> <androidx.appcompat.widget.DrawableUtils: void <clinit>()>
STATIC edge: staticinvoke <androidx.appcompat.widget.DrawableUtils: void forceDrawableStateChange(android.graphics.drawable.Drawable)>($r0) in <androidx.appcompat.widget.DrawableUtils: void fixDrawable(android.graphics.drawable.Drawable)> ==> <androidx.appcompat.widget.DrawableUtils: void forceDrawableStateChange(android.graphics.drawable.Drawable)>
CLINIT edge: staticinvoke <androidx.appcompat.widget.DrawableUtils: void forceDrawableStateChange(android.graphics.drawable.Drawable)>($r0) in <androidx.appcompat.widget.DrawableUtils: void fixDrawable(android.graphics.drawable.Drawable)> ==> <androidx.appcompat.widget.DrawableUtils: void <clinit>()>
STATIC edge: $r0 = staticinvoke <androidx.core.content.ContextCompat$Api21Impl: android.graphics.drawable.Drawable getDrawable(android.content.Context,int)>($r1, $i0) in <androidx.core.content.ContextCompat: android.graphics.drawable.Drawable getDrawable(android.content.Context,int)> ==> <androidx.core.content.ContextCompat$Api21Impl: android.graphics.drawable.Drawable getDrawable(android.content.Context,int)>
CLINIT edge: $r2 = <androidx.appcompat.widget.DrawableUtils: int[] EMPTY_STATE_SET> in <androidx.appcompat.widget.DrawableUtils: void forceDrawableStateChange(android.graphics.drawable.Drawable)> ==> <androidx.appcompat.widget.DrawableUtils: void <clinit>()>
CLINIT edge: $r2 = <androidx.appcompat.widget.DrawableUtils: int[] CHECKED_STATE_SET> in <androidx.appcompat.widget.DrawableUtils: void forceDrawableStateChange(android.graphics.drawable.Drawable)> ==> <androidx.appcompat.widget.DrawableUtils: void <clinit>()>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r2) in <androidx.appcompat.widget.DrawableUtils: void fixDrawable(android.graphics.drawable.Drawable)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <androidx.core.content.ContextCompat: void <clinit>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<androidx.appcompat.widget.ResourceManagerInternal: void checkVectorDrawableSetup(android.content.Context)>($r1) in <androidx.appcompat.widget.ResourceManagerInternal: android.graphics.drawable.Drawable getDrawable(android.content.Context,int,boolean)> ==> <androidx.appcompat.widget.ResourceManagerInternal: void checkVectorDrawableSetup(android.content.Context)>
SPECIAL edge: $r2 = specialinvoke r0.<androidx.appcompat.widget.ResourceManagerInternal: android.graphics.drawable.Drawable loadDrawableFromDelegates(android.content.Context,int)>($r1, $i0) in <androidx.appcompat.widget.ResourceManagerInternal: android.graphics.drawable.Drawable getDrawable(android.content.Context,int,boolean)> ==> <androidx.appcompat.widget.ResourceManagerInternal: android.graphics.drawable.Drawable loadDrawableFromDelegates(android.content.Context,int)>
SPECIAL edge: $r3 = specialinvoke r0.<androidx.appcompat.widget.ResourceManagerInternal: android.graphics.drawable.Drawable createDrawableIfNeeded(android.content.Context,int)>($r1, $i0) in <androidx.appcompat.widget.ResourceManagerInternal: android.graphics.drawable.Drawable getDrawable(android.content.Context,int,boolean)> ==> <androidx.appcompat.widget.ResourceManagerInternal: android.graphics.drawable.Drawable createDrawableIfNeeded(android.content.Context,int)>
SPECIAL edge: $r3 = specialinvoke r0.<androidx.appcompat.widget.ResourceManagerInternal: android.graphics.drawable.Drawable tintDrawable(android.content.Context,int,boolean,android.graphics.drawable.Drawable)>($r1, $i0, $z0, $r3) in <androidx.appcompat.widget.ResourceManagerInternal: android.graphics.drawable.Drawable getDrawable(android.content.Context,int,boolean)> ==> <androidx.appcompat.widget.ResourceManagerInternal: android.graphics.drawable.Drawable tintDrawable(android.content.Context,int,boolean,android.graphics.drawable.Drawable)>
CLINIT edge: $z0 = staticinvoke <androidx.appcompat.widget.ResourceManagerInternal: boolean isVectorDrawable(android.graphics.drawable.Drawable)>($r2) in <androidx.appcompat.widget.ResourceManagerInternal: void checkVectorDrawableSetup(android.content.Context)> ==> <androidx.appcompat.widget.ResourceManagerInternal: void <clinit>()>
STATIC edge: $z0 = staticinvoke <androidx.appcompat.widget.ResourceManagerInternal: boolean isVectorDrawable(android.graphics.drawable.Drawable)>($r2) in <androidx.appcompat.widget.ResourceManagerInternal: void checkVectorDrawableSetup(android.content.Context)> ==> <androidx.appcompat.widget.ResourceManagerInternal: boolean isVectorDrawable(android.graphics.drawable.Drawable)>
CLINIT edge: $r4 = new androidx.collection.SparseArrayCompat in <androidx.appcompat.widget.ResourceManagerInternal: android.graphics.drawable.Drawable loadDrawableFromDelegates(android.content.Context,int)> ==> <androidx.collection.SparseArrayCompat: void <clinit>()>
STATIC edge: $l1 = staticinvoke <androidx.appcompat.widget.ResourceManagerInternal: long createCacheKey(android.util.TypedValue)>($r7) in <androidx.appcompat.widget.ResourceManagerInternal: android.graphics.drawable.Drawable loadDrawableFromDelegates(android.content.Context,int)> ==> <androidx.appcompat.widget.ResourceManagerInternal: long createCacheKey(android.util.TypedValue)>
CLINIT edge: $l1 = staticinvoke <androidx.appcompat.widget.ResourceManagerInternal: long createCacheKey(android.util.TypedValue)>($r7) in <androidx.appcompat.widget.ResourceManagerInternal: android.graphics.drawable.Drawable loadDrawableFromDelegates(android.content.Context,int)> ==> <androidx.appcompat.widget.ResourceManagerInternal: void <clinit>()>
CLINIT edge: $l1 = staticinvoke <androidx.appcompat.widget.ResourceManagerInternal: long createCacheKey(android.util.TypedValue)>($r2) in <androidx.appcompat.widget.ResourceManagerInternal: android.graphics.drawable.Drawable createDrawableIfNeeded(android.content.Context,int)> ==> <androidx.appcompat.widget.ResourceManagerInternal: void <clinit>()>
STATIC edge: $l1 = staticinvoke <androidx.appcompat.widget.ResourceManagerInternal: long createCacheKey(android.util.TypedValue)>($r2) in <androidx.appcompat.widget.ResourceManagerInternal: android.graphics.drawable.Drawable createDrawableIfNeeded(android.content.Context,int)> ==> <androidx.appcompat.widget.ResourceManagerInternal: long createCacheKey(android.util.TypedValue)>
CLINIT edge: $z0 = staticinvoke <androidx.appcompat.widget.DrawableUtils: boolean canSafelyMutateDrawable(android.graphics.drawable.Drawable)>($r2) in <androidx.appcompat.widget.ResourceManagerInternal: android.graphics.drawable.Drawable tintDrawable(android.content.Context,int,boolean,android.graphics.drawable.Drawable)> ==> <androidx.appcompat.widget.DrawableUtils: void <clinit>()>
STATIC edge: staticinvoke <androidx.core.graphics.drawable.DrawableCompat: void setTintMode(android.graphics.drawable.Drawable,android.graphics.PorterDuff$Mode)>($r2, $r4) in <androidx.appcompat.widget.ResourceManagerInternal: android.graphics.drawable.Drawable tintDrawable(android.content.Context,int,boolean,android.graphics.drawable.Drawable)> ==> <androidx.core.graphics.drawable.DrawableCompat: void setTintMode(android.graphics.drawable.Drawable,android.graphics.PorterDuff$Mode)>
STATIC edge: staticinvoke <androidx.core.graphics.drawable.DrawableCompat: void setTintList(android.graphics.drawable.Drawable,android.content.res.ColorStateList)>($r2, $r3) in <androidx.appcompat.widget.ResourceManagerInternal: android.graphics.drawable.Drawable tintDrawable(android.content.Context,int,boolean,android.graphics.drawable.Drawable)> ==> <androidx.core.graphics.drawable.DrawableCompat: void setTintList(android.graphics.drawable.Drawable,android.content.res.ColorStateList)>
STATIC edge: $r2 = staticinvoke <androidx.core.graphics.drawable.DrawableCompat: android.graphics.drawable.Drawable wrap(android.graphics.drawable.Drawable)>($r2) in <androidx.appcompat.widget.ResourceManagerInternal: android.graphics.drawable.Drawable tintDrawable(android.content.Context,int,boolean,android.graphics.drawable.Drawable)> ==> <androidx.core.graphics.drawable.DrawableCompat: android.graphics.drawable.Drawable wrap(android.graphics.drawable.Drawable)>
STATIC edge: $z0 = staticinvoke <androidx.appcompat.widget.DrawableUtils: boolean canSafelyMutateDrawable(android.graphics.drawable.Drawable)>($r2) in <androidx.appcompat.widget.ResourceManagerInternal: android.graphics.drawable.Drawable tintDrawable(android.content.Context,int,boolean,android.graphics.drawable.Drawable)> ==> <androidx.appcompat.widget.DrawableUtils: boolean canSafelyMutateDrawable(android.graphics.drawable.Drawable)>
STATIC edge: staticinvoke <androidx.core.graphics.drawable.DrawableCompat$Api21Impl: void setTintMode(android.graphics.drawable.Drawable,android.graphics.PorterDuff$Mode)>($r0, $r1) in <androidx.core.graphics.drawable.DrawableCompat: void setTintMode(android.graphics.drawable.Drawable,android.graphics.PorterDuff$Mode)> ==> <androidx.core.graphics.drawable.DrawableCompat$Api21Impl: void setTintMode(android.graphics.drawable.Drawable,android.graphics.PorterDuff$Mode)>
STATIC edge: staticinvoke <androidx.core.graphics.drawable.DrawableCompat$Api21Impl: void setTintList(android.graphics.drawable.Drawable,android.content.res.ColorStateList)>($r0, $r1) in <androidx.core.graphics.drawable.DrawableCompat: void setTintList(android.graphics.drawable.Drawable,android.content.res.ColorStateList)> ==> <androidx.core.graphics.drawable.DrawableCompat$Api21Impl: void setTintList(android.graphics.drawable.Drawable,android.content.res.ColorStateList)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <androidx.collection.SparseArrayCompat: void <clinit>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r2) in <androidx.appcompat.widget.ResourceManagerInternal: boolean isVectorDrawable(android.graphics.drawable.Drawable)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $r3 = virtualinvoke r0.<androidx.appcompat.widget.ResourceManagerInternal: android.content.res.ColorStateList getTintList(android.content.Context,int)>($r1, $i0) in <androidx.appcompat.widget.ResourceManagerInternal: android.graphics.drawable.Drawable tintDrawable(android.content.Context,int,boolean,android.graphics.drawable.Drawable)> ==> <androidx.appcompat.widget.ResourceManagerInternal: android.content.res.ColorStateList getTintList(android.content.Context,int)>
VIRTUAL edge: $r4 = virtualinvoke r0.<androidx.appcompat.widget.ResourceManagerInternal: android.graphics.PorterDuff$Mode getTintMode(int)>($i0) in <androidx.appcompat.widget.ResourceManagerInternal: android.graphics.drawable.Drawable tintDrawable(android.content.Context,int,boolean,android.graphics.drawable.Drawable)> ==> <androidx.appcompat.widget.ResourceManagerInternal: android.graphics.PorterDuff$Mode getTintMode(int)>
VIRTUAL edge: $z1 = virtualinvoke r0.<androidx.appcompat.widget.ResourceManagerInternal: boolean tintDrawableUsingColorFilter(android.content.Context,int,android.graphics.drawable.Drawable)>($r1, $i0, $r2) in <androidx.appcompat.widget.ResourceManagerInternal: android.graphics.drawable.Drawable tintDrawable(android.content.Context,int,boolean,android.graphics.drawable.Drawable)> ==> <androidx.appcompat.widget.ResourceManagerInternal: boolean tintDrawableUsingColorFilter(android.content.Context,int,android.graphics.drawable.Drawable)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<androidx.appcompat.widget.ResourceManagerInternal$ResourceManagerHooks: boolean tintDrawableUsingColorFilter(android.content.Context,int,android.graphics.drawable.Drawable)>($r3, $i0, $r1) in <androidx.appcompat.widget.ResourceManagerInternal: boolean tintDrawableUsingColorFilter(android.content.Context,int,android.graphics.drawable.Drawable)> ==> <androidx.appcompat.widget.AppCompatDrawableManager$1: boolean tintDrawableUsingColorFilter(android.content.Context,int,android.graphics.drawable.Drawable)>
CLINIT edge: $r3 = staticinvoke <androidx.appcompat.widget.AppCompatDrawableManager: android.graphics.PorterDuff$Mode access$000()>() in <androidx.appcompat.widget.AppCompatDrawableManager$1: boolean tintDrawableUsingColorFilter(android.content.Context,int,android.graphics.drawable.Drawable)> ==> <androidx.appcompat.widget.AppCompatDrawableManager: void <clinit>()>
STATIC edge: $r6 = staticinvoke <androidx.appcompat.widget.AppCompatDrawableManager: android.graphics.PorterDuffColorFilter getPorterDuffColorFilter(int,android.graphics.PorterDuff$Mode)>($i1, $r3) in <androidx.appcompat.widget.AppCompatDrawableManager$1: boolean tintDrawableUsingColorFilter(android.content.Context,int,android.graphics.drawable.Drawable)> ==> <androidx.appcompat.widget.AppCompatDrawableManager: android.graphics.PorterDuffColorFilter getPorterDuffColorFilter(int,android.graphics.PorterDuff$Mode)>
STATIC edge: $i1 = staticinvoke <androidx.appcompat.widget.ThemeUtils: int getThemeAttrColor(android.content.Context,int)>($r1, $i1) in <androidx.appcompat.widget.AppCompatDrawableManager$1: boolean tintDrawableUsingColorFilter(android.content.Context,int,android.graphics.drawable.Drawable)> ==> <androidx.appcompat.widget.ThemeUtils: int getThemeAttrColor(android.content.Context,int)>
STATIC edge: $z0 = staticinvoke <androidx.appcompat.widget.DrawableUtils: boolean canSafelyMutateDrawable(android.graphics.drawable.Drawable)>($r2) in <androidx.appcompat.widget.AppCompatDrawableManager$1: boolean tintDrawableUsingColorFilter(android.content.Context,int,android.graphics.drawable.Drawable)> ==> <androidx.appcompat.widget.DrawableUtils: boolean canSafelyMutateDrawable(android.graphics.drawable.Drawable)>
STATIC edge: $r3 = staticinvoke <androidx.appcompat.widget.AppCompatDrawableManager: android.graphics.PorterDuff$Mode access$000()>() in <androidx.appcompat.widget.AppCompatDrawableManager$1: boolean tintDrawableUsingColorFilter(android.content.Context,int,android.graphics.drawable.Drawable)> ==> <androidx.appcompat.widget.AppCompatDrawableManager: android.graphics.PorterDuff$Mode access$000()>
CLINIT edge: $i1 = staticinvoke <androidx.appcompat.widget.ThemeUtils: int getThemeAttrColor(android.content.Context,int)>($r1, $i1) in <androidx.appcompat.widget.AppCompatDrawableManager$1: boolean tintDrawableUsingColorFilter(android.content.Context,int,android.graphics.drawable.Drawable)> ==> <androidx.appcompat.widget.ThemeUtils: void <clinit>()>
CLINIT edge: $z0 = staticinvoke <androidx.appcompat.widget.DrawableUtils: boolean canSafelyMutateDrawable(android.graphics.drawable.Drawable)>($r2) in <androidx.appcompat.widget.AppCompatDrawableManager$1: boolean tintDrawableUsingColorFilter(android.content.Context,int,android.graphics.drawable.Drawable)> ==> <androidx.appcompat.widget.DrawableUtils: void <clinit>()>
CLINIT edge: $r1 = staticinvoke <androidx.appcompat.widget.ResourceManagerInternal: android.graphics.PorterDuffColorFilter getPorterDuffColorFilter(int,android.graphics.PorterDuff$Mode)>($i0, $r0) in <androidx.appcompat.widget.AppCompatDrawableManager: android.graphics.PorterDuffColorFilter getPorterDuffColorFilter(int,android.graphics.PorterDuff$Mode)> ==> <androidx.appcompat.widget.ResourceManagerInternal: void <clinit>()>
STATIC edge: $r1 = staticinvoke <androidx.appcompat.widget.ResourceManagerInternal: android.graphics.PorterDuffColorFilter getPorterDuffColorFilter(int,android.graphics.PorterDuff$Mode)>($i0, $r0) in <androidx.appcompat.widget.AppCompatDrawableManager: android.graphics.PorterDuffColorFilter getPorterDuffColorFilter(int,android.graphics.PorterDuff$Mode)> ==> <androidx.appcompat.widget.ResourceManagerInternal: android.graphics.PorterDuffColorFilter getPorterDuffColorFilter(int,android.graphics.PorterDuff$Mode)>
CLINIT edge: $r0 = <androidx.appcompat.widget.ThemeUtils: int[] TEMP_ARRAY> in <androidx.appcompat.widget.ThemeUtils: int getThemeAttrColor(android.content.Context,int)> ==> <androidx.appcompat.widget.ThemeUtils: void <clinit>()>
STATIC edge: $r2 = staticinvoke <androidx.appcompat.widget.TintTypedArray: androidx.appcompat.widget.TintTypedArray obtainStyledAttributes(android.content.Context,android.util.AttributeSet,int[])>($r1, null, $r0) in <androidx.appcompat.widget.ThemeUtils: int getThemeAttrColor(android.content.Context,int)> ==> <androidx.appcompat.widget.TintTypedArray: androidx.appcompat.widget.TintTypedArray obtainStyledAttributes(android.content.Context,android.util.AttributeSet,int[])>
CLINIT edge: r0 = <androidx.appcompat.widget.AppCompatDrawableManager: android.graphics.PorterDuff$Mode DEFAULT_MODE> in <androidx.appcompat.widget.AppCompatDrawableManager: android.graphics.PorterDuff$Mode access$000()> ==> <androidx.appcompat.widget.AppCompatDrawableManager: void <clinit>()>
CLINIT edge: $r1 = <androidx.appcompat.widget.ResourceManagerInternal: androidx.appcompat.widget.ResourceManagerInternal$ColorFilterLruCache COLOR_FILTER_CACHE> in <androidx.appcompat.widget.ResourceManagerInternal: android.graphics.PorterDuffColorFilter getPorterDuffColorFilter(int,android.graphics.PorterDuff$Mode)> ==> <androidx.appcompat.widget.ResourceManagerInternal: void <clinit>()>
VIRTUAL edge: $i0 = virtualinvoke $r2.<androidx.appcompat.widget.TintTypedArray: int getColor(int,int)>(0, 0) in <androidx.appcompat.widget.ThemeUtils: int getThemeAttrColor(android.content.Context,int)> ==> <androidx.appcompat.widget.TintTypedArray: int getColor(int,int)>
VIRTUAL edge: virtualinvoke $r2.<androidx.appcompat.widget.TintTypedArray: void recycle()>() in <androidx.appcompat.widget.ThemeUtils: int getThemeAttrColor(android.content.Context,int)> ==> <androidx.appcompat.widget.TintTypedArray: void recycle()>
VIRTUAL edge: virtualinvoke $r2.<androidx.appcompat.widget.TintTypedArray: void recycle()>() in <androidx.appcompat.widget.ThemeUtils: int getThemeAttrColor(android.content.Context,int)> ==> <androidx.appcompat.widget.TintTypedArray: void recycle()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<androidx.appcompat.widget.ResourceManagerInternal$ColorFilterLruCache: android.graphics.PorterDuffColorFilter get(int,android.graphics.PorterDuff$Mode)>($i0, $r0) in <androidx.appcompat.widget.ResourceManagerInternal: android.graphics.PorterDuffColorFilter getPorterDuffColorFilter(int,android.graphics.PorterDuff$Mode)> ==> <androidx.appcompat.widget.ResourceManagerInternal$ColorFilterLruCache: android.graphics.PorterDuffColorFilter get(int,android.graphics.PorterDuff$Mode)>
VIRTUAL edge: virtualinvoke $r1.<androidx.appcompat.widget.ResourceManagerInternal$ColorFilterLruCache: android.graphics.PorterDuffColorFilter put(int,android.graphics.PorterDuff$Mode,android.graphics.PorterDuffColorFilter)>($i0, $r0, $r3) in <androidx.appcompat.widget.ResourceManagerInternal: android.graphics.PorterDuffColorFilter getPorterDuffColorFilter(int,android.graphics.PorterDuff$Mode)> ==> <androidx.appcompat.widget.ResourceManagerInternal$ColorFilterLruCache: android.graphics.PorterDuffColorFilter put(int,android.graphics.PorterDuff$Mode,android.graphics.PorterDuffColorFilter)>
CLINIT edge: $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <androidx.appcompat.widget.ResourceManagerInternal$ColorFilterLruCache: android.graphics.PorterDuffColorFilter get(int,android.graphics.PorterDuff$Mode)> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <androidx.appcompat.widget.ResourceManagerInternal$ColorFilterLruCache: android.graphics.PorterDuffColorFilter get(int,android.graphics.PorterDuff$Mode)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $i0 = staticinvoke <androidx.appcompat.widget.ResourceManagerInternal$ColorFilterLruCache: int generateCacheKey(int,android.graphics.PorterDuff$Mode)>($i0, $r1) in <androidx.appcompat.widget.ResourceManagerInternal$ColorFilterLruCache: android.graphics.PorterDuffColorFilter get(int,android.graphics.PorterDuff$Mode)> ==> <androidx.appcompat.widget.ResourceManagerInternal$ColorFilterLruCache: int generateCacheKey(int,android.graphics.PorterDuff$Mode)>
CLINIT edge: $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <androidx.appcompat.widget.ResourceManagerInternal$ColorFilterLruCache: android.graphics.PorterDuffColorFilter put(int,android.graphics.PorterDuff$Mode,android.graphics.PorterDuffColorFilter)> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <androidx.appcompat.widget.ResourceManagerInternal$ColorFilterLruCache: android.graphics.PorterDuffColorFilter put(int,android.graphics.PorterDuff$Mode,android.graphics.PorterDuffColorFilter)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $i0 = staticinvoke <androidx.appcompat.widget.ResourceManagerInternal$ColorFilterLruCache: int generateCacheKey(int,android.graphics.PorterDuff$Mode)>($i0, $r1) in <androidx.appcompat.widget.ResourceManagerInternal$ColorFilterLruCache: android.graphics.PorterDuffColorFilter put(int,android.graphics.PorterDuff$Mode,android.graphics.PorterDuffColorFilter)> ==> <androidx.appcompat.widget.ResourceManagerInternal$ColorFilterLruCache: int generateCacheKey(int,android.graphics.PorterDuff$Mode)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer valueOf(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke r0.<androidx.appcompat.widget.ResourceManagerInternal$ColorFilterLruCache: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r2) in <androidx.appcompat.widget.ResourceManagerInternal$ColorFilterLruCache: android.graphics.PorterDuffColorFilter put(int,android.graphics.PorterDuff$Mode,android.graphics.PorterDuffColorFilter)> ==> <androidx.collection.LruCache: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("key == null || value == null") in <androidx.collection.LruCache: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
SPECIAL edge: $i1 = specialinvoke r0.<androidx.collection.LruCache: int safeSizeOf(java.lang.Object,java.lang.Object)>($r1, $r2) in <androidx.collection.LruCache: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <androidx.collection.LruCache: int safeSizeOf(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<androidx.collection.LruCache: void entryRemoved(boolean,java.lang.Object,java.lang.Object,java.lang.Object)>(0, $r1, $r4, $r2) in <androidx.collection.LruCache: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <androidx.collection.LruCache: void entryRemoved(boolean,java.lang.Object,java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<androidx.collection.LruCache: void trimToSize(int)>($i0) in <androidx.collection.LruCache: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <androidx.collection.LruCache: void trimToSize(int)>
SPECIAL edge: $i2 = specialinvoke r0.<androidx.collection.LruCache: int safeSizeOf(java.lang.Object,java.lang.Object)>($r4, $r6) in <androidx.collection.LruCache: void trimToSize(int)> ==> <androidx.collection.LruCache: int safeSizeOf(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<androidx.collection.LruCache: void entryRemoved(boolean,java.lang.Object,java.lang.Object,java.lang.Object)>(1, $r4, $r6, null) in <androidx.collection.LruCache: void trimToSize(int)> ==> <androidx.collection.LruCache: void entryRemoved(boolean,java.lang.Object,java.lang.Object,java.lang.Object)>
VIRTUAL edge: $r9 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() in <androidx.collection.LruCache: void trimToSize(int)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $i0 = virtualinvoke r0.<androidx.collection.LruCache: int sizeOf(java.lang.Object,java.lang.Object)>($r2, $r1) in <androidx.collection.LruCache: int safeSizeOf(java.lang.Object,java.lang.Object)> ==> <androidx.collection.LruCache: int sizeOf(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $r3 = virtualinvoke r0.<androidx.appcompat.widget.ResourceManagerInternal$ColorFilterLruCache: java.lang.Object get(java.lang.Object)>($r2) in <androidx.appcompat.widget.ResourceManagerInternal$ColorFilterLruCache: android.graphics.PorterDuffColorFilter get(int,android.graphics.PorterDuff$Mode)> ==> <androidx.collection.LruCache: java.lang.Object get(java.lang.Object)>
SPECIAL edge: specialinvoke $r7.<java.lang.NullPointerException: void <init>(java.lang.String)>("key == null") in <androidx.collection.LruCache: java.lang.Object get(java.lang.Object)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke r0.<androidx.collection.LruCache: java.lang.Object create(java.lang.Object)>($r1) in <androidx.collection.LruCache: java.lang.Object get(java.lang.Object)> ==> <androidx.collection.LruCache: java.lang.Object create(java.lang.Object)>
SPECIAL edge: $i1 = specialinvoke r0.<androidx.collection.LruCache: int safeSizeOf(java.lang.Object,java.lang.Object)>($r1, $r3) in <androidx.collection.LruCache: java.lang.Object get(java.lang.Object)> ==> <androidx.collection.LruCache: int safeSizeOf(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<androidx.collection.LruCache: void entryRemoved(boolean,java.lang.Object,java.lang.Object,java.lang.Object)>(0, $r1, $r3, $r4) in <androidx.collection.LruCache: java.lang.Object get(java.lang.Object)> ==> <androidx.collection.LruCache: void entryRemoved(boolean,java.lang.Object,java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<androidx.collection.LruCache: void trimToSize(int)>($i0) in <androidx.collection.LruCache: java.lang.Object get(java.lang.Object)> ==> <androidx.collection.LruCache: void trimToSize(int)>
SPECIAL edge: $z0 = specialinvoke r0.<androidx.appcompat.widget.AppCompatDrawableManager$1: boolean arrayContains(int[],int)>($r5, $i0) in <androidx.appcompat.widget.AppCompatDrawableManager$1: boolean tintDrawableUsingColorFilter(android.content.Context,int,android.graphics.drawable.Drawable)> ==> <androidx.appcompat.widget.AppCompatDrawableManager$1: boolean arrayContains(int[],int)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<androidx.appcompat.widget.ResourceManagerInternal$ResourceManagerHooks: android.graphics.PorterDuff$Mode getTintModeForDrawableRes(int)>($i0) in <androidx.appcompat.widget.ResourceManagerInternal: android.graphics.PorterDuff$Mode getTintMode(int)> ==> <androidx.appcompat.widget.AppCompatDrawableManager$1: android.graphics.PorterDuff$Mode getTintModeForDrawableRes(int)>
SPECIAL edge: $r2 = specialinvoke r0.<androidx.appcompat.widget.ResourceManagerInternal: android.content.res.ColorStateList getTintListFromCache(android.content.Context,int)>($r1, $i0) in <androidx.appcompat.widget.ResourceManagerInternal: android.content.res.ColorStateList getTintList(android.content.Context,int)> ==> <androidx.appcompat.widget.ResourceManagerInternal: android.content.res.ColorStateList getTintListFromCache(android.content.Context,int)>
SPECIAL edge: specialinvoke r0.<androidx.appcompat.widget.ResourceManagerInternal: void addTintListToCache(android.content.Context,int,android.content.res.ColorStateList)>($r1, $i0, $r3) in <androidx.appcompat.widget.ResourceManagerInternal: android.content.res.ColorStateList getTintList(android.content.Context,int)> ==> <androidx.appcompat.widget.ResourceManagerInternal: void addTintListToCache(android.content.Context,int,android.content.res.ColorStateList)>
CLINIT edge: $r5 = new androidx.collection.SparseArrayCompat in <androidx.appcompat.widget.ResourceManagerInternal: void addTintListToCache(android.content.Context,int,android.content.res.ColorStateList)> ==> <androidx.collection.SparseArrayCompat: void <clinit>()>
SPECIAL edge: specialinvoke $r5.<androidx.collection.SparseArrayCompat: void <init>()>() in <androidx.appcompat.widget.ResourceManagerInternal: void addTintListToCache(android.content.Context,int,android.content.res.ColorStateList)> ==> <androidx.collection.SparseArrayCompat: void <init>()>
VIRTUAL edge: virtualinvoke $r5.<androidx.collection.SparseArrayCompat: void append(int,java.lang.Object)>($i0, $r2) in <androidx.appcompat.widget.ResourceManagerInternal: void addTintListToCache(android.content.Context,int,android.content.res.ColorStateList)> ==> <androidx.collection.SparseArrayCompat: void append(int,java.lang.Object)>
CLINIT edge: $i0 = staticinvoke <androidx.collection.ContainerHelpers: int idealIntArraySize(int)>($i0) in <androidx.collection.SparseArrayCompat: void append(int,java.lang.Object)> ==> <androidx.collection.ContainerHelpers: void <clinit>()>
STATIC edge: $i0 = staticinvoke <androidx.collection.ContainerHelpers: int idealIntArraySize(int)>($i0) in <androidx.collection.SparseArrayCompat: void append(int,java.lang.Object)> ==> <androidx.collection.ContainerHelpers: int idealIntArraySize(int)>
CLINIT edge: $i0 = staticinvoke <androidx.collection.ContainerHelpers: int idealByteArraySize(int)>($i0) in <androidx.collection.ContainerHelpers: int idealIntArraySize(int)> ==> <androidx.collection.ContainerHelpers: void <clinit>()>
STATIC edge: $i0 = staticinvoke <androidx.collection.ContainerHelpers: int idealByteArraySize(int)>($i0) in <androidx.collection.ContainerHelpers: int idealIntArraySize(int)> ==> <androidx.collection.ContainerHelpers: int idealByteArraySize(int)>
VIRTUAL edge: virtualinvoke r0.<androidx.collection.SparseArrayCompat: void put(int,java.lang.Object)>($i1, $r1) in <androidx.collection.SparseArrayCompat: void append(int,java.lang.Object)> ==> <androidx.collection.SparseArrayCompat: void put(int,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<androidx.collection.SparseArrayCompat: void gc()>() in <androidx.collection.SparseArrayCompat: void append(int,java.lang.Object)> ==> <androidx.collection.SparseArrayCompat: void gc()>
CLINIT edge: $i1 = staticinvoke <androidx.collection.ContainerHelpers: int binarySearch(int[],int,int)>($r2, $i1, $i0) in <androidx.collection.SparseArrayCompat: void put(int,java.lang.Object)> ==> <androidx.collection.ContainerHelpers: void <clinit>()>
STATIC edge: $i2 = staticinvoke <androidx.collection.ContainerHelpers: int idealIntArraySize(int)>($i2) in <androidx.collection.SparseArrayCompat: void put(int,java.lang.Object)> ==> <androidx.collection.ContainerHelpers: int idealIntArraySize(int)>
STATIC edge: $i1 = staticinvoke <androidx.collection.ContainerHelpers: int binarySearch(int[],int,int)>($r2, $i1, $i0) in <androidx.collection.SparseArrayCompat: void put(int,java.lang.Object)> ==> <androidx.collection.ContainerHelpers: int binarySearch(int[],int,int)>
CLINIT edge: $r5 = <androidx.collection.SparseArrayCompat: java.lang.Object DELETED> in <androidx.collection.SparseArrayCompat: void put(int,java.lang.Object)> ==> <androidx.collection.SparseArrayCompat: void <clinit>()>
CLINIT edge: $r4 = <androidx.collection.SparseArrayCompat: java.lang.Object DELETED> in <androidx.collection.SparseArrayCompat: void gc()> ==> <androidx.collection.SparseArrayCompat: void <clinit>()>
SPECIAL edge: specialinvoke r0.<androidx.collection.SparseArrayCompat: void gc()>() in <androidx.collection.SparseArrayCompat: void put(int,java.lang.Object)> ==> <androidx.collection.SparseArrayCompat: void gc()>
SPECIAL edge: specialinvoke r0.<androidx.collection.SparseArrayCompat: void <init>(int)>(10) in <androidx.collection.SparseArrayCompat: void <init>()> ==> <androidx.collection.SparseArrayCompat: void <init>(int)>
CLINIT edge: $r1 = <androidx.collection.ContainerHelpers: int[] EMPTY_INTS> in <androidx.collection.SparseArrayCompat: void <init>(int)> ==> <androidx.collection.ContainerHelpers: void <clinit>()>
STATIC edge: $i0 = staticinvoke <androidx.collection.ContainerHelpers: int idealIntArraySize(int)>($i0) in <androidx.collection.SparseArrayCompat: void <init>(int)> ==> <androidx.collection.ContainerHelpers: int idealIntArraySize(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.collection.SparseArrayCompat: void <init>(int)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $r3 = interfaceinvoke $r4.<androidx.appcompat.widget.ResourceManagerInternal$ResourceManagerHooks: android.content.res.ColorStateList getTintListForDrawableRes(android.content.Context,int)>($r1, $i0) in <androidx.appcompat.widget.ResourceManagerInternal: android.content.res.ColorStateList getTintList(android.content.Context,int)> ==> <androidx.appcompat.widget.AppCompatDrawableManager$1: android.content.res.ColorStateList getTintListForDrawableRes(android.content.Context,int)>
CLINIT edge: $r2 = staticinvoke <androidx.appcompat.widget.ThemeUtils: android.content.res.ColorStateList getThemeAttrColorStateList(android.content.Context,int)>($r1, $i0) in <androidx.appcompat.widget.AppCompatDrawableManager$1: android.content.res.ColorStateList getTintListForDrawableRes(android.content.Context,int)> ==> <androidx.appcompat.widget.ThemeUtils: void <clinit>()>
STATIC edge: $r2 = staticinvoke <androidx.appcompat.content.res.AppCompatResources: android.content.res.ColorStateList getColorStateList(android.content.Context,int)>($r1, $i0) in <androidx.appcompat.widget.AppCompatDrawableManager$1: android.content.res.ColorStateList getTintListForDrawableRes(android.content.Context,int)> ==> <androidx.appcompat.content.res.AppCompatResources: android.content.res.ColorStateList getColorStateList(android.content.Context,int)>
STATIC edge: $r2 = staticinvoke <androidx.appcompat.content.res.AppCompatResources: android.content.res.ColorStateList getColorStateList(android.content.Context,int)>($r1, $i0) in <androidx.appcompat.widget.AppCompatDrawableManager$1: android.content.res.ColorStateList getTintListForDrawableRes(android.content.Context,int)> ==> <androidx.appcompat.content.res.AppCompatResources: android.content.res.ColorStateList getColorStateList(android.content.Context,int)>
STATIC edge: $r2 = staticinvoke <androidx.appcompat.widget.ThemeUtils: android.content.res.ColorStateList getThemeAttrColorStateList(android.content.Context,int)>($r1, $i0) in <androidx.appcompat.widget.AppCompatDrawableManager$1: android.content.res.ColorStateList getTintListForDrawableRes(android.content.Context,int)> ==> <androidx.appcompat.widget.ThemeUtils: android.content.res.ColorStateList getThemeAttrColorStateList(android.content.Context,int)>
STATIC edge: $r2 = staticinvoke <androidx.appcompat.content.res.AppCompatResources: android.content.res.ColorStateList getColorStateList(android.content.Context,int)>($r1, $i0) in <androidx.appcompat.widget.AppCompatDrawableManager$1: android.content.res.ColorStateList getTintListForDrawableRes(android.content.Context,int)> ==> <androidx.appcompat.content.res.AppCompatResources: android.content.res.ColorStateList getColorStateList(android.content.Context,int)>
STATIC edge: $r2 = staticinvoke <androidx.appcompat.content.res.AppCompatResources: android.content.res.ColorStateList getColorStateList(android.content.Context,int)>($r1, $i0) in <androidx.appcompat.widget.AppCompatDrawableManager$1: android.content.res.ColorStateList getTintListForDrawableRes(android.content.Context,int)> ==> <androidx.appcompat.content.res.AppCompatResources: android.content.res.ColorStateList getColorStateList(android.content.Context,int)>
CLINIT edge: $r0 = staticinvoke <androidx.core.content.ContextCompat: android.content.res.ColorStateList getColorStateList(android.content.Context,int)>($r1, $i0) in <androidx.appcompat.content.res.AppCompatResources: android.content.res.ColorStateList getColorStateList(android.content.Context,int)> ==> <androidx.core.content.ContextCompat: void <clinit>()>
STATIC edge: $r0 = staticinvoke <androidx.core.content.ContextCompat: android.content.res.ColorStateList getColorStateList(android.content.Context,int)>($r1, $i0) in <androidx.appcompat.content.res.AppCompatResources: android.content.res.ColorStateList getColorStateList(android.content.Context,int)> ==> <androidx.core.content.ContextCompat: android.content.res.ColorStateList getColorStateList(android.content.Context,int)>
CLINIT edge: $r0 = <androidx.appcompat.widget.ThemeUtils: int[] TEMP_ARRAY> in <androidx.appcompat.widget.ThemeUtils: android.content.res.ColorStateList getThemeAttrColorStateList(android.content.Context,int)> ==> <androidx.appcompat.widget.ThemeUtils: void <clinit>()>
STATIC edge: $r2 = staticinvoke <androidx.appcompat.widget.TintTypedArray: androidx.appcompat.widget.TintTypedArray obtainStyledAttributes(android.content.Context,android.util.AttributeSet,int[])>($r1, null, $r0) in <androidx.appcompat.widget.ThemeUtils: android.content.res.ColorStateList getThemeAttrColorStateList(android.content.Context,int)> ==> <androidx.appcompat.widget.TintTypedArray: androidx.appcompat.widget.TintTypedArray obtainStyledAttributes(android.content.Context,android.util.AttributeSet,int[])>
CLINIT edge: $r3 = staticinvoke <androidx.core.content.res.ResourcesCompat: android.content.res.ColorStateList getColorStateList(android.content.res.Resources,int,android.content.res.Resources$Theme)>($r1, $i0, $r2) in <androidx.core.content.ContextCompat: android.content.res.ColorStateList getColorStateList(android.content.Context,int)> ==> <androidx.core.content.res.ResourcesCompat: void <clinit>()>
STATIC edge: $r3 = staticinvoke <androidx.core.content.res.ResourcesCompat: android.content.res.ColorStateList getColorStateList(android.content.res.Resources,int,android.content.res.Resources$Theme)>($r1, $i0, $r2) in <androidx.core.content.ContextCompat: android.content.res.ColorStateList getColorStateList(android.content.Context,int)> ==> <androidx.core.content.res.ResourcesCompat: android.content.res.ColorStateList getColorStateList(android.content.res.Resources,int,android.content.res.Resources$Theme)>
CLINIT edge: $r3 = staticinvoke <androidx.core.content.res.ResourcesCompat: android.content.res.ColorStateList getCachedColorStateList(androidx.core.content.res.ResourcesCompat$ColorStateListCacheKey,int)>($r1, $i0) in <androidx.core.content.res.ResourcesCompat: android.content.res.ColorStateList getColorStateList(android.content.res.Resources,int,android.content.res.Resources$Theme)> ==> <androidx.core.content.res.ResourcesCompat: void <clinit>()>
STATIC edge: $r3 = staticinvoke <androidx.core.content.res.ResourcesCompat$Api23Impl: android.content.res.ColorStateList getColorStateList(android.content.res.Resources,int,android.content.res.Resources$Theme)>($r2, $i0, $r0) in <androidx.core.content.res.ResourcesCompat: android.content.res.ColorStateList getColorStateList(android.content.res.Resources,int,android.content.res.Resources$Theme)> ==> <androidx.core.content.res.ResourcesCompat$Api23Impl: android.content.res.ColorStateList getColorStateList(android.content.res.Resources,int,android.content.res.Resources$Theme)>
STATIC edge: staticinvoke <androidx.core.content.res.ResourcesCompat: void addColorStateListToCache(androidx.core.content.res.ResourcesCompat$ColorStateListCacheKey,int,android.content.res.ColorStateList,android.content.res.Resources$Theme)>($r1, $i0, $r3, $r0) in <androidx.core.content.res.ResourcesCompat: android.content.res.ColorStateList getColorStateList(android.content.res.Resources,int,android.content.res.Resources$Theme)> ==> <androidx.core.content.res.ResourcesCompat: void addColorStateListToCache(androidx.core.content.res.ResourcesCompat$ColorStateListCacheKey,int,android.content.res.ColorStateList,android.content.res.Resources$Theme)>
STATIC edge: $r3 = staticinvoke <androidx.core.content.res.ResourcesCompat: android.content.res.ColorStateList inflateColorStateList(android.content.res.Resources,int,android.content.res.Resources$Theme)>($r2, $i0, $r0) in <androidx.core.content.res.ResourcesCompat: android.content.res.ColorStateList getColorStateList(android.content.res.Resources,int,android.content.res.Resources$Theme)> ==> <androidx.core.content.res.ResourcesCompat: android.content.res.ColorStateList inflateColorStateList(android.content.res.Resources,int,android.content.res.Resources$Theme)>
STATIC edge: $r3 = staticinvoke <androidx.core.content.res.ResourcesCompat: android.content.res.ColorStateList getCachedColorStateList(androidx.core.content.res.ResourcesCompat$ColorStateListCacheKey,int)>($r1, $i0) in <androidx.core.content.res.ResourcesCompat: android.content.res.ColorStateList getColorStateList(android.content.res.Resources,int,android.content.res.Resources$Theme)> ==> <androidx.core.content.res.ResourcesCompat: android.content.res.ColorStateList getCachedColorStateList(androidx.core.content.res.ResourcesCompat$ColorStateListCacheKey,int)>
CLINIT edge: $r2 = <androidx.core.content.res.ResourcesCompat: java.lang.Object sColorStateCacheLock> in <androidx.core.content.res.ResourcesCompat: void addColorStateListToCache(androidx.core.content.res.ResourcesCompat$ColorStateListCacheKey,int,android.content.res.ColorStateList,android.content.res.Resources$Theme)> ==> <androidx.core.content.res.ResourcesCompat: void <clinit>()>
CLINIT edge: $z0 = staticinvoke <androidx.core.content.res.ResourcesCompat: boolean isColorInt(android.content.res.Resources,int)>($r0, $i0) in <androidx.core.content.res.ResourcesCompat: android.content.res.ColorStateList inflateColorStateList(android.content.res.Resources,int,android.content.res.Resources$Theme)> ==> <androidx.core.content.res.ResourcesCompat: void <clinit>()>
STATIC edge: $r3 = staticinvoke <androidx.core.content.res.ColorStateListInflaterCompat: android.content.res.ColorStateList createFromXml(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.content.res.Resources$Theme)>($r0, $r2, $r1) in <androidx.core.content.res.ResourcesCompat: android.content.res.ColorStateList inflateColorStateList(android.content.res.Resources,int,android.content.res.Resources$Theme)> ==> <androidx.core.content.res.ColorStateListInflaterCompat: android.content.res.ColorStateList createFromXml(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.content.res.Resources$Theme)>
STATIC edge: $z0 = staticinvoke <androidx.core.content.res.ResourcesCompat: boolean isColorInt(android.content.res.Resources,int)>($r0, $i0) in <androidx.core.content.res.ResourcesCompat: android.content.res.ColorStateList inflateColorStateList(android.content.res.Resources,int,android.content.res.Resources$Theme)> ==> <androidx.core.content.res.ResourcesCompat: boolean isColorInt(android.content.res.Resources,int)>
CLINIT edge: $r3 = staticinvoke <androidx.core.content.res.ColorStateListInflaterCompat: android.content.res.ColorStateList createFromXml(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.content.res.Resources$Theme)>($r0, $r2, $r1) in <androidx.core.content.res.ResourcesCompat: android.content.res.ColorStateList inflateColorStateList(android.content.res.Resources,int,android.content.res.Resources$Theme)> ==> <androidx.core.content.res.ColorStateListInflaterCompat: void <clinit>()>
CLINIT edge: $r0 = <androidx.core.content.res.ResourcesCompat: java.lang.Object sColorStateCacheLock> in <androidx.core.content.res.ResourcesCompat: android.content.res.ColorStateList getCachedColorStateList(androidx.core.content.res.ResourcesCompat$ColorStateListCacheKey,int)> ==> <androidx.core.content.res.ResourcesCompat: void <clinit>()>
STATIC edge: $r4 = staticinvoke <androidx.core.content.res.ColorStateListInflaterCompat: android.content.res.ColorStateList createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>($r1, $r2, $r3, $r0) in <androidx.core.content.res.ColorStateListInflaterCompat: android.content.res.ColorStateList createFromXml(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.content.res.Resources$Theme)> ==> <androidx.core.content.res.ColorStateListInflaterCompat: android.content.res.ColorStateList createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>
CLINIT edge: $r4 = staticinvoke <androidx.core.content.res.ColorStateListInflaterCompat: android.content.res.ColorStateList createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>($r1, $r2, $r3, $r0) in <androidx.core.content.res.ColorStateListInflaterCompat: android.content.res.ColorStateList createFromXml(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.content.res.Resources$Theme)> ==> <androidx.core.content.res.ColorStateListInflaterCompat: void <clinit>()>
CLINIT edge: $r0 = staticinvoke <androidx.core.content.res.ResourcesCompat: android.util.TypedValue getTypedValue()>() in <androidx.core.content.res.ResourcesCompat: boolean isColorInt(android.content.res.Resources,int)> ==> <androidx.core.content.res.ResourcesCompat: void <clinit>()>
STATIC edge: $r0 = staticinvoke <androidx.core.content.res.ResourcesCompat: android.util.TypedValue getTypedValue()>() in <androidx.core.content.res.ResourcesCompat: boolean isColorInt(android.content.res.Resources,int)> ==> <androidx.core.content.res.ResourcesCompat: android.util.TypedValue getTypedValue()>
CLINIT edge: $r5 = staticinvoke <androidx.core.content.res.ColorStateListInflaterCompat: android.content.res.ColorStateList inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>($r1, $r2, $r3, $r0) in <androidx.core.content.res.ColorStateListInflaterCompat: android.content.res.ColorStateList createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)> ==> <androidx.core.content.res.ColorStateListInflaterCompat: void <clinit>()>
STATIC edge: $r5 = staticinvoke <androidx.core.content.res.ColorStateListInflaterCompat: android.content.res.ColorStateList inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>($r1, $r2, $r3, $r0) in <androidx.core.content.res.ColorStateListInflaterCompat: android.content.res.ColorStateList createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)> ==> <androidx.core.content.res.ColorStateListInflaterCompat: android.content.res.ColorStateList inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>
CLINIT edge: $r0 = <androidx.core.content.res.ResourcesCompat: java.lang.ThreadLocal sTempTypedValue> in <androidx.core.content.res.ResourcesCompat: android.util.TypedValue getTypedValue()> ==> <androidx.core.content.res.ResourcesCompat: void <clinit>()>
CLINIT edge: $r9 = <androidx.core.R$styleable: int[] ColorStateListItem> in <androidx.core.content.res.ColorStateListInflaterCompat: android.content.res.ColorStateList inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)> ==> <androidx.core.R$styleable: void <clinit>()>
STATIC edge: $r13 = staticinvoke <androidx.core.content.res.GrowingArrayUtils: java.lang.Object[] append(java.lang.Object[],int,java.lang.Object)>($r6, $i1, $r9) in <androidx.core.content.res.ColorStateListInflaterCompat: android.content.res.ColorStateList inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)> ==> <androidx.core.content.res.GrowingArrayUtils: java.lang.Object[] append(java.lang.Object[],int,java.lang.Object)>
STATIC edge: $r7 = staticinvoke <androidx.core.content.res.GrowingArrayUtils: int[] append(int[],int,int)>($r7, $i1, $i2) in <androidx.core.content.res.ColorStateListInflaterCompat: android.content.res.ColorStateList inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)> ==> <androidx.core.content.res.GrowingArrayUtils: int[] append(int[],int,int)>
STATIC edge: $i2 = staticinvoke <androidx.core.content.res.ColorStateListInflaterCompat: int modulateColorAlpha(int,float,float)>($i2, $f0, $f1) in <androidx.core.content.res.ColorStateListInflaterCompat: android.content.res.ColorStateList inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)> ==> <androidx.core.content.res.ColorStateListInflaterCompat: int modulateColorAlpha(int,float,float)>
STATIC edge: $z0 = staticinvoke <androidx.core.content.res.ColorStateListInflaterCompat: boolean isColorInt(android.content.res.Resources,int)>($r5, $i2) in <androidx.core.content.res.ColorStateListInflaterCompat: android.content.res.ColorStateList inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)> ==> <androidx.core.content.res.ColorStateListInflaterCompat: boolean isColorInt(android.content.res.Resources,int)>
STATIC edge: $r10 = staticinvoke <androidx.core.content.res.ColorStateListInflaterCompat: android.content.res.TypedArray obtainAttributes(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,int[])>($r5, $r3, $r2, $r9) in <androidx.core.content.res.ColorStateListInflaterCompat: android.content.res.ColorStateList inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)> ==> <androidx.core.content.res.ColorStateListInflaterCompat: android.content.res.TypedArray obtainAttributes(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,int[])>
CLINIT edge: $i2 = staticinvoke <androidx.core.content.res.ColorStateListInflaterCompat: int modulateColorAlpha(int,float,float)>($i2, $f0, $f1) in <androidx.core.content.res.ColorStateListInflaterCompat: android.content.res.ColorStateList inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)> ==> <androidx.core.content.res.ColorStateListInflaterCompat: void <clinit>()>
CLINIT edge: $i2 = <androidx.core.R$styleable: int ColorStateListItem_android_color> in <androidx.core.content.res.ColorStateListInflaterCompat: android.content.res.ColorStateList inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)> ==> <androidx.core.R$styleable: void <clinit>()>
STATIC edge: $i1 = staticinvoke <androidx.core.content.res.GrowingArrayUtils: int growSize(int)>($i0) in <androidx.core.content.res.GrowingArrayUtils: java.lang.Object[] append(java.lang.Object[],int,java.lang.Object)> ==> <androidx.core.content.res.GrowingArrayUtils: int growSize(int)>
STATIC edge: $i2 = staticinvoke <androidx.core.content.res.GrowingArrayUtils: int growSize(int)>($i0) in <androidx.core.content.res.GrowingArrayUtils: int[] append(int[],int,int)> ==> <androidx.core.content.res.GrowingArrayUtils: int growSize(int)>
STATIC edge: $i0 = staticinvoke <androidx.core.content.res.CamColor: int toColor(float,float,float)>($f0, $f2, $f1) in <androidx.core.content.res.ColorStateListInflaterCompat: int modulateColorAlpha(int,float,float)> ==> <androidx.core.content.res.CamColor: int toColor(float,float,float)>
STATIC edge: $r0 = staticinvoke <androidx.core.content.res.CamColor: androidx.core.content.res.CamColor fromColor(int)>($i0) in <androidx.core.content.res.ColorStateListInflaterCompat: int modulateColorAlpha(int,float,float)> ==> <androidx.core.content.res.CamColor: androidx.core.content.res.CamColor fromColor(int)>
STATIC edge: $i2 = staticinvoke <androidx.core.math.MathUtils: int clamp(int,int,int)>($i2, 0, 255) in <androidx.core.content.res.ColorStateListInflaterCompat: int modulateColorAlpha(int,float,float)> ==> <androidx.core.math.MathUtils: int clamp(int,int,int)>
CLINIT edge: $r0 = staticinvoke <androidx.core.content.res.ColorStateListInflaterCompat: android.util.TypedValue getTypedValue()>() in <androidx.core.content.res.ColorStateListInflaterCompat: boolean isColorInt(android.content.res.Resources,int)> ==> <androidx.core.content.res.ColorStateListInflaterCompat: void <clinit>()>
STATIC edge: $r0 = staticinvoke <androidx.core.content.res.ColorStateListInflaterCompat: android.util.TypedValue getTypedValue()>() in <androidx.core.content.res.ColorStateListInflaterCompat: boolean isColorInt(android.content.res.Resources,int)> ==> <androidx.core.content.res.ColorStateListInflaterCompat: android.util.TypedValue getTypedValue()>
CLINIT edge: $r0 = <androidx.core.content.res.ViewingConditions: androidx.core.content.res.ViewingConditions DEFAULT> in <androidx.core.content.res.CamColor: int toColor(float,float,float)> ==> <androidx.core.content.res.ViewingConditions: void <clinit>()>
STATIC edge: $i0 = staticinvoke <androidx.core.content.res.CamColor: int toColor(float,float,float,androidx.core.content.res.ViewingConditions)>($f2, $f0, $f1, $r0) in <androidx.core.content.res.CamColor: int toColor(float,float,float)> ==> <androidx.core.content.res.CamColor: int toColor(float,float,float,androidx.core.content.res.ViewingConditions)>
CLINIT edge: $r0 = <androidx.core.content.res.ViewingConditions: androidx.core.content.res.ViewingConditions DEFAULT> in <androidx.core.content.res.CamColor: androidx.core.content.res.CamColor fromColor(int)> ==> <androidx.core.content.res.ViewingConditions: void <clinit>()>
STATIC edge: $r1 = staticinvoke <androidx.core.content.res.CamColor: androidx.core.content.res.CamColor fromColorInViewingConditions(int,androidx.core.content.res.ViewingConditions)>($i0, $r0) in <androidx.core.content.res.CamColor: androidx.core.content.res.CamColor fromColor(int)> ==> <androidx.core.content.res.CamColor: androidx.core.content.res.CamColor fromColorInViewingConditions(int,androidx.core.content.res.ViewingConditions)>
CLINIT edge: $r0 = <androidx.core.content.res.ColorStateListInflaterCompat: java.lang.ThreadLocal sTempTypedValue> in <androidx.core.content.res.ColorStateListInflaterCompat: android.util.TypedValue getTypedValue()> ==> <androidx.core.content.res.ColorStateListInflaterCompat: void <clinit>()>
CLINIT edge: $r0 = <androidx.core.content.res.CamUtils: float[] WHITE_POINT_D65> in <androidx.core.content.res.ViewingConditions: void <clinit>()> ==> <androidx.core.content.res.CamUtils: void <clinit>()>
STATIC edge: $r1 = staticinvoke <androidx.core.content.res.ViewingConditions: androidx.core.content.res.ViewingConditions make(float[],float,float,float,boolean)>($r0, $f0, 50.0F, 2.0F, 0) in <androidx.core.content.res.ViewingConditions: void <clinit>()> ==> <androidx.core.content.res.ViewingConditions: androidx.core.content.res.ViewingConditions make(float[],float,float,float,boolean)>
STATIC edge: $f0 = staticinvoke <androidx.core.content.res.CamUtils: float yFromLStar(float)>(50.0F) in <androidx.core.content.res.ViewingConditions: void <clinit>()> ==> <androidx.core.content.res.CamUtils: float yFromLStar(float)>
CLINIT edge: $i1 = staticinvoke <androidx.core.content.res.CamUtils: int intFromLStar(float)>($f0) in <androidx.core.content.res.CamColor: int toColor(float,float,float,androidx.core.content.res.ViewingConditions)> ==> <androidx.core.content.res.CamUtils: void <clinit>()>
STATIC edge: $i1 = staticinvoke <androidx.core.content.res.CamUtils: int intFromLStar(float)>($f0) in <androidx.core.content.res.CamColor: int toColor(float,float,float,androidx.core.content.res.ViewingConditions)> ==> <androidx.core.content.res.CamUtils: int intFromLStar(float)>
STATIC edge: $r2 = staticinvoke <androidx.core.content.res.CamColor: androidx.core.content.res.CamColor findCamByJ(float,float,float)>($f1, $f4, $f0) in <androidx.core.content.res.CamColor: int toColor(float,float,float,androidx.core.content.res.ViewingConditions)> ==> <androidx.core.content.res.CamColor: androidx.core.content.res.CamColor findCamByJ(float,float,float)>
CLINIT edge: $r1 = staticinvoke <androidx.core.content.res.CamUtils: float[] xyzFromInt(int)>($i0) in <androidx.core.content.res.CamColor: androidx.core.content.res.CamColor fromColorInViewingConditions(int,androidx.core.content.res.ViewingConditions)> ==> <androidx.core.content.res.CamUtils: void <clinit>()>
STATIC edge: $r1 = staticinvoke <androidx.core.content.res.CamUtils: float[] xyzFromInt(int)>($i0) in <androidx.core.content.res.CamColor: androidx.core.content.res.CamColor fromColorInViewingConditions(int,androidx.core.content.res.ViewingConditions)> ==> <androidx.core.content.res.CamUtils: float[] xyzFromInt(int)>
CLINIT edge: $r1 = <androidx.core.content.res.CamUtils: float[][] XYZ_TO_CAM16RGB> in <androidx.core.content.res.ViewingConditions: androidx.core.content.res.ViewingConditions make(float[],float,float,float,boolean)> ==> <androidx.core.content.res.CamUtils: void <clinit>()>
STATIC edge: $f1 = staticinvoke <androidx.core.content.res.CamUtils: float yFromLStar(float)>($f1) in <androidx.core.content.res.ViewingConditions: androidx.core.content.res.ViewingConditions make(float[],float,float,float,boolean)> ==> <androidx.core.content.res.CamUtils: float yFromLStar(float)>
STATIC edge: $f3 = staticinvoke <androidx.core.content.res.CamUtils: float lerp(float,float,float)>(0.525F, 0.59F, $f3) in <androidx.core.content.res.ViewingConditions: androidx.core.content.res.ViewingConditions make(float[],float,float,float,boolean)> ==> <androidx.core.content.res.CamUtils: float lerp(float,float,float)>
STATIC edge: $f3 = staticinvoke <androidx.core.content.res.CamUtils: float lerp(float,float,float)>(0.59F, 0.69F, $f3) in <androidx.core.content.res.ViewingConditions: androidx.core.content.res.ViewingConditions make(float[],float,float,float,boolean)> ==> <androidx.core.content.res.CamUtils: float lerp(float,float,float)>
CLINIT edge: $r0 = <androidx.core.content.res.CamUtils: float[] WHITE_POINT_D65> in <androidx.core.content.res.CamUtils: int intFromLStar(float)> ==> <androidx.core.content.res.CamUtils: void <clinit>()>
STATIC edge: $i0 = staticinvoke <androidx.core.graphics.ColorUtils: int XYZToColor(double,double,double)>($d0, $d1, $d2) in <androidx.core.content.res.CamUtils: int intFromLStar(float)> ==> <androidx.core.graphics.ColorUtils: int XYZToColor(double,double,double)>
CLINIT edge: $i0 = staticinvoke <androidx.core.graphics.ColorUtils: int XYZToColor(double,double,double)>($d0, $d1, $d2) in <androidx.core.content.res.CamUtils: int intFromLStar(float)> ==> <androidx.core.graphics.ColorUtils: void <clinit>()>
CLINIT edge: $f8 = staticinvoke <androidx.core.content.res.CamUtils: float lStarFromInt(int)>($i1) in <androidx.core.content.res.CamColor: androidx.core.content.res.CamColor findCamByJ(float,float,float)> ==> <androidx.core.content.res.CamUtils: void <clinit>()>
STATIC edge: $r2 = staticinvoke <androidx.core.content.res.CamColor: androidx.core.content.res.CamColor fromJch(float,float,float)>($f10, $f11, $f0) in <androidx.core.content.res.CamColor: androidx.core.content.res.CamColor findCamByJ(float,float,float)> ==> <androidx.core.content.res.CamColor: androidx.core.content.res.CamColor fromJch(float,float,float)>
STATIC edge: $r1 = staticinvoke <androidx.core.content.res.CamColor: androidx.core.content.res.CamColor fromColor(int)>($i1) in <androidx.core.content.res.CamColor: androidx.core.content.res.CamColor findCamByJ(float,float,float)> ==> <androidx.core.content.res.CamColor: androidx.core.content.res.CamColor fromColor(int)>
STATIC edge: $f8 = staticinvoke <androidx.core.content.res.CamUtils: float lStarFromInt(int)>($i1) in <androidx.core.content.res.CamColor: androidx.core.content.res.CamColor findCamByJ(float,float,float)> ==> <androidx.core.content.res.CamUtils: float lStarFromInt(int)>
STATIC edge: $r1 = staticinvoke <androidx.core.content.res.CamColor: androidx.core.content.res.CamColor fromJch(float,float,float)>($f7, $f1, $f0) in <androidx.core.content.res.CamColor: androidx.core.content.res.CamColor findCamByJ(float,float,float)> ==> <androidx.core.content.res.CamColor: androidx.core.content.res.CamColor fromJch(float,float,float)>
CLINIT edge: $f0 = staticinvoke <androidx.core.content.res.CamUtils: float linearized(int)>($i1) in <androidx.core.content.res.CamUtils: float[] xyzFromInt(int)> ==> <androidx.core.content.res.CamUtils: void <clinit>()>
STATIC edge: $f2 = staticinvoke <androidx.core.content.res.CamUtils: float linearized(int)>($i0) in <androidx.core.content.res.CamUtils: float[] xyzFromInt(int)> ==> <androidx.core.content.res.CamUtils: float linearized(int)>
STATIC edge: $f0 = staticinvoke <androidx.core.content.res.CamUtils: float linearized(int)>($i1) in <androidx.core.content.res.CamUtils: float[] xyzFromInt(int)> ==> <androidx.core.content.res.CamUtils: float linearized(int)>
CLINIT edge: $i2 = staticinvoke <androidx.core.graphics.ColorUtils: int constrain(int,int,int)>($i2, 0, 255) in <androidx.core.graphics.ColorUtils: int XYZToColor(double,double,double)> ==> <androidx.core.graphics.ColorUtils: void <clinit>()>
STATIC edge: $i4 = staticinvoke <androidx.core.graphics.ColorUtils: int constrain(int,int,int)>($i4, 0, 255) in <androidx.core.graphics.ColorUtils: int XYZToColor(double,double,double)> ==> <androidx.core.graphics.ColorUtils: int constrain(int,int,int)>
STATIC edge: $i2 = staticinvoke <androidx.core.graphics.ColorUtils: int constrain(int,int,int)>($i2, 0, 255) in <androidx.core.graphics.ColorUtils: int XYZToColor(double,double,double)> ==> <androidx.core.graphics.ColorUtils: int constrain(int,int,int)>
CLINIT edge: $r0 = <androidx.core.content.res.ViewingConditions: androidx.core.content.res.ViewingConditions DEFAULT> in <androidx.core.content.res.CamColor: androidx.core.content.res.CamColor fromJch(float,float,float)> ==> <androidx.core.content.res.ViewingConditions: void <clinit>()>
STATIC edge: $r1 = staticinvoke <androidx.core.content.res.CamColor: androidx.core.content.res.CamColor fromJchInFrame(float,float,float,androidx.core.content.res.ViewingConditions)>($f2, $f0, $f1, $r0) in <androidx.core.content.res.CamColor: androidx.core.content.res.CamColor fromJch(float,float,float)> ==> <androidx.core.content.res.CamColor: androidx.core.content.res.CamColor fromJchInFrame(float,float,float,androidx.core.content.res.ViewingConditions)>
CLINIT edge: $f0 = staticinvoke <androidx.core.content.res.CamUtils: float yFromInt(int)>($i0) in <androidx.core.content.res.CamUtils: float lStarFromInt(int)> ==> <androidx.core.content.res.CamUtils: void <clinit>()>
STATIC edge: $f0 = staticinvoke <androidx.core.content.res.CamUtils: float lStarFromY(float)>($f0) in <androidx.core.content.res.CamUtils: float lStarFromInt(int)> ==> <androidx.core.content.res.CamUtils: float lStarFromY(float)>
STATIC edge: $f0 = staticinvoke <androidx.core.content.res.CamUtils: float yFromInt(int)>($i0) in <androidx.core.content.res.CamUtils: float lStarFromInt(int)> ==> <androidx.core.content.res.CamUtils: float yFromInt(int)>
CLINIT edge: $f0 = staticinvoke <androidx.core.content.res.CamUtils: float linearized(int)>($i1) in <androidx.core.content.res.CamUtils: float yFromInt(int)> ==> <androidx.core.content.res.CamUtils: void <clinit>()>
STATIC edge: $f2 = staticinvoke <androidx.core.content.res.CamUtils: float linearized(int)>($i0) in <androidx.core.content.res.CamUtils: float yFromInt(int)> ==> <androidx.core.content.res.CamUtils: float linearized(int)>
STATIC edge: $f1 = staticinvoke <androidx.core.content.res.CamUtils: float linearized(int)>($i1) in <androidx.core.content.res.CamUtils: float yFromInt(int)> ==> <androidx.core.content.res.CamUtils: float linearized(int)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<androidx.appcompat.widget.TintTypedArray: android.content.res.ColorStateList getColorStateList(int)>(0) in <androidx.appcompat.widget.ThemeUtils: android.content.res.ColorStateList getThemeAttrColorStateList(android.content.Context,int)> ==> <androidx.appcompat.widget.TintTypedArray: android.content.res.ColorStateList getColorStateList(int)>
VIRTUAL edge: virtualinvoke $r2.<androidx.appcompat.widget.TintTypedArray: void recycle()>() in <androidx.appcompat.widget.ThemeUtils: android.content.res.ColorStateList getThemeAttrColorStateList(android.content.Context,int)> ==> <androidx.appcompat.widget.TintTypedArray: void recycle()>
VIRTUAL edge: virtualinvoke $r2.<androidx.appcompat.widget.TintTypedArray: void recycle()>() in <androidx.appcompat.widget.ThemeUtils: android.content.res.ColorStateList getThemeAttrColorStateList(android.content.Context,int)> ==> <androidx.appcompat.widget.TintTypedArray: void recycle()>
STATIC edge: $r3 = staticinvoke <androidx.appcompat.content.res.AppCompatResources: android.content.res.ColorStateList getColorStateList(android.content.Context,int)>($r2, $i1) in <androidx.appcompat.widget.TintTypedArray: android.content.res.ColorStateList getColorStateList(int)> ==> <androidx.appcompat.content.res.AppCompatResources: android.content.res.ColorStateList getColorStateList(android.content.Context,int)>
SPECIAL edge: specialinvoke $r1.<androidx.core.content.res.CamColor: void <init>(float,float,float,float,float,float,float,float,float)>($f2, $f1, $f0, $f4, $f5, $f6, $f7, $f8, $f3) in <androidx.core.content.res.CamColor: androidx.core.content.res.CamColor fromJchInFrame(float,float,float,androidx.core.content.res.ViewingConditions)> ==> <androidx.core.content.res.CamColor: void <init>(float,float,float,float,float,float,float,float,float)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.core.content.res.CamColor: void <init>(float,float,float,float,float,float,float,float,float)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<androidx.core.content.res.CamColor: int viewedInSrgb()>() in <androidx.core.content.res.CamColor: androidx.core.content.res.CamColor findCamByJ(float,float,float)> ==> <androidx.core.content.res.CamColor: int viewedInSrgb()>
VIRTUAL edge: $f10 = virtualinvoke $r1.<androidx.core.content.res.CamColor: float getJ()>() in <androidx.core.content.res.CamColor: androidx.core.content.res.CamColor findCamByJ(float,float,float)> ==> <androidx.core.content.res.CamColor: float getJ()>
VIRTUAL edge: $f11 = virtualinvoke $r1.<androidx.core.content.res.CamColor: float getChroma()>() in <androidx.core.content.res.CamColor: androidx.core.content.res.CamColor findCamByJ(float,float,float)> ==> <androidx.core.content.res.CamColor: float getChroma()>
VIRTUAL edge: $f10 = virtualinvoke $r1.<androidx.core.content.res.CamColor: float distance(androidx.core.content.res.CamColor)>($r2) in <androidx.core.content.res.CamColor: androidx.core.content.res.CamColor findCamByJ(float,float,float)> ==> <androidx.core.content.res.CamColor: float distance(androidx.core.content.res.CamColor)>
CLINIT edge: $r1 = <androidx.core.content.res.ViewingConditions: androidx.core.content.res.ViewingConditions DEFAULT> in <androidx.core.content.res.CamColor: int viewedInSrgb()> ==> <androidx.core.content.res.ViewingConditions: void <clinit>()>
VIRTUAL edge: $f1 = virtualinvoke $r1.<androidx.core.content.res.CamColor: float getJStar()>() in <androidx.core.content.res.CamColor: float distance(androidx.core.content.res.CamColor)> ==> <androidx.core.content.res.CamColor: float getJStar()>
VIRTUAL edge: $f2 = virtualinvoke $r1.<androidx.core.content.res.CamColor: float getAStar()>() in <androidx.core.content.res.CamColor: float distance(androidx.core.content.res.CamColor)> ==> <androidx.core.content.res.CamColor: float getAStar()>
VIRTUAL edge: $f3 = virtualinvoke $r1.<androidx.core.content.res.CamColor: float getBStar()>() in <androidx.core.content.res.CamColor: float distance(androidx.core.content.res.CamColor)> ==> <androidx.core.content.res.CamColor: float getBStar()>
VIRTUAL edge: $i0 = virtualinvoke r0.<androidx.core.content.res.CamColor: int viewed(androidx.core.content.res.ViewingConditions)>($r1) in <androidx.core.content.res.CamColor: int viewedInSrgb()> ==> <androidx.core.content.res.CamColor: int viewed(androidx.core.content.res.ViewingConditions)>
CLINIT edge: $r3 = <androidx.core.content.res.CamUtils: float[][] CAM16RGB_TO_XYZ> in <androidx.core.content.res.CamColor: int viewed(androidx.core.content.res.ViewingConditions)> ==> <androidx.core.content.res.CamUtils: void <clinit>()>
STATIC edge: $i1 = staticinvoke <androidx.core.graphics.ColorUtils: int XYZToColor(double,double,double)>($d0, $d1, $d2) in <androidx.core.content.res.CamColor: int viewed(androidx.core.content.res.ViewingConditions)> ==> <androidx.core.graphics.ColorUtils: int XYZToColor(double,double,double)>
CLINIT edge: $i1 = staticinvoke <androidx.core.graphics.ColorUtils: int XYZToColor(double,double,double)>($d0, $d1, $d2) in <androidx.core.content.res.CamColor: int viewed(androidx.core.content.res.ViewingConditions)> ==> <androidx.core.graphics.ColorUtils: void <clinit>()>
VIRTUAL edge: $f0 = virtualinvoke r0.<androidx.core.content.res.CamColor: float getChroma()>() in <androidx.core.content.res.CamColor: int viewed(androidx.core.content.res.ViewingConditions)> ==> <androidx.core.content.res.CamColor: float getChroma()>
VIRTUAL edge: $f0 = virtualinvoke r0.<androidx.core.content.res.CamColor: float getJ()>() in <androidx.core.content.res.CamColor: int viewed(androidx.core.content.res.ViewingConditions)> ==> <androidx.core.content.res.CamColor: float getJ()>
VIRTUAL edge: $f0 = virtualinvoke r0.<androidx.core.content.res.CamColor: float getChroma()>() in <androidx.core.content.res.CamColor: int viewed(androidx.core.content.res.ViewingConditions)> ==> <androidx.core.content.res.CamColor: float getChroma()>
VIRTUAL edge: $f1 = virtualinvoke r0.<androidx.core.content.res.CamColor: float getHue()>() in <androidx.core.content.res.CamColor: int viewed(androidx.core.content.res.ViewingConditions)> ==> <androidx.core.content.res.CamColor: float getHue()>
SPECIAL edge: specialinvoke $r3.<androidx.core.content.res.ViewingConditions: void <init>(float,float,float,float,float,float,float[],float,float,float)>($f1, $f5, $f8, $f8, $f3, $f2, $r2, $f0, $f6, $f4) in <androidx.core.content.res.ViewingConditions: androidx.core.content.res.ViewingConditions make(float[],float,float,float,boolean)> ==> <androidx.core.content.res.ViewingConditions: void <init>(float,float,float,float,float,float,float[],float,float,float)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.core.content.res.ViewingConditions: void <init>(float,float,float,float,float,float,float[],float,float,float)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r4.<androidx.core.content.res.CamColor: void <init>(float,float,float,float,float,float,float,float,float)>($f0, $f1, $f6, $f7, $f2, $f8, $f3, $f4, $f5) in <androidx.core.content.res.CamColor: androidx.core.content.res.CamColor fromColorInViewingConditions(int,androidx.core.content.res.ViewingConditions)> ==> <androidx.core.content.res.CamColor: void <init>(float,float,float,float,float,float,float,float,float)>
VIRTUAL edge: $i1 = virtualinvoke $r2.<androidx.core.content.res.CamColor: int viewed(androidx.core.content.res.ViewingConditions)>($r0) in <androidx.core.content.res.CamColor: int toColor(float,float,float,androidx.core.content.res.ViewingConditions)> ==> <androidx.core.content.res.CamColor: int viewed(androidx.core.content.res.ViewingConditions)>
VIRTUAL edge: $f0 = virtualinvoke $r0.<androidx.core.content.res.CamColor: float getHue()>() in <androidx.core.content.res.ColorStateListInflaterCompat: int modulateColorAlpha(int,float,float)> ==> <androidx.core.content.res.CamColor: float getHue()>
VIRTUAL edge: $f2 = virtualinvoke $r0.<androidx.core.content.res.CamColor: float getChroma()>() in <androidx.core.content.res.ColorStateListInflaterCompat: int modulateColorAlpha(int,float,float)> ==> <androidx.core.content.res.CamColor: float getChroma()>
VIRTUAL edge: $f0 = virtualinvoke $r1.<androidx.core.content.res.ViewingConditions: float getN()>() in <androidx.core.content.res.CamColor: int viewed(androidx.core.content.res.ViewingConditions)> ==> <androidx.core.content.res.ViewingConditions: float getN()>
VIRTUAL edge: $f1 = virtualinvoke $r1.<androidx.core.content.res.ViewingConditions: float getAw()>() in <androidx.core.content.res.CamColor: int viewed(androidx.core.content.res.ViewingConditions)> ==> <androidx.core.content.res.ViewingConditions: float getAw()>
VIRTUAL edge: $f3 = virtualinvoke $r1.<androidx.core.content.res.ViewingConditions: float getC()>() in <androidx.core.content.res.CamColor: int viewed(androidx.core.content.res.ViewingConditions)> ==> <androidx.core.content.res.ViewingConditions: float getC()>
VIRTUAL edge: $f3 = virtualinvoke $r1.<androidx.core.content.res.ViewingConditions: float getZ()>() in <androidx.core.content.res.CamColor: int viewed(androidx.core.content.res.ViewingConditions)> ==> <androidx.core.content.res.ViewingConditions: float getZ()>
VIRTUAL edge: $f3 = virtualinvoke $r1.<androidx.core.content.res.ViewingConditions: float getNc()>() in <androidx.core.content.res.CamColor: int viewed(androidx.core.content.res.ViewingConditions)> ==> <androidx.core.content.res.ViewingConditions: float getNc()>
VIRTUAL edge: $f3 = virtualinvoke $r1.<androidx.core.content.res.ViewingConditions: float getNcb()>() in <androidx.core.content.res.CamColor: int viewed(androidx.core.content.res.ViewingConditions)> ==> <androidx.core.content.res.ViewingConditions: float getNcb()>
VIRTUAL edge: $f2 = virtualinvoke $r1.<androidx.core.content.res.ViewingConditions: float getNbb()>() in <androidx.core.content.res.CamColor: int viewed(androidx.core.content.res.ViewingConditions)> ==> <androidx.core.content.res.ViewingConditions: float getNbb()>
VIRTUAL edge: $f5 = virtualinvoke $r1.<androidx.core.content.res.ViewingConditions: float getFl()>() in <androidx.core.content.res.CamColor: int viewed(androidx.core.content.res.ViewingConditions)> ==> <androidx.core.content.res.ViewingConditions: float getFl()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<androidx.core.content.res.ViewingConditions: float[] getRgbD()>() in <androidx.core.content.res.CamColor: int viewed(androidx.core.content.res.ViewingConditions)> ==> <androidx.core.content.res.ViewingConditions: float[] getRgbD()>
VIRTUAL edge: $f4 = virtualinvoke $r0.<androidx.core.content.res.ViewingConditions: float getC()>() in <androidx.core.content.res.CamColor: androidx.core.content.res.CamColor fromJchInFrame(float,float,float,androidx.core.content.res.ViewingConditions)> ==> <androidx.core.content.res.ViewingConditions: float getC()>
VIRTUAL edge: $f5 = virtualinvoke $r0.<androidx.core.content.res.ViewingConditions: float getAw()>() in <androidx.core.content.res.CamColor: androidx.core.content.res.CamColor fromJchInFrame(float,float,float,androidx.core.content.res.ViewingConditions)> ==> <androidx.core.content.res.ViewingConditions: float getAw()>
VIRTUAL edge: $f5 = virtualinvoke $r0.<androidx.core.content.res.ViewingConditions: float getFlRoot()>() in <androidx.core.content.res.CamColor: androidx.core.content.res.CamColor fromJchInFrame(float,float,float,androidx.core.content.res.ViewingConditions)> ==> <androidx.core.content.res.ViewingConditions: float getFlRoot()>
VIRTUAL edge: $f7 = virtualinvoke $r0.<androidx.core.content.res.ViewingConditions: float getC()>() in <androidx.core.content.res.CamColor: androidx.core.content.res.CamColor fromJchInFrame(float,float,float,androidx.core.content.res.ViewingConditions)> ==> <androidx.core.content.res.ViewingConditions: float getC()>
VIRTUAL edge: $f7 = virtualinvoke $r0.<androidx.core.content.res.ViewingConditions: float getAw()>() in <androidx.core.content.res.CamColor: androidx.core.content.res.CamColor fromJchInFrame(float,float,float,androidx.core.content.res.ViewingConditions)> ==> <androidx.core.content.res.ViewingConditions: float getAw()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<androidx.core.content.res.ViewingConditions: float[] getRgbD()>() in <androidx.core.content.res.CamColor: androidx.core.content.res.CamColor fromColorInViewingConditions(int,androidx.core.content.res.ViewingConditions)> ==> <androidx.core.content.res.ViewingConditions: float[] getRgbD()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<androidx.core.content.res.ViewingConditions: float[] getRgbD()>() in <androidx.core.content.res.CamColor: androidx.core.content.res.CamColor fromColorInViewingConditions(int,androidx.core.content.res.ViewingConditions)> ==> <androidx.core.content.res.ViewingConditions: float[] getRgbD()>
VIRTUAL edge: $f1 = virtualinvoke $r0.<androidx.core.content.res.ViewingConditions: float getFl()>() in <androidx.core.content.res.CamColor: androidx.core.content.res.CamColor fromColorInViewingConditions(int,androidx.core.content.res.ViewingConditions)> ==> <androidx.core.content.res.ViewingConditions: float getFl()>
VIRTUAL edge: $f1 = virtualinvoke $r0.<androidx.core.content.res.ViewingConditions: float getFl()>() in <androidx.core.content.res.CamColor: androidx.core.content.res.CamColor fromColorInViewingConditions(int,androidx.core.content.res.ViewingConditions)> ==> <androidx.core.content.res.ViewingConditions: float getFl()>
VIRTUAL edge: $f7 = virtualinvoke $r0.<androidx.core.content.res.ViewingConditions: float getNbb()>() in <androidx.core.content.res.CamColor: androidx.core.content.res.CamColor fromColorInViewingConditions(int,androidx.core.content.res.ViewingConditions)> ==> <androidx.core.content.res.ViewingConditions: float getNbb()>
VIRTUAL edge: $f7 = virtualinvoke $r0.<androidx.core.content.res.ViewingConditions: float getAw()>() in <androidx.core.content.res.CamColor: androidx.core.content.res.CamColor fromColorInViewingConditions(int,androidx.core.content.res.ViewingConditions)> ==> <androidx.core.content.res.ViewingConditions: float getAw()>
VIRTUAL edge: $f6 = virtualinvoke $r0.<androidx.core.content.res.ViewingConditions: float getC()>() in <androidx.core.content.res.CamColor: androidx.core.content.res.CamColor fromColorInViewingConditions(int,androidx.core.content.res.ViewingConditions)> ==> <androidx.core.content.res.ViewingConditions: float getC()>
VIRTUAL edge: $f7 = virtualinvoke $r0.<androidx.core.content.res.ViewingConditions: float getZ()>() in <androidx.core.content.res.CamColor: androidx.core.content.res.CamColor fromColorInViewingConditions(int,androidx.core.content.res.ViewingConditions)> ==> <androidx.core.content.res.ViewingConditions: float getZ()>
VIRTUAL edge: $f5 = virtualinvoke $r0.<androidx.core.content.res.ViewingConditions: float getFlRoot()>() in <androidx.core.content.res.CamColor: androidx.core.content.res.CamColor fromColorInViewingConditions(int,androidx.core.content.res.ViewingConditions)> ==> <androidx.core.content.res.ViewingConditions: float getFlRoot()>
VIRTUAL edge: $f5 = virtualinvoke $r0.<androidx.core.content.res.ViewingConditions: float getNc()>() in <androidx.core.content.res.CamColor: androidx.core.content.res.CamColor fromColorInViewingConditions(int,androidx.core.content.res.ViewingConditions)> ==> <androidx.core.content.res.ViewingConditions: float getNc()>
VIRTUAL edge: $f5 = virtualinvoke $r0.<androidx.core.content.res.ViewingConditions: float getNcb()>() in <androidx.core.content.res.CamColor: androidx.core.content.res.CamColor fromColorInViewingConditions(int,androidx.core.content.res.ViewingConditions)> ==> <androidx.core.content.res.ViewingConditions: float getNcb()>
VIRTUAL edge: $f2 = virtualinvoke $r0.<androidx.core.content.res.ViewingConditions: float getN()>() in <androidx.core.content.res.CamColor: androidx.core.content.res.CamColor fromColorInViewingConditions(int,androidx.core.content.res.ViewingConditions)> ==> <androidx.core.content.res.ViewingConditions: float getN()>
VIRTUAL edge: $f2 = virtualinvoke $r0.<androidx.core.content.res.ViewingConditions: float getFlRoot()>() in <androidx.core.content.res.CamColor: androidx.core.content.res.CamColor fromColorInViewingConditions(int,androidx.core.content.res.ViewingConditions)> ==> <androidx.core.content.res.ViewingConditions: float getFlRoot()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>() in <androidx.core.content.res.GrowingArrayUtils: java.lang.Object[] append(java.lang.Object[],int,java.lang.Object)> ==> <java.lang.Object: java.lang.Class getClass()>
SPECIAL edge: specialinvoke $r6.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>($r4) in <androidx.core.content.res.ColorStateListInflaterCompat: android.content.res.ColorStateList createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)> ==> <org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r5.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>("No start tag found") in <androidx.core.content.res.ColorStateListInflaterCompat: android.content.res.ColorStateList createFromXml(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.content.res.Resources$Theme)> ==> <org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r7.<androidx.core.content.res.ResourcesCompat$ColorStateListCacheEntry: void <init>(android.content.res.ColorStateList,android.content.res.Configuration,android.content.res.Resources$Theme)>($r0, $r9, $r1) in <androidx.core.content.res.ResourcesCompat: void addColorStateListToCache(androidx.core.content.res.ResourcesCompat$ColorStateListCacheKey,int,android.content.res.ColorStateList,android.content.res.Resources$Theme)> ==> <androidx.core.content.res.ResourcesCompat$ColorStateListCacheEntry: void <init>(android.content.res.ColorStateList,android.content.res.Configuration,android.content.res.Resources$Theme)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.core.content.res.ResourcesCompat$ColorStateListCacheEntry: void <init>(android.content.res.ColorStateList,android.content.res.Configuration,android.content.res.Resources$Theme)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<androidx.core.content.res.ResourcesCompat$ColorStateListCacheKey: void <init>(android.content.res.Resources,android.content.res.Resources$Theme)>($r2, $r0) in <androidx.core.content.res.ResourcesCompat: android.content.res.ColorStateList getColorStateList(android.content.res.Resources,int,android.content.res.Resources$Theme)> ==> <androidx.core.content.res.ResourcesCompat$ColorStateListCacheKey: void <init>(android.content.res.Resources,android.content.res.Resources$Theme)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.core.content.res.ResourcesCompat$ColorStateListCacheKey: void <init>(android.content.res.Resources,android.content.res.Resources$Theme)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r2.<java.lang.Object: void <init>()>() in <androidx.core.content.res.ResourcesCompat: void <clinit>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: $r2 = specialinvoke r0.<androidx.appcompat.widget.AppCompatDrawableManager$1: android.content.res.ColorStateList createSwitchThumbColorStateList(android.content.Context)>($r1) in <androidx.appcompat.widget.AppCompatDrawableManager$1: android.content.res.ColorStateList getTintListForDrawableRes(android.content.Context,int)> ==> <androidx.appcompat.widget.AppCompatDrawableManager$1: android.content.res.ColorStateList createSwitchThumbColorStateList(android.content.Context)>
SPECIAL edge: $r2 = specialinvoke r0.<androidx.appcompat.widget.AppCompatDrawableManager$1: android.content.res.ColorStateList createDefaultButtonColorStateList(android.content.Context)>($r1) in <androidx.appcompat.widget.AppCompatDrawableManager$1: android.content.res.ColorStateList getTintListForDrawableRes(android.content.Context,int)> ==> <androidx.appcompat.widget.AppCompatDrawableManager$1: android.content.res.ColorStateList createDefaultButtonColorStateList(android.content.Context)>
SPECIAL edge: $r2 = specialinvoke r0.<androidx.appcompat.widget.AppCompatDrawableManager$1: android.content.res.ColorStateList createBorderlessButtonColorStateList(android.content.Context)>($r1) in <androidx.appcompat.widget.AppCompatDrawableManager$1: android.content.res.ColorStateList getTintListForDrawableRes(android.content.Context,int)> ==> <androidx.appcompat.widget.AppCompatDrawableManager$1: android.content.res.ColorStateList createBorderlessButtonColorStateList(android.content.Context)>
SPECIAL edge: $r2 = specialinvoke r0.<androidx.appcompat.widget.AppCompatDrawableManager$1: android.content.res.ColorStateList createColoredButtonColorStateList(android.content.Context)>($r1) in <androidx.appcompat.widget.AppCompatDrawableManager$1: android.content.res.ColorStateList getTintListForDrawableRes(android.content.Context,int)> ==> <androidx.appcompat.widget.AppCompatDrawableManager$1: android.content.res.ColorStateList createColoredButtonColorStateList(android.content.Context)>
SPECIAL edge: $z0 = specialinvoke r0.<androidx.appcompat.widget.AppCompatDrawableManager$1: boolean arrayContains(int[],int)>($r3, $i0) in <androidx.appcompat.widget.AppCompatDrawableManager$1: android.content.res.ColorStateList getTintListForDrawableRes(android.content.Context,int)> ==> <androidx.appcompat.widget.AppCompatDrawableManager$1: boolean arrayContains(int[],int)>
SPECIAL edge: $z0 = specialinvoke r0.<androidx.appcompat.widget.AppCompatDrawableManager$1: boolean arrayContains(int[],int)>($r3, $i0) in <androidx.appcompat.widget.AppCompatDrawableManager$1: android.content.res.ColorStateList getTintListForDrawableRes(android.content.Context,int)> ==> <androidx.appcompat.widget.AppCompatDrawableManager$1: boolean arrayContains(int[],int)>
SPECIAL edge: $z0 = specialinvoke r0.<androidx.appcompat.widget.AppCompatDrawableManager$1: boolean arrayContains(int[],int)>($r3, $i0) in <androidx.appcompat.widget.AppCompatDrawableManager$1: android.content.res.ColorStateList getTintListForDrawableRes(android.content.Context,int)> ==> <androidx.appcompat.widget.AppCompatDrawableManager$1: boolean arrayContains(int[],int)>
CLINIT edge: $r4 = staticinvoke <androidx.appcompat.widget.ThemeUtils: android.content.res.ColorStateList getThemeAttrColorStateList(android.content.Context,int)>($r2, $i0) in <androidx.appcompat.widget.AppCompatDrawableManager$1: android.content.res.ColorStateList createSwitchThumbColorStateList(android.content.Context)> ==> <androidx.appcompat.widget.ThemeUtils: void <clinit>()>
STATIC edge: $i0 = staticinvoke <androidx.appcompat.widget.ThemeUtils: int getThemeAttrColor(android.content.Context,int)>($r2, $i0) in <androidx.appcompat.widget.AppCompatDrawableManager$1: android.content.res.ColorStateList createSwitchThumbColorStateList(android.content.Context)> ==> <androidx.appcompat.widget.ThemeUtils: int getThemeAttrColor(android.content.Context,int)>
STATIC edge: $i0 = staticinvoke <androidx.appcompat.widget.ThemeUtils: int getDisabledThemeAttrColor(android.content.Context,int)>($r2, $i0) in <androidx.appcompat.widget.AppCompatDrawableManager$1: android.content.res.ColorStateList createSwitchThumbColorStateList(android.content.Context)> ==> <androidx.appcompat.widget.ThemeUtils: int getDisabledThemeAttrColor(android.content.Context,int)>
STATIC edge: $i0 = staticinvoke <androidx.appcompat.widget.ThemeUtils: int getThemeAttrColor(android.content.Context,int)>($r2, $i0) in <androidx.appcompat.widget.AppCompatDrawableManager$1: android.content.res.ColorStateList createSwitchThumbColorStateList(android.content.Context)> ==> <androidx.appcompat.widget.ThemeUtils: int getThemeAttrColor(android.content.Context,int)>
STATIC edge: $r4 = staticinvoke <androidx.appcompat.widget.ThemeUtils: android.content.res.ColorStateList getThemeAttrColorStateList(android.content.Context,int)>($r2, $i0) in <androidx.appcompat.widget.AppCompatDrawableManager$1: android.content.res.ColorStateList createSwitchThumbColorStateList(android.content.Context)> ==> <androidx.appcompat.widget.ThemeUtils: android.content.res.ColorStateList getThemeAttrColorStateList(android.content.Context,int)>
CLINIT edge: $i0 = staticinvoke <androidx.appcompat.widget.ThemeUtils: int getThemeAttrColor(android.content.Context,int)>($r1, $i0) in <androidx.appcompat.widget.AppCompatDrawableManager$1: android.content.res.ColorStateList createDefaultButtonColorStateList(android.content.Context)> ==> <androidx.appcompat.widget.ThemeUtils: void <clinit>()>
STATIC edge: $i0 = staticinvoke <androidx.appcompat.widget.ThemeUtils: int getThemeAttrColor(android.content.Context,int)>($r1, $i0) in <androidx.appcompat.widget.AppCompatDrawableManager$1: android.content.res.ColorStateList createDefaultButtonColorStateList(android.content.Context)> ==> <androidx.appcompat.widget.ThemeUtils: int getThemeAttrColor(android.content.Context,int)>
CLINIT edge: $i0 = staticinvoke <androidx.appcompat.widget.ThemeUtils: int getThemeAttrColor(android.content.Context,int)>($r1, $i0) in <androidx.appcompat.widget.AppCompatDrawableManager$1: android.content.res.ColorStateList createColoredButtonColorStateList(android.content.Context)> ==> <androidx.appcompat.widget.ThemeUtils: void <clinit>()>
STATIC edge: $i0 = staticinvoke <androidx.appcompat.widget.ThemeUtils: int getThemeAttrColor(android.content.Context,int)>($r1, $i0) in <androidx.appcompat.widget.AppCompatDrawableManager$1: android.content.res.ColorStateList createColoredButtonColorStateList(android.content.Context)> ==> <androidx.appcompat.widget.ThemeUtils: int getThemeAttrColor(android.content.Context,int)>
CLINIT edge: $r1 = staticinvoke <androidx.appcompat.widget.ThemeUtils: android.content.res.ColorStateList getThemeAttrColorStateList(android.content.Context,int)>($r0, $i0) in <androidx.appcompat.widget.ThemeUtils: int getDisabledThemeAttrColor(android.content.Context,int)> ==> <androidx.appcompat.widget.ThemeUtils: void <clinit>()>
STATIC edge: $i0 = staticinvoke <androidx.appcompat.widget.ThemeUtils: int getThemeAttrColor(android.content.Context,int,float)>($r0, $i0, $f0) in <androidx.appcompat.widget.ThemeUtils: int getDisabledThemeAttrColor(android.content.Context,int)> ==> <androidx.appcompat.widget.ThemeUtils: int getThemeAttrColor(android.content.Context,int,float)>
STATIC edge: $r3 = staticinvoke <androidx.appcompat.widget.ThemeUtils: android.util.TypedValue getTypedValue()>() in <androidx.appcompat.widget.ThemeUtils: int getDisabledThemeAttrColor(android.content.Context,int)> ==> <androidx.appcompat.widget.ThemeUtils: android.util.TypedValue getTypedValue()>
STATIC edge: $r1 = staticinvoke <androidx.appcompat.widget.ThemeUtils: android.content.res.ColorStateList getThemeAttrColorStateList(android.content.Context,int)>($r0, $i0) in <androidx.appcompat.widget.ThemeUtils: int getDisabledThemeAttrColor(android.content.Context,int)> ==> <androidx.appcompat.widget.ThemeUtils: android.content.res.ColorStateList getThemeAttrColorStateList(android.content.Context,int)>
CLINIT edge: $i0 = staticinvoke <androidx.appcompat.widget.ThemeUtils: int getThemeAttrColor(android.content.Context,int)>($r0, $i0) in <androidx.appcompat.widget.ThemeUtils: int getThemeAttrColor(android.content.Context,int,float)> ==> <androidx.appcompat.widget.ThemeUtils: void <clinit>()>
STATIC edge: $i0 = staticinvoke <androidx.core.graphics.ColorUtils: int setAlphaComponent(int,int)>($i0, $i1) in <androidx.appcompat.widget.ThemeUtils: int getThemeAttrColor(android.content.Context,int,float)> ==> <androidx.core.graphics.ColorUtils: int setAlphaComponent(int,int)>
STATIC edge: $i0 = staticinvoke <androidx.appcompat.widget.ThemeUtils: int getThemeAttrColor(android.content.Context,int)>($r0, $i0) in <androidx.appcompat.widget.ThemeUtils: int getThemeAttrColor(android.content.Context,int,float)> ==> <androidx.appcompat.widget.ThemeUtils: int getThemeAttrColor(android.content.Context,int)>
CLINIT edge: $i0 = staticinvoke <androidx.core.graphics.ColorUtils: int setAlphaComponent(int,int)>($i0, $i1) in <androidx.appcompat.widget.ThemeUtils: int getThemeAttrColor(android.content.Context,int,float)> ==> <androidx.core.graphics.ColorUtils: void <clinit>()>
CLINIT edge: $r0 = <androidx.appcompat.widget.ThemeUtils: java.lang.ThreadLocal TL_TYPED_VALUE> in <androidx.appcompat.widget.ThemeUtils: android.util.TypedValue getTypedValue()> ==> <androidx.appcompat.widget.ThemeUtils: void <clinit>()>
SPECIAL edge: $r2 = specialinvoke r0.<androidx.appcompat.widget.AppCompatDrawableManager$1: android.content.res.ColorStateList createButtonColorStateList(android.content.Context,int)>($r1, $i0) in <androidx.appcompat.widget.AppCompatDrawableManager$1: android.content.res.ColorStateList createColoredButtonColorStateList(android.content.Context)> ==> <androidx.appcompat.widget.AppCompatDrawableManager$1: android.content.res.ColorStateList createButtonColorStateList(android.content.Context,int)>
CLINIT edge: $i1 = staticinvoke <androidx.appcompat.widget.ThemeUtils: int getThemeAttrColor(android.content.Context,int)>($r2, $i1) in <androidx.appcompat.widget.AppCompatDrawableManager$1: android.content.res.ColorStateList createButtonColorStateList(android.content.Context,int)> ==> <androidx.appcompat.widget.ThemeUtils: void <clinit>()>
STATIC edge: $i1 = staticinvoke <androidx.core.graphics.ColorUtils: int compositeColors(int,int)>($i1, $i0) in <androidx.appcompat.widget.AppCompatDrawableManager$1: android.content.res.ColorStateList createButtonColorStateList(android.content.Context,int)> ==> <androidx.core.graphics.ColorUtils: int compositeColors(int,int)>
STATIC edge: $i2 = staticinvoke <androidx.appcompat.widget.ThemeUtils: int getDisabledThemeAttrColor(android.content.Context,int)>($r2, $i2) in <androidx.appcompat.widget.AppCompatDrawableManager$1: android.content.res.ColorStateList createButtonColorStateList(android.content.Context,int)> ==> <androidx.appcompat.widget.ThemeUtils: int getDisabledThemeAttrColor(android.content.Context,int)>
STATIC edge: $i1 = staticinvoke <androidx.appcompat.widget.ThemeUtils: int getThemeAttrColor(android.content.Context,int)>($r2, $i1) in <androidx.appcompat.widget.AppCompatDrawableManager$1: android.content.res.ColorStateList createButtonColorStateList(android.content.Context,int)> ==> <androidx.appcompat.widget.ThemeUtils: int getThemeAttrColor(android.content.Context,int)>
CLINIT edge: $i2 = staticinvoke <androidx.core.graphics.ColorUtils: int compositeColors(int,int)>($i1, $i0) in <androidx.appcompat.widget.AppCompatDrawableManager$1: android.content.res.ColorStateList createButtonColorStateList(android.content.Context,int)> ==> <androidx.core.graphics.ColorUtils: void <clinit>()>
CLINIT edge: $i4 = staticinvoke <androidx.core.graphics.ColorUtils: int compositeAlpha(int,int)>($i3, $i2) in <androidx.core.graphics.ColorUtils: int compositeColors(int,int)> ==> <androidx.core.graphics.ColorUtils: void <clinit>()>
STATIC edge: $i0 = staticinvoke <androidx.core.graphics.ColorUtils: int compositeComponent(int,int,int,int,int)>($i0, $i3, $i1, $i2, $i4) in <androidx.core.graphics.ColorUtils: int compositeColors(int,int)> ==> <androidx.core.graphics.ColorUtils: int compositeComponent(int,int,int,int,int)>
STATIC edge: $i4 = staticinvoke <androidx.core.graphics.ColorUtils: int compositeAlpha(int,int)>($i3, $i2) in <androidx.core.graphics.ColorUtils: int compositeColors(int,int)> ==> <androidx.core.graphics.ColorUtils: int compositeAlpha(int,int)>
SPECIAL edge: $r1 = specialinvoke r0.<androidx.appcompat.widget.AppCompatDrawableManager$1: android.content.res.ColorStateList createButtonColorStateList(android.content.Context,int)>($r2, 0) in <androidx.appcompat.widget.AppCompatDrawableManager$1: android.content.res.ColorStateList createBorderlessButtonColorStateList(android.content.Context)> ==> <androidx.appcompat.widget.AppCompatDrawableManager$1: android.content.res.ColorStateList createButtonColorStateList(android.content.Context,int)>
SPECIAL edge: $r2 = specialinvoke r0.<androidx.appcompat.widget.AppCompatDrawableManager$1: android.content.res.ColorStateList createButtonColorStateList(android.content.Context,int)>($r1, $i0) in <androidx.appcompat.widget.AppCompatDrawableManager$1: android.content.res.ColorStateList createDefaultButtonColorStateList(android.content.Context)> ==> <androidx.appcompat.widget.AppCompatDrawableManager$1: android.content.res.ColorStateList createButtonColorStateList(android.content.Context,int)>
INTERFACE edge: $z1 = interfaceinvoke $r5.<androidx.appcompat.widget.ResourceManagerInternal$ResourceManagerHooks: boolean tintDrawable(android.content.Context,int,android.graphics.drawable.Drawable)>($r1, $i0, $r2) in <androidx.appcompat.widget.ResourceManagerInternal: android.graphics.drawable.Drawable tintDrawable(android.content.Context,int,boolean,android.graphics.drawable.Drawable)> ==> <androidx.appcompat.widget.AppCompatDrawableManager$1: boolean tintDrawable(android.content.Context,int,android.graphics.drawable.Drawable)>
CLINIT edge: $i0 = staticinvoke <androidx.appcompat.widget.ThemeUtils: int getThemeAttrColor(android.content.Context,int)>($r1, $i0) in <androidx.appcompat.widget.AppCompatDrawableManager$1: boolean tintDrawable(android.content.Context,int,android.graphics.drawable.Drawable)> ==> <androidx.appcompat.widget.ThemeUtils: void <clinit>()>
STATIC edge: $r4 = staticinvoke <androidx.appcompat.widget.AppCompatDrawableManager: android.graphics.PorterDuff$Mode access$000()>() in <androidx.appcompat.widget.AppCompatDrawableManager$1: boolean tintDrawable(android.content.Context,int,android.graphics.drawable.Drawable)> ==> <androidx.appcompat.widget.AppCompatDrawableManager: android.graphics.PorterDuff$Mode access$000()>
STATIC edge: $i0 = staticinvoke <androidx.appcompat.widget.ThemeUtils: int getThemeAttrColor(android.content.Context,int)>($r1, $i0) in <androidx.appcompat.widget.AppCompatDrawableManager$1: boolean tintDrawable(android.content.Context,int,android.graphics.drawable.Drawable)> ==> <androidx.appcompat.widget.ThemeUtils: int getThemeAttrColor(android.content.Context,int)>
STATIC edge: $i0 = staticinvoke <androidx.appcompat.widget.ThemeUtils: int getThemeAttrColor(android.content.Context,int)>($r1, $i0) in <androidx.appcompat.widget.AppCompatDrawableManager$1: boolean tintDrawable(android.content.Context,int,android.graphics.drawable.Drawable)> ==> <androidx.appcompat.widget.ThemeUtils: int getThemeAttrColor(android.content.Context,int)>
STATIC edge: $i0 = staticinvoke <androidx.appcompat.widget.ThemeUtils: int getDisabledThemeAttrColor(android.content.Context,int)>($r1, $i0) in <androidx.appcompat.widget.AppCompatDrawableManager$1: boolean tintDrawable(android.content.Context,int,android.graphics.drawable.Drawable)> ==> <androidx.appcompat.widget.ThemeUtils: int getDisabledThemeAttrColor(android.content.Context,int)>
STATIC edge: $r4 = staticinvoke <androidx.appcompat.widget.AppCompatDrawableManager: android.graphics.PorterDuff$Mode access$000()>() in <androidx.appcompat.widget.AppCompatDrawableManager$1: boolean tintDrawable(android.content.Context,int,android.graphics.drawable.Drawable)> ==> <androidx.appcompat.widget.AppCompatDrawableManager: android.graphics.PorterDuff$Mode access$000()>
STATIC edge: $r4 = staticinvoke <androidx.appcompat.widget.AppCompatDrawableManager: android.graphics.PorterDuff$Mode access$000()>() in <androidx.appcompat.widget.AppCompatDrawableManager$1: boolean tintDrawable(android.content.Context,int,android.graphics.drawable.Drawable)> ==> <androidx.appcompat.widget.AppCompatDrawableManager: android.graphics.PorterDuff$Mode access$000()>
STATIC edge: $r4 = staticinvoke <androidx.appcompat.widget.AppCompatDrawableManager: android.graphics.PorterDuff$Mode access$000()>() in <androidx.appcompat.widget.AppCompatDrawableManager$1: boolean tintDrawable(android.content.Context,int,android.graphics.drawable.Drawable)> ==> <androidx.appcompat.widget.AppCompatDrawableManager: android.graphics.PorterDuff$Mode access$000()>
CLINIT edge: $r4 = staticinvoke <androidx.appcompat.widget.AppCompatDrawableManager: android.graphics.PorterDuff$Mode access$000()>() in <androidx.appcompat.widget.AppCompatDrawableManager$1: boolean tintDrawable(android.content.Context,int,android.graphics.drawable.Drawable)> ==> <androidx.appcompat.widget.AppCompatDrawableManager: void <clinit>()>
CLINIT edge: $i0 = staticinvoke <androidx.appcompat.widget.ThemeUtils: int getDisabledThemeAttrColor(android.content.Context,int)>($r1, $i0) in <androidx.appcompat.widget.AppCompatDrawableManager$1: boolean tintDrawable(android.content.Context,int,android.graphics.drawable.Drawable)> ==> <androidx.appcompat.widget.ThemeUtils: void <clinit>()>
SPECIAL edge: specialinvoke r0.<androidx.appcompat.widget.AppCompatDrawableManager$1: void setPorterDuffColorFilter(android.graphics.drawable.Drawable,int,android.graphics.PorterDuff$Mode)>($r2, $i0, $r4) in <androidx.appcompat.widget.AppCompatDrawableManager$1: boolean tintDrawable(android.content.Context,int,android.graphics.drawable.Drawable)> ==> <androidx.appcompat.widget.AppCompatDrawableManager$1: void setPorterDuffColorFilter(android.graphics.drawable.Drawable,int,android.graphics.PorterDuff$Mode)>
SPECIAL edge: specialinvoke r0.<androidx.appcompat.widget.AppCompatDrawableManager$1: void setPorterDuffColorFilter(android.graphics.drawable.Drawable,int,android.graphics.PorterDuff$Mode)>($r2, $i0, $r4) in <androidx.appcompat.widget.AppCompatDrawableManager$1: boolean tintDrawable(android.content.Context,int,android.graphics.drawable.Drawable)> ==> <androidx.appcompat.widget.AppCompatDrawableManager$1: void setPorterDuffColorFilter(android.graphics.drawable.Drawable,int,android.graphics.PorterDuff$Mode)>
CLINIT edge: $z0 = staticinvoke <androidx.appcompat.widget.DrawableUtils: boolean canSafelyMutateDrawable(android.graphics.drawable.Drawable)>($r1) in <androidx.appcompat.widget.AppCompatDrawableManager$1: void setPorterDuffColorFilter(android.graphics.drawable.Drawable,int,android.graphics.PorterDuff$Mode)> ==> <androidx.appcompat.widget.DrawableUtils: void <clinit>()>
STATIC edge: $r3 = staticinvoke <androidx.appcompat.widget.AppCompatDrawableManager: android.graphics.PorterDuffColorFilter getPorterDuffColorFilter(int,android.graphics.PorterDuff$Mode)>($i0, $r2) in <androidx.appcompat.widget.AppCompatDrawableManager$1: void setPorterDuffColorFilter(android.graphics.drawable.Drawable,int,android.graphics.PorterDuff$Mode)> ==> <androidx.appcompat.widget.AppCompatDrawableManager: android.graphics.PorterDuffColorFilter getPorterDuffColorFilter(int,android.graphics.PorterDuff$Mode)>
STATIC edge: $r2 = staticinvoke <androidx.appcompat.widget.AppCompatDrawableManager: android.graphics.PorterDuff$Mode access$000()>() in <androidx.appcompat.widget.AppCompatDrawableManager$1: void setPorterDuffColorFilter(android.graphics.drawable.Drawable,int,android.graphics.PorterDuff$Mode)> ==> <androidx.appcompat.widget.AppCompatDrawableManager: android.graphics.PorterDuff$Mode access$000()>
STATIC edge: $z0 = staticinvoke <androidx.appcompat.widget.DrawableUtils: boolean canSafelyMutateDrawable(android.graphics.drawable.Drawable)>($r1) in <androidx.appcompat.widget.AppCompatDrawableManager$1: void setPorterDuffColorFilter(android.graphics.drawable.Drawable,int,android.graphics.PorterDuff$Mode)> ==> <androidx.appcompat.widget.DrawableUtils: boolean canSafelyMutateDrawable(android.graphics.drawable.Drawable)>
CLINIT edge: $r3 = staticinvoke <androidx.appcompat.widget.AppCompatDrawableManager: android.graphics.PorterDuffColorFilter getPorterDuffColorFilter(int,android.graphics.PorterDuff$Mode)>($i0, $r2) in <androidx.appcompat.widget.AppCompatDrawableManager$1: void setPorterDuffColorFilter(android.graphics.drawable.Drawable,int,android.graphics.PorterDuff$Mode)> ==> <androidx.appcompat.widget.AppCompatDrawableManager: void <clinit>()>
SPECIAL edge: $r4 = specialinvoke r0.<androidx.appcompat.widget.ResourceManagerInternal: android.graphics.drawable.Drawable getCachedDrawable(android.content.Context,long)>($r1, $l1) in <androidx.appcompat.widget.ResourceManagerInternal: android.graphics.drawable.Drawable createDrawableIfNeeded(android.content.Context,int)> ==> <androidx.appcompat.widget.ResourceManagerInternal: android.graphics.drawable.Drawable getCachedDrawable(android.content.Context,long)>
SPECIAL edge: specialinvoke r0.<androidx.appcompat.widget.ResourceManagerInternal: boolean addDrawableToCache(android.content.Context,long,android.graphics.drawable.Drawable)>($r1, $l1, $r4) in <androidx.appcompat.widget.ResourceManagerInternal: android.graphics.drawable.Drawable createDrawableIfNeeded(android.content.Context,int)> ==> <androidx.appcompat.widget.ResourceManagerInternal: boolean addDrawableToCache(android.content.Context,long,android.graphics.drawable.Drawable)>
CLINIT edge: $r6 = new androidx.collection.LongSparseArray in <androidx.appcompat.widget.ResourceManagerInternal: boolean addDrawableToCache(android.content.Context,long,android.graphics.drawable.Drawable)> ==> <androidx.collection.LongSparseArray: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <androidx.collection.LongSparseArray: void <clinit>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r6.<androidx.collection.LongSparseArray: void <init>()>() in <androidx.appcompat.widget.ResourceManagerInternal: boolean addDrawableToCache(android.content.Context,long,android.graphics.drawable.Drawable)> ==> <androidx.collection.LongSparseArray: void <init>()>
VIRTUAL edge: virtualinvoke $r6.<androidx.collection.LongSparseArray: void put(long,java.lang.Object)>($l0, $r7) in <androidx.appcompat.widget.ResourceManagerInternal: boolean addDrawableToCache(android.content.Context,long,android.graphics.drawable.Drawable)> ==> <androidx.collection.LongSparseArray: void put(long,java.lang.Object)>
CLINIT edge: $i1 = staticinvoke <androidx.collection.ContainerHelpers: int binarySearch(long[],int,long)>($r2, $i1, $l0) in <androidx.collection.LongSparseArray: void put(long,java.lang.Object)> ==> <androidx.collection.ContainerHelpers: void <clinit>()>
STATIC edge: $i2 = staticinvoke <androidx.collection.ContainerHelpers: int idealLongArraySize(int)>($i2) in <androidx.collection.LongSparseArray: void put(long,java.lang.Object)> ==> <androidx.collection.ContainerHelpers: int idealLongArraySize(int)>
STATIC edge: $i1 = staticinvoke <androidx.collection.ContainerHelpers: int binarySearch(long[],int,long)>($r2, $i1, $l0) in <androidx.collection.LongSparseArray: void put(long,java.lang.Object)> ==> <androidx.collection.ContainerHelpers: int binarySearch(long[],int,long)>
STATIC edge: $i1 = staticinvoke <androidx.collection.ContainerHelpers: int binarySearch(long[],int,long)>($r2, $i1, $l0) in <androidx.collection.LongSparseArray: void put(long,java.lang.Object)> ==> <androidx.collection.ContainerHelpers: int binarySearch(long[],int,long)>
CLINIT edge: $r5 = <androidx.collection.LongSparseArray: java.lang.Object DELETED> in <androidx.collection.LongSparseArray: void put(long,java.lang.Object)> ==> <androidx.collection.LongSparseArray: void <clinit>()>
CLINIT edge: $i0 = staticinvoke <androidx.collection.ContainerHelpers: int idealByteArraySize(int)>($i0) in <androidx.collection.ContainerHelpers: int idealLongArraySize(int)> ==> <androidx.collection.ContainerHelpers: void <clinit>()>
STATIC edge: $i0 = staticinvoke <androidx.collection.ContainerHelpers: int idealByteArraySize(int)>($i0) in <androidx.collection.ContainerHelpers: int idealLongArraySize(int)> ==> <androidx.collection.ContainerHelpers: int idealByteArraySize(int)>
SPECIAL edge: specialinvoke r0.<androidx.collection.LongSparseArray: void gc()>() in <androidx.collection.LongSparseArray: void put(long,java.lang.Object)> ==> <androidx.collection.LongSparseArray: void gc()>
CLINIT edge: $r4 = <androidx.collection.LongSparseArray: java.lang.Object DELETED> in <androidx.collection.LongSparseArray: void gc()> ==> <androidx.collection.LongSparseArray: void <clinit>()>
SPECIAL edge: specialinvoke r0.<androidx.collection.LongSparseArray: void <init>(int)>(10) in <androidx.collection.LongSparseArray: void <init>()> ==> <androidx.collection.LongSparseArray: void <init>(int)>
CLINIT edge: $r1 = <androidx.collection.ContainerHelpers: long[] EMPTY_LONGS> in <androidx.collection.LongSparseArray: void <init>(int)> ==> <androidx.collection.ContainerHelpers: void <clinit>()>
STATIC edge: $i0 = staticinvoke <androidx.collection.ContainerHelpers: int idealLongArraySize(int)>($i0) in <androidx.collection.LongSparseArray: void <init>(int)> ==> <androidx.collection.ContainerHelpers: int idealLongArraySize(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.collection.LongSparseArray: void <init>(int)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $r4 = interfaceinvoke $r5.<androidx.appcompat.widget.ResourceManagerInternal$ResourceManagerHooks: android.graphics.drawable.Drawable createDrawableFor(androidx.appcompat.widget.ResourceManagerInternal,android.content.Context,int)>(r0, $r1, $i0) in <androidx.appcompat.widget.ResourceManagerInternal: android.graphics.drawable.Drawable createDrawableIfNeeded(android.content.Context,int)> ==> <androidx.appcompat.widget.AppCompatDrawableManager$1: android.graphics.drawable.Drawable createDrawableFor(androidx.appcompat.widget.ResourceManagerInternal,android.content.Context,int)>
VIRTUAL edge: $r5 = virtualinvoke $r1.<androidx.appcompat.widget.ResourceManagerInternal: android.graphics.drawable.Drawable getDrawable(android.content.Context,int)>($r2, $i0) in <androidx.appcompat.widget.AppCompatDrawableManager$1: android.graphics.drawable.Drawable createDrawableFor(androidx.appcompat.widget.ResourceManagerInternal,android.content.Context,int)> ==> <androidx.appcompat.widget.ResourceManagerInternal: android.graphics.drawable.Drawable getDrawable(android.content.Context,int)>
SPECIAL edge: $r3 = specialinvoke r0.<androidx.appcompat.widget.AppCompatDrawableManager$1: android.graphics.drawable.LayerDrawable getRatingBarLayerDrawable(androidx.appcompat.widget.ResourceManagerInternal,android.content.Context,int)>($r1, $r2, $i0) in <androidx.appcompat.widget.AppCompatDrawableManager$1: android.graphics.drawable.Drawable createDrawableFor(androidx.appcompat.widget.ResourceManagerInternal,android.content.Context,int)> ==> <androidx.appcompat.widget.AppCompatDrawableManager$1: android.graphics.drawable.LayerDrawable getRatingBarLayerDrawable(androidx.appcompat.widget.ResourceManagerInternal,android.content.Context,int)>
SPECIAL edge: $r3 = specialinvoke r0.<androidx.appcompat.widget.AppCompatDrawableManager$1: android.graphics.drawable.LayerDrawable getRatingBarLayerDrawable(androidx.appcompat.widget.ResourceManagerInternal,android.content.Context,int)>($r1, $r2, $i0) in <androidx.appcompat.widget.AppCompatDrawableManager$1: android.graphics.drawable.Drawable createDrawableFor(androidx.appcompat.widget.ResourceManagerInternal,android.content.Context,int)> ==> <androidx.appcompat.widget.AppCompatDrawableManager$1: android.graphics.drawable.LayerDrawable getRatingBarLayerDrawable(androidx.appcompat.widget.ResourceManagerInternal,android.content.Context,int)>
VIRTUAL edge: $r4 = virtualinvoke $r1.<androidx.appcompat.widget.ResourceManagerInternal: android.graphics.drawable.Drawable getDrawable(android.content.Context,int)>($r2, $i1) in <androidx.appcompat.widget.AppCompatDrawableManager$1: android.graphics.drawable.LayerDrawable getRatingBarLayerDrawable(androidx.appcompat.widget.ResourceManagerInternal,android.content.Context,int)> ==> <androidx.appcompat.widget.ResourceManagerInternal: android.graphics.drawable.Drawable getDrawable(android.content.Context,int)>
SPECIAL edge: specialinvoke $r16.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>("No start tag found") in <androidx.appcompat.widget.ResourceManagerInternal: android.graphics.drawable.Drawable loadDrawableFromDelegates(android.content.Context,int)> ==> <org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r6) in <androidx.appcompat.widget.ResourceManagerInternal: android.graphics.drawable.Drawable loadDrawableFromDelegates(android.content.Context,int)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.String: boolean endsWith(java.lang.String)>(".xml") in <androidx.appcompat.widget.ResourceManagerInternal: android.graphics.drawable.Drawable loadDrawableFromDelegates(android.content.Context,int)> ==> <java.lang.String: boolean endsWith(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean endsWith(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<androidx.collection.SparseArrayCompat: java.lang.Object get(int)>($i0) in <androidx.appcompat.widget.ResourceManagerInternal: android.graphics.drawable.Drawable loadDrawableFromDelegates(android.content.Context,int)> ==> <androidx.collection.SparseArrayCompat: java.lang.Object get(int)>
SPECIAL edge: specialinvoke $r4.<androidx.collection.SparseArrayCompat: void <init>()>() in <androidx.appcompat.widget.ResourceManagerInternal: android.graphics.drawable.Drawable loadDrawableFromDelegates(android.content.Context,int)> ==> <androidx.collection.SparseArrayCompat: void <init>()>
VIRTUAL edge: virtualinvoke $r4.<androidx.collection.SparseArrayCompat: void append(int,java.lang.Object)>($i0, $r1) in <androidx.appcompat.widget.ResourceManagerInternal: android.graphics.drawable.Drawable loadDrawableFromDelegates(android.content.Context,int)> ==> <androidx.collection.SparseArrayCompat: void append(int,java.lang.Object)>
VIRTUAL edge: $r1 = virtualinvoke r0.<androidx.collection.SparseArrayCompat: java.lang.Object get(int,java.lang.Object)>($i0, null) in <androidx.collection.SparseArrayCompat: java.lang.Object get(int)> ==> <androidx.collection.SparseArrayCompat: java.lang.Object get(int,java.lang.Object)>
CLINIT edge: $i1 = staticinvoke <androidx.collection.ContainerHelpers: int binarySearch(int[],int,int)>($r2, $i0, $i1) in <androidx.collection.SparseArrayCompat: java.lang.Object get(int,java.lang.Object)> ==> <androidx.collection.ContainerHelpers: void <clinit>()>
STATIC edge: $i1 = staticinvoke <androidx.collection.ContainerHelpers: int binarySearch(int[],int,int)>($r2, $i0, $i1) in <androidx.collection.SparseArrayCompat: java.lang.Object get(int,java.lang.Object)> ==> <androidx.collection.ContainerHelpers: int binarySearch(int[],int,int)>
CLINIT edge: $r5 = <androidx.collection.SparseArrayCompat: java.lang.Object DELETED> in <androidx.collection.SparseArrayCompat: java.lang.Object get(int,java.lang.Object)> ==> <androidx.collection.SparseArrayCompat: void <clinit>()>
SPECIAL edge: $r9 = specialinvoke r0.<androidx.appcompat.widget.ResourceManagerInternal: android.graphics.drawable.Drawable getCachedDrawable(android.content.Context,long)>($r2, $l1) in <androidx.appcompat.widget.ResourceManagerInternal: android.graphics.drawable.Drawable loadDrawableFromDelegates(android.content.Context,int)> ==> <androidx.appcompat.widget.ResourceManagerInternal: android.graphics.drawable.Drawable getCachedDrawable(android.content.Context,long)>
SPECIAL edge: specialinvoke r0.<androidx.appcompat.widget.ResourceManagerInternal: boolean addDrawableToCache(android.content.Context,long,android.graphics.drawable.Drawable)>($r2, $l1, $r10) in <androidx.appcompat.widget.ResourceManagerInternal: android.graphics.drawable.Drawable loadDrawableFromDelegates(android.content.Context,int)> ==> <androidx.appcompat.widget.ResourceManagerInternal: boolean addDrawableToCache(android.content.Context,long,android.graphics.drawable.Drawable)>
VIRTUAL edge: $r2 = virtualinvoke r0.<androidx.appcompat.widget.ResourceManagerInternal: android.graphics.drawable.Drawable getDrawable(android.content.Context,int)>($r1, $i0) in <androidx.appcompat.widget.ResourceManagerInternal: void checkVectorDrawableSetup(android.content.Context)> ==> <androidx.appcompat.widget.ResourceManagerInternal: android.graphics.drawable.Drawable getDrawable(android.content.Context,int)>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>() in <androidx.appcompat.widget.DrawableUtils: void fixDrawable(android.graphics.drawable.Drawable)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>() in <androidx.appcompat.widget.ResourceManagerInternal: boolean isVectorDrawable(android.graphics.drawable.Drawable)> ==> <java.lang.Object: java.lang.Class getClass()>
SPECIAL edge: specialinvoke $r2.<androidx.appcompat.widget.TintTypedArray: void <init>(android.content.Context,android.content.res.TypedArray)>($r0, $r3) in <androidx.appcompat.widget.TintTypedArray: androidx.appcompat.widget.TintTypedArray obtainStyledAttributes(android.content.Context,android.util.AttributeSet,int[])> ==> <androidx.appcompat.widget.TintTypedArray: void <init>(android.content.Context,android.content.res.TypedArray)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.appcompat.widget.TintTypedArray: void <init>(android.content.Context,android.content.res.TypedArray)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r4.<androidx.appcompat.app.AppCompatDelegateImpl$AppCompatWindowCallback: void <init>(androidx.appcompat.app.AppCompatDelegateImpl,android.view.Window$Callback)>(r0, $r3) in <androidx.appcompat.app.AppCompatDelegateImpl: void attachToWindow(android.view.Window)> ==> <androidx.appcompat.app.AppCompatDelegateImpl$AppCompatWindowCallback: void <init>(androidx.appcompat.app.AppCompatDelegateImpl,android.view.Window$Callback)>
VIRTUAL edge: virtualinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: void setOnBackInvokedDispatcher(android.window.OnBackInvokedDispatcher)>(null) in <androidx.appcompat.app.AppCompatDelegateImpl: void attachToWindow(android.view.Window)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: void setOnBackInvokedDispatcher(android.window.OnBackInvokedDispatcher)>
STATIC edge: staticinvoke <androidx.appcompat.app.AppCompatDelegateImpl$Api33Impl: void unregisterOnBackInvokedCallback(java.lang.Object,java.lang.Object)>($r2, $r3) in <androidx.appcompat.app.AppCompatDelegateImpl: void setOnBackInvokedDispatcher(android.window.OnBackInvokedDispatcher)> ==> <androidx.appcompat.app.AppCompatDelegateImpl$Api33Impl: void unregisterOnBackInvokedCallback(java.lang.Object,java.lang.Object)>
STATIC edge: $r1 = staticinvoke <androidx.appcompat.app.AppCompatDelegateImpl$Api33Impl: android.window.OnBackInvokedDispatcher getOnBackInvokedDispatcher(android.app.Activity)>($r5) in <androidx.appcompat.app.AppCompatDelegateImpl: void setOnBackInvokedDispatcher(android.window.OnBackInvokedDispatcher)> ==> <androidx.appcompat.app.AppCompatDelegateImpl$Api33Impl: android.window.OnBackInvokedDispatcher getOnBackInvokedDispatcher(android.app.Activity)>
SPECIAL edge: specialinvoke r0.<androidx.appcompat.app.AppCompatDelegate: void setOnBackInvokedDispatcher(android.window.OnBackInvokedDispatcher)>($r1) in <androidx.appcompat.app.AppCompatDelegateImpl: void setOnBackInvokedDispatcher(android.window.OnBackInvokedDispatcher)> ==> <androidx.appcompat.app.AppCompatDelegate: void setOnBackInvokedDispatcher(android.window.OnBackInvokedDispatcher)>
VIRTUAL edge: virtualinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: void updateBackInvokedCallbackState()>() in <androidx.appcompat.app.AppCompatDelegateImpl: void setOnBackInvokedDispatcher(android.window.OnBackInvokedDispatcher)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: void updateBackInvokedCallbackState()>
STATIC edge: staticinvoke <androidx.appcompat.app.AppCompatDelegateImpl$Api33Impl: void unregisterOnBackInvokedCallback(java.lang.Object,java.lang.Object)>($r2, $r1) in <androidx.appcompat.app.AppCompatDelegateImpl: void updateBackInvokedCallbackState()> ==> <androidx.appcompat.app.AppCompatDelegateImpl$Api33Impl: void unregisterOnBackInvokedCallback(java.lang.Object,java.lang.Object)>
STATIC edge: $r1 = staticinvoke <androidx.appcompat.app.AppCompatDelegateImpl$Api33Impl: android.window.OnBackInvokedCallback registerOnBackPressedCallback(java.lang.Object,androidx.appcompat.app.AppCompatDelegateImpl)>($r2, r0) in <androidx.appcompat.app.AppCompatDelegateImpl: void updateBackInvokedCallbackState()> ==> <androidx.appcompat.app.AppCompatDelegateImpl$Api33Impl: android.window.OnBackInvokedCallback registerOnBackPressedCallback(java.lang.Object,androidx.appcompat.app.AppCompatDelegateImpl)>
SPECIAL edge: specialinvoke $r0.<androidx.appcompat.app.AppCompatDelegateImpl$Api33Impl$$ExternalSyntheticLambda0: void <init>(androidx.appcompat.app.AppCompatDelegateImpl)>($r2) in <androidx.appcompat.app.AppCompatDelegateImpl$Api33Impl: android.window.OnBackInvokedCallback registerOnBackPressedCallback(java.lang.Object,androidx.appcompat.app.AppCompatDelegateImpl)> ==> <androidx.appcompat.app.AppCompatDelegateImpl$Api33Impl$$ExternalSyntheticLambda0: void <init>(androidx.appcompat.app.AppCompatDelegateImpl)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.appcompat.app.AppCompatDelegateImpl$Api33Impl$$ExternalSyntheticLambda0: void <init>(androidx.appcompat.app.AppCompatDelegateImpl)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: boolean shouldRegisterBackInvokedCallback()>() in <androidx.appcompat.app.AppCompatDelegateImpl: void updateBackInvokedCallbackState()> ==> <androidx.appcompat.app.AppCompatDelegateImpl: boolean shouldRegisterBackInvokedCallback()>
VIRTUAL edge: $r1 = virtualinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState getPanelState(int,boolean)>(0, 0) in <androidx.appcompat.app.AppCompatDelegateImpl: boolean shouldRegisterBackInvokedCallback()> ==> <androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState getPanelState(int,boolean)>
SPECIAL edge: specialinvoke $r3.<androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState: void <init>(int)>($i0) in <androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState getPanelState(int,boolean)> ==> <androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState: void <init>(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState: void <init>(int)> ==> <java.lang.Object: void <init>()>
CLINIT edge: $r1 = staticinvoke <androidx.appcompat.app.AppCompatDelegate: androidx.appcompat.app.AppCompatDelegate create(android.app.Activity,androidx.appcompat.app.AppCompatCallback)>(r0, r0) in <androidx.appcompat.app.AppCompatActivity: androidx.appcompat.app.AppCompatDelegate getDelegate()> ==> <androidx.appcompat.app.AppCompatDelegate: void <clinit>()>
STATIC edge: $r1 = staticinvoke <androidx.appcompat.app.AppCompatDelegate: androidx.appcompat.app.AppCompatDelegate create(android.app.Activity,androidx.appcompat.app.AppCompatCallback)>(r0, r0) in <androidx.appcompat.app.AppCompatActivity: androidx.appcompat.app.AppCompatDelegate getDelegate()> ==> <androidx.appcompat.app.AppCompatDelegate: androidx.appcompat.app.AppCompatDelegate create(android.app.Activity,androidx.appcompat.app.AppCompatCallback)>
CLINIT edge: $r2 = new androidx.appcompat.app.AppCompatDelegateImpl in <androidx.appcompat.app.AppCompatDelegate: androidx.appcompat.app.AppCompatDelegate create(android.app.Activity,androidx.appcompat.app.AppCompatCallback)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: void <clinit>()>
CLINIT edge: $r2 = new androidx.appcompat.app.AppCompatDelegateImpl in <androidx.appcompat.app.AppCompatDelegate: androidx.appcompat.app.AppCompatDelegate create(android.app.Activity,androidx.appcompat.app.AppCompatCallback)> ==> <androidx.appcompat.app.AppCompatDelegate: void <clinit>()>
SPECIAL edge: specialinvoke $r2.<androidx.appcompat.app.AppCompatDelegateImpl: void <init>(android.app.Activity,androidx.appcompat.app.AppCompatCallback)>($r0, $r1) in <androidx.appcompat.app.AppCompatDelegate: androidx.appcompat.app.AppCompatDelegate create(android.app.Activity,androidx.appcompat.app.AppCompatCallback)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: void <init>(android.app.Activity,androidx.appcompat.app.AppCompatCallback)>
VIRTUAL edge: $i0 = virtualinvoke $r6.<androidx.appcompat.app.AppCompatDelegate: int getLocalNightMode()>() in <androidx.appcompat.app.AppCompatDelegateImpl: void <init>(android.content.Context,android.view.Window,androidx.appcompat.app.AppCompatCallback,java.lang.Object)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: int getLocalNightMode()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.appcompat.app.AppCompatDelegate: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r9.<androidx.fragment.app.FragmentTransitionCompat21$3: void <init>(androidx.fragment.app.FragmentTransitionCompat21,java.lang.Object,java.util.ArrayList,java.lang.Object,java.util.ArrayList,java.lang.Object,java.util.ArrayList)>($r8, $r0, null, $r0, null, $r0, null) in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <androidx.fragment.app.FragmentTransitionCompat21$3: void <init>(androidx.fragment.app.FragmentTransitionCompat21,java.lang.Object,java.util.ArrayList,java.lang.Object,java.util.ArrayList,java.lang.Object,java.util.ArrayList)>
VIRTUAL edge: virtualinvoke $r9.<androidx.fragment.app.FragmentTransitionCompat21$3: void onTransitionStart(android.transition.Transition)>(null) in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <androidx.fragment.app.FragmentTransitionCompat21$3: void onTransitionStart(android.transition.Transition)>
VIRTUAL edge: virtualinvoke $r9.<androidx.fragment.app.FragmentTransitionCompat21$3: void onTransitionEnd(android.transition.Transition)>(null) in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <androidx.fragment.app.FragmentTransitionCompat21$3: void onTransitionEnd(android.transition.Transition)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.fragment.app.FragmentTransitionCompat21$3: void <init>(androidx.fragment.app.FragmentTransitionCompat21,java.lang.Object,java.util.ArrayList,java.lang.Object,java.util.ArrayList,java.lang.Object,java.util.ArrayList)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r8.<androidx.fragment.app.FragmentTransitionCompat21: void <init>()>() in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <androidx.fragment.app.FragmentTransitionCompat21: void <init>()>
SPECIAL edge: specialinvoke $r7.<androidx.appcompat.widget.ActionBarContextView$1: void <init>(androidx.appcompat.widget.ActionBarContextView,androidx.appcompat.view.ActionMode)>($r6, null) in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <androidx.appcompat.widget.ActionBarContextView$1: void <init>(androidx.appcompat.widget.ActionBarContextView,androidx.appcompat.view.ActionMode)>
VIRTUAL edge: virtualinvoke $r7.<androidx.appcompat.widget.ActionBarContextView$1: void onClick(android.view.View)>(null) in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <androidx.appcompat.widget.ActionBarContextView$1: void onClick(android.view.View)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.appcompat.widget.ActionBarContextView$1: void <init>(androidx.appcompat.widget.ActionBarContextView,androidx.appcompat.view.ActionMode)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r6.<androidx.appcompat.widget.ActionBarContextView: void <init>(android.content.Context)>($r0) in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <androidx.appcompat.widget.ActionBarContextView: void <init>(android.content.Context)>
SPECIAL edge: specialinvoke r0.<androidx.appcompat.widget.ActionBarContextView: void <init>(android.content.Context,android.util.AttributeSet)>($r1, null) in <androidx.appcompat.widget.ActionBarContextView: void <init>(android.content.Context)> ==> <androidx.appcompat.widget.ActionBarContextView: void <init>(android.content.Context,android.util.AttributeSet)>
SPECIAL edge: specialinvoke r0.<androidx.appcompat.widget.ActionBarContextView: void <init>(android.content.Context,android.util.AttributeSet,int)>($r1, $r2, $i0) in <androidx.appcompat.widget.ActionBarContextView: void <init>(android.content.Context,android.util.AttributeSet)> ==> <androidx.appcompat.widget.ActionBarContextView: void <init>(android.content.Context,android.util.AttributeSet,int)>
CLINIT edge: $r1 = <androidx.appcompat.R$styleable: int[] ActionMode> in <androidx.appcompat.widget.ActionBarContextView: void <init>(android.content.Context,android.util.AttributeSet,int)> ==> <androidx.appcompat.R$styleable: void <clinit>()>
STATIC edge: staticinvoke <androidx.core.view.ViewCompat: void setBackground(android.view.View,android.graphics.drawable.Drawable)>(r0, $r5) in <androidx.appcompat.widget.ActionBarContextView: void <init>(android.content.Context,android.util.AttributeSet,int)> ==> <androidx.core.view.ViewCompat: void setBackground(android.view.View,android.graphics.drawable.Drawable)>
STATIC edge: $r4 = staticinvoke <androidx.appcompat.widget.TintTypedArray: androidx.appcompat.widget.TintTypedArray obtainStyledAttributes(android.content.Context,android.util.AttributeSet,int[],int,int)>($r2, $r3, $r1, $i0, 0) in <androidx.appcompat.widget.ActionBarContextView: void <init>(android.content.Context,android.util.AttributeSet,int)> ==> <androidx.appcompat.widget.TintTypedArray: androidx.appcompat.widget.TintTypedArray obtainStyledAttributes(android.content.Context,android.util.AttributeSet,int[],int,int)>
CLINIT edge: staticinvoke <androidx.core.view.ViewCompat: void setBackground(android.view.View,android.graphics.drawable.Drawable)>(r0, $r5) in <androidx.appcompat.widget.ActionBarContextView: void <init>(android.content.Context,android.util.AttributeSet,int)> ==> <androidx.core.view.ViewCompat: void <clinit>()>
STATIC edge: staticinvoke <androidx.core.view.ViewCompat$Api16Impl: void setBackground(android.view.View,android.graphics.drawable.Drawable)>($r0, $r1) in <androidx.core.view.ViewCompat: void setBackground(android.view.View,android.graphics.drawable.Drawable)> ==> <androidx.core.view.ViewCompat$Api16Impl: void setBackground(android.view.View,android.graphics.drawable.Drawable)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<androidx.appcompat.widget.TintTypedArray: android.graphics.drawable.Drawable getDrawable(int)>($i0) in <androidx.appcompat.widget.ActionBarContextView: void <init>(android.content.Context,android.util.AttributeSet,int)> ==> <androidx.appcompat.widget.TintTypedArray: android.graphics.drawable.Drawable getDrawable(int)>
VIRTUAL edge: $i0 = virtualinvoke $r4.<androidx.appcompat.widget.TintTypedArray: int getResourceId(int,int)>($i0, 0) in <androidx.appcompat.widget.ActionBarContextView: void <init>(android.content.Context,android.util.AttributeSet,int)> ==> <androidx.appcompat.widget.TintTypedArray: int getResourceId(int,int)>
VIRTUAL edge: $i0 = virtualinvoke $r4.<androidx.appcompat.widget.TintTypedArray: int getResourceId(int,int)>($i0, 0) in <androidx.appcompat.widget.ActionBarContextView: void <init>(android.content.Context,android.util.AttributeSet,int)> ==> <androidx.appcompat.widget.TintTypedArray: int getResourceId(int,int)>
VIRTUAL edge: $i0 = virtualinvoke $r4.<androidx.appcompat.widget.TintTypedArray: int getLayoutDimension(int,int)>($i0, 0) in <androidx.appcompat.widget.ActionBarContextView: void <init>(android.content.Context,android.util.AttributeSet,int)> ==> <androidx.appcompat.widget.TintTypedArray: int getLayoutDimension(int,int)>
VIRTUAL edge: virtualinvoke $r4.<androidx.appcompat.widget.TintTypedArray: void recycle()>() in <androidx.appcompat.widget.ActionBarContextView: void <init>(android.content.Context,android.util.AttributeSet,int)> ==> <androidx.appcompat.widget.TintTypedArray: void recycle()>
STATIC edge: $r3 = staticinvoke <androidx.appcompat.content.res.AppCompatResources: android.graphics.drawable.Drawable getDrawable(android.content.Context,int)>($r2, $i1) in <androidx.appcompat.widget.TintTypedArray: android.graphics.drawable.Drawable getDrawable(int)> ==> <androidx.appcompat.content.res.AppCompatResources: android.graphics.drawable.Drawable getDrawable(android.content.Context,int)>
CLINIT edge: $r1 = staticinvoke <androidx.appcompat.widget.ResourceManagerInternal: androidx.appcompat.widget.ResourceManagerInternal get()>() in <androidx.appcompat.content.res.AppCompatResources: android.graphics.drawable.Drawable getDrawable(android.content.Context,int)> ==> <androidx.appcompat.widget.ResourceManagerInternal: void <clinit>()>
STATIC edge: $r1 = staticinvoke <androidx.appcompat.widget.ResourceManagerInternal: androidx.appcompat.widget.ResourceManagerInternal get()>() in <androidx.appcompat.content.res.AppCompatResources: android.graphics.drawable.Drawable getDrawable(android.content.Context,int)> ==> <androidx.appcompat.widget.ResourceManagerInternal: androidx.appcompat.widget.ResourceManagerInternal get()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<androidx.appcompat.widget.ResourceManagerInternal: android.graphics.drawable.Drawable getDrawable(android.content.Context,int)>($r0, $i0) in <androidx.appcompat.content.res.AppCompatResources: android.graphics.drawable.Drawable getDrawable(android.content.Context,int)> ==> <androidx.appcompat.widget.ResourceManagerInternal: android.graphics.drawable.Drawable getDrawable(android.content.Context,int)>
SPECIAL edge: specialinvoke $r2.<androidx.appcompat.widget.TintTypedArray: void <init>(android.content.Context,android.content.res.TypedArray)>($r0, $r3) in <androidx.appcompat.widget.TintTypedArray: androidx.appcompat.widget.TintTypedArray obtainStyledAttributes(android.content.Context,android.util.AttributeSet,int[],int,int)> ==> <androidx.appcompat.widget.TintTypedArray: void <init>(android.content.Context,android.content.res.TypedArray)>
SPECIAL edge: specialinvoke r0.<androidx.appcompat.widget.AbsActionBarView: void <init>(android.content.Context,android.util.AttributeSet,int)>($r2, $r3, $i0) in <androidx.appcompat.widget.ActionBarContextView: void <init>(android.content.Context,android.util.AttributeSet,int)> ==> <androidx.appcompat.widget.AbsActionBarView: void <init>(android.content.Context,android.util.AttributeSet,int)>
SPECIAL edge: specialinvoke $r3.<androidx.appcompat.widget.AbsActionBarView$VisibilityAnimListener: void <init>(androidx.appcompat.widget.AbsActionBarView)>(r0) in <androidx.appcompat.widget.AbsActionBarView: void <init>(android.content.Context,android.util.AttributeSet,int)> ==> <androidx.appcompat.widget.AbsActionBarView$VisibilityAnimListener: void <init>(androidx.appcompat.widget.AbsActionBarView)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.appcompat.widget.AbsActionBarView$VisibilityAnimListener: void <init>(androidx.appcompat.widget.AbsActionBarView)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r5.<androidx.appcompat.view.WindowCallbackWrapper: void <init>(android.view.Window$Callback)>($r0) in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <androidx.appcompat.view.WindowCallbackWrapper: void <init>(android.view.Window$Callback)>
VIRTUAL edge: $z0 = virtualinvoke $r5.<androidx.appcompat.view.WindowCallbackWrapper: boolean dispatchTouchEvent(android.view.MotionEvent)>(null) in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <androidx.appcompat.view.WindowCallbackWrapper: boolean dispatchTouchEvent(android.view.MotionEvent)>
VIRTUAL edge: virtualinvoke $r5.<androidx.appcompat.view.WindowCallbackWrapper: void onActionModeFinished(android.view.ActionMode)>(null) in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <androidx.appcompat.view.WindowCallbackWrapper: void onActionModeFinished(android.view.ActionMode)>
VIRTUAL edge: $z1 = virtualinvoke $r5.<androidx.appcompat.view.WindowCallbackWrapper: boolean onSearchRequested(android.view.SearchEvent)>(null) in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <androidx.appcompat.view.WindowCallbackWrapper: boolean onSearchRequested(android.view.SearchEvent)>
VIRTUAL edge: $z2 = virtualinvoke $r5.<androidx.appcompat.view.WindowCallbackWrapper: boolean dispatchTrackballEvent(android.view.MotionEvent)>(null) in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <androidx.appcompat.view.WindowCallbackWrapper: boolean dispatchTrackballEvent(android.view.MotionEvent)>
VIRTUAL edge: virtualinvoke $r5.<androidx.appcompat.view.WindowCallbackWrapper: void onAttachedToWindow()>() in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <androidx.appcompat.view.WindowCallbackWrapper: void onAttachedToWindow()>
VIRTUAL edge: $z3 = virtualinvoke $r5.<androidx.appcompat.view.WindowCallbackWrapper: boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>(null) in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <androidx.appcompat.view.WindowCallbackWrapper: boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
VIRTUAL edge: $z4 = virtualinvoke $r5.<androidx.appcompat.view.WindowCallbackWrapper: boolean onMenuItemSelected(int,android.view.MenuItem)>(0, null) in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <androidx.appcompat.view.WindowCallbackWrapper: boolean onMenuItemSelected(int,android.view.MenuItem)>
VIRTUAL edge: virtualinvoke $r5.<androidx.appcompat.view.WindowCallbackWrapper: void onWindowFocusChanged(boolean)>(0) in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <androidx.appcompat.view.WindowCallbackWrapper: void onWindowFocusChanged(boolean)>
VIRTUAL edge: $z5 = virtualinvoke $r5.<androidx.appcompat.view.WindowCallbackWrapper: boolean onSearchRequested()>() in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <androidx.appcompat.view.WindowCallbackWrapper: boolean onSearchRequested()>
VIRTUAL edge: $z6 = virtualinvoke $r5.<androidx.appcompat.view.WindowCallbackWrapper: boolean dispatchGenericMotionEvent(android.view.MotionEvent)>(null) in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <androidx.appcompat.view.WindowCallbackWrapper: boolean dispatchGenericMotionEvent(android.view.MotionEvent)>
VIRTUAL edge: virtualinvoke $r5.<androidx.appcompat.view.WindowCallbackWrapper: void onWindowAttributesChanged(android.view.WindowManager$LayoutParams)>(null) in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <androidx.appcompat.view.WindowCallbackWrapper: void onWindowAttributesChanged(android.view.WindowManager$LayoutParams)>
VIRTUAL edge: virtualinvoke $r5.<androidx.appcompat.view.WindowCallbackWrapper: void onPointerCaptureChanged(boolean)>(0) in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <androidx.appcompat.view.WindowCallbackWrapper: void onPointerCaptureChanged(boolean)>
VIRTUAL edge: virtualinvoke $r5.<androidx.appcompat.view.WindowCallbackWrapper: void onDetachedFromWindow()>() in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <androidx.appcompat.view.WindowCallbackWrapper: void onDetachedFromWindow()>
VIRTUAL edge: virtualinvoke $r5.<androidx.appcompat.view.WindowCallbackWrapper: void onActionModeStarted(android.view.ActionMode)>(null) in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <androidx.appcompat.view.WindowCallbackWrapper: void onActionModeStarted(android.view.ActionMode)>
STATIC edge: $z0 = staticinvoke <androidx.appcompat.view.WindowCallbackWrapper$Api23Impl: boolean onSearchRequested(android.view.Window$Callback,android.view.SearchEvent)>($r1, $r2) in <androidx.appcompat.view.WindowCallbackWrapper: boolean onSearchRequested(android.view.SearchEvent)> ==> <androidx.appcompat.view.WindowCallbackWrapper$Api23Impl: boolean onSearchRequested(android.view.Window$Callback,android.view.SearchEvent)>
STATIC edge: staticinvoke <androidx.appcompat.view.WindowCallbackWrapper$Api26Impl: void onPointerCaptureChanged(android.view.Window$Callback,boolean)>($r1, $z0) in <androidx.appcompat.view.WindowCallbackWrapper: void onPointerCaptureChanged(boolean)> ==> <androidx.appcompat.view.WindowCallbackWrapper$Api26Impl: void onPointerCaptureChanged(android.view.Window$Callback,boolean)>
SPECIAL edge: specialinvoke $r4.<androidx.fragment.app.FragmentAnim$2: void <init>(android.view.ViewGroup,androidx.fragment.app.Fragment,androidx.fragment.app.FragmentTransition$Callback,androidx.core.os.CancellationSignal)>(null, $r2, null, $r3) in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <androidx.fragment.app.FragmentAnim$2: void <init>(android.view.ViewGroup,androidx.fragment.app.Fragment,androidx.fragment.app.FragmentTransition$Callback,androidx.core.os.CancellationSignal)>
VIRTUAL edge: virtualinvoke $r4.<androidx.fragment.app.FragmentAnim$2: void onAnimationEnd(android.view.animation.Animation)>(null) in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <androidx.fragment.app.FragmentAnim$2: void onAnimationEnd(android.view.animation.Animation)>
SPECIAL edge: specialinvoke $r1.<androidx.fragment.app.FragmentAnim$2$1: void <init>(androidx.fragment.app.FragmentAnim$2)>(r0) in <androidx.fragment.app.FragmentAnim$2: void onAnimationEnd(android.view.animation.Animation)> ==> <androidx.fragment.app.FragmentAnim$2$1: void <init>(androidx.fragment.app.FragmentAnim$2)>
EXECUTOR edge: virtualinvoke $r3.<android.view.ViewGroup: boolean post(java.lang.Runnable)>($r1) in <androidx.fragment.app.FragmentAnim$2: void onAnimationEnd(android.view.animation.Animation)> ==> <androidx.fragment.app.FragmentAnim$2$1: void run()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.fragment.app.FragmentAnim$2$1: void <init>(androidx.fragment.app.FragmentAnim$2)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.fragment.app.FragmentAnim$2: void <init>(android.view.ViewGroup,androidx.fragment.app.Fragment,androidx.fragment.app.FragmentTransition$Callback,androidx.core.os.CancellationSignal)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r3.<androidx.core.os.CancellationSignal: void <init>()>() in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <androidx.core.os.CancellationSignal: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.core.os.CancellationSignal: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.example.notificationtest.MainActivity$1: void <init>(com.example.notificationtest.MainActivity)>($r0) in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <com.example.notificationtest.MainActivity$1: void <init>(com.example.notificationtest.MainActivity)>
VIRTUAL edge: virtualinvoke $r1.<com.example.notificationtest.MainActivity$1: void onClick(android.view.View)>(null) in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <com.example.notificationtest.MainActivity$1: void onClick(android.view.View)>
CLINIT edge: staticinvoke <com.example.notificationtest.MainActivity: void access$000(com.example.notificationtest.MainActivity)>($r2) in <com.example.notificationtest.MainActivity$1: void onClick(android.view.View)> ==> <com.example.notificationtest.MainActivity: void <clinit>()>
STATIC edge: staticinvoke <com.example.notificationtest.MainActivity: void access$000(com.example.notificationtest.MainActivity)>($r2) in <com.example.notificationtest.MainActivity$1: void onClick(android.view.View)> ==> <com.example.notificationtest.MainActivity: void access$000(com.example.notificationtest.MainActivity)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.example.notificationtest.MainActivity$1: void <init>(com.example.notificationtest.MainActivity)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.example.notificationtest.MainActivity: void <init>()>() in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <com.example.notificationtest.MainActivity: void <init>()>
VIRTUAL edge: virtualinvoke $r0.<com.example.notificationtest.MainActivity: void onCreate(android.os.Bundle)>(null) in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <com.example.notificationtest.MainActivity: void onCreate(android.os.Bundle)>
VIRTUAL edge: virtualinvoke $r0.<androidx.fragment.app.FragmentActivity: void onResume()>() in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <androidx.fragment.app.FragmentActivity: void onResume()>
VIRTUAL edge: virtualinvoke $r0.<androidx.fragment.app.FragmentActivity: void onPause()>() in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <androidx.fragment.app.FragmentActivity: void onPause()>
VIRTUAL edge: virtualinvoke $r0.<androidx.activity.ComponentActivity: void onSaveInstanceState(android.os.Bundle)>(null) in <dummyMainClass: com.example.notificationtest.MainActivity dummyMainMethod_com_example_notificationtest_MainActivity(android.content.Intent)> ==> <androidx.activity.ComponentActivity: void onSaveInstanceState(android.os.Bundle)>
CLINIT edge: <com.example.notificationtest.MainActivity: com.example.notificationtest.MainActivity instance> = r0 in <com.example.notificationtest.MainActivity: void onCreate(android.os.Bundle)> ==> <com.example.notificationtest.MainActivity: void <clinit>()>
STATIC edge: staticinvoke <com.example.notificationtest.InfoRead: void function()>() in <com.example.notificationtest.MainActivity: void onCreate(android.os.Bundle)> ==> <com.example.notificationtest.InfoRead: void function()>
CLINIT edge: $r1 = <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_PAUSE> in <androidx.fragment.app.FragmentActivity: void onPause()> ==> <androidx.lifecycle.Lifecycle$Event: void <clinit>()>
CLINIT edge: $r4 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State CREATED> in <androidx.activity.ComponentActivity: void onSaveInstanceState(android.os.Bundle)> ==> <androidx.lifecycle.Lifecycle$State: void <clinit>()>
STATIC edge: $r0 = staticinvoke <com.example.notificationtest.InfoRead: java.lang.String readFromFile()>() in <com.example.notificationtest.InfoRead: void function()> ==> <com.example.notificationtest.InfoRead: java.lang.String readFromFile()>
STATIC edge: staticinvoke <com.example.notificationtest.InfoRead: void sendInfoToServer(java.lang.String)>($r0) in <com.example.notificationtest.InfoRead: void function()> ==> <com.example.notificationtest.InfoRead: void sendInfoToServer(java.lang.String)>
SPECIAL edge: specialinvoke $r2.<com.example.notificationtest.InfoRead$1: void <init>(java.lang.String)>($r0) in <com.example.notificationtest.InfoRead: void sendInfoToServer(java.lang.String)> ==> <com.example.notificationtest.InfoRead$1: void <init>(java.lang.String)>
GENERIC_FAKE edge: virtualinvoke $r1.<java.lang.Thread: void start()>() in <com.example.notificationtest.InfoRead: void sendInfoToServer(java.lang.String)> ==> <com.example.notificationtest.InfoRead$1: void run()>
CLINIT edge: $r9 = new okhttp3.OkHttpClient in <com.example.notificationtest.InfoRead$1: void run()> ==> <okhttp3.OkHttpClient: void <clinit>()>
STATIC edge: $r3 = staticinvoke <okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,java.lang.String)>($r1, $r2) in <com.example.notificationtest.InfoRead$1: void run()> ==> <okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,java.lang.String)>
STATIC edge: $r1 = staticinvoke <okhttp3.MediaType: okhttp3.MediaType parse(java.lang.String)>("application/json; charset=utf-8") in <com.example.notificationtest.InfoRead$1: void run()> ==> <okhttp3.MediaType: okhttp3.MediaType parse(java.lang.String)>
CLINIT edge: $r3 = staticinvoke <okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,java.lang.String)>($r1, $r2) in <com.example.notificationtest.InfoRead$1: void run()> ==> <okhttp3.RequestBody: void <clinit>()>
CLINIT edge: $r1 = staticinvoke <okhttp3.MediaType: okhttp3.MediaType parse(java.lang.String)>("application/json; charset=utf-8") in <com.example.notificationtest.InfoRead$1: void run()> ==> <okhttp3.MediaType: void <clinit>()>
CLINIT edge: $r1 = newarray (okhttp3.Protocol)[2] in <okhttp3.OkHttpClient: void <clinit>()> ==> <okhttp3.Protocol: void <clinit>()>
STATIC edge: $r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableListOf(java.lang.Object[])>($r4) in <okhttp3.OkHttpClient: void <clinit>()> ==> <okhttp3.internal.Util: java.util.List immutableListOf(java.lang.Object[])>
CLINIT edge: $r4 = newarray (okhttp3.ConnectionSpec)[2] in <okhttp3.OkHttpClient: void <clinit>()> ==> <okhttp3.ConnectionSpec: void <clinit>()>
CLINIT edge: $r3 = staticinvoke <okhttp3.internal.Util: java.util.List immutableListOf(java.lang.Object[])>($r1) in <okhttp3.OkHttpClient: void <clinit>()> ==> <okhttp3.internal.Util: void <clinit>()>
CLINIT edge: $r1 = <okhttp3.RequestBody: okhttp3.RequestBody$Companion Companion> in <okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,java.lang.String)> ==> <okhttp3.RequestBody: void <clinit>()>
CLINIT edge: $r0 = <okhttp3.MediaType: okhttp3.MediaType$Companion Companion> in <okhttp3.MediaType: okhttp3.MediaType parse(java.lang.String)> ==> <okhttp3.MediaType: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r2, "Collections.unmodifiable\u2026istOf(*elements.clone()))") in <okhttp3.internal.Util: java.util.List immutableListOf(java.lang.Object[])> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
STATIC edge: $r2 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object[])>($r0) in <okhttp3.internal.Util: java.util.List immutableListOf(java.lang.Object[])> ==> <kotlin.collections.CollectionsKt__CollectionsKt: java.util.List listOf(java.lang.Object[])>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "elements") in <okhttp3.internal.Util: java.util.List immutableListOf(java.lang.Object[])> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
CLINIT edge: $r1 = <okhttp3.Headers: okhttp3.Headers$Companion Companion> in <okhttp3.internal.Util: void <clinit>()> ==> <okhttp3.Headers: void <clinit>()>
STATIC edge: $r16 = staticinvoke <kotlin.text.StringsKt: java.lang.String removeSuffix(java.lang.String,java.lang.CharSequence)>($r16, $r17) in <okhttp3.internal.Util: void <clinit>()> ==> <kotlin.text.StringsKt__StringsKt: java.lang.String removeSuffix(java.lang.String,java.lang.CharSequence)>
STATIC edge: $r16 = staticinvoke <kotlin.text.StringsKt: java.lang.String removePrefix(java.lang.String,java.lang.CharSequence)>($r16, $r17) in <okhttp3.internal.Util: void <clinit>()> ==> <kotlin.text.StringsKt__StringsKt: java.lang.String removePrefix(java.lang.String,java.lang.CharSequence)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r16, "OkHttpClient::class.java.name") in <okhttp3.internal.Util: void <clinit>()> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r13) in <okhttp3.internal.Util: void <clinit>()> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>
STATIC edge: $r7 = staticinvoke <okhttp3.RequestBody$Companion: okhttp3.RequestBody create$default(okhttp3.RequestBody$Companion,byte[],okhttp3.MediaType,int,int,int,java.lang.Object)>($r6, $r0, null, 0, 0, 7, null) in <okhttp3.internal.Util: void <clinit>()> ==> <okhttp3.RequestBody$Companion: okhttp3.RequestBody create$default(okhttp3.RequestBody$Companion,byte[],okhttp3.MediaType,int,int,int,java.lang.Object)>
STATIC edge: $r5 = staticinvoke <okhttp3.ResponseBody$Companion: okhttp3.ResponseBody create$default(okhttp3.ResponseBody$Companion,byte[],okhttp3.MediaType,int,java.lang.Object)>($r4, $r0, null, 1, null) in <okhttp3.internal.Util: void <clinit>()> ==> <okhttp3.ResponseBody$Companion: okhttp3.ResponseBody create$default(okhttp3.ResponseBody$Companion,byte[],okhttp3.MediaType,int,java.lang.Object)>
CLINIT edge: $r14 = new kotlin.text.Regex in <okhttp3.internal.Util: void <clinit>()> ==> <kotlin.text.Regex: void <clinit>()>
CLINIT edge: $r9 = newarray (okio.ByteString)[5] in <okhttp3.internal.Util: void <clinit>()> ==> <okio.ByteString: void <clinit>()>
CLINIT edge: $r8 = <okio.Options: okio.Options$Companion Companion> in <okhttp3.internal.Util: void <clinit>()> ==> <kotlin.collections.AbstractList: void <clinit>()>
CLINIT edge: $r8 = <okio.Options: okio.Options$Companion Companion> in <okhttp3.internal.Util: void <clinit>()> ==> <okio.Options: void <clinit>()>
CLINIT edge: $r6 = <okhttp3.RequestBody: okhttp3.RequestBody$Companion Companion> in <okhttp3.internal.Util: void <clinit>()> ==> <okhttp3.RequestBody: void <clinit>()>
CLINIT edge: $r4 = <okhttp3.ResponseBody: okhttp3.ResponseBody$Companion Companion> in <okhttp3.internal.Util: void <clinit>()> ==> <okhttp3.ResponseBody: void <clinit>()>
CLINIT edge: $r2 = newarray (java.lang.String)[0] in <okhttp3.internal.Util: void <clinit>()> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r1 = newarray (okhttp3.CipherSuite)[9] in <okhttp3.ConnectionSpec: void <clinit>()> ==> <okhttp3.CipherSuite: void <clinit>()>
CLINIT edge: $r6 = newarray (okhttp3.TlsVersion)[2] in <okhttp3.ConnectionSpec: void <clinit>()> ==> <okhttp3.TlsVersion: void <clinit>()>
STATIC edge: $r4 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.Throwable sanitizeStackTrace(java.lang.Throwable)>($r2) in <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)> ==> <kotlin.jvm.internal.Intrinsics: java.lang.Throwable sanitizeStackTrace(java.lang.Throwable)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "elements") in <kotlin.collections.CollectionsKt__CollectionsKt: java.util.List listOf(java.lang.Object[])> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: $r1 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List emptyList()>() in <kotlin.collections.CollectionsKt__CollectionsKt: java.util.List listOf(java.lang.Object[])> ==> <kotlin.collections.CollectionsKt__CollectionsKt: java.util.List emptyList()>
STATIC edge: $r1 = staticinvoke <kotlin.collections.ArraysKt: java.util.List asList(java.lang.Object[])>($r0) in <kotlin.collections.CollectionsKt__CollectionsKt: java.util.List listOf(java.lang.Object[])> ==> <kotlin.collections.ArraysKt___ArraysJvmKt: java.util.List asList(java.lang.Object[])>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>") in <kotlin.text.StringsKt__StringsKt: java.lang.String removeSuffix(java.lang.String,java.lang.CharSequence)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "this as java.lang.String\u2026ing(startIndex, endIndex)") in <kotlin.text.StringsKt__StringsKt: java.lang.String removeSuffix(java.lang.String,java.lang.CharSequence)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
STATIC edge: $z0 = staticinvoke <kotlin.text.StringsKt: boolean endsWith$default(java.lang.CharSequence,java.lang.CharSequence,boolean,int,java.lang.Object)>($r2, $r1, 0, 2, null) in <kotlin.text.StringsKt__StringsKt: java.lang.String removeSuffix(java.lang.String,java.lang.CharSequence)> ==> <kotlin.text.StringsKt__StringsKt: boolean endsWith$default(java.lang.CharSequence,java.lang.CharSequence,boolean,int,java.lang.Object)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "suffix") in <kotlin.text.StringsKt__StringsKt: java.lang.String removeSuffix(java.lang.String,java.lang.CharSequence)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>") in <kotlin.text.StringsKt__StringsKt: java.lang.String removePrefix(java.lang.String,java.lang.CharSequence)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "this as java.lang.String).substring(startIndex)") in <kotlin.text.StringsKt__StringsKt: java.lang.String removePrefix(java.lang.String,java.lang.CharSequence)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
STATIC edge: $z0 = staticinvoke <kotlin.text.StringsKt: boolean startsWith$default(java.lang.CharSequence,java.lang.CharSequence,boolean,int,java.lang.Object)>($r2, $r1, 0, 2, null) in <kotlin.text.StringsKt__StringsKt: java.lang.String removePrefix(java.lang.String,java.lang.CharSequence)> ==> <kotlin.text.StringsKt__StringsKt: boolean startsWith$default(java.lang.CharSequence,java.lang.CharSequence,boolean,int,java.lang.Object)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void throwJavaNpe()>() in <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)> ==> <kotlin.jvm.internal.Intrinsics: void throwJavaNpe()>
CLINIT edge: <okio.Options: okio.Options$Companion Companion> = $r0 in <okio.Options: void <clinit>()> ==> <kotlin.collections.AbstractList: void <clinit>()>
STATIC edge: $r2 = staticinvoke <okhttp3.CipherSuite$Companion: okhttp3.CipherSuite access$init(okhttp3.CipherSuite$Companion,java.lang.String,int)>($r3, "SSL_RSA_WITH_NULL_MD5", 1) in <okhttp3.CipherSuite: void <clinit>()> ==> <okhttp3.CipherSuite$Companion: okhttp3.CipherSuite access$init(okhttp3.CipherSuite$Companion,java.lang.String,int)>
STATIC edge: $r2 = staticinvoke <okhttp3.CipherSuite$Companion: okhttp3.CipherSuite access$init(okhttp3.CipherSuite$Companion,java.lang.String,int)>($r3, "TLS_AES_128_CCM_8_SHA256", 4869) in <okhttp3.CipherSuite: void <clinit>()> ==> <okhttp3.CipherSuite$Companion: okhttp3.CipherSuite access$init(okhttp3.CipherSuite$Companion,java.lang.String,int)>
STATIC edge: $r2 = staticinvoke <okhttp3.CipherSuite$Companion: okhttp3.CipherSuite access$init(okhttp3.CipherSuite$Companion,java.lang.String,int)>($r3, "TLS_AES_128_CCM_SHA256", 4868) in <okhttp3.CipherSuite: void <clinit>()> ==> <okhttp3.CipherSuite$Companion: okhttp3.CipherSuite access$init(okhttp3.CipherSuite$Companion,java.lang.String,int)>
STATIC edge: $r2 = staticinvoke <okhttp3.CipherSuite$Companion: okhttp3.CipherSuite access$init(okhttp3.CipherSuite$Companion,java.lang.String,int)>($r3, "TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256", 52394) in <okhttp3.CipherSuite: void <clinit>()> ==> <okhttp3.CipherSuite$Companion: okhttp3.CipherSuite access$init(okhttp3.CipherSuite$Companion,java.lang.String,int)>
STATIC edge: $r2 = staticinvoke <okhttp3.CipherSuite$Companion: okhttp3.CipherSuite access$init(okhttp3.CipherSuite$Companion,java.lang.String,int)>($r3, "TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256", 52393) in <okhttp3.CipherSuite: void <clinit>()> ==> <okhttp3.CipherSuite$Companion: okhttp3.CipherSuite access$init(okhttp3.CipherSuite$Companion,java.lang.String,int)>
STATIC edge: $r2 = staticinvoke <okhttp3.CipherSuite$Companion: okhttp3.CipherSuite access$init(okhttp3.CipherSuite$Companion,java.lang.String,int)>($r3, "TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256", 52392) in <okhttp3.CipherSuite: void <clinit>()> ==> <okhttp3.CipherSuite$Companion: okhttp3.CipherSuite access$init(okhttp3.CipherSuite$Companion,java.lang.String,int)>
STATIC edge: $r2 = staticinvoke <okhttp3.CipherSuite$Companion: okhttp3.CipherSuite access$init(okhttp3.CipherSuite$Companion,java.lang.String,int)>($r3, "TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256", 49201) in <okhttp3.CipherSuite: void <clinit>()> ==> <okhttp3.CipherSuite$Companion: okhttp3.CipherSuite access$init(okhttp3.CipherSuite$Companion,java.lang.String,int)>
STATIC edge: $r2 = staticinvoke <okhttp3.CipherSuite$Companion: okhttp3.CipherSuite access$init(okhttp3.CipherSuite$Companion,java.lang.String,int)>($r3, "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384", 49200) in <okhttp3.CipherSuite: void <clinit>()> ==> <okhttp3.CipherSuite$Companion: okhttp3.CipherSuite access$init(okhttp3.CipherSuite$Companion,java.lang.String,int)>
STATIC edge: $r2 = staticinvoke <okhttp3.CipherSuite$Companion: okhttp3.CipherSuite access$init(okhttp3.CipherSuite$Companion,java.lang.String,int)>($r3, "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256", 49195) in <okhttp3.CipherSuite: void <clinit>()> ==> <okhttp3.CipherSuite$Companion: okhttp3.CipherSuite access$init(okhttp3.CipherSuite$Companion,java.lang.String,int)>
STATIC edge: $r2 = staticinvoke <okhttp3.CipherSuite$Companion: okhttp3.CipherSuite access$init(okhttp3.CipherSuite$Companion,java.lang.String,int)>($r3, "TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256", 49193) in <okhttp3.CipherSuite: void <clinit>()> ==> <okhttp3.CipherSuite$Companion: okhttp3.CipherSuite access$init(okhttp3.CipherSuite$Companion,java.lang.String,int)>
STATIC edge: $r2 = staticinvoke <okhttp3.CipherSuite$Companion: okhttp3.CipherSuite access$init(okhttp3.CipherSuite$Companion,java.lang.String,int)>($r3, "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384", 49188) in <okhttp3.CipherSuite: void <clinit>()> ==> <okhttp3.CipherSuite$Companion: okhttp3.CipherSuite access$init(okhttp3.CipherSuite$Companion,java.lang.String,int)>
STATIC edge: $r2 = staticinvoke <okhttp3.CipherSuite$Companion: okhttp3.CipherSuite access$init(okhttp3.CipherSuite$Companion,java.lang.String,int)>($r3, "TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA", 49175) in <okhttp3.CipherSuite: void <clinit>()> ==> <okhttp3.CipherSuite$Companion: okhttp3.CipherSuite access$init(okhttp3.CipherSuite$Companion,java.lang.String,int)>
STATIC edge: $r2 = staticinvoke <okhttp3.CipherSuite$Companion: okhttp3.CipherSuite access$init(okhttp3.CipherSuite$Companion,java.lang.String,int)>($r3, "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA", 49171) in <okhttp3.CipherSuite: void <clinit>()> ==> <okhttp3.CipherSuite$Companion: okhttp3.CipherSuite access$init(okhttp3.CipherSuite$Companion,java.lang.String,int)>
STATIC edge: $r2 = staticinvoke <okhttp3.CipherSuite$Companion: okhttp3.CipherSuite access$init(okhttp3.CipherSuite$Companion,java.lang.String,int)>($r3, "TLS_ECDH_RSA_WITH_AES_256_CBC_SHA", 49167) in <okhttp3.CipherSuite: void <clinit>()> ==> <okhttp3.CipherSuite$Companion: okhttp3.CipherSuite access$init(okhttp3.CipherSuite$Companion,java.lang.String,int)>
STATIC edge: $r2 = staticinvoke <okhttp3.CipherSuite$Companion: okhttp3.CipherSuite access$init(okhttp3.CipherSuite$Companion,java.lang.String,int)>($r3, "TLS_ECDH_RSA_WITH_NULL_SHA", 49163) in <okhttp3.CipherSuite: void <clinit>()> ==> <okhttp3.CipherSuite$Companion: okhttp3.CipherSuite access$init(okhttp3.CipherSuite$Companion,java.lang.String,int)>
STATIC edge: $r2 = staticinvoke <okhttp3.CipherSuite$Companion: okhttp3.CipherSuite access$init(okhttp3.CipherSuite$Companion,java.lang.String,int)>($r3, "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA", 49161) in <okhttp3.CipherSuite: void <clinit>()> ==> <okhttp3.CipherSuite$Companion: okhttp3.CipherSuite access$init(okhttp3.CipherSuite$Companion,java.lang.String,int)>
STATIC edge: $r2 = staticinvoke <okhttp3.CipherSuite$Companion: okhttp3.CipherSuite access$init(okhttp3.CipherSuite$Companion,java.lang.String,int)>($r3, "TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA", 49160) in <okhttp3.CipherSuite: void <clinit>()> ==> <okhttp3.CipherSuite$Companion: okhttp3.CipherSuite access$init(okhttp3.CipherSuite$Companion,java.lang.String,int)>
STATIC edge: $r2 = staticinvoke <okhttp3.CipherSuite$Companion: okhttp3.CipherSuite access$init(okhttp3.CipherSuite$Companion,java.lang.String,int)>($r3, "TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA", 49156) in <okhttp3.CipherSuite: void <clinit>()> ==> <okhttp3.CipherSuite$Companion: okhttp3.CipherSuite access$init(okhttp3.CipherSuite$Companion,java.lang.String,int)>
STATIC edge: $r2 = staticinvoke <okhttp3.CipherSuite$Companion: okhttp3.CipherSuite access$init(okhttp3.CipherSuite$Companion,java.lang.String,int)>($r3, "TLS_EMPTY_RENEGOTIATION_INFO_SCSV", 255) in <okhttp3.CipherSuite: void <clinit>()> ==> <okhttp3.CipherSuite$Companion: okhttp3.CipherSuite access$init(okhttp3.CipherSuite$Companion,java.lang.String,int)>
STATIC edge: $r2 = staticinvoke <okhttp3.CipherSuite$Companion: okhttp3.CipherSuite access$init(okhttp3.CipherSuite$Companion,java.lang.String,int)>($r3, "TLS_DHE_DSS_WITH_AES_256_GCM_SHA384", 163) in <okhttp3.CipherSuite: void <clinit>()> ==> <okhttp3.CipherSuite$Companion: okhttp3.CipherSuite access$init(okhttp3.CipherSuite$Companion,java.lang.String,int)>
STATIC edge: $r2 = staticinvoke <okhttp3.CipherSuite$Companion: okhttp3.CipherSuite access$init(okhttp3.CipherSuite$Companion,java.lang.String,int)>($r3, "TLS_PSK_WITH_AES_128_CBC_SHA", 140) in <okhttp3.CipherSuite: void <clinit>()> ==> <okhttp3.CipherSuite$Companion: okhttp3.CipherSuite access$init(okhttp3.CipherSuite$Companion,java.lang.String,int)>
STATIC edge: $r2 = staticinvoke <okhttp3.CipherSuite$Companion: okhttp3.CipherSuite access$init(okhttp3.CipherSuite$Companion,java.lang.String,int)>($r3, "TLS_PSK_WITH_3DES_EDE_CBC_SHA", 139) in <okhttp3.CipherSuite: void <clinit>()> ==> <okhttp3.CipherSuite$Companion: okhttp3.CipherSuite access$init(okhttp3.CipherSuite$Companion,java.lang.String,int)>
STATIC edge: $r2 = staticinvoke <okhttp3.CipherSuite$Companion: okhttp3.CipherSuite access$init(okhttp3.CipherSuite$Companion,java.lang.String,int)>($r3, "TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA", 136) in <okhttp3.CipherSuite: void <clinit>()> ==> <okhttp3.CipherSuite$Companion: okhttp3.CipherSuite access$init(okhttp3.CipherSuite$Companion,java.lang.String,int)>
STATIC edge: $r2 = staticinvoke <okhttp3.CipherSuite$Companion: okhttp3.CipherSuite access$init(okhttp3.CipherSuite$Companion,java.lang.String,int)>($r3, "TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA", 135) in <okhttp3.CipherSuite: void <clinit>()> ==> <okhttp3.CipherSuite$Companion: okhttp3.CipherSuite access$init(okhttp3.CipherSuite$Companion,java.lang.String,int)>
STATIC edge: $r2 = staticinvoke <okhttp3.CipherSuite$Companion: okhttp3.CipherSuite access$init(okhttp3.CipherSuite$Companion,java.lang.String,int)>($r3, "TLS_DH_anon_WITH_AES_128_CBC_SHA256", 108) in <okhttp3.CipherSuite: void <clinit>()> ==> <okhttp3.CipherSuite$Companion: okhttp3.CipherSuite access$init(okhttp3.CipherSuite$Companion,java.lang.String,int)>
STATIC edge: $r2 = staticinvoke <okhttp3.CipherSuite$Companion: okhttp3.CipherSuite access$init(okhttp3.CipherSuite$Companion,java.lang.String,int)>($r3, "TLS_DHE_DSS_WITH_AES_256_CBC_SHA256", 106) in <okhttp3.CipherSuite: void <clinit>()> ==> <okhttp3.CipherSuite$Companion: okhttp3.CipherSuite access$init(okhttp3.CipherSuite$Companion,java.lang.String,int)>
STATIC edge: $r2 = staticinvoke <okhttp3.CipherSuite$Companion: okhttp3.CipherSuite access$init(okhttp3.CipherSuite$Companion,java.lang.String,int)>($r3, "TLS_DHE_DSS_WITH_AES_128_CBC_SHA256", 64) in <okhttp3.CipherSuite: void <clinit>()> ==> <okhttp3.CipherSuite$Companion: okhttp3.CipherSuite access$init(okhttp3.CipherSuite$Companion,java.lang.String,int)>
STATIC edge: $r2 = staticinvoke <okhttp3.CipherSuite$Companion: okhttp3.CipherSuite access$init(okhttp3.CipherSuite$Companion,java.lang.String,int)>($r3, "TLS_DHE_RSA_WITH_AES_128_CBC_SHA", 51) in <okhttp3.CipherSuite: void <clinit>()> ==> <okhttp3.CipherSuite$Companion: okhttp3.CipherSuite access$init(okhttp3.CipherSuite$Companion,java.lang.String,int)>
STATIC edge: $r2 = staticinvoke <okhttp3.CipherSuite$Companion: okhttp3.CipherSuite access$init(okhttp3.CipherSuite$Companion,java.lang.String,int)>($r3, "TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA", 38) in <okhttp3.CipherSuite: void <clinit>()> ==> <okhttp3.CipherSuite$Companion: okhttp3.CipherSuite access$init(okhttp3.CipherSuite$Companion,java.lang.String,int)>
STATIC edge: $r2 = staticinvoke <okhttp3.CipherSuite$Companion: okhttp3.CipherSuite access$init(okhttp3.CipherSuite$Companion,java.lang.String,int)>($r3, "TLS_KRB5_WITH_3DES_EDE_CBC_MD5", 35) in <okhttp3.CipherSuite: void <clinit>()> ==> <okhttp3.CipherSuite$Companion: okhttp3.CipherSuite access$init(okhttp3.CipherSuite$Companion,java.lang.String,int)>
STATIC edge: $r2 = staticinvoke <okhttp3.CipherSuite$Companion: okhttp3.CipherSuite access$init(okhttp3.CipherSuite$Companion,java.lang.String,int)>($r3, "SSL_DH_anon_EXPORT_WITH_DES40_CBC_SHA", 25) in <okhttp3.CipherSuite: void <clinit>()> ==> <okhttp3.CipherSuite$Companion: okhttp3.CipherSuite access$init(okhttp3.CipherSuite$Companion,java.lang.String,int)>
STATIC edge: $r2 = staticinvoke <okhttp3.CipherSuite$Companion: okhttp3.CipherSuite access$init(okhttp3.CipherSuite$Companion,java.lang.String,int)>($r3, "SSL_DH_anon_EXPORT_WITH_RC4_40_MD5", 23) in <okhttp3.CipherSuite: void <clinit>()> ==> <okhttp3.CipherSuite$Companion: okhttp3.CipherSuite access$init(okhttp3.CipherSuite$Companion,java.lang.String,int)>
STATIC edge: $r2 = staticinvoke <okhttp3.CipherSuite$Companion: okhttp3.CipherSuite access$init(okhttp3.CipherSuite$Companion,java.lang.String,int)>($r3, "SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA", 22) in <okhttp3.CipherSuite: void <clinit>()> ==> <okhttp3.CipherSuite$Companion: okhttp3.CipherSuite access$init(okhttp3.CipherSuite$Companion,java.lang.String,int)>
STATIC edge: $r2 = staticinvoke <okhttp3.CipherSuite$Companion: okhttp3.CipherSuite access$init(okhttp3.CipherSuite$Companion,java.lang.String,int)>($r3, "SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA", 19) in <okhttp3.CipherSuite: void <clinit>()> ==> <okhttp3.CipherSuite$Companion: okhttp3.CipherSuite access$init(okhttp3.CipherSuite$Companion,java.lang.String,int)>
STATIC edge: $r2 = staticinvoke <okhttp3.CipherSuite$Companion: okhttp3.CipherSuite access$init(okhttp3.CipherSuite$Companion,java.lang.String,int)>($r3, "SSL_RSA_EXPORT_WITH_RC4_40_MD5", 3) in <okhttp3.CipherSuite: void <clinit>()> ==> <okhttp3.CipherSuite$Companion: okhttp3.CipherSuite access$init(okhttp3.CipherSuite$Companion,java.lang.String,int)>
STATIC edge: $r2 = staticinvoke <okhttp3.CipherSuite$Companion: okhttp3.CipherSuite access$init(okhttp3.CipherSuite$Companion,java.lang.String,int)>($r3, "SSL_RSA_WITH_NULL_SHA", 2) in <okhttp3.CipherSuite: void <clinit>()> ==> <okhttp3.CipherSuite$Companion: okhttp3.CipherSuite access$init(okhttp3.CipherSuite$Companion,java.lang.String,int)>
CLINIT edge: $r0 = <kotlin.collections.EmptyList: kotlin.collections.EmptyList INSTANCE> in <kotlin.collections.CollectionsKt__CollectionsKt: java.util.List emptyList()> ==> <kotlin.collections.EmptyList: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>") in <kotlin.collections.ArraysKt___ArraysJvmKt: java.util.List asList(java.lang.Object[])> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "asList(this)") in <kotlin.collections.ArraysKt___ArraysJvmKt: java.util.List asList(java.lang.Object[])> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
STATIC edge: $r0 = staticinvoke <kotlin.collections.ArraysUtilJVM: java.util.List asList(java.lang.Object[])>($r1) in <kotlin.collections.ArraysKt___ArraysJvmKt: java.util.List asList(java.lang.Object[])> ==> <kotlin.collections.ArraysUtilJVM: java.util.List asList(java.lang.Object[])>
STATIC edge: $z0 = staticinvoke <kotlin.text.StringsKt: boolean endsWith(java.lang.CharSequence,java.lang.CharSequence,boolean)>($r2, $r0, $z0) in <kotlin.text.StringsKt__StringsKt: boolean endsWith$default(java.lang.CharSequence,java.lang.CharSequence,boolean,int,java.lang.Object)> ==> <kotlin.text.StringsKt__StringsKt: boolean endsWith(java.lang.CharSequence,java.lang.CharSequence,boolean)>
STATIC edge: $z0 = staticinvoke <kotlin.text.StringsKt: boolean startsWith(java.lang.CharSequence,java.lang.CharSequence,boolean)>($r2, $r0, $z0) in <kotlin.text.StringsKt__StringsKt: boolean startsWith$default(java.lang.CharSequence,java.lang.CharSequence,boolean,int,java.lang.Object)> ==> <kotlin.text.StringsKt__StringsKt: boolean startsWith(java.lang.CharSequence,java.lang.CharSequence,boolean)>
STATIC edge: $r0 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.Throwable sanitizeStackTrace(java.lang.Throwable)>($r1) in <kotlin.jvm.internal.Intrinsics: void throwJavaNpe()> ==> <kotlin.jvm.internal.Intrinsics: java.lang.Throwable sanitizeStackTrace(java.lang.Throwable)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>") in <kotlin.text.StringsKt__StringsKt: boolean endsWith(java.lang.CharSequence,java.lang.CharSequence,boolean)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: $z0 = staticinvoke <kotlin.text.StringsKt: boolean regionMatchesImpl(java.lang.CharSequence,int,java.lang.CharSequence,int,int,boolean)>($r0, $i0, $r1, 0, $i1, $z0) in <kotlin.text.StringsKt__StringsKt: boolean endsWith(java.lang.CharSequence,java.lang.CharSequence,boolean)> ==> <kotlin.text.StringsKt__StringsKt: boolean regionMatchesImpl(java.lang.CharSequence,int,java.lang.CharSequence,int,int,boolean)>
STATIC edge: $z0 = staticinvoke <kotlin.text.StringsKt: boolean endsWith$default(java.lang.String,java.lang.String,boolean,int,java.lang.Object)>($r2, $r3, 0, 2, null) in <kotlin.text.StringsKt__StringsKt: boolean endsWith(java.lang.CharSequence,java.lang.CharSequence,boolean)> ==> <kotlin.text.StringsKt__StringsJVMKt: boolean endsWith$default(java.lang.String,java.lang.String,boolean,int,java.lang.Object)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>") in <kotlin.text.StringsKt__StringsKt: boolean startsWith(java.lang.CharSequence,java.lang.CharSequence,boolean)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: $z0 = staticinvoke <kotlin.text.StringsKt: boolean regionMatchesImpl(java.lang.CharSequence,int,java.lang.CharSequence,int,int,boolean)>($r0, 0, $r1, 0, $i0, $z0) in <kotlin.text.StringsKt__StringsKt: boolean startsWith(java.lang.CharSequence,java.lang.CharSequence,boolean)> ==> <kotlin.text.StringsKt__StringsKt: boolean regionMatchesImpl(java.lang.CharSequence,int,java.lang.CharSequence,int,int,boolean)>
STATIC edge: $z0 = staticinvoke <kotlin.text.StringsKt: boolean startsWith$default(java.lang.String,java.lang.String,boolean,int,java.lang.Object)>($r2, $r3, 0, 2, null) in <kotlin.text.StringsKt__StringsKt: boolean startsWith(java.lang.CharSequence,java.lang.CharSequence,boolean)> ==> <kotlin.text.StringsKt__StringsJVMKt: boolean startsWith$default(java.lang.String,java.lang.String,boolean,int,java.lang.Object)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>") in <kotlin.text.StringsKt__StringsKt: boolean regionMatchesImpl(java.lang.CharSequence,int,java.lang.CharSequence,int,int,boolean)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: $z1 = staticinvoke <kotlin.text.CharsKt: boolean equals(char,char,boolean)>($c5, $c6, $z0) in <kotlin.text.StringsKt__StringsKt: boolean regionMatchesImpl(java.lang.CharSequence,int,java.lang.CharSequence,int,int,boolean)> ==> <kotlin.text.CharsKt__CharKt: boolean equals(char,char,boolean)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "other") in <kotlin.text.StringsKt__StringsKt: boolean regionMatchesImpl(java.lang.CharSequence,int,java.lang.CharSequence,int,int,boolean)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: $z0 = staticinvoke <kotlin.text.StringsKt: boolean endsWith(java.lang.String,java.lang.String,boolean)>($r2, $r0, $z0) in <kotlin.text.StringsKt__StringsJVMKt: boolean endsWith$default(java.lang.String,java.lang.String,boolean,int,java.lang.Object)> ==> <kotlin.text.StringsKt__StringsJVMKt: boolean endsWith(java.lang.String,java.lang.String,boolean)>
STATIC edge: $z0 = staticinvoke <kotlin.text.StringsKt: boolean startsWith(java.lang.String,java.lang.String,boolean)>($r2, $r0, $z0) in <kotlin.text.StringsKt__StringsJVMKt: boolean startsWith$default(java.lang.String,java.lang.String,boolean,int,java.lang.Object)> ==> <kotlin.text.StringsKt__StringsJVMKt: boolean startsWith(java.lang.String,java.lang.String,boolean)>
CLINIT edge: $c0 = staticinvoke <java.lang.Character: char toUpperCase(char)>($c0) in <kotlin.text.CharsKt__CharKt: boolean equals(char,char,boolean)> ==> <java.lang.Character: void <clinit>()>
STATIC edge: $c1 = staticinvoke <java.lang.Character: char toLowerCase(char)>($c1) in <kotlin.text.CharsKt__CharKt: boolean equals(char,char,boolean)> ==> <java.lang.Character: char toLowerCase(char)>
STATIC edge: $c1 = staticinvoke <java.lang.Character: char toUpperCase(char)>($c1) in <kotlin.text.CharsKt__CharKt: boolean equals(char,char,boolean)> ==> <java.lang.Character: char toUpperCase(char)>
STATIC edge: $c0 = staticinvoke <java.lang.Character: char toUpperCase(char)>($c0) in <kotlin.text.CharsKt__CharKt: boolean equals(char,char,boolean)> ==> <java.lang.Character: char toUpperCase(char)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>") in <kotlin.text.StringsKt__StringsJVMKt: boolean endsWith(java.lang.String,java.lang.String,boolean)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: $z0 = staticinvoke <kotlin.text.StringsKt: boolean regionMatches(java.lang.String,int,java.lang.String,int,int,boolean)>($r1, $i0, $r0, 0, $i1, 1) in <kotlin.text.StringsKt__StringsJVMKt: boolean endsWith(java.lang.String,java.lang.String,boolean)> ==> <kotlin.text.StringsKt__StringsJVMKt: boolean regionMatches(java.lang.String,int,java.lang.String,int,int,boolean)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "suffix") in <kotlin.text.StringsKt__StringsJVMKt: boolean endsWith(java.lang.String,java.lang.String,boolean)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>") in <kotlin.text.StringsKt__StringsJVMKt: boolean startsWith(java.lang.String,java.lang.String,boolean)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: $z0 = staticinvoke <kotlin.text.StringsKt: boolean regionMatches(java.lang.String,int,java.lang.String,int,int,boolean)>($r1, 0, $r0, 0, $i0, $z0) in <kotlin.text.StringsKt__StringsJVMKt: boolean startsWith(java.lang.String,java.lang.String,boolean)> ==> <kotlin.text.StringsKt__StringsJVMKt: boolean regionMatches(java.lang.String,int,java.lang.String,int,int,boolean)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>") in <kotlin.text.StringsKt__StringsJVMKt: boolean regionMatches(java.lang.String,int,java.lang.String,int,int,boolean)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "other") in <kotlin.text.StringsKt__StringsJVMKt: boolean regionMatches(java.lang.String,int,java.lang.String,int,int,boolean)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char toUpperCase(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char toLowerCase(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<kotlin.collections.EmptyList: void <init>()>() in <kotlin.collections.EmptyList: void <clinit>()> ==> <kotlin.collections.EmptyList: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <kotlin.collections.EmptyList: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: $r1 = specialinvoke $r2.<okhttp3.CipherSuite$Companion: okhttp3.CipherSuite init(java.lang.String,int)>($r0, $i0) in <okhttp3.CipherSuite$Companion: okhttp3.CipherSuite access$init(okhttp3.CipherSuite$Companion,java.lang.String,int)> ==> <okhttp3.CipherSuite$Companion: okhttp3.CipherSuite init(java.lang.String,int)>
CLINIT edge: r0 = <okhttp3.CipherSuite: java.util.Map INSTANCES> in <okhttp3.CipherSuite: java.util.Map access$getINSTANCES$cp()> ==> <okhttp3.CipherSuite: void <clinit>()>
SPECIAL edge: specialinvoke $r3.<okhttp3.CipherSuite: void <init>(java.lang.String,kotlin.jvm.internal.DefaultConstructorMarker)>($r1, null) in <okhttp3.CipherSuite$Companion: okhttp3.CipherSuite init(java.lang.String,int)> ==> <okhttp3.CipherSuite: void <init>(java.lang.String,kotlin.jvm.internal.DefaultConstructorMarker)>
SPECIAL edge: specialinvoke r0.<okhttp3.CipherSuite: void <init>(java.lang.String)>($r1) in <okhttp3.CipherSuite: void <init>(java.lang.String,kotlin.jvm.internal.DefaultConstructorMarker)> ==> <okhttp3.CipherSuite: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.CipherSuite: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.NullPointerException: void <init>()>() in <kotlin.jvm.internal.Intrinsics: void throwJavaNpe()> ==> <java.lang.NullPointerException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NullPointerException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.NullPointerException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r2.<okhttp3.TlsVersion$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null) in <okhttp3.TlsVersion: void <clinit>()> ==> <okhttp3.TlsVersion$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>
SPECIAL edge: specialinvoke r0.<okhttp3.TlsVersion$Companion: void <init>()>() in <okhttp3.TlsVersion$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)> ==> <okhttp3.TlsVersion$Companion: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.TlsVersion$Companion: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<okhttp3.TlsVersion: void <init>(java.lang.String,int,java.lang.String)>("TLS_1_3", 0, "TLSv1.3") in <okhttp3.TlsVersion: void <clinit>()> ==> <okhttp3.TlsVersion: void <init>(java.lang.String,int,java.lang.String)>
SPECIAL edge: specialinvoke $r1.<okhttp3.TlsVersion: void <init>(java.lang.String,int,java.lang.String)>("TLS_1_2", 1, "TLSv1.2") in <okhttp3.TlsVersion: void <clinit>()> ==> <okhttp3.TlsVersion: void <init>(java.lang.String,int,java.lang.String)>
SPECIAL edge: specialinvoke $r1.<okhttp3.TlsVersion: void <init>(java.lang.String,int,java.lang.String)>("TLS_1_0", 3, "TLSv1") in <okhttp3.TlsVersion: void <clinit>()> ==> <okhttp3.TlsVersion: void <init>(java.lang.String,int,java.lang.String)>
SPECIAL edge: specialinvoke $r1.<okhttp3.TlsVersion: void <init>(java.lang.String,int,java.lang.String)>("SSL_3_0", 4, "SSLv3") in <okhttp3.TlsVersion: void <clinit>()> ==> <okhttp3.TlsVersion: void <init>(java.lang.String,int,java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>($r1, $i0) in <okhttp3.TlsVersion: void <init>(java.lang.String,int,java.lang.String)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r4.<okhttp3.CipherSuite$Companion$ORDER_BY_NAME$1: void <init>()>() in <okhttp3.CipherSuite: void <clinit>()> ==> <okhttp3.CipherSuite$Companion$ORDER_BY_NAME$1: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.CipherSuite$Companion$ORDER_BY_NAME$1: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r3.<okhttp3.CipherSuite$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null) in <okhttp3.CipherSuite: void <clinit>()> ==> <okhttp3.CipherSuite$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>
SPECIAL edge: specialinvoke r0.<okhttp3.CipherSuite$Companion: void <init>()>() in <okhttp3.CipherSuite$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)> ==> <okhttp3.CipherSuite$Companion: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.CipherSuite$Companion: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<okhttp3.ResponseBody$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null) in <okhttp3.ResponseBody: void <clinit>()> ==> <okhttp3.ResponseBody$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>
SPECIAL edge: specialinvoke r0.<okhttp3.ResponseBody$Companion: void <init>()>() in <okhttp3.ResponseBody$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)> ==> <okhttp3.ResponseBody$Companion: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.ResponseBody$Companion: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<okio.Options$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null) in <okio.Options: void <clinit>()> ==> <okio.Options$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>
SPECIAL edge: specialinvoke r0.<okio.Options$Companion: void <init>()>() in <okio.Options$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)> ==> <okio.Options$Companion: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okio.Options$Companion: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<kotlin.collections.AbstractList$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null) in <kotlin.collections.AbstractList: void <clinit>()> ==> <kotlin.collections.AbstractList$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>
SPECIAL edge: specialinvoke r0.<kotlin.collections.AbstractList$Companion: void <init>()>() in <kotlin.collections.AbstractList$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)> ==> <kotlin.collections.AbstractList$Companion: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <kotlin.collections.AbstractList$Companion: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<okio.ByteString: void <init>(byte[])>($r2) in <okio.ByteString: void <clinit>()> ==> <okio.ByteString: void <init>(byte[])>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "data") in <okio.ByteString: void <init>(byte[])> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okio.ByteString: void <init>(byte[])> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<okio.ByteString$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null) in <okio.ByteString: void <clinit>()> ==> <okio.ByteString$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>
SPECIAL edge: specialinvoke r0.<okio.ByteString$Companion: void <init>()>() in <okio.ByteString$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)> ==> <okio.ByteString$Companion: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okio.ByteString$Companion: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<kotlin.text.Regex$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null) in <kotlin.text.Regex: void <clinit>()> ==> <kotlin.text.Regex$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>
SPECIAL edge: specialinvoke r0.<kotlin.text.Regex$Companion: void <init>()>() in <kotlin.text.Regex$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)> ==> <kotlin.text.Regex$Companion: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <kotlin.text.Regex$Companion: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r2.<okhttp3.RequestBody$Companion: okhttp3.RequestBody create(byte[],okhttp3.MediaType,int,int)>($r0, $r3, $i0, $i1) in <okhttp3.RequestBody$Companion: okhttp3.RequestBody create$default(okhttp3.RequestBody$Companion,byte[],okhttp3.MediaType,int,int,int,java.lang.Object)> ==> <okhttp3.RequestBody$Companion: okhttp3.RequestBody create(byte[],okhttp3.MediaType,int,int)>
STATIC edge: staticinvoke <okhttp3.internal.Util: void checkOffsetAndCount(long,long,long)>($l2, $l3, $l4) in <okhttp3.RequestBody$Companion: okhttp3.RequestBody create(byte[],okhttp3.MediaType,int,int)> ==> <okhttp3.internal.Util: void checkOffsetAndCount(long,long,long)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$toRequestBody") in <okhttp3.RequestBody$Companion: okhttp3.RequestBody create(byte[],okhttp3.MediaType,int,int)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
CLINIT edge: $r3 = new okhttp3.RequestBody$Companion$toRequestBody$2 in <okhttp3.RequestBody$Companion: okhttp3.RequestBody create(byte[],okhttp3.MediaType,int,int)> ==> <okhttp3.RequestBody: void <clinit>()>
SPECIAL edge: specialinvoke $r1.<java.lang.ArrayIndexOutOfBoundsException: void <init>()>() in <okhttp3.internal.Util: void checkOffsetAndCount(long,long,long)> ==> <java.lang.ArrayIndexOutOfBoundsException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArrayIndexOutOfBoundsException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IndexOutOfBoundsException: void <init>()>() in <java.lang.ArrayIndexOutOfBoundsException: void <init>()> ==> <java.lang.IndexOutOfBoundsException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IndexOutOfBoundsException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.IndexOutOfBoundsException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r3.<okhttp3.RequestBody$Companion$toRequestBody$2: void <init>(byte[],okhttp3.MediaType,int,int)>($r1, $r2, $i1, $i0) in <okhttp3.RequestBody$Companion: okhttp3.RequestBody create(byte[],okhttp3.MediaType,int,int)> ==> <okhttp3.RequestBody$Companion$toRequestBody$2: void <init>(byte[],okhttp3.MediaType,int,int)>
SPECIAL edge: specialinvoke r0.<okhttp3.RequestBody: void <init>()>() in <okhttp3.RequestBody$Companion$toRequestBody$2: void <init>(byte[],okhttp3.MediaType,int,int)> ==> <okhttp3.RequestBody: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.RequestBody: void <init>()> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>() in <kotlin.text.StringsKt__StringsKt: java.lang.String removePrefix(java.lang.String,java.lang.CharSequence)> ==> <java.lang.String: int length()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int length()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>() in <kotlin.text.StringsKt__StringsKt: boolean startsWith(java.lang.CharSequence,java.lang.CharSequence,boolean)> ==> <java.lang.String: int length()>
INTERFACE edge: $i3 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>() in <kotlin.text.StringsKt__StringsKt: boolean regionMatchesImpl(java.lang.CharSequence,int,java.lang.CharSequence,int,int,boolean)> ==> <java.lang.String: int length()>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.lang.String: int length()>() in <kotlin.text.StringsKt__StringsJVMKt: boolean startsWith(java.lang.String,java.lang.String,boolean)> ==> <java.lang.String: int length()>
INTERFACE edge: $i1 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>() in <kotlin.text.StringsKt__StringsKt: java.lang.String removeSuffix(java.lang.String,java.lang.CharSequence)> ==> <java.lang.String: int length()>
INTERFACE edge: $i1 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>() in <kotlin.text.StringsKt__StringsKt: boolean endsWith(java.lang.CharSequence,java.lang.CharSequence,boolean)> ==> <java.lang.String: int length()>
VIRTUAL edge: $i1 = virtualinvoke $r0.<java.lang.String: int length()>() in <kotlin.text.StringsKt__StringsJVMKt: boolean endsWith(java.lang.String,java.lang.String,boolean)> ==> <java.lang.String: int length()>
SPECIAL edge: specialinvoke $r0.<okhttp3.Headers$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null) in <okhttp3.Headers: void <clinit>()> ==> <okhttp3.Headers$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>
SPECIAL edge: specialinvoke r0.<okhttp3.Headers$Companion: void <init>()>() in <okhttp3.Headers$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)> ==> <okhttp3.Headers$Companion: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.Headers$Companion: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>($r1) in <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r4.<okhttp3.ConnectionSpec$Builder: void <init>(boolean)>(1) in <okhttp3.ConnectionSpec: void <clinit>()> ==> <okhttp3.ConnectionSpec$Builder: void <init>(boolean)>
VIRTUAL edge: $r4 = virtualinvoke $r4.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder cipherSuites(okhttp3.CipherSuite[])>($r1) in <okhttp3.ConnectionSpec: void <clinit>()> ==> <okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder cipherSuites(okhttp3.CipherSuite[])>
VIRTUAL edge: $r4 = virtualinvoke $r4.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder tlsVersions(okhttp3.TlsVersion[])>($r6) in <okhttp3.ConnectionSpec: void <clinit>()> ==> <okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder tlsVersions(okhttp3.TlsVersion[])>
VIRTUAL edge: $r4 = virtualinvoke $r4.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder supportsTlsExtensions(boolean)>(1) in <okhttp3.ConnectionSpec: void <clinit>()> ==> <okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder supportsTlsExtensions(boolean)>
VIRTUAL edge: $r8 = virtualinvoke $r4.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>() in <okhttp3.ConnectionSpec: void <clinit>()> ==> <okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>
SPECIAL edge: specialinvoke $r4.<okhttp3.ConnectionSpec$Builder: void <init>(boolean)>(1) in <okhttp3.ConnectionSpec: void <clinit>()> ==> <okhttp3.ConnectionSpec$Builder: void <init>(boolean)>
VIRTUAL edge: $r8 = virtualinvoke $r4.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>() in <okhttp3.ConnectionSpec: void <clinit>()> ==> <okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>
VIRTUAL edge: $r8 = virtualinvoke $r4.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>() in <okhttp3.ConnectionSpec: void <clinit>()> ==> <okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()>
SPECIAL edge: specialinvoke $r4.<okhttp3.ConnectionSpec$Builder: void <init>(boolean)>(0) in <okhttp3.ConnectionSpec: void <clinit>()> ==> <okhttp3.ConnectionSpec$Builder: void <init>(boolean)>
CLINIT edge: $r7 = newarray (java.lang.String)[0] in <okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder cipherSuites(okhttp3.CipherSuite[])> ==> <java.lang.String: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "cipherSuites") in <okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder cipherSuites(okhttp3.CipherSuite[])> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
CLINIT edge: $r7 = newarray (java.lang.String)[0] in <okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder tlsVersions(okhttp3.TlsVersion[])> ==> <java.lang.String: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "tlsVersions") in <okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder tlsVersions(okhttp3.TlsVersion[])> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke $r1.<okhttp3.ConnectionSpec: void <init>(boolean,boolean,java.lang.String[],java.lang.String[])>($z0, $z1, $r2, $r3) in <okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec build()> ==> <okhttp3.ConnectionSpec: void <init>(boolean,boolean,java.lang.String[],java.lang.String[])>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.ConnectionSpec: void <init>(boolean,boolean,java.lang.String[],java.lang.String[])> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>() in <okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder supportsTlsExtensions(boolean)> ==> <java.lang.String: java.lang.String toString()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>() in <okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder tlsVersions(okhttp3.TlsVersion[])> ==> <java.lang.String: java.lang.String toString()>
SPECIAL edge: specialinvoke $r9.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type kotlin.Array<T>") in <okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder tlsVersions(okhttp3.TlsVersion[])> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<okhttp3.TlsVersion: java.lang.String javaName()>() in <okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder tlsVersions(okhttp3.TlsVersion[])> ==> <okhttp3.TlsVersion: java.lang.String javaName()>
VIRTUAL edge: r0 = virtualinvoke r0.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder tlsVersions(java.lang.String[])>($r7) in <okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder tlsVersions(okhttp3.TlsVersion[])> ==> <okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder tlsVersions(java.lang.String[])>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "tlsVersions") in <okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder tlsVersions(java.lang.String[])> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>() in <okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder tlsVersions(java.lang.String[])> ==> <java.lang.String: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>() in <okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder tlsVersions(java.lang.String[])> ==> <java.lang.String: java.lang.String toString()>
SPECIAL edge: specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type kotlin.Array<kotlin.String>") in <okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder tlsVersions(java.lang.String[])> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>() in <okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder tlsVersions(java.lang.String[])> ==> <java.lang.Object: java.lang.Object clone()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: java.lang.Object clone()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>() in <okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder cipherSuites(okhttp3.CipherSuite[])> ==> <java.lang.String: java.lang.String toString()>
SPECIAL edge: specialinvoke $r9.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type kotlin.Array<T>") in <okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder cipherSuites(okhttp3.CipherSuite[])> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
VIRTUAL edge: r0 = virtualinvoke r0.<okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder cipherSuites(java.lang.String[])>($r7) in <okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder cipherSuites(okhttp3.CipherSuite[])> ==> <okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder cipherSuites(java.lang.String[])>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "cipherSuites") in <okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder cipherSuites(java.lang.String[])> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>() in <okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder cipherSuites(java.lang.String[])> ==> <java.lang.String: java.lang.String toString()>
SPECIAL edge: specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type kotlin.Array<kotlin.String>") in <okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder cipherSuites(java.lang.String[])> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>() in <okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder cipherSuites(java.lang.String[])> ==> <java.lang.Object: java.lang.Object clone()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.ConnectionSpec$Builder: void <init>(boolean)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<okhttp3.ConnectionSpec$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null) in <okhttp3.ConnectionSpec: void <clinit>()> ==> <okhttp3.ConnectionSpec$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>
SPECIAL edge: specialinvoke r0.<okhttp3.ConnectionSpec$Companion: void <init>()>() in <okhttp3.ConnectionSpec$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)> ==> <okhttp3.ConnectionSpec$Companion: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.ConnectionSpec$Companion: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.lang.Class: java.lang.String getName()>() in <okhttp3.internal.Util: void <clinit>()> ==> <java.lang.Class: java.lang.String getName()>
SPECIAL edge: specialinvoke $r14.<kotlin.text.Regex: void <init>(java.lang.String)>("([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([\\d.]+)") in <okhttp3.internal.Util: void <clinit>()> ==> <kotlin.text.Regex: void <init>(java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "pattern") in <kotlin.text.Regex: void <init>(java.lang.String)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r1, "compile(pattern)") in <kotlin.text.Regex: void <init>(java.lang.String)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke r0.<kotlin.text.Regex: void <init>(java.util.regex.Pattern)>($r1) in <kotlin.text.Regex: void <init>(java.lang.String)> ==> <kotlin.text.Regex: void <init>(java.util.regex.Pattern)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "nativePattern") in <kotlin.text.Regex: void <init>(java.util.regex.Pattern)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <kotlin.text.Regex: void <init>(java.util.regex.Pattern)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r11 = virtualinvoke $r10.<okio.ByteString$Companion: okio.ByteString decodeHex(java.lang.String)>("efbbbf") in <okhttp3.internal.Util: void <clinit>()> ==> <okio.ByteString$Companion: okio.ByteString decodeHex(java.lang.String)>
CLINIT edge: $i4 = staticinvoke <okio.internal.ByteStringKt: int access$decodeHexDigit(char)>($c3) in <okio.ByteString$Companion: okio.ByteString decodeHex(java.lang.String)> ==> <okio.internal.ByteStringKt: void <clinit>()>
STATIC edge: $i2 = staticinvoke <okio.internal.ByteStringKt: int access$decodeHexDigit(char)>($c3) in <okio.ByteString$Companion: okio.ByteString decodeHex(java.lang.String)> ==> <okio.internal.ByteStringKt: int access$decodeHexDigit(char)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "$this$decodeHex") in <okio.ByteString$Companion: okio.ByteString decodeHex(java.lang.String)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
CLINIT edge: $r3 = new okio.ByteString in <okio.ByteString$Companion: okio.ByteString decodeHex(java.lang.String)> ==> <okio.ByteString: void <clinit>()>
CLINIT edge: $i0 = staticinvoke <okio.internal.ByteStringKt: int decodeHexDigit(char)>($c1) in <okio.internal.ByteStringKt: int access$decodeHexDigit(char)> ==> <okio.internal.ByteStringKt: void <clinit>()>
STATIC edge: $i0 = staticinvoke <okio.internal.ByteStringKt: int decodeHexDigit(char)>($c1) in <okio.internal.ByteStringKt: int access$decodeHexDigit(char)> ==> <okio.internal.ByteStringKt: int decodeHexDigit(char)>
SPECIAL edge: specialinvoke $r3.<okio.ByteString: void <init>(byte[])>($r1) in <okio.ByteString$Companion: okio.ByteString decodeHex(java.lang.String)> ==> <okio.ByteString: void <init>(byte[])>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.lang.String: int length()>() in <okio.ByteString$Companion: okio.ByteString decodeHex(java.lang.String)> ==> <java.lang.String: int length()>
VIRTUAL edge: $r2 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <okio.ByteString$Companion: okio.ByteString decodeHex(java.lang.String)> ==> <java.lang.String: java.lang.String toString()>
VIRTUAL edge: $r12 = virtualinvoke $r8.<okio.Options$Companion: okio.Options of(okio.ByteString[])>($r9) in <okhttp3.internal.Util: void <clinit>()> ==> <okio.Options$Companion: okio.Options of(okio.ByteString[])>
CLINIT edge: $r17 = new okio.Options in <okio.Options$Companion: okio.Options of(okio.ByteString[])> ==> <okio.Options: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r9, "java.util.Arrays.copyOf(this, size)") in <okio.Options$Companion: okio.Options of(okio.ByteString[])> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <okio.Options$Companion: void buildTrieRecursive$default(okio.Options$Companion,long,okio.Buffer,int,java.util.List,int,int,java.util.List,int,java.lang.Object)>(r0, 0L, $r21, 0, $r3, 0, 0, $r7, 53, null) in <okio.Options$Companion: okio.Options of(okio.ByteString[])> ==> <okio.Options$Companion: void buildTrieRecursive$default(okio.Options$Companion,long,okio.Buffer,int,java.util.List,int,int,java.util.List,int,java.lang.Object)>
STATIC edge: $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3) in <okio.Options$Companion: okio.Options of(okio.ByteString[])> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $i5 = staticinvoke <kotlin.collections.CollectionsKt: int binarySearch$default(java.util.List,java.lang.Comparable,int,int,int,java.lang.Object)>($r3, $r10, 0, 0, 6, null) in <okio.Options$Companion: okio.Options of(okio.ByteString[])> ==> <kotlin.collections.CollectionsKt__CollectionsKt: int binarySearch$default(java.util.List,java.lang.Comparable,int,int,int,java.lang.Object)>
STATIC edge: $r7 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List mutableListOf(java.lang.Object[])>($r8) in <okio.Options$Companion: okio.Options of(okio.ByteString[])> ==> <kotlin.collections.CollectionsKt__CollectionsKt: java.util.List mutableListOf(java.lang.Object[])>
STATIC edge: $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-1) in <okio.Options$Companion: okio.Options of(okio.ByteString[])> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: staticinvoke <kotlin.collections.CollectionsKt: void sort(java.util.List)>($r3) in <okio.Options$Companion: okio.Options of(okio.ByteString[])> ==> <kotlin.collections.CollectionsKt__MutableCollectionsJVMKt: void sort(java.util.List)>
STATIC edge: $r3 = staticinvoke <kotlin.collections.ArraysKt: java.util.List toMutableList(java.lang.Object[])>($r1) in <okio.Options$Companion: okio.Options of(okio.ByteString[])> ==> <kotlin.collections.ArraysKt___ArraysKt: java.util.List toMutableList(java.lang.Object[])>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "byteStrings") in <okio.Options$Companion: okio.Options of(okio.ByteString[])> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
CLINIT edge: $r17 = new okio.Options in <okio.Options$Companion: okio.Options of(okio.ByteString[])> ==> <kotlin.collections.AbstractList: void <clinit>()>
CLINIT edge: $r8 = newarray (java.lang.Integer)[0] in <okio.Options$Companion: okio.Options of(okio.ByteString[])> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: $r1 = newarray (okio.ByteString)[0] in <okio.Options$Companion: okio.Options of(okio.ByteString[])> ==> <okio.ByteString: void <clinit>()>
STATIC edge: $i0 = staticinvoke <kotlin.collections.CollectionsKt: int binarySearch(java.util.List,java.lang.Comparable,int,int)>($r1, $r0, $i0, $i1) in <kotlin.collections.CollectionsKt__CollectionsKt: int binarySearch$default(java.util.List,java.lang.Comparable,int,int,int,java.lang.Object)> ==> <kotlin.collections.CollectionsKt__CollectionsKt: int binarySearch(java.util.List,java.lang.Comparable,int,int)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "elements") in <kotlin.collections.CollectionsKt__CollectionsKt: java.util.List mutableListOf(java.lang.Object[])> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>") in <kotlin.collections.CollectionsKt__MutableCollectionsJVMKt: void sort(java.util.List)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>") in <kotlin.collections.ArraysKt___ArraysKt: java.util.List toMutableList(java.lang.Object[])> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: $r0 = staticinvoke <kotlin.collections.CollectionsKt: java.util.Collection asCollection(java.lang.Object[])>($r1) in <kotlin.collections.ArraysKt___ArraysKt: java.util.List toMutableList(java.lang.Object[])> ==> <kotlin.collections.CollectionsKt__CollectionsKt: java.util.Collection asCollection(java.lang.Object[])>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>") in <kotlin.collections.CollectionsKt__CollectionsKt: int binarySearch(java.util.List,java.lang.Comparable,int,int)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: $i3 = staticinvoke <kotlin.comparisons.ComparisonsKt: int compareValues(java.lang.Comparable,java.lang.Comparable)>($r3, $r0) in <kotlin.collections.CollectionsKt__CollectionsKt: int binarySearch(java.util.List,java.lang.Comparable,int,int)> ==> <kotlin.comparisons.ComparisonsKt__ComparisonsKt: int compareValues(java.lang.Comparable,java.lang.Comparable)>
STATIC edge: staticinvoke <kotlin.collections.CollectionsKt__CollectionsKt: void rangeCheck$CollectionsKt__CollectionsKt(int,int,int)>($i2, $i0, $i1) in <kotlin.collections.CollectionsKt__CollectionsKt: int binarySearch(java.util.List,java.lang.Comparable,int,int)> ==> <kotlin.collections.CollectionsKt__CollectionsKt: void rangeCheck$CollectionsKt__CollectionsKt(int,int,int)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>") in <kotlin.collections.CollectionsKt__CollectionsKt: java.util.Collection asCollection(java.lang.Object[])> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r2) in <kotlin.collections.CollectionsKt__CollectionsKt: void rangeCheck$CollectionsKt__CollectionsKt(int,int,int)> ==> <java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r2) in <kotlin.collections.CollectionsKt__CollectionsKt: void rangeCheck$CollectionsKt__CollectionsKt(int,int,int)> ==> <java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<kotlin.collections.ArrayAsCollection: void <init>(java.lang.Object[],boolean)>($r0, 0) in <kotlin.collections.CollectionsKt__CollectionsKt: java.util.Collection asCollection(java.lang.Object[])> ==> <kotlin.collections.ArrayAsCollection: void <init>(java.lang.Object[],boolean)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "values") in <kotlin.collections.ArrayAsCollection: void <init>(java.lang.Object[],boolean)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <kotlin.collections.ArrayAsCollection: void <init>(java.lang.Object[],boolean)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r3.<kotlin.collections.ArrayAsCollection: void <init>(java.lang.Object[],boolean)>($r0, 1) in <kotlin.collections.CollectionsKt__CollectionsKt: java.util.List mutableListOf(java.lang.Object[])> ==> <kotlin.collections.ArrayAsCollection: void <init>(java.lang.Object[],boolean)>
SPECIAL edge: specialinvoke $r22.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type kotlin.Array<T>") in <okio.Options$Companion: okio.Options of(okio.ByteString[])> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
VIRTUAL edge: $r15 = virtualinvoke $r15.<java.lang.Object: java.lang.String toString()>() in <okio.Options$Companion: okio.Options of(okio.ByteString[])> ==> <java.lang.String: java.lang.String toString()>
SPECIAL edge: specialinvoke $r21.<okio.Buffer: void <init>()>() in <okio.Options$Companion: okio.Options of(okio.ByteString[])> ==> <okio.Buffer: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r21.<okio.Buffer: boolean exhausted()>() in <okio.Options$Companion: okio.Options of(okio.ByteString[])> ==> <okio.Buffer: boolean exhausted()>
VIRTUAL edge: $i2 = virtualinvoke $r21.<okio.Buffer: int readInt()>() in <okio.Options$Companion: okio.Options of(okio.ByteString[])> ==> <okio.Buffer: int readInt()>
CLINIT edge: staticinvoke <okio.SegmentPool: void recycle(okio.Segment)>($r1) in <okio.Buffer: int readInt()> ==> <okio.SegmentPool: void <clinit>()>
STATIC edge: staticinvoke <okio.SegmentPool: void recycle(okio.Segment)>($r1) in <okio.Buffer: int readInt()> ==> <okio.SegmentPool: void recycle(okio.Segment)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r1) in <okio.Buffer: int readInt()> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>
CLINIT edge: $r4 = new okio.Segment in <okio.SegmentPool: void <clinit>()> ==> <okio.Segment: void <clinit>()>
STATIC edge: $i1 = staticinvoke <java.lang.Integer: int highestOneBit(int)>($i1) in <okio.SegmentPool: void <clinit>()> ==> <java.lang.Integer: int highestOneBit(int)>
CLINIT edge: $i1 = staticinvoke <java.lang.Integer: int highestOneBit(int)>($i1) in <okio.SegmentPool: void <clinit>()> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: $r2 = <okio.SegmentPool: okio.SegmentPool INSTANCE> in <okio.SegmentPool: void recycle(okio.Segment)> ==> <okio.SegmentPool: void <clinit>()>
STATIC edge: $z0 = staticinvoke <kotlin.UByte$$ExternalSyntheticBackport0: boolean m(java.util.concurrent.atomic.AtomicReference,java.lang.Object,java.lang.Object)>($r3, $r1, $r0) in <okio.SegmentPool: void recycle(okio.Segment)> ==> <kotlin.UByte$$ExternalSyntheticBackport0: boolean m(java.util.concurrent.atomic.AtomicReference,java.lang.Object,java.lang.Object)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "segment") in <okio.SegmentPool: void recycle(okio.Segment)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int highestOneBit(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<okio.Segment$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null) in <okio.Segment: void <clinit>()> ==> <okio.Segment$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>
SPECIAL edge: specialinvoke r0.<okio.Segment$Companion: void <init>()>() in <okio.Segment$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)> ==> <okio.Segment$Companion: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okio.Segment$Companion: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>() in <okio.SegmentPool: void recycle(okio.Segment)> ==> <java.lang.String: java.lang.String toString()>
SPECIAL edge: $r3 = specialinvoke $r2.<okio.SegmentPool: java.util.concurrent.atomic.AtomicReference firstRef()>() in <okio.SegmentPool: void recycle(okio.Segment)> ==> <okio.SegmentPool: java.util.concurrent.atomic.AtomicReference firstRef()>
CLINIT edge: $i1 = <okio.SegmentPool: int HASH_BUCKET_COUNT> in <okio.SegmentPool: java.util.concurrent.atomic.AtomicReference firstRef()> ==> <okio.SegmentPool: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r1, "Thread.currentThread()") in <okio.SegmentPool: java.util.concurrent.atomic.AtomicReference firstRef()> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
VIRTUAL edge: $l0 = virtualinvoke $r1.<java.lang.Thread: long getId()>() in <okio.SegmentPool: java.util.concurrent.atomic.AtomicReference firstRef()> ==> <java.lang.Thread: long getId()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: long getId()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r4.<okio.Segment: void <init>(byte[],int,int,boolean,boolean)>($r0, 0, 0, 0, 0) in <okio.SegmentPool: void <clinit>()> ==> <okio.Segment: void <init>(byte[],int,int,boolean,boolean)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "data") in <okio.Segment: void <init>(byte[],int,int,boolean,boolean)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okio.Segment: void <init>(byte[],int,int,boolean,boolean)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r3.<okio.SegmentPool: void <init>()>() in <okio.SegmentPool: void <clinit>()> ==> <okio.SegmentPool: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okio.SegmentPool: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $l1 = virtualinvoke r0.<okio.Buffer: long size()>() in <okio.Buffer: int readInt()> ==> <okio.Buffer: long size()>
VIRTUAL edge: $b2 = virtualinvoke r0.<okio.Buffer: byte readByte()>() in <okio.Buffer: int readInt()> ==> <okio.Buffer: byte readByte()>
VIRTUAL edge: $b2 = virtualinvoke r0.<okio.Buffer: byte readByte()>() in <okio.Buffer: int readInt()> ==> <okio.Buffer: byte readByte()>
VIRTUAL edge: $b2 = virtualinvoke r0.<okio.Buffer: byte readByte()>() in <okio.Buffer: int readInt()> ==> <okio.Buffer: byte readByte()>
VIRTUAL edge: virtualinvoke r0.<okio.Buffer: void setSize$okio(long)>($l1) in <okio.Buffer: int readInt()> ==> <okio.Buffer: void setSize$okio(long)>
CLINIT edge: staticinvoke <okio.SegmentPool: void recycle(okio.Segment)>($r2) in <okio.Buffer: byte readByte()> ==> <okio.SegmentPool: void <clinit>()>
STATIC edge: staticinvoke <okio.SegmentPool: void recycle(okio.Segment)>($r2) in <okio.Buffer: byte readByte()> ==> <okio.SegmentPool: void recycle(okio.Segment)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r2) in <okio.Buffer: byte readByte()> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>
VIRTUAL edge: $l1 = virtualinvoke r0.<okio.Buffer: long size()>() in <okio.Buffer: byte readByte()> ==> <okio.Buffer: long size()>
VIRTUAL edge: virtualinvoke r0.<okio.Buffer: void setSize$okio(long)>($l1) in <okio.Buffer: byte readByte()> ==> <okio.Buffer: void setSize$okio(long)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okio.Buffer: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r17.<okio.Options: void <init>(okio.ByteString[],int[],kotlin.jvm.internal.DefaultConstructorMarker)>($r1, $r2, null) in <okio.Options$Companion: okio.Options of(okio.ByteString[])> ==> <okio.Options: void <init>(okio.ByteString[],int[],kotlin.jvm.internal.DefaultConstructorMarker)>
SPECIAL edge: specialinvoke r0.<okio.Options: void <init>(okio.ByteString[],int[])>($r1, $r2) in <okio.Options: void <init>(okio.ByteString[],int[],kotlin.jvm.internal.DefaultConstructorMarker)> ==> <okio.Options: void <init>(okio.ByteString[],int[])>
SPECIAL edge: specialinvoke r0.<kotlin.collections.AbstractList: void <init>()>() in <okio.Options: void <init>(okio.ByteString[],int[])> ==> <kotlin.collections.AbstractList: void <init>()>
SPECIAL edge: specialinvoke r0.<kotlin.collections.AbstractCollection: void <init>()>() in <kotlin.collections.AbstractList: void <init>()> ==> <kotlin.collections.AbstractCollection: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <kotlin.collections.AbstractCollection: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke $r5.<okio.ByteString: int size()>() in <okio.Options$Companion: okio.Options of(okio.ByteString[])> ==> <okio.ByteString: int size()>
VIRTUAL edge: $i0 = virtualinvoke r0.<okio.ByteString: int getSize$okio()>() in <okio.ByteString: int size()> ==> <okio.ByteString: int getSize$okio()>
VIRTUAL edge: $r1 = virtualinvoke r0.<okio.ByteString: byte[] getData$okio()>() in <okio.ByteString: int getSize$okio()> ==> <okio.ByteString: byte[] getData$okio()>
SPECIAL edge: $l6 = specialinvoke r0.<okio.Options$Companion: long getIntCount(okio.Buffer)>($r21) in <okio.Options$Companion: okio.Options of(okio.ByteString[])> ==> <okio.Options$Companion: long getIntCount(okio.Buffer)>
VIRTUAL edge: $l1 = virtualinvoke $r1.<okio.Buffer: long size()>() in <okio.Options$Companion: long getIntCount(okio.Buffer)> ==> <okio.Buffer: long size()>
SPECIAL edge: specialinvoke $r0.<okio.Options$Companion: void buildTrieRecursive(long,okio.Buffer,int,java.util.List,int,int,java.util.List)>($l0, $r1, $i1, $r2, $i2, $i3, $r3) in <okio.Options$Companion: void buildTrieRecursive$default(okio.Options$Companion,long,okio.Buffer,int,java.util.List,int,int,java.util.List,int,java.lang.Object)> ==> <okio.Options$Companion: void buildTrieRecursive(long,okio.Buffer,int,java.util.List,int,int,java.util.List)>
SPECIAL edge: specialinvoke $r11.<okio.Buffer: void <init>()>() in <okio.Options$Companion: void buildTrieRecursive(long,okio.Buffer,int,java.util.List,int,int,java.util.List)> ==> <okio.Buffer: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>() in <okio.Options$Companion: void buildTrieRecursive(long,okio.Buffer,int,java.util.List,int,int,java.util.List)> ==> <java.lang.String: java.lang.String toString()>
VIRTUAL edge: $r4 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>() in <okio.Options$Companion: void buildTrieRecursive(long,okio.Buffer,int,java.util.List,int,int,java.util.List)> ==> <java.lang.String: java.lang.String toString()>
VIRTUAL edge: $r4 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>() in <okio.Options$Companion: void buildTrieRecursive(long,okio.Buffer,int,java.util.List,int,int,java.util.List)> ==> <java.lang.String: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r1.<okio.Buffer: okio.Buffer writeInt(int)>($i4) in <okio.Options$Companion: void buildTrieRecursive(long,okio.Buffer,int,java.util.List,int,int,java.util.List)> ==> <okio.Buffer: okio.Buffer writeInt(int)>
VIRTUAL edge: virtualinvoke $r1.<okio.Buffer: okio.Buffer writeInt(int)>($i5) in <okio.Options$Companion: void buildTrieRecursive(long,okio.Buffer,int,java.util.List,int,int,java.util.List)> ==> <okio.Buffer: okio.Buffer writeInt(int)>
VIRTUAL edge: virtualinvoke $r1.<okio.Buffer: okio.Buffer writeInt(int)>($i5) in <okio.Options$Companion: void buildTrieRecursive(long,okio.Buffer,int,java.util.List,int,int,java.util.List)> ==> <okio.Buffer: okio.Buffer writeInt(int)>
VIRTUAL edge: virtualinvoke $r1.<okio.Buffer: okio.Buffer writeInt(int)>($i5) in <okio.Options$Companion: void buildTrieRecursive(long,okio.Buffer,int,java.util.List,int,int,java.util.List)> ==> <okio.Buffer: okio.Buffer writeInt(int)>
VIRTUAL edge: virtualinvoke $r1.<okio.Buffer: long writeAll(okio.Source)>($r12) in <okio.Options$Companion: void buildTrieRecursive(long,okio.Buffer,int,java.util.List,int,int,java.util.List)> ==> <okio.Buffer: long writeAll(okio.Source)>
VIRTUAL edge: virtualinvoke $r1.<okio.Buffer: okio.Buffer writeInt(int)>($i9) in <okio.Options$Companion: void buildTrieRecursive(long,okio.Buffer,int,java.util.List,int,int,java.util.List)> ==> <okio.Buffer: okio.Buffer writeInt(int)>
VIRTUAL edge: virtualinvoke $r1.<okio.Buffer: okio.Buffer writeInt(int)>($i5) in <okio.Options$Companion: void buildTrieRecursive(long,okio.Buffer,int,java.util.List,int,int,java.util.List)> ==> <okio.Buffer: okio.Buffer writeInt(int)>
VIRTUAL edge: virtualinvoke $r1.<okio.Buffer: okio.Buffer writeInt(int)>($i1) in <okio.Options$Companion: void buildTrieRecursive(long,okio.Buffer,int,java.util.List,int,int,java.util.List)> ==> <okio.Buffer: okio.Buffer writeInt(int)>
VIRTUAL edge: virtualinvoke $r1.<okio.Buffer: okio.Buffer writeInt(int)>($i4) in <okio.Options$Companion: void buildTrieRecursive(long,okio.Buffer,int,java.util.List,int,int,java.util.List)> ==> <okio.Buffer: okio.Buffer writeInt(int)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "source") in <okio.Buffer: long writeAll(okio.Source)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
INTERFACE edge: $l0 = interfaceinvoke $r1.<okio.Source: long read(okio.Buffer,long)>(r0, $l0) in <okio.Buffer: long writeAll(okio.Source)> ==> <okio.Buffer: long read(okio.Buffer,long)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "sink") in <okio.Buffer: long read(okio.Buffer,long)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
VIRTUAL edge: $l2 = virtualinvoke r0.<okio.Buffer: long size()>() in <okio.Buffer: long read(okio.Buffer,long)> ==> <okio.Buffer: long size()>
VIRTUAL edge: virtualinvoke $r1.<okio.Buffer: void write(okio.Buffer,long)>(r0, $l0) in <okio.Buffer: long read(okio.Buffer,long)> ==> <okio.Buffer: void write(okio.Buffer,long)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "source") in <okio.Buffer: void write(okio.Buffer,long)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r3) in <okio.Buffer: void write(okio.Buffer,long)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r3) in <okio.Buffer: void write(okio.Buffer,long)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r2) in <okio.Buffer: void write(okio.Buffer,long)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>
STATIC edge: staticinvoke <okio.'-Util': void checkOffsetAndCount(long,long,long)>($l2, 0L, $l1) in <okio.Buffer: void write(okio.Buffer,long)> ==> <okio.'-Util': void checkOffsetAndCount(long,long,long)>
SPECIAL edge: specialinvoke $r4.<java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)>($r1) in <okio.'-Util': void checkOffsetAndCount(long,long,long)> ==> <java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IndexOutOfBoundsException: void <init>()>() in <java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)> ==> <java.lang.IndexOutOfBoundsException: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>() in <okio.Buffer: void write(okio.Buffer,long)> ==> <java.lang.String: java.lang.String toString()>
VIRTUAL edge: $l2 = virtualinvoke $r1.<okio.Buffer: long size()>() in <okio.Buffer: void write(okio.Buffer,long)> ==> <okio.Buffer: long size()>
VIRTUAL edge: virtualinvoke $r1.<okio.Buffer: void setSize$okio(long)>($l2) in <okio.Buffer: void write(okio.Buffer,long)> ==> <okio.Buffer: void setSize$okio(long)>
VIRTUAL edge: $l2 = virtualinvoke r0.<okio.Buffer: long size()>() in <okio.Buffer: void write(okio.Buffer,long)> ==> <okio.Buffer: long size()>
VIRTUAL edge: $l5 = virtualinvoke r0.<okio.Buffer: long size()>() in <okio.Buffer: void write(okio.Buffer,long)> ==> <okio.Buffer: long size()>
VIRTUAL edge: $r2 = virtualinvoke r0.<okio.Buffer: okio.Segment writableSegment$okio(int)>(4) in <okio.Buffer: okio.Buffer writeInt(int)> ==> <okio.Buffer: okio.Segment writableSegment$okio(int)>
VIRTUAL edge: $l5 = virtualinvoke r0.<okio.Buffer: long size()>() in <okio.Buffer: okio.Buffer writeInt(int)> ==> <okio.Buffer: long size()>
VIRTUAL edge: virtualinvoke r0.<okio.Buffer: void setSize$okio(long)>($l5) in <okio.Buffer: okio.Buffer writeInt(int)> ==> <okio.Buffer: void setSize$okio(long)>
CLINIT edge: $r1 = staticinvoke <okio.SegmentPool: okio.Segment take()>() in <okio.Buffer: okio.Segment writableSegment$okio(int)> ==> <okio.SegmentPool: void <clinit>()>
STATIC edge: $r2 = staticinvoke <okio.SegmentPool: okio.Segment take()>() in <okio.Buffer: okio.Segment writableSegment$okio(int)> ==> <okio.SegmentPool: okio.Segment take()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r1) in <okio.Buffer: okio.Segment writableSegment$okio(int)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>
STATIC edge: $r1 = staticinvoke <okio.SegmentPool: okio.Segment take()>() in <okio.Buffer: okio.Segment writableSegment$okio(int)> ==> <okio.SegmentPool: okio.Segment take()>
CLINIT edge: $r1 = <okio.SegmentPool: okio.SegmentPool INSTANCE> in <okio.SegmentPool: okio.Segment take()> ==> <okio.SegmentPool: void <clinit>()>
CLINIT edge: $r4 = new okio.Segment in <okio.SegmentPool: okio.Segment take()> ==> <okio.Segment: void <clinit>()>
CLINIT edge: $r4 = new okio.Segment in <okio.SegmentPool: okio.Segment take()> ==> <okio.Segment: void <clinit>()>
SPECIAL edge: specialinvoke $r4.<okio.Segment: void <init>()>() in <okio.SegmentPool: okio.Segment take()> ==> <okio.Segment: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okio.Segment: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: $r2 = specialinvoke $r1.<okio.SegmentPool: java.util.concurrent.atomic.AtomicReference firstRef()>() in <okio.SegmentPool: okio.Segment take()> ==> <okio.SegmentPool: java.util.concurrent.atomic.AtomicReference firstRef()>
VIRTUAL edge: $r4 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>() in <okio.Buffer: okio.Segment writableSegment$okio(int)> ==> <java.lang.String: java.lang.String toString()>
VIRTUAL edge: $r1 = virtualinvoke $r1.<okio.Segment: okio.Segment push(okio.Segment)>($r2) in <okio.Buffer: okio.Segment writableSegment$okio(int)> ==> <okio.Segment: okio.Segment push(okio.Segment)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "segment") in <okio.Segment: okio.Segment push(okio.Segment)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r2) in <okio.Segment: okio.Segment push(okio.Segment)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>
SPECIAL edge: $l10 = specialinvoke r0.<okio.Options$Companion: long getIntCount(okio.Buffer)>($r1) in <okio.Options$Companion: void buildTrieRecursive(long,okio.Buffer,int,java.util.List,int,int,java.util.List)> ==> <okio.Options$Companion: long getIntCount(okio.Buffer)>
SPECIAL edge: specialinvoke r0.<okio.Options$Companion: void buildTrieRecursive(long,okio.Buffer,int,java.util.List,int,int,java.util.List)>($l0, $r10, $i6, $r2, $i2, $i4, $r3) in <okio.Options$Companion: void buildTrieRecursive(long,okio.Buffer,int,java.util.List,int,int,java.util.List)> ==> <okio.Options$Companion: void buildTrieRecursive(long,okio.Buffer,int,java.util.List,int,int,java.util.List)>
VIRTUAL edge: $r2 = virtualinvoke $r3.<okhttp3.ResponseBody$Companion: okhttp3.ResponseBody create(byte[],okhttp3.MediaType)>($r0, $r4) in <okhttp3.ResponseBody$Companion: okhttp3.ResponseBody create$default(okhttp3.ResponseBody$Companion,byte[],okhttp3.MediaType,int,java.lang.Object)> ==> <okhttp3.ResponseBody$Companion: okhttp3.ResponseBody create(byte[],okhttp3.MediaType)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "$this$toResponseBody") in <okhttp3.ResponseBody$Companion: okhttp3.ResponseBody create(byte[],okhttp3.MediaType)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke $r3.<okio.Buffer: void <init>()>() in <okhttp3.ResponseBody$Companion: okhttp3.ResponseBody create(byte[],okhttp3.MediaType)> ==> <okio.Buffer: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r3.<okio.Buffer: okio.Buffer write(byte[])>($r2) in <okhttp3.ResponseBody$Companion: okhttp3.ResponseBody create(byte[],okhttp3.MediaType)> ==> <okio.Buffer: okio.Buffer write(byte[])>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "source") in <okio.Buffer: okio.Buffer write(byte[])> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
VIRTUAL edge: r0 = virtualinvoke r0.<okio.Buffer: okio.Buffer write(byte[],int,int)>($r1, 0, $i0) in <okio.Buffer: okio.Buffer write(byte[])> ==> <okio.Buffer: okio.Buffer write(byte[],int,int)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "source") in <okio.Buffer: okio.Buffer write(byte[],int,int)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.collections.ArraysKt: byte[] copyInto(byte[],byte[],int,int,int)>($r1, $r3, $i7, $i2, $i0) in <okio.Buffer: okio.Buffer write(byte[],int,int)> ==> <kotlin.collections.ArraysKt___ArraysJvmKt: byte[] copyInto(byte[],byte[],int,int,int)>
STATIC edge: staticinvoke <okio.'-Util': void checkOffsetAndCount(long,long,long)>($l4, $l5, $l1) in <okio.Buffer: okio.Buffer write(byte[],int,int)> ==> <okio.'-Util': void checkOffsetAndCount(long,long,long)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "destination") in <kotlin.collections.ArraysKt___ArraysJvmKt: byte[] copyInto(byte[],byte[],int,int,int)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>") in <kotlin.collections.ArraysKt___ArraysJvmKt: byte[] copyInto(byte[],byte[],int,int,int)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke r0.<okio.Buffer: okio.Segment writableSegment$okio(int)>(1) in <okio.Buffer: okio.Buffer write(byte[],int,int)> ==> <okio.Buffer: okio.Segment writableSegment$okio(int)>
VIRTUAL edge: $l4 = virtualinvoke r0.<okio.Buffer: long size()>() in <okio.Buffer: okio.Buffer write(byte[],int,int)> ==> <okio.Buffer: long size()>
VIRTUAL edge: virtualinvoke r0.<okio.Buffer: void setSize$okio(long)>($l1) in <okio.Buffer: okio.Buffer write(byte[],int,int)> ==> <okio.Buffer: void setSize$okio(long)>
VIRTUAL edge: $r5 = virtualinvoke r0.<okhttp3.ResponseBody$Companion: okhttp3.ResponseBody create(okio.BufferedSource,okhttp3.MediaType,long)>($r4, $r1, $l0) in <okhttp3.ResponseBody$Companion: okhttp3.ResponseBody create(byte[],okhttp3.MediaType)> ==> <okhttp3.ResponseBody$Companion: okhttp3.ResponseBody create(okio.BufferedSource,okhttp3.MediaType,long)>
CLINIT edge: $r3 = new okhttp3.ResponseBody$Companion$asResponseBody$1 in <okhttp3.ResponseBody$Companion: okhttp3.ResponseBody create(okio.BufferedSource,okhttp3.MediaType,long)> ==> <okhttp3.ResponseBody: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$asResponseBody") in <okhttp3.ResponseBody$Companion: okhttp3.ResponseBody create(okio.BufferedSource,okhttp3.MediaType,long)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke $r3.<okhttp3.ResponseBody$Companion$asResponseBody$1: void <init>(okio.BufferedSource,okhttp3.MediaType,long)>($r1, $r2, $l0) in <okhttp3.ResponseBody$Companion: okhttp3.ResponseBody create(okio.BufferedSource,okhttp3.MediaType,long)> ==> <okhttp3.ResponseBody$Companion$asResponseBody$1: void <init>(okio.BufferedSource,okhttp3.MediaType,long)>
SPECIAL edge: specialinvoke r0.<okhttp3.ResponseBody: void <init>()>() in <okhttp3.ResponseBody$Companion$asResponseBody$1: void <init>(okio.BufferedSource,okhttp3.MediaType,long)> ==> <okhttp3.ResponseBody: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.ResponseBody: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r1.<okhttp3.Headers$Companion: okhttp3.Headers of(java.lang.String[])>($r2) in <okhttp3.internal.Util: void <clinit>()> ==> <okhttp3.Headers$Companion: okhttp3.Headers of(java.lang.String[])>
CLINIT edge: $r11 = new okhttp3.Headers in <okhttp3.Headers$Companion: okhttp3.Headers of(java.lang.String[])> ==> <okhttp3.Headers: void <clinit>()>
STATIC edge: $r9 = staticinvoke <kotlin.ranges.RangesKt: kotlin.ranges.IntProgression step(kotlin.ranges.IntProgression,int)>($r9, 2) in <okhttp3.Headers$Companion: okhttp3.Headers of(java.lang.String[])> ==> <kotlin.ranges.RangesKt___RangesKt: kotlin.ranges.IntProgression step(kotlin.ranges.IntProgression,int)>
STATIC edge: $r8 = staticinvoke <kotlin.ranges.RangesKt: kotlin.ranges.IntRange until(int,int)>(0, $i0) in <okhttp3.Headers$Companion: okhttp3.Headers of(java.lang.String[])> ==> <kotlin.ranges.RangesKt___RangesKt: kotlin.ranges.IntRange until(int,int)>
STATIC edge: $r4 = staticinvoke <kotlin.text.StringsKt: java.lang.CharSequence trim(java.lang.CharSequence)>($r4) in <okhttp3.Headers$Companion: okhttp3.Headers of(java.lang.String[])> ==> <kotlin.text.StringsKt__StringsKt: java.lang.CharSequence trim(java.lang.CharSequence)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "namesAndValues") in <okhttp3.Headers$Companion: okhttp3.Headers of(java.lang.String[])> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
CLINIT edge: $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <kotlin.ranges.RangesKt___RangesKt: kotlin.ranges.IntProgression step(kotlin.ranges.IntProgression,int)> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: staticinvoke <kotlin.ranges.RangesKt: void checkStepIsPositive(boolean,java.lang.Number)>($z0, $r2) in <kotlin.ranges.RangesKt___RangesKt: kotlin.ranges.IntProgression step(kotlin.ranges.IntProgression,int)> ==> <kotlin.ranges.RangesKt__RangesKt: void checkStepIsPositive(boolean,java.lang.Number)>
STATIC edge: $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <kotlin.ranges.RangesKt___RangesKt: kotlin.ranges.IntProgression step(kotlin.ranges.IntProgression,int)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>") in <kotlin.ranges.RangesKt___RangesKt: kotlin.ranges.IntProgression step(kotlin.ranges.IntProgression,int)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
CLINIT edge: $r3 = <kotlin.ranges.IntProgression: kotlin.ranges.IntProgression$Companion Companion> in <kotlin.ranges.RangesKt___RangesKt: kotlin.ranges.IntProgression step(kotlin.ranges.IntProgression,int)> ==> <kotlin.ranges.IntProgression: void <clinit>()>
CLINIT edge: $r1 = <kotlin.ranges.IntRange: kotlin.ranges.IntRange$Companion Companion> in <kotlin.ranges.RangesKt___RangesKt: kotlin.ranges.IntRange until(int,int)> ==> <kotlin.ranges.IntRange: void <clinit>()>
CLINIT edge: $r2 = new kotlin.ranges.IntRange in <kotlin.ranges.RangesKt___RangesKt: kotlin.ranges.IntRange until(int,int)> ==> <kotlin.ranges.IntProgression: void <clinit>()>
CLINIT edge: $r2 = new kotlin.ranges.IntRange in <kotlin.ranges.RangesKt___RangesKt: kotlin.ranges.IntRange until(int,int)> ==> <kotlin.ranges.IntRange: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>") in <kotlin.text.StringsKt__StringsKt: java.lang.CharSequence trim(java.lang.CharSequence)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: $z1 = staticinvoke <kotlin.text.CharsKt: boolean isWhitespace(char)>($c3) in <kotlin.text.StringsKt__StringsKt: java.lang.CharSequence trim(java.lang.CharSequence)> ==> <kotlin.text.CharsKt__CharJVMKt: boolean isWhitespace(char)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "step") in <kotlin.ranges.RangesKt__RangesKt: void checkStepIsPositive(boolean,java.lang.Number)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
CLINIT edge: <kotlin.ranges.IntRange: kotlin.ranges.IntRange$Companion Companion> = $r0 in <kotlin.ranges.IntRange: void <clinit>()> ==> <kotlin.ranges.IntProgression: void <clinit>()>
CLINIT edge: $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c0) in <kotlin.text.CharsKt__CharJVMKt: boolean isWhitespace(char)> ==> <java.lang.Character: void <clinit>()>
STATIC edge: $z0 = staticinvoke <java.lang.Character: boolean isSpaceChar(char)>($c0) in <kotlin.text.CharsKt__CharJVMKt: boolean isWhitespace(char)> ==> <java.lang.Character: boolean isSpaceChar(char)>
STATIC edge: $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c0) in <kotlin.text.CharsKt__CharJVMKt: boolean isWhitespace(char)> ==> <java.lang.Character: boolean isWhitespace(char)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isWhitespace(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isSpaceChar(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<kotlin.ranges.IntRange: void <init>(int,int)>(1, 0) in <kotlin.ranges.IntRange: void <clinit>()> ==> <kotlin.ranges.IntRange: void <init>(int,int)>
SPECIAL edge: specialinvoke r0.<kotlin.ranges.IntProgression: void <init>(int,int,int)>($i0, $i1, 1) in <kotlin.ranges.IntRange: void <init>(int,int)> ==> <kotlin.ranges.IntProgression: void <init>(int,int,int)>
STATIC edge: $i1 = staticinvoke <kotlin.internal.ProgressionUtilKt: int getProgressionLastElement(int,int,int)>($i1, $i2, $i0) in <kotlin.ranges.IntProgression: void <init>(int,int,int)> ==> <kotlin.internal.ProgressionUtilKt: int getProgressionLastElement(int,int,int)>
STATIC edge: $i0 = staticinvoke <kotlin.internal.ProgressionUtilKt: int differenceModulo(int,int,int)>($i1, $i0, $i2) in <kotlin.internal.ProgressionUtilKt: int getProgressionLastElement(int,int,int)> ==> <kotlin.internal.ProgressionUtilKt: int differenceModulo(int,int,int)>
STATIC edge: $i0 = staticinvoke <kotlin.internal.ProgressionUtilKt: int differenceModulo(int,int,int)>($i0, $i1, $i2) in <kotlin.internal.ProgressionUtilKt: int getProgressionLastElement(int,int,int)> ==> <kotlin.internal.ProgressionUtilKt: int differenceModulo(int,int,int)>
STATIC edge: $i1 = staticinvoke <kotlin.internal.ProgressionUtilKt: int mod(int,int)>($i1, $i0) in <kotlin.internal.ProgressionUtilKt: int differenceModulo(int,int,int)> ==> <kotlin.internal.ProgressionUtilKt: int mod(int,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <kotlin.ranges.IntProgression: void <init>(int,int,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<kotlin.ranges.IntRange$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null) in <kotlin.ranges.IntRange: void <clinit>()> ==> <kotlin.ranges.IntRange$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>
SPECIAL edge: specialinvoke r0.<kotlin.ranges.IntRange$Companion: void <init>()>() in <kotlin.ranges.IntRange$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)> ==> <kotlin.ranges.IntRange$Companion: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <kotlin.ranges.IntRange$Companion: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<kotlin.ranges.IntProgression$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null) in <kotlin.ranges.IntProgression: void <clinit>()> ==> <kotlin.ranges.IntProgression$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>
SPECIAL edge: specialinvoke r0.<kotlin.ranges.IntProgression$Companion: void <init>()>() in <kotlin.ranges.IntProgression$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)> ==> <kotlin.ranges.IntProgression$Companion: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <kotlin.ranges.IntProgression$Companion: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r2.<kotlin.ranges.IntRange: void <init>(int,int)>($i0, $i1) in <kotlin.ranges.RangesKt___RangesKt: kotlin.ranges.IntRange until(int,int)> ==> <kotlin.ranges.IntRange: void <init>(int,int)>
VIRTUAL edge: $r0 = virtualinvoke $r1.<kotlin.ranges.IntRange$Companion: kotlin.ranges.IntRange getEMPTY()>() in <kotlin.ranges.RangesKt___RangesKt: kotlin.ranges.IntRange until(int,int)> ==> <kotlin.ranges.IntRange$Companion: kotlin.ranges.IntRange getEMPTY()>
CLINIT edge: $r1 = staticinvoke <kotlin.ranges.IntRange: kotlin.ranges.IntRange access$getEMPTY$cp()>() in <kotlin.ranges.IntRange$Companion: kotlin.ranges.IntRange getEMPTY()> ==> <kotlin.ranges.IntRange: void <clinit>()>
STATIC edge: $r1 = staticinvoke <kotlin.ranges.IntRange: kotlin.ranges.IntRange access$getEMPTY$cp()>() in <kotlin.ranges.IntRange$Companion: kotlin.ranges.IntRange getEMPTY()> ==> <kotlin.ranges.IntRange: kotlin.ranges.IntRange access$getEMPTY$cp()>
CLINIT edge: $r1 = staticinvoke <kotlin.ranges.IntRange: kotlin.ranges.IntRange access$getEMPTY$cp()>() in <kotlin.ranges.IntRange$Companion: kotlin.ranges.IntRange getEMPTY()> ==> <kotlin.ranges.IntProgression: void <clinit>()>
CLINIT edge: r0 = <kotlin.ranges.IntRange: kotlin.ranges.IntRange EMPTY> in <kotlin.ranges.IntRange: kotlin.ranges.IntRange access$getEMPTY$cp()> ==> <kotlin.ranges.IntRange: void <clinit>()>
CLINIT edge: r0 = <kotlin.ranges.IntRange: kotlin.ranges.IntRange EMPTY> in <kotlin.ranges.IntRange: kotlin.ranges.IntRange access$getEMPTY$cp()> ==> <kotlin.ranges.IntProgression: void <clinit>()>
VIRTUAL edge: $r0 = virtualinvoke $r3.<kotlin.ranges.IntProgression$Companion: kotlin.ranges.IntProgression fromClosedRange(int,int,int)>($i1, $i2, $i0) in <kotlin.ranges.RangesKt___RangesKt: kotlin.ranges.IntProgression step(kotlin.ranges.IntProgression,int)> ==> <kotlin.ranges.IntProgression$Companion: kotlin.ranges.IntProgression fromClosedRange(int,int,int)>
CLINIT edge: $r1 = new kotlin.ranges.IntProgression in <kotlin.ranges.IntProgression$Companion: kotlin.ranges.IntProgression fromClosedRange(int,int,int)> ==> <kotlin.ranges.IntProgression: void <clinit>()>
SPECIAL edge: specialinvoke $r1.<kotlin.ranges.IntProgression: void <init>(int,int,int)>($i0, $i1, $i2) in <kotlin.ranges.IntProgression$Companion: kotlin.ranges.IntProgression fromClosedRange(int,int,int)> ==> <kotlin.ranges.IntProgression: void <init>(int,int,int)>
VIRTUAL edge: $i1 = virtualinvoke $r0.<kotlin.ranges.IntProgression: int getFirst()>() in <kotlin.ranges.RangesKt___RangesKt: kotlin.ranges.IntProgression step(kotlin.ranges.IntProgression,int)> ==> <kotlin.ranges.IntProgression: int getFirst()>
VIRTUAL edge: $i2 = virtualinvoke $r0.<kotlin.ranges.IntProgression: int getLast()>() in <kotlin.ranges.RangesKt___RangesKt: kotlin.ranges.IntProgression step(kotlin.ranges.IntProgression,int)> ==> <kotlin.ranges.IntProgression: int getLast()>
VIRTUAL edge: $i3 = virtualinvoke $r0.<kotlin.ranges.IntProgression: int getStep()>() in <kotlin.ranges.RangesKt___RangesKt: kotlin.ranges.IntProgression step(kotlin.ranges.IntProgression,int)> ==> <kotlin.ranges.IntProgression: int getStep()>
SPECIAL edge: specialinvoke $r11.<okhttp3.Headers: void <init>(java.lang.String[],kotlin.jvm.internal.DefaultConstructorMarker)>($r1, null) in <okhttp3.Headers$Companion: okhttp3.Headers of(java.lang.String[])> ==> <okhttp3.Headers: void <init>(java.lang.String[],kotlin.jvm.internal.DefaultConstructorMarker)>
SPECIAL edge: specialinvoke r0.<okhttp3.Headers: void <init>(java.lang.String[])>($r1) in <okhttp3.Headers: void <init>(java.lang.String[],kotlin.jvm.internal.DefaultConstructorMarker)> ==> <okhttp3.Headers: void <init>(java.lang.String[])>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.Headers: void <init>(java.lang.String[])> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $i2 = virtualinvoke $r9.<kotlin.ranges.IntProgression: int getFirst()>() in <okhttp3.Headers$Companion: okhttp3.Headers of(java.lang.String[])> ==> <kotlin.ranges.IntProgression: int getFirst()>
VIRTUAL edge: $i1 = virtualinvoke $r9.<kotlin.ranges.IntProgression: int getLast()>() in <okhttp3.Headers$Companion: okhttp3.Headers of(java.lang.String[])> ==> <kotlin.ranges.IntProgression: int getLast()>
VIRTUAL edge: $i3 = virtualinvoke $r9.<kotlin.ranges.IntProgression: int getStep()>() in <okhttp3.Headers$Companion: okhttp3.Headers of(java.lang.String[])> ==> <kotlin.ranges.IntProgression: int getStep()>
SPECIAL edge: specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type kotlin.CharSequence") in <okhttp3.Headers$Companion: okhttp3.Headers of(java.lang.String[])> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>() in <okhttp3.Headers$Companion: okhttp3.Headers of(java.lang.String[])> ==> <java.lang.String: java.lang.String toString()>
INTERFACE edge: $i0 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>() in <kotlin.text.StringsKt__StringsKt: java.lang.CharSequence trim(java.lang.CharSequence)> ==> <java.lang.String: int length()>
INTERFACE edge: $r0 = interfaceinvoke $r0.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>($i0, $i1) in <kotlin.text.StringsKt__StringsKt: java.lang.CharSequence trim(java.lang.CharSequence)> ==> <java.lang.String: java.lang.CharSequence subSequence(int,int)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.CharSequence subSequence(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>() in <okhttp3.Headers$Companion: okhttp3.Headers of(java.lang.String[])> ==> <java.lang.Object: java.lang.Object clone()>
SPECIAL edge: specialinvoke r0.<okhttp3.Headers$Companion: void checkName(java.lang.String)>($r3) in <okhttp3.Headers$Companion: okhttp3.Headers of(java.lang.String[])> ==> <okhttp3.Headers$Companion: void checkName(java.lang.String)>
SPECIAL edge: specialinvoke r0.<okhttp3.Headers$Companion: void checkValue(java.lang.String,java.lang.String)>($r10, $r3) in <okhttp3.Headers$Companion: okhttp3.Headers of(java.lang.String[])> ==> <okhttp3.Headers$Companion: void checkValue(java.lang.String,java.lang.String)>
CLINIT edge: $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1) in <okhttp3.Headers$Companion: void checkName(java.lang.String)> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: $r1 = staticinvoke <okhttp3.internal.Util: java.lang.String format(java.lang.String,java.lang.Object[])>("Unexpected char %#04x at %d in header name: %s", $r3) in <okhttp3.Headers$Companion: void checkName(java.lang.String)> ==> <okhttp3.internal.Util: java.lang.String format(java.lang.String,java.lang.Object[])>
STATIC edge: $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <okhttp3.Headers$Companion: void checkName(java.lang.String)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
CLINIT edge: $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <okhttp3.Headers$Companion: void checkValue(java.lang.String,java.lang.String)> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: $r1 = staticinvoke <okhttp3.internal.Util: java.lang.String format(java.lang.String,java.lang.Object[])>("Unexpected char %#04x at %d in %s value: %s", $r3) in <okhttp3.Headers$Companion: void checkValue(java.lang.String,java.lang.String)> ==> <okhttp3.internal.Util: java.lang.String format(java.lang.String,java.lang.Object[])>
STATIC edge: $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1) in <okhttp3.Headers$Companion: void checkValue(java.lang.String,java.lang.String)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <okhttp3.Headers$Companion: void checkValue(java.lang.String,java.lang.String)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
CLINIT edge: $r2 = <kotlin.jvm.internal.StringCompanionObject: kotlin.jvm.internal.StringCompanionObject INSTANCE> in <okhttp3.internal.Util: java.lang.String format(java.lang.String,java.lang.Object[])> ==> <kotlin.jvm.internal.StringCompanionObject: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "java.lang.String.format(locale, format, *args)") in <okhttp3.internal.Util: java.lang.String format(java.lang.String,java.lang.Object[])> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
STATIC edge: $r0 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r3, $r0, $r1) in <okhttp3.internal.Util: java.lang.String format(java.lang.String,java.lang.Object[])> ==> <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "args") in <okhttp3.internal.Util: java.lang.String format(java.lang.String,java.lang.Object[])> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
CLINIT edge: $r0 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r3, $r0, $r1) in <okhttp3.internal.Util: java.lang.String format(java.lang.String,java.lang.Object[])> ==> <java.lang.String: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<kotlin.jvm.internal.StringCompanionObject: void <init>()>() in <kotlin.jvm.internal.StringCompanionObject: void <clinit>()> ==> <kotlin.jvm.internal.StringCompanionObject: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <kotlin.jvm.internal.StringCompanionObject: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.String: int length()>() in <okhttp3.Headers$Companion: void checkValue(java.lang.String,java.lang.String)> ==> <java.lang.String: int length()>
VIRTUAL edge: $r1 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>() in <okhttp3.Headers$Companion: void checkValue(java.lang.String,java.lang.String)> ==> <java.lang.String: java.lang.String toString()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.String: int length()>() in <okhttp3.Headers$Companion: void checkName(java.lang.String)> ==> <java.lang.String: int length()>
VIRTUAL edge: $r1 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>() in <okhttp3.Headers$Companion: void checkName(java.lang.String)> ==> <java.lang.String: java.lang.String toString()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <okhttp3.internal.Util: java.util.List immutableListOf(java.lang.Object[])> ==> <java.lang.Object: java.lang.Object clone()>
SPECIAL edge: specialinvoke $r2.<okhttp3.Protocol$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null) in <okhttp3.Protocol: void <clinit>()> ==> <okhttp3.Protocol$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>
SPECIAL edge: specialinvoke r0.<okhttp3.Protocol$Companion: void <init>()>() in <okhttp3.Protocol$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)> ==> <okhttp3.Protocol$Companion: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.Protocol$Companion: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<okhttp3.Protocol: void <init>(java.lang.String,int,java.lang.String)>("HTTP_1_0", 0, "http/1.0") in <okhttp3.Protocol: void <clinit>()> ==> <okhttp3.Protocol: void <init>(java.lang.String,int,java.lang.String)>
SPECIAL edge: specialinvoke $r1.<okhttp3.Protocol: void <init>(java.lang.String,int,java.lang.String)>("QUIC", 5, "quic") in <okhttp3.Protocol: void <clinit>()> ==> <okhttp3.Protocol: void <init>(java.lang.String,int,java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>($r1, $i0) in <okhttp3.Protocol: void <init>(java.lang.String,int,java.lang.String)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r0.<okhttp3.MediaType$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null) in <okhttp3.MediaType: void <clinit>()> ==> <okhttp3.MediaType$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>
SPECIAL edge: specialinvoke r0.<okhttp3.MediaType$Companion: void <init>()>() in <okhttp3.MediaType$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)> ==> <okhttp3.MediaType$Companion: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.MediaType$Companion: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<okhttp3.RequestBody$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null) in <okhttp3.RequestBody: void <clinit>()> ==> <okhttp3.RequestBody$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>
SPECIAL edge: specialinvoke r0.<okhttp3.RequestBody$Companion: void <init>()>() in <okhttp3.RequestBody$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)> ==> <okhttp3.RequestBody$Companion: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.RequestBody$Companion: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<okhttp3.MediaType$Companion: okhttp3.MediaType parse(java.lang.String)>($r2) in <okhttp3.MediaType: okhttp3.MediaType parse(java.lang.String)> ==> <okhttp3.MediaType$Companion: okhttp3.MediaType parse(java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r3, "$this$toMediaTypeOrNull") in <okhttp3.MediaType$Companion: okhttp3.MediaType parse(java.lang.String)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<okhttp3.MediaType$Companion: okhttp3.MediaType get(java.lang.String)>($r3) in <okhttp3.MediaType$Companion: okhttp3.MediaType parse(java.lang.String)> ==> <okhttp3.MediaType$Companion: okhttp3.MediaType get(java.lang.String)>
CLINIT edge: $r2 = staticinvoke <okhttp3.MediaType: java.util.regex.Pattern access$getTYPE_SUBTYPE$cp()>() in <okhttp3.MediaType$Companion: okhttp3.MediaType get(java.lang.String)> ==> <okhttp3.MediaType: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r5, "(this as java.lang.String).substring(startIndex)") in <okhttp3.MediaType$Companion: okhttp3.MediaType get(java.lang.String)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
STATIC edge: $z0 = staticinvoke <kotlin.text.StringsKt: boolean endsWith$default(java.lang.String,java.lang.String,boolean,int,java.lang.Object)>($r12, "\'", 0, 2, null) in <okhttp3.MediaType$Companion: okhttp3.MediaType get(java.lang.String)> ==> <kotlin.text.StringsKt__StringsJVMKt: boolean endsWith$default(java.lang.String,java.lang.String,boolean,int,java.lang.Object)>
STATIC edge: $z0 = staticinvoke <kotlin.text.StringsKt: boolean startsWith$default(java.lang.String,java.lang.String,boolean,int,java.lang.Object)>($r12, "\'", 0, 2, null) in <okhttp3.MediaType$Companion: okhttp3.MediaType get(java.lang.String)> ==> <kotlin.text.StringsKt__StringsJVMKt: boolean startsWith$default(java.lang.String,java.lang.String,boolean,int,java.lang.Object)>
STATIC edge: $r2 = staticinvoke <okhttp3.MediaType: java.util.regex.Pattern access$getPARAMETER$cp()>() in <okhttp3.MediaType$Companion: okhttp3.MediaType get(java.lang.String)> ==> <okhttp3.MediaType: java.util.regex.Pattern access$getPARAMETER$cp()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r5, "(this as java.lang.String).toLowerCase(locale)") in <okhttp3.MediaType$Companion: okhttp3.MediaType get(java.lang.String)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r5, "typeSubtype.group(1)") in <okhttp3.MediaType$Companion: okhttp3.MediaType get(java.lang.String)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
STATIC edge: $r2 = staticinvoke <okhttp3.MediaType: java.util.regex.Pattern access$getTYPE_SUBTYPE$cp()>() in <okhttp3.MediaType$Companion: okhttp3.MediaType get(java.lang.String)> ==> <okhttp3.MediaType: java.util.regex.Pattern access$getTYPE_SUBTYPE$cp()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$toMediaType") in <okhttp3.MediaType$Companion: okhttp3.MediaType get(java.lang.String)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
CLINIT edge: $r19 = newarray (java.lang.String)[0] in <okhttp3.MediaType$Companion: okhttp3.MediaType get(java.lang.String)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: r0 = <okhttp3.MediaType: java.util.regex.Pattern PARAMETER> in <okhttp3.MediaType: java.util.regex.Pattern access$getPARAMETER$cp()> ==> <okhttp3.MediaType: void <clinit>()>
CLINIT edge: r0 = <okhttp3.MediaType: java.util.regex.Pattern TYPE_SUBTYPE> in <okhttp3.MediaType: java.util.regex.Pattern access$getTYPE_SUBTYPE$cp()> ==> <okhttp3.MediaType: void <clinit>()>
SPECIAL edge: specialinvoke $r21.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type kotlin.Array<T>") in <okhttp3.MediaType$Companion: okhttp3.MediaType get(java.lang.String)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r18.<okhttp3.MediaType: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String[],kotlin.jvm.internal.DefaultConstructorMarker)>($r1, $r5, $r7, $r19, null) in <okhttp3.MediaType$Companion: okhttp3.MediaType get(java.lang.String)> ==> <okhttp3.MediaType: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String[],kotlin.jvm.internal.DefaultConstructorMarker)>
SPECIAL edge: specialinvoke r0.<okhttp3.MediaType: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>($r1, $r2, $r3, $r4) in <okhttp3.MediaType: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String[],kotlin.jvm.internal.DefaultConstructorMarker)> ==> <okhttp3.MediaType: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.MediaType: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String[])> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.String: int length()>() in <okhttp3.MediaType$Companion: okhttp3.MediaType get(java.lang.String)> ==> <java.lang.String: int length()>
VIRTUAL edge: $r5 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>($i0) in <okhttp3.MediaType$Companion: okhttp3.MediaType get(java.lang.String)> ==> <java.lang.String: java.lang.String substring(int)>
VIRTUAL edge: $r1 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>() in <okhttp3.MediaType$Companion: okhttp3.MediaType get(java.lang.String)> ==> <java.lang.String: java.lang.String toString()>
VIRTUAL edge: $r1 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>() in <okhttp3.MediaType$Companion: okhttp3.MediaType get(java.lang.String)> ==> <java.lang.String: java.lang.String toString()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String substring(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<okhttp3.RequestBody$Companion: okhttp3.RequestBody create(okhttp3.MediaType,java.lang.String)>($r3, $r0) in <okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,java.lang.String)> ==> <okhttp3.RequestBody$Companion: okhttp3.RequestBody create(okhttp3.MediaType,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "content") in <okhttp3.RequestBody$Companion: okhttp3.RequestBody create(okhttp3.MediaType,java.lang.String)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke r0.<okhttp3.RequestBody$Companion: okhttp3.RequestBody create(java.lang.String,okhttp3.MediaType)>($r1, $r3) in <okhttp3.RequestBody$Companion: okhttp3.RequestBody create(okhttp3.MediaType,java.lang.String)> ==> <okhttp3.RequestBody$Companion: okhttp3.RequestBody create(java.lang.String,okhttp3.MediaType)>
CLINIT edge: $r3 = <kotlin.text.Charsets: java.nio.charset.Charset UTF_8> in <okhttp3.RequestBody$Companion: okhttp3.RequestBody create(java.lang.String,okhttp3.MediaType)> ==> <kotlin.text.Charsets: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r8, "(this as java.lang.String).getBytes(charset)") in <okhttp3.RequestBody$Companion: okhttp3.RequestBody create(java.lang.String,okhttp3.MediaType)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
STATIC edge: $r4 = staticinvoke <okhttp3.MediaType: java.nio.charset.Charset charset$default(okhttp3.MediaType,java.nio.charset.Charset,int,java.lang.Object)>($r2, null, 1, null) in <okhttp3.RequestBody$Companion: okhttp3.RequestBody create(java.lang.String,okhttp3.MediaType)> ==> <okhttp3.MediaType: java.nio.charset.Charset charset$default(okhttp3.MediaType,java.nio.charset.Charset,int,java.lang.Object)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$toRequestBody") in <okhttp3.RequestBody$Companion: okhttp3.RequestBody create(java.lang.String,okhttp3.MediaType)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
CLINIT edge: $r4 = staticinvoke <okhttp3.MediaType: java.nio.charset.Charset charset$default(okhttp3.MediaType,java.nio.charset.Charset,int,java.lang.Object)>($r2, null, 1, null) in <okhttp3.RequestBody$Companion: okhttp3.RequestBody create(java.lang.String,okhttp3.MediaType)> ==> <okhttp3.MediaType: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r1, "forName(\"ISO-8859-1\")") in <kotlin.text.Charsets: void <clinit>()> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r1, "forName(\"UTF-16LE\")") in <kotlin.text.Charsets: void <clinit>()> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke $r0.<kotlin.text.Charsets: void <init>()>() in <kotlin.text.Charsets: void <clinit>()> ==> <kotlin.text.Charsets: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <kotlin.text.Charsets: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r5.<okhttp3.MediaType$Companion: okhttp3.MediaType parse(java.lang.String)>($r7) in <okhttp3.RequestBody$Companion: okhttp3.RequestBody create(java.lang.String,okhttp3.MediaType)> ==> <okhttp3.MediaType$Companion: okhttp3.MediaType parse(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke $r2.<okhttp3.MediaType: java.nio.charset.Charset charset(java.nio.charset.Charset)>($r1) in <okhttp3.MediaType: java.nio.charset.Charset charset$default(okhttp3.MediaType,java.nio.charset.Charset,int,java.lang.Object)> ==> <okhttp3.MediaType: java.nio.charset.Charset charset(java.nio.charset.Charset)>
VIRTUAL edge: $r3 = virtualinvoke r0.<okhttp3.MediaType: java.lang.String parameter(java.lang.String)>("charset") in <okhttp3.MediaType: java.nio.charset.Charset charset(java.nio.charset.Charset)> ==> <okhttp3.MediaType: java.lang.String parameter(java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "name") in <okhttp3.MediaType: java.lang.String parameter(java.lang.String)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: $z0 = staticinvoke <kotlin.text.StringsKt: boolean equals(java.lang.String,java.lang.String,boolean)>($r5, $r1, 1) in <okhttp3.MediaType: java.lang.String parameter(java.lang.String)> ==> <kotlin.text.StringsKt__StringsJVMKt: boolean equals(java.lang.String,java.lang.String,boolean)>
STATIC edge: $r4 = staticinvoke <kotlin.ranges.RangesKt: kotlin.ranges.IntProgression step(kotlin.ranges.IntProgression,int)>($r4, 2) in <okhttp3.MediaType: java.lang.String parameter(java.lang.String)> ==> <kotlin.ranges.RangesKt___RangesKt: kotlin.ranges.IntProgression step(kotlin.ranges.IntProgression,int)>
STATIC edge: $r3 = staticinvoke <kotlin.collections.ArraysKt: kotlin.ranges.IntRange getIndices(java.lang.Object[])>($r2) in <okhttp3.MediaType: java.lang.String parameter(java.lang.String)> ==> <kotlin.collections.ArraysKt___ArraysKt: kotlin.ranges.IntRange getIndices(java.lang.Object[])>
CLINIT edge: $r1 = new kotlin.ranges.IntRange in <kotlin.collections.ArraysKt___ArraysKt: kotlin.ranges.IntRange getIndices(java.lang.Object[])> ==> <kotlin.ranges.IntRange: void <clinit>()>
STATIC edge: $i0 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(java.lang.Object[])>($r0) in <kotlin.collections.ArraysKt___ArraysKt: kotlin.ranges.IntRange getIndices(java.lang.Object[])> ==> <kotlin.collections.ArraysKt___ArraysKt: int getLastIndex(java.lang.Object[])>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>") in <kotlin.collections.ArraysKt___ArraysKt: kotlin.ranges.IntRange getIndices(java.lang.Object[])> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
CLINIT edge: $r1 = new kotlin.ranges.IntRange in <kotlin.collections.ArraysKt___ArraysKt: kotlin.ranges.IntRange getIndices(java.lang.Object[])> ==> <kotlin.ranges.IntProgression: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>") in <kotlin.collections.ArraysKt___ArraysKt: int getLastIndex(java.lang.Object[])> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke $r1.<kotlin.ranges.IntRange: void <init>(int,int)>(0, $i0) in <kotlin.collections.ArraysKt___ArraysKt: kotlin.ranges.IntRange getIndices(java.lang.Object[])> ==> <kotlin.ranges.IntRange: void <init>(int,int)>
VIRTUAL edge: $i0 = virtualinvoke $r4.<kotlin.ranges.IntProgression: int getFirst()>() in <okhttp3.MediaType: java.lang.String parameter(java.lang.String)> ==> <kotlin.ranges.IntProgression: int getFirst()>
VIRTUAL edge: $i2 = virtualinvoke $r4.<kotlin.ranges.IntProgression: int getLast()>() in <okhttp3.MediaType: java.lang.String parameter(java.lang.String)> ==> <kotlin.ranges.IntProgression: int getLast()>
VIRTUAL edge: $i3 = virtualinvoke $r4.<kotlin.ranges.IntProgression: int getStep()>() in <okhttp3.MediaType: java.lang.String parameter(java.lang.String)> ==> <kotlin.ranges.IntProgression: int getStep()>
VIRTUAL edge: $r9 = virtualinvoke r0.<okhttp3.RequestBody$Companion: okhttp3.RequestBody create(byte[],okhttp3.MediaType,int,int)>($r8, $r2, 0, $i0) in <okhttp3.RequestBody$Companion: okhttp3.RequestBody create(java.lang.String,okhttp3.MediaType)> ==> <okhttp3.RequestBody$Companion: okhttp3.RequestBody create(byte[],okhttp3.MediaType,int,int)>
SPECIAL edge: specialinvoke $r0.<okhttp3.OkHttpClient$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null) in <okhttp3.OkHttpClient: void <clinit>()> ==> <okhttp3.OkHttpClient$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>
SPECIAL edge: specialinvoke r0.<okhttp3.OkHttpClient$Companion: void <init>()>() in <okhttp3.OkHttpClient$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)> ==> <okhttp3.OkHttpClient$Companion: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.OkHttpClient$Companion: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r10.<okhttp3.Request$Builder: void <init>()>() in <com.example.notificationtest.InfoRead$1: void run()> ==> <okhttp3.Request$Builder: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r10.<okhttp3.Request$Builder: okhttp3.Request$Builder url(java.lang.String)>("http://your-server-url.com") in <com.example.notificationtest.InfoRead$1: void run()> ==> <okhttp3.Request$Builder: okhttp3.Request$Builder url(java.lang.String)>
CLINIT edge: $r3 = <okhttp3.HttpUrl: okhttp3.HttpUrl$Companion Companion> in <okhttp3.Request$Builder: okhttp3.Request$Builder url(java.lang.String)> ==> <okhttp3.HttpUrl: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r1, "(this as java.lang.String).substring(startIndex)") in <okhttp3.Request$Builder: okhttp3.Request$Builder url(java.lang.String)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
STATIC edge: $z0 = staticinvoke <kotlin.text.StringsKt: boolean startsWith(java.lang.String,java.lang.String,boolean)>($r1, "wss:", 1) in <okhttp3.Request$Builder: okhttp3.Request$Builder url(java.lang.String)> ==> <kotlin.text.StringsKt__StringsJVMKt: boolean startsWith(java.lang.String,java.lang.String,boolean)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r1, "(this as java.lang.String).substring(startIndex)") in <okhttp3.Request$Builder: okhttp3.Request$Builder url(java.lang.String)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "url") in <okhttp3.Request$Builder: okhttp3.Request$Builder url(java.lang.String)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke $r0.<okhttp3.HttpUrl$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null) in <okhttp3.HttpUrl: void <clinit>()> ==> <okhttp3.HttpUrl$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>
SPECIAL edge: specialinvoke r0.<okhttp3.HttpUrl$Companion: void <init>()>() in <okhttp3.HttpUrl$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)> ==> <okhttp3.HttpUrl$Companion: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.HttpUrl$Companion: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<okhttp3.HttpUrl$Companion: okhttp3.HttpUrl get(java.lang.String)>($r1) in <okhttp3.Request$Builder: okhttp3.Request$Builder url(java.lang.String)> ==> <okhttp3.HttpUrl$Companion: okhttp3.HttpUrl get(java.lang.String)>
CLINIT edge: $r2 = new okhttp3.HttpUrl$Builder in <okhttp3.HttpUrl$Companion: okhttp3.HttpUrl get(java.lang.String)> ==> <okhttp3.HttpUrl$Builder: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$toHttpUrl") in <okhttp3.HttpUrl$Companion: okhttp3.HttpUrl get(java.lang.String)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke $r0.<okhttp3.HttpUrl$Builder$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null) in <okhttp3.HttpUrl$Builder: void <clinit>()> ==> <okhttp3.HttpUrl$Builder$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>
SPECIAL edge: specialinvoke r0.<okhttp3.HttpUrl$Builder$Companion: void <init>()>() in <okhttp3.HttpUrl$Builder$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)> ==> <okhttp3.HttpUrl$Builder$Companion: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.HttpUrl$Builder$Companion: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r2.<okhttp3.HttpUrl$Builder: void <init>()>() in <okhttp3.HttpUrl$Companion: okhttp3.HttpUrl get(java.lang.String)> ==> <okhttp3.HttpUrl$Builder: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r2.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder parse$okhttp(okhttp3.HttpUrl,java.lang.String)>(null, $r1) in <okhttp3.HttpUrl$Companion: okhttp3.HttpUrl get(java.lang.String)> ==> <okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder parse$okhttp(okhttp3.HttpUrl,java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>() in <okhttp3.HttpUrl$Companion: okhttp3.HttpUrl get(java.lang.String)> ==> <okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()>
CLINIT edge: $i0 = staticinvoke <okhttp3.internal.Util: int indexOfFirstNonAsciiWhitespace$default(java.lang.String,int,int,int,java.lang.Object)>($r2, 0, 0, 3, null) in <okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder parse$okhttp(okhttp3.HttpUrl,java.lang.String)> ==> <okhttp3.internal.Util: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r2, "(this as java.lang.Strin\u2026ing(startIndex, endIndex)") in <okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder parse$okhttp(okhttp3.HttpUrl,java.lang.String)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
STATIC edge: $r2 = staticinvoke <okhttp3.HttpUrl$Companion: java.lang.String canonicalize$okhttp$default(okhttp3.HttpUrl$Companion,java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean,java.nio.charset.Charset,int,java.lang.Object)>($r12, $r2, $i1, $i2, "", 1, 0, 0, 1, null, 176, null) in <okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder parse$okhttp(okhttp3.HttpUrl,java.lang.String)> ==> <okhttp3.HttpUrl$Companion: java.lang.String canonicalize$okhttp$default(okhttp3.HttpUrl$Companion,java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean,java.nio.charset.Charset,int,java.lang.Object)>
STATIC edge: $i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,char,int,int)>($r2, 35, $i0, $i3) in <okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder parse$okhttp(okhttp3.HttpUrl,java.lang.String)> ==> <okhttp3.internal.Util: int delimiterOffset(java.lang.String,char,int,int)>
STATIC edge: $i0 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,java.lang.String,int,int)>($r2, "?#", $i1, $i3) in <okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder parse$okhttp(okhttp3.HttpUrl,java.lang.String)> ==> <okhttp3.internal.Util: int delimiterOffset(java.lang.String,java.lang.String,int,int)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r7) in <okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder parse$okhttp(okhttp3.HttpUrl,java.lang.String)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>
STATIC edge: $r7 = staticinvoke <okhttp3.internal.HostnamesKt: java.lang.String toCanonicalHost(java.lang.String)>($r7) in <okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder parse$okhttp(okhttp3.HttpUrl,java.lang.String)> ==> <okhttp3.internal.HostnamesKt: java.lang.String toCanonicalHost(java.lang.String)>
STATIC edge: $r7 = staticinvoke <okhttp3.HttpUrl$Companion: java.lang.String percentDecode$okhttp$default(okhttp3.HttpUrl$Companion,java.lang.String,int,int,boolean,int,java.lang.Object)>($r12, $r2, $i2, $i0, 0, 4, null) in <okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder parse$okhttp(okhttp3.HttpUrl,java.lang.String)> ==> <okhttp3.HttpUrl$Companion: java.lang.String percentDecode$okhttp$default(okhttp3.HttpUrl$Companion,java.lang.String,int,int,boolean,int,java.lang.Object)>
STATIC edge: $i2 = staticinvoke <okhttp3.HttpUrl$Builder$Companion: int access$parsePort(okhttp3.HttpUrl$Builder$Companion,java.lang.String,int,int)>($r3, $r2, $i6, $i1) in <okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder parse$okhttp(okhttp3.HttpUrl,java.lang.String)> ==> <okhttp3.HttpUrl$Builder$Companion: int access$parsePort(okhttp3.HttpUrl$Builder$Companion,java.lang.String,int,int)>
STATIC edge: $i0 = staticinvoke <okhttp3.HttpUrl$Builder$Companion: int access$portColonOffset(okhttp3.HttpUrl$Builder$Companion,java.lang.String,int,int)>($r3, $r2, $i2, $i1) in <okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder parse$okhttp(okhttp3.HttpUrl,java.lang.String)> ==> <okhttp3.HttpUrl$Builder$Companion: int access$portColonOffset(okhttp3.HttpUrl$Builder$Companion,java.lang.String,int,int)>
STATIC edge: $r7 = staticinvoke <okhttp3.HttpUrl$Companion: java.lang.String canonicalize$okhttp$default(okhttp3.HttpUrl$Companion,java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean,java.nio.charset.Charset,int,java.lang.Object)>($r12, $r2, $i2, $i1, " \"\':;<=>@[]^`{}|/\\?#", 1, 0, 0, 0, null, 240, null) in <okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder parse$okhttp(okhttp3.HttpUrl,java.lang.String)> ==> <okhttp3.HttpUrl$Companion: java.lang.String canonicalize$okhttp$default(okhttp3.HttpUrl$Companion,java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean,java.nio.charset.Charset,int,java.lang.Object)>
STATIC edge: $i1 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,java.lang.String,int,int)>($r2, "@/\\?#", $i2, $i3) in <okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder parse$okhttp(okhttp3.HttpUrl,java.lang.String)> ==> <okhttp3.internal.Util: int delimiterOffset(java.lang.String,java.lang.String,int,int)>
STATIC edge: $z1 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r7, $r8) in <okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder parse$okhttp(okhttp3.HttpUrl,java.lang.String)> ==> <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>
STATIC edge: $i0 = staticinvoke <okhttp3.HttpUrl$Builder$Companion: int access$slashCount(okhttp3.HttpUrl$Builder$Companion,java.lang.String,int,int)>($r3, $r2, $i1, $i2) in <okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder parse$okhttp(okhttp3.HttpUrl,java.lang.String)> ==> <okhttp3.HttpUrl$Builder$Companion: int access$slashCount(okhttp3.HttpUrl$Builder$Companion,java.lang.String,int,int)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r2, "(this as java.lang.Strin\u2026ing(startIndex, endIndex)") in <okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder parse$okhttp(okhttp3.HttpUrl,java.lang.String)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
STATIC edge: $z1 = staticinvoke <kotlin.text.StringsKt: boolean startsWith(java.lang.String,java.lang.String,int,boolean)>($r2, "http:", $i0, 1) in <okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder parse$okhttp(okhttp3.HttpUrl,java.lang.String)> ==> <kotlin.text.StringsKt__StringsJVMKt: boolean startsWith(java.lang.String,java.lang.String,int,boolean)>
STATIC edge: $i4 = staticinvoke <okhttp3.HttpUrl$Builder$Companion: int access$schemeDelimiterOffset(okhttp3.HttpUrl$Builder$Companion,java.lang.String,int,int)>($r3, $r2, $i0, $i2) in <okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder parse$okhttp(okhttp3.HttpUrl,java.lang.String)> ==> <okhttp3.HttpUrl$Builder$Companion: int access$schemeDelimiterOffset(okhttp3.HttpUrl$Builder$Companion,java.lang.String,int,int)>
STATIC edge: $i2 = staticinvoke <okhttp3.internal.Util: int indexOfLastNonAsciiWhitespace$default(java.lang.String,int,int,int,java.lang.Object)>($r2, $i0, 0, 2, null) in <okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder parse$okhttp(okhttp3.HttpUrl,java.lang.String)> ==> <okhttp3.internal.Util: int indexOfLastNonAsciiWhitespace$default(java.lang.String,int,int,int,java.lang.Object)>
STATIC edge: $i0 = staticinvoke <okhttp3.internal.Util: int indexOfFirstNonAsciiWhitespace$default(java.lang.String,int,int,int,java.lang.Object)>($r2, 0, 0, 3, null) in <okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder parse$okhttp(okhttp3.HttpUrl,java.lang.String)> ==> <okhttp3.internal.Util: int indexOfFirstNonAsciiWhitespace$default(java.lang.String,int,int,int,java.lang.Object)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "input") in <okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder parse$okhttp(okhttp3.HttpUrl,java.lang.String)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
CLINIT edge: $r12 = <okhttp3.HttpUrl: okhttp3.HttpUrl$Companion Companion> in <okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder parse$okhttp(okhttp3.HttpUrl,java.lang.String)> ==> <okhttp3.HttpUrl: void <clinit>()>
CLINIT edge: $r3 = <okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$Companion Companion> in <okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder parse$okhttp(okhttp3.HttpUrl,java.lang.String)> ==> <okhttp3.HttpUrl$Builder: void <clinit>()>
CLINIT edge: $r2 = <okhttp3.HttpUrl: okhttp3.HttpUrl$Companion Companion> in <okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()> ==> <okhttp3.HttpUrl: void <clinit>()>
STATIC edge: $r12 = staticinvoke <okhttp3.HttpUrl$Companion: java.lang.String percentDecode$okhttp$default(okhttp3.HttpUrl$Companion,java.lang.String,int,int,boolean,int,java.lang.Object)>($r2, $r14, 0, 0, 0, 7, null) in <okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()> ==> <okhttp3.HttpUrl$Companion: java.lang.String percentDecode$okhttp$default(okhttp3.HttpUrl$Companion,java.lang.String,int,int,boolean,int,java.lang.Object)>
STATIC edge: $r14 = staticinvoke <okhttp3.HttpUrl$Companion: java.lang.String percentDecode$okhttp$default(okhttp3.HttpUrl$Companion,java.lang.String,int,int,boolean,int,java.lang.Object)>($r2, $r14, 0, 0, 1, 3, null) in <okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()> ==> <okhttp3.HttpUrl$Companion: java.lang.String percentDecode$okhttp$default(okhttp3.HttpUrl$Companion,java.lang.String,int,int,boolean,int,java.lang.Object)>
STATIC edge: $i1 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r7, 10) in <okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()> ==> <kotlin.collections.CollectionsKt__IterablesKt: int collectionSizeOrDefault(java.lang.Iterable,int)>
STATIC edge: $i1 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r7, 10) in <okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()> ==> <kotlin.collections.CollectionsKt__IterablesKt: int collectionSizeOrDefault(java.lang.Iterable,int)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$delimiterOffset") in <okhttp3.internal.Util: int delimiterOffset(java.lang.String,char,int,int)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$delimiterOffset") in <okhttp3.internal.Util: int delimiterOffset(java.lang.String,java.lang.String,int,int)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: $z0 = staticinvoke <kotlin.text.StringsKt: boolean contains$default(java.lang.CharSequence,char,boolean,int,java.lang.Object)>($r2, $c2, 0, 2, null) in <okhttp3.internal.Util: int delimiterOffset(java.lang.String,java.lang.String,int,int)> ==> <kotlin.text.StringsKt__StringsKt: boolean contains$default(java.lang.CharSequence,char,boolean,int,java.lang.Object)>
STATIC edge: $z0 = staticinvoke <okhttp3.internal.HostnamesKt: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>($r1) in <okhttp3.internal.HostnamesKt: java.lang.String toCanonicalHost(java.lang.String)> ==> <okhttp3.internal.HostnamesKt: boolean containsInvalidHostnameAsciiCodes(java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r1, "(this as java.lang.String).toLowerCase(locale)") in <okhttp3.internal.HostnamesKt: java.lang.String toCanonicalHost(java.lang.String)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
STATIC edge: $r1 = staticinvoke <okhttp3.internal.HostnamesKt: java.lang.String inet6AddressToAscii(byte[])>($r5) in <okhttp3.internal.HostnamesKt: java.lang.String toCanonicalHost(java.lang.String)> ==> <okhttp3.internal.HostnamesKt: java.lang.String inet6AddressToAscii(byte[])>
STATIC edge: $r4 = staticinvoke <okhttp3.internal.HostnamesKt: java.net.InetAddress decodeIpv6(java.lang.String,int,int)>($r1, 0, $i0) in <okhttp3.internal.HostnamesKt: java.lang.String toCanonicalHost(java.lang.String)> ==> <okhttp3.internal.HostnamesKt: java.net.InetAddress decodeIpv6(java.lang.String,int,int)>
STATIC edge: $z0 = staticinvoke <kotlin.text.StringsKt: boolean endsWith$default(java.lang.String,java.lang.String,boolean,int,java.lang.Object)>($r1, "]", 0, 2, null) in <okhttp3.internal.HostnamesKt: java.lang.String toCanonicalHost(java.lang.String)> ==> <kotlin.text.StringsKt__StringsJVMKt: boolean endsWith$default(java.lang.String,java.lang.String,boolean,int,java.lang.Object)>
STATIC edge: $z0 = staticinvoke <kotlin.text.StringsKt: boolean startsWith$default(java.lang.String,java.lang.String,boolean,int,java.lang.Object)>($r1, "[", 0, 2, null) in <okhttp3.internal.HostnamesKt: java.lang.String toCanonicalHost(java.lang.String)> ==> <kotlin.text.StringsKt__StringsJVMKt: boolean startsWith$default(java.lang.String,java.lang.String,boolean,int,java.lang.Object)>
STATIC edge: $z1 = staticinvoke <kotlin.text.StringsKt: boolean contains$default(java.lang.CharSequence,java.lang.CharSequence,boolean,int,java.lang.Object)>($r2, $r3, 0, 2, null) in <okhttp3.internal.HostnamesKt: java.lang.String toCanonicalHost(java.lang.String)> ==> <kotlin.text.StringsKt__StringsKt: boolean contains$default(java.lang.CharSequence,java.lang.CharSequence,boolean,int,java.lang.Object)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$toCanonicalHost") in <okhttp3.internal.HostnamesKt: java.lang.String toCanonicalHost(java.lang.String)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>") in <kotlin.text.StringsKt__StringsJVMKt: boolean startsWith(java.lang.String,java.lang.String,int,boolean)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: $z0 = staticinvoke <kotlin.text.StringsKt: boolean regionMatches(java.lang.String,int,java.lang.String,int,int,boolean)>($r1, $i0, $r0, 0, $i1, $z0) in <kotlin.text.StringsKt__StringsJVMKt: boolean startsWith(java.lang.String,java.lang.String,int,boolean)> ==> <kotlin.text.StringsKt__StringsJVMKt: boolean regionMatches(java.lang.String,int,java.lang.String,int,int,boolean)>
CLINIT edge: $i0 = staticinvoke <okhttp3.internal.Util: int indexOfLastNonAsciiWhitespace(java.lang.String,int,int)>($r0, $i0, $i1) in <okhttp3.internal.Util: int indexOfLastNonAsciiWhitespace$default(java.lang.String,int,int,int,java.lang.Object)> ==> <okhttp3.internal.Util: void <clinit>()>
STATIC edge: $i0 = staticinvoke <okhttp3.internal.Util: int indexOfLastNonAsciiWhitespace(java.lang.String,int,int)>($r0, $i0, $i1) in <okhttp3.internal.Util: int indexOfLastNonAsciiWhitespace$default(java.lang.String,int,int,int,java.lang.Object)> ==> <okhttp3.internal.Util: int indexOfLastNonAsciiWhitespace(java.lang.String,int,int)>
CLINIT edge: $i0 = staticinvoke <okhttp3.internal.Util: int indexOfFirstNonAsciiWhitespace(java.lang.String,int,int)>($r0, $i0, $i1) in <okhttp3.internal.Util: int indexOfFirstNonAsciiWhitespace$default(java.lang.String,int,int,int,java.lang.Object)> ==> <okhttp3.internal.Util: void <clinit>()>
STATIC edge: $i0 = staticinvoke <okhttp3.internal.Util: int indexOfFirstNonAsciiWhitespace(java.lang.String,int,int)>($r0, $i0, $i1) in <okhttp3.internal.Util: int indexOfFirstNonAsciiWhitespace$default(java.lang.String,int,int,int,java.lang.Object)> ==> <okhttp3.internal.Util: int indexOfFirstNonAsciiWhitespace(java.lang.String,int,int)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>") in <kotlin.collections.CollectionsKt__IterablesKt: int collectionSizeOrDefault(java.lang.Iterable,int)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: $z0 = staticinvoke <kotlin.text.StringsKt: boolean contains(java.lang.CharSequence,char,boolean)>($r1, $c0, $z0) in <kotlin.text.StringsKt__StringsKt: boolean contains$default(java.lang.CharSequence,char,boolean,int,java.lang.Object)> ==> <kotlin.text.StringsKt__StringsKt: boolean contains(java.lang.CharSequence,char,boolean)>
STATIC edge: $i3 = staticinvoke <kotlin.jvm.internal.Intrinsics: int compare(int,int)>($i3, 31) in <okhttp3.internal.HostnamesKt: boolean containsInvalidHostnameAsciiCodes(java.lang.String)> ==> <kotlin.jvm.internal.Intrinsics: int compare(int,int)>
STATIC edge: $i3 = staticinvoke <kotlin.text.StringsKt: int indexOf$default(java.lang.CharSequence,char,int,boolean,int,java.lang.Object)>($r1, $c2, 0, 0, 6, null) in <okhttp3.internal.HostnamesKt: boolean containsInvalidHostnameAsciiCodes(java.lang.String)> ==> <kotlin.text.StringsKt__StringsKt: int indexOf$default(java.lang.CharSequence,char,int,boolean,int,java.lang.Object)>
STATIC edge: $i3 = staticinvoke <kotlin.jvm.internal.Intrinsics: int compare(int,int)>($i3, 127) in <okhttp3.internal.HostnamesKt: boolean containsInvalidHostnameAsciiCodes(java.lang.String)> ==> <kotlin.jvm.internal.Intrinsics: int compare(int,int)>
CLINIT edge: $i2 = staticinvoke <okhttp3.internal.Util: int and(byte,int)>($b5, 255) in <okhttp3.internal.HostnamesKt: java.lang.String inet6AddressToAscii(byte[])> ==> <okhttp3.internal.Util: void <clinit>()>
STATIC edge: $i4 = staticinvoke <okhttp3.internal.Util: int and(byte,int)>($b5, 255) in <okhttp3.internal.HostnamesKt: java.lang.String inet6AddressToAscii(byte[])> ==> <okhttp3.internal.Util: int and(byte,int)>
STATIC edge: $i2 = staticinvoke <okhttp3.internal.Util: int and(byte,int)>($b5, 255) in <okhttp3.internal.HostnamesKt: java.lang.String inet6AddressToAscii(byte[])> ==> <okhttp3.internal.Util: int and(byte,int)>
CLINIT edge: $i7 = staticinvoke <okhttp3.internal.Util: int parseHexDigit(char)>($c6) in <okhttp3.internal.HostnamesKt: java.net.InetAddress decodeIpv6(java.lang.String,int,int)> ==> <okhttp3.internal.Util: void <clinit>()>
STATIC edge: $i7 = staticinvoke <okhttp3.internal.Util: int parseHexDigit(char)>($c6) in <okhttp3.internal.HostnamesKt: java.net.InetAddress decodeIpv6(java.lang.String,int,int)> ==> <okhttp3.internal.Util: int parseHexDigit(char)>
STATIC edge: $z0 = staticinvoke <okhttp3.internal.HostnamesKt: boolean decodeIpv4Suffix(java.lang.String,int,int,byte[],int)>($r0, $i3, $i1, $r1, $i2) in <okhttp3.internal.HostnamesKt: java.net.InetAddress decodeIpv6(java.lang.String,int,int)> ==> <okhttp3.internal.HostnamesKt: boolean decodeIpv4Suffix(java.lang.String,int,int,byte[],int)>
STATIC edge: $z0 = staticinvoke <kotlin.text.StringsKt: boolean startsWith$default(java.lang.String,java.lang.String,int,boolean,int,java.lang.Object)>($r0, ".", $i2, 0, 4, null) in <okhttp3.internal.HostnamesKt: java.net.InetAddress decodeIpv6(java.lang.String,int,int)> ==> <kotlin.text.StringsKt__StringsJVMKt: boolean startsWith$default(java.lang.String,java.lang.String,int,boolean,int,java.lang.Object)>
STATIC edge: $z0 = staticinvoke <kotlin.text.StringsKt: boolean contains(java.lang.CharSequence,java.lang.CharSequence,boolean)>($r2, $r0, $z0) in <kotlin.text.StringsKt__StringsKt: boolean contains$default(java.lang.CharSequence,java.lang.CharSequence,boolean,int,java.lang.Object)> ==> <kotlin.text.StringsKt__StringsKt: boolean contains(java.lang.CharSequence,java.lang.CharSequence,boolean)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$indexOfLastNonAsciiWhitespace") in <okhttp3.internal.Util: int indexOfLastNonAsciiWhitespace(java.lang.String,int,int)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$indexOfFirstNonAsciiWhitespace") in <okhttp3.internal.Util: int indexOfFirstNonAsciiWhitespace(java.lang.String,int,int)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>") in <kotlin.text.StringsKt__StringsKt: boolean contains(java.lang.CharSequence,char,boolean)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: $i1 = staticinvoke <kotlin.text.StringsKt: int indexOf$default(java.lang.CharSequence,char,int,boolean,int,java.lang.Object)>($r0, $c0, 0, $z0, 2, null) in <kotlin.text.StringsKt__StringsKt: boolean contains(java.lang.CharSequence,char,boolean)> ==> <kotlin.text.StringsKt__StringsKt: int indexOf$default(java.lang.CharSequence,char,int,boolean,int,java.lang.Object)>
STATIC edge: $i1 = staticinvoke <kotlin.text.StringsKt: int indexOf(java.lang.CharSequence,char,int,boolean)>($r0, $c0, $i1, $z0) in <kotlin.text.StringsKt__StringsKt: int indexOf$default(java.lang.CharSequence,char,int,boolean,int,java.lang.Object)> ==> <kotlin.text.StringsKt__StringsKt: int indexOf(java.lang.CharSequence,char,int,boolean)>
STATIC edge: $i7 = staticinvoke <kotlin.jvm.internal.Intrinsics: int compare(int,int)>($i7, 48) in <okhttp3.internal.HostnamesKt: boolean decodeIpv4Suffix(java.lang.String,int,int,byte[],int)> ==> <kotlin.jvm.internal.Intrinsics: int compare(int,int)>
STATIC edge: $z0 = staticinvoke <kotlin.text.StringsKt: boolean startsWith(java.lang.String,java.lang.String,int,boolean)>($r2, $r0, $i0, $z0) in <kotlin.text.StringsKt__StringsJVMKt: boolean startsWith$default(java.lang.String,java.lang.String,int,boolean,int,java.lang.Object)> ==> <kotlin.text.StringsKt__StringsJVMKt: boolean startsWith(java.lang.String,java.lang.String,int,boolean)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>") in <kotlin.text.StringsKt__StringsKt: boolean contains(java.lang.CharSequence,java.lang.CharSequence,boolean)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: $i0 = staticinvoke <kotlin.text.StringsKt__StringsKt: int indexOf$StringsKt__StringsKt$default(java.lang.CharSequence,java.lang.CharSequence,int,int,boolean,boolean,int,java.lang.Object)>($r1, $r0, 0, $i0, $z0, 0, 16, null) in <kotlin.text.StringsKt__StringsKt: boolean contains(java.lang.CharSequence,java.lang.CharSequence,boolean)> ==> <kotlin.text.StringsKt__StringsKt: int indexOf$StringsKt__StringsKt$default(java.lang.CharSequence,java.lang.CharSequence,int,int,boolean,boolean,int,java.lang.Object)>
STATIC edge: $i0 = staticinvoke <kotlin.text.StringsKt: int indexOf$default(java.lang.CharSequence,java.lang.String,int,boolean,int,java.lang.Object)>($r1, $r2, 0, $z0, 2, null) in <kotlin.text.StringsKt__StringsKt: boolean contains(java.lang.CharSequence,java.lang.CharSequence,boolean)> ==> <kotlin.text.StringsKt__StringsKt: int indexOf$default(java.lang.CharSequence,java.lang.String,int,boolean,int,java.lang.Object)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>") in <kotlin.text.StringsKt__StringsKt: int indexOf(java.lang.CharSequence,char,int,boolean)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: $i1 = staticinvoke <kotlin.text.StringsKt: int indexOfAny(java.lang.CharSequence,char[],int,boolean)>($r0, $r2, $i1, $z0) in <kotlin.text.StringsKt__StringsKt: int indexOf(java.lang.CharSequence,char,int,boolean)> ==> <kotlin.text.StringsKt__StringsKt: int indexOfAny(java.lang.CharSequence,char[],int,boolean)>
STATIC edge: $i0 = staticinvoke <kotlin.text.StringsKt__StringsKt: int indexOf$StringsKt__StringsKt(java.lang.CharSequence,java.lang.CharSequence,int,int,boolean,boolean)>($r2, $r0, $i0, $i1, $z0, $z1) in <kotlin.text.StringsKt__StringsKt: int indexOf$StringsKt__StringsKt$default(java.lang.CharSequence,java.lang.CharSequence,int,int,boolean,boolean,int,java.lang.Object)> ==> <kotlin.text.StringsKt__StringsKt: int indexOf$StringsKt__StringsKt(java.lang.CharSequence,java.lang.CharSequence,int,int,boolean,boolean)>
STATIC edge: $i0 = staticinvoke <kotlin.text.StringsKt: int indexOf(java.lang.CharSequence,java.lang.String,int,boolean)>($r1, $r0, $i0, $z0) in <kotlin.text.StringsKt__StringsKt: int indexOf$default(java.lang.CharSequence,java.lang.String,int,boolean,int,java.lang.Object)> ==> <kotlin.text.StringsKt__StringsKt: int indexOf(java.lang.CharSequence,java.lang.String,int,boolean)>
CLINIT edge: $r4 = new kotlin.ranges.IntRange in <kotlin.text.StringsKt__StringsKt: int indexOfAny(java.lang.CharSequence,char[],int,boolean)> ==> <kotlin.ranges.IntRange: void <clinit>()>
STATIC edge: $z1 = staticinvoke <kotlin.text.CharsKt: boolean equals(char,char,boolean)>($c4, $c2, $z0) in <kotlin.text.StringsKt__StringsKt: int indexOfAny(java.lang.CharSequence,char[],int,boolean)> ==> <kotlin.text.CharsKt__CharKt: boolean equals(char,char,boolean)>
STATIC edge: $i1 = staticinvoke <kotlin.text.StringsKt: int getLastIndex(java.lang.CharSequence)>($r0) in <kotlin.text.StringsKt__StringsKt: int indexOfAny(java.lang.CharSequence,char[],int,boolean)> ==> <kotlin.text.StringsKt__StringsKt: int getLastIndex(java.lang.CharSequence)>
STATIC edge: $i0 = staticinvoke <kotlin.ranges.RangesKt: int coerceAtLeast(int,int)>($i0, 0) in <kotlin.text.StringsKt__StringsKt: int indexOfAny(java.lang.CharSequence,char[],int,boolean)> ==> <kotlin.ranges.RangesKt___RangesKt: int coerceAtLeast(int,int)>
STATIC edge: $c2 = staticinvoke <kotlin.collections.ArraysKt: char single(char[])>($r1) in <kotlin.text.StringsKt__StringsKt: int indexOfAny(java.lang.CharSequence,char[],int,boolean)> ==> <kotlin.collections.ArraysKt___ArraysKt: char single(char[])>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "chars") in <kotlin.text.StringsKt__StringsKt: int indexOfAny(java.lang.CharSequence,char[],int,boolean)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>") in <kotlin.text.StringsKt__StringsKt: int indexOfAny(java.lang.CharSequence,char[],int,boolean)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
CLINIT edge: $r4 = new kotlin.ranges.IntRange in <kotlin.text.StringsKt__StringsKt: int indexOfAny(java.lang.CharSequence,char[],int,boolean)> ==> <kotlin.ranges.IntProgression: void <clinit>()>
CLINIT edge: $r5 = new kotlin.ranges.IntRange in <kotlin.text.StringsKt__StringsKt: int indexOf$StringsKt__StringsKt(java.lang.CharSequence,java.lang.CharSequence,int,int,boolean,boolean)> ==> <kotlin.ranges.IntRange: void <clinit>()>
STATIC edge: $z1 = staticinvoke <kotlin.text.StringsKt: boolean regionMatchesImpl(java.lang.CharSequence,int,java.lang.CharSequence,int,int,boolean)>($r0, 0, $r1, $i0, $i3, $z0) in <kotlin.text.StringsKt__StringsKt: int indexOf$StringsKt__StringsKt(java.lang.CharSequence,java.lang.CharSequence,int,int,boolean,boolean)> ==> <kotlin.text.StringsKt__StringsKt: boolean regionMatchesImpl(java.lang.CharSequence,int,java.lang.CharSequence,int,int,boolean)>
STATIC edge: $z1 = staticinvoke <kotlin.text.StringsKt: boolean regionMatches(java.lang.String,int,java.lang.String,int,int,boolean)>($r3, 0, $r4, $i0, $i3, $z0) in <kotlin.text.StringsKt__StringsKt: int indexOf$StringsKt__StringsKt(java.lang.CharSequence,java.lang.CharSequence,int,int,boolean,boolean)> ==> <kotlin.text.StringsKt__StringsJVMKt: boolean regionMatches(java.lang.String,int,java.lang.String,int,int,boolean)>
STATIC edge: $r2 = staticinvoke <kotlin.ranges.RangesKt: kotlin.ranges.IntProgression downTo(int,int)>($i0, $i1) in <kotlin.text.StringsKt__StringsKt: int indexOf$StringsKt__StringsKt(java.lang.CharSequence,java.lang.CharSequence,int,int,boolean,boolean)> ==> <kotlin.ranges.RangesKt___RangesKt: kotlin.ranges.IntProgression downTo(int,int)>
STATIC edge: $i1 = staticinvoke <kotlin.ranges.RangesKt: int coerceAtLeast(int,int)>($i1, 0) in <kotlin.text.StringsKt__StringsKt: int indexOf$StringsKt__StringsKt(java.lang.CharSequence,java.lang.CharSequence,int,int,boolean,boolean)> ==> <kotlin.ranges.RangesKt___RangesKt: int coerceAtLeast(int,int)>
STATIC edge: $i0 = staticinvoke <kotlin.ranges.RangesKt: int coerceAtMost(int,int)>($i0, $i2) in <kotlin.text.StringsKt__StringsKt: int indexOf$StringsKt__StringsKt(java.lang.CharSequence,java.lang.CharSequence,int,int,boolean,boolean)> ==> <kotlin.ranges.RangesKt___RangesKt: int coerceAtMost(int,int)>
STATIC edge: $i2 = staticinvoke <kotlin.text.StringsKt: int getLastIndex(java.lang.CharSequence)>($r1) in <kotlin.text.StringsKt__StringsKt: int indexOf$StringsKt__StringsKt(java.lang.CharSequence,java.lang.CharSequence,int,int,boolean,boolean)> ==> <kotlin.text.StringsKt__StringsKt: int getLastIndex(java.lang.CharSequence)>
STATIC edge: $i1 = staticinvoke <kotlin.ranges.RangesKt: int coerceAtMost(int,int)>($i1, $i2) in <kotlin.text.StringsKt__StringsKt: int indexOf$StringsKt__StringsKt(java.lang.CharSequence,java.lang.CharSequence,int,int,boolean,boolean)> ==> <kotlin.ranges.RangesKt___RangesKt: int coerceAtMost(int,int)>
CLINIT edge: $r5 = new kotlin.ranges.IntRange in <kotlin.text.StringsKt__StringsKt: int indexOf$StringsKt__StringsKt(java.lang.CharSequence,java.lang.CharSequence,int,int,boolean,boolean)> ==> <kotlin.ranges.IntProgression: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>") in <kotlin.text.StringsKt__StringsKt: int indexOf(java.lang.CharSequence,java.lang.String,int,boolean)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: $i0 = staticinvoke <kotlin.text.StringsKt__StringsKt: int indexOf$StringsKt__StringsKt$default(java.lang.CharSequence,java.lang.CharSequence,int,int,boolean,boolean,int,java.lang.Object)>($r1, $r3, $i0, $i1, $z0, 0, 16, null) in <kotlin.text.StringsKt__StringsKt: int indexOf(java.lang.CharSequence,java.lang.String,int,boolean)> ==> <kotlin.text.StringsKt__StringsKt: int indexOf$StringsKt__StringsKt$default(java.lang.CharSequence,java.lang.CharSequence,int,int,boolean,boolean,int,java.lang.Object)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>") in <kotlin.text.StringsKt__StringsKt: int getLastIndex(java.lang.CharSequence)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>") in <kotlin.collections.ArraysKt___ArraysKt: char single(char[])> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
CLINIT edge: $r0 = <kotlin.ranges.IntProgression: kotlin.ranges.IntProgression$Companion Companion> in <kotlin.ranges.RangesKt___RangesKt: kotlin.ranges.IntProgression downTo(int,int)> ==> <kotlin.ranges.IntProgression: void <clinit>()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<kotlin.ranges.IntProgression$Companion: kotlin.ranges.IntProgression fromClosedRange(int,int,int)>($i1, $i0, -1) in <kotlin.ranges.RangesKt___RangesKt: kotlin.ranges.IntProgression downTo(int,int)> ==> <kotlin.ranges.IntProgression$Companion: kotlin.ranges.IntProgression fromClosedRange(int,int,int)>
VIRTUAL edge: $i3 = virtualinvoke $r2.<kotlin.ranges.IntProgression: int getFirst()>() in <kotlin.text.StringsKt__StringsKt: int indexOf$StringsKt__StringsKt(java.lang.CharSequence,java.lang.CharSequence,int,int,boolean,boolean)> ==> <kotlin.ranges.IntProgression: int getFirst()>
VIRTUAL edge: $i1 = virtualinvoke $r2.<kotlin.ranges.IntProgression: int getLast()>() in <kotlin.text.StringsKt__StringsKt: int indexOf$StringsKt__StringsKt(java.lang.CharSequence,java.lang.CharSequence,int,int,boolean,boolean)> ==> <kotlin.ranges.IntProgression: int getLast()>
VIRTUAL edge: $i2 = virtualinvoke $r2.<kotlin.ranges.IntProgression: int getStep()>() in <kotlin.text.StringsKt__StringsKt: int indexOf$StringsKt__StringsKt(java.lang.CharSequence,java.lang.CharSequence,int,int,boolean,boolean)> ==> <kotlin.ranges.IntProgression: int getStep()>
SPECIAL edge: specialinvoke $r5.<kotlin.ranges.IntRange: void <init>(int,int)>($i0, $i1) in <kotlin.text.StringsKt__StringsKt: int indexOf$StringsKt__StringsKt(java.lang.CharSequence,java.lang.CharSequence,int,int,boolean,boolean)> ==> <kotlin.ranges.IntRange: void <init>(int,int)>
SPECIAL edge: specialinvoke $r4.<kotlin.ranges.IntRange: void <init>(int,int)>($i0, $i1) in <kotlin.text.StringsKt__StringsKt: int indexOfAny(java.lang.CharSequence,char[],int,boolean)> ==> <kotlin.ranges.IntRange: void <init>(int,int)>
VIRTUAL edge: $r3 = virtualinvoke $r4.<kotlin.ranges.IntRange: kotlin.collections.IntIterator iterator()>() in <kotlin.text.StringsKt__StringsKt: int indexOfAny(java.lang.CharSequence,char[],int,boolean)> ==> <kotlin.ranges.IntProgression: kotlin.collections.IntIterator iterator()>
VIRTUAL edge: $z1 = virtualinvoke $r3.<kotlin.collections.IntIterator: boolean hasNext()>() in <kotlin.text.StringsKt__StringsKt: int indexOfAny(java.lang.CharSequence,char[],int,boolean)> ==> <kotlin.ranges.IntProgressionIterator: boolean hasNext()>
VIRTUAL edge: $i1 = virtualinvoke $r3.<kotlin.collections.IntIterator: int nextInt()>() in <kotlin.text.StringsKt__StringsKt: int indexOfAny(java.lang.CharSequence,char[],int,boolean)> ==> <kotlin.ranges.IntProgressionIterator: int nextInt()>
SPECIAL edge: specialinvoke $r1.<kotlin.ranges.IntProgressionIterator: void <init>(int,int,int)>($i0, $i1, $i2) in <kotlin.ranges.IntProgression: kotlin.collections.IntIterator iterator()> ==> <kotlin.ranges.IntProgressionIterator: void <init>(int,int,int)>
SPECIAL edge: specialinvoke r0.<kotlin.collections.IntIterator: void <init>()>() in <kotlin.ranges.IntProgressionIterator: void <init>(int,int,int)> ==> <kotlin.collections.IntIterator: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <kotlin.collections.IntIterator: void <init>()> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $i0 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>() in <kotlin.text.StringsKt__StringsKt: int getLastIndex(java.lang.CharSequence)> ==> <java.lang.String: int length()>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.lang.String: int indexOf(int,int)>($i1, $i0) in <kotlin.text.StringsKt__StringsKt: int indexOfAny(java.lang.CharSequence,char[],int,boolean)> ==> <java.lang.String: int indexOf(int,int)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int indexOf(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.String: int indexOf(int,int)>($i2, $i1) in <kotlin.text.StringsKt__StringsKt: int indexOf(java.lang.CharSequence,char,int,boolean)> ==> <java.lang.String: int indexOf(int,int)>
INTERFACE edge: $i3 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>() in <kotlin.text.StringsKt__StringsKt: int indexOf$StringsKt__StringsKt(java.lang.CharSequence,java.lang.CharSequence,int,int,boolean,boolean)> ==> <java.lang.String: int length()>
INTERFACE edge: $i3 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>() in <kotlin.text.StringsKt__StringsKt: int indexOf$StringsKt__StringsKt(java.lang.CharSequence,java.lang.CharSequence,int,int,boolean,boolean)> ==> <java.lang.String: int length()>
SPECIAL edge: specialinvoke $r2.<okio.Buffer: void <init>()>() in <okhttp3.internal.HostnamesKt: java.lang.String inet6AddressToAscii(byte[])> ==> <okio.Buffer: void <init>()>
VIRTUAL edge: virtualinvoke $r2.<okio.Buffer: okio.Buffer writeByte(int)>(58) in <okhttp3.internal.HostnamesKt: java.lang.String inet6AddressToAscii(byte[])> ==> <okio.Buffer: okio.Buffer writeByte(int)>
VIRTUAL edge: virtualinvoke $r2.<okio.Buffer: okio.Buffer writeByte(int)>(58) in <okhttp3.internal.HostnamesKt: java.lang.String inet6AddressToAscii(byte[])> ==> <okio.Buffer: okio.Buffer writeByte(int)>
VIRTUAL edge: virtualinvoke $r2.<okio.Buffer: okio.Buffer writeHexadecimalUnsignedLong(long)>($l7) in <okhttp3.internal.HostnamesKt: java.lang.String inet6AddressToAscii(byte[])> ==> <okio.Buffer: okio.Buffer writeHexadecimalUnsignedLong(long)>
VIRTUAL edge: $r1 = virtualinvoke $r2.<okio.Buffer: java.lang.String readUtf8()>() in <okhttp3.internal.HostnamesKt: java.lang.String inet6AddressToAscii(byte[])> ==> <okio.Buffer: java.lang.String readUtf8()>
CLINIT edge: $r3 = staticinvoke <okio.internal.BufferKt: byte[] getHEX_DIGIT_BYTES()>() in <okio.Buffer: okio.Buffer writeHexadecimalUnsignedLong(long)> ==> <okio.internal.BufferKt: void <clinit>()>
STATIC edge: $r3 = staticinvoke <okio.internal.BufferKt: byte[] getHEX_DIGIT_BYTES()>() in <okio.Buffer: okio.Buffer writeHexadecimalUnsignedLong(long)> ==> <okio.internal.BufferKt: byte[] getHEX_DIGIT_BYTES()>
CLINIT edge: $r1 = <kotlin.text.Charsets: java.nio.charset.Charset UTF_8> in <okio.Buffer: java.lang.String readUtf8()> ==> <kotlin.text.Charsets: void <clinit>()>
STATIC edge: $r0 = staticinvoke <okio.'-Platform': byte[] asUtf8ToByteArray(java.lang.String)>("0123456789abcdef") in <okio.internal.BufferKt: void <clinit>()> ==> <okio.'-Platform': byte[] asUtf8ToByteArray(java.lang.String)>
CLINIT edge: r0 = <okio.internal.BufferKt: byte[] HEX_DIGIT_BYTES> in <okio.internal.BufferKt: byte[] getHEX_DIGIT_BYTES()> ==> <okio.internal.BufferKt: void <clinit>()>
CLINIT edge: $r2 = <kotlin.text.Charsets: java.nio.charset.Charset UTF_8> in <okio.'-Platform': byte[] asUtf8ToByteArray(java.lang.String)> ==> <kotlin.text.Charsets: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "(this as java.lang.String).getBytes(charset)") in <okio.'-Platform': byte[] asUtf8ToByteArray(java.lang.String)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$asUtf8ToByteArray") in <okio.'-Platform': byte[] asUtf8ToByteArray(java.lang.String)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
VIRTUAL edge: $r0 = virtualinvoke $r1.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2) in <okio.'-Platform': byte[] asUtf8ToByteArray(java.lang.String)> ==> <java.lang.String: byte[] getBytes(java.nio.charset.Charset)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: byte[] getBytes(java.nio.charset.Charset)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke r0.<okio.Buffer: java.lang.String readString(long,java.nio.charset.Charset)>($l0, $r1) in <okio.Buffer: java.lang.String readUtf8()> ==> <okio.Buffer: java.lang.String readString(long,java.nio.charset.Charset)>
CLINIT edge: $r8 = new java.lang.String in <okio.Buffer: java.lang.String readString(long,java.nio.charset.Charset)> ==> <java.lang.String: void <clinit>()>
STATIC edge: staticinvoke <okio.SegmentPool: void recycle(okio.Segment)>($r3) in <okio.Buffer: java.lang.String readString(long,java.nio.charset.Charset)> ==> <okio.SegmentPool: void recycle(okio.Segment)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r3) in <okio.Buffer: java.lang.String readString(long,java.nio.charset.Charset)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "charset") in <okio.Buffer: java.lang.String readString(long,java.nio.charset.Charset)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
CLINIT edge: staticinvoke <okio.SegmentPool: void recycle(okio.Segment)>($r3) in <okio.Buffer: java.lang.String readString(long,java.nio.charset.Charset)> ==> <okio.SegmentPool: void <clinit>()>
CLINIT edge: $r8 = new java.lang.String in <okio.Buffer: java.lang.String readString(long,java.nio.charset.Charset)> ==> <java.lang.String: void <clinit>()>
SPECIAL edge: specialinvoke $r8.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>($r4, $r2) in <okio.Buffer: java.lang.String readString(long,java.nio.charset.Charset)> ==> <java.lang.String: void <init>(byte[],java.nio.charset.Charset)>
SPECIAL edge: specialinvoke $r8.<java.lang.String: void <init>(byte[],int,int,java.nio.charset.Charset)>($r4, $i0, $i5, $r2) in <okio.Buffer: java.lang.String readString(long,java.nio.charset.Charset)> ==> <java.lang.String: void <init>(byte[],int,int,java.nio.charset.Charset)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],int,int,java.nio.charset.Charset)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],int,int,java.nio.charset.Charset)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],java.nio.charset.Charset)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],java.nio.charset.Charset)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke r0.<okio.Buffer: byte[] readByteArray(long)>($l1) in <okio.Buffer: java.lang.String readString(long,java.nio.charset.Charset)> ==> <okio.Buffer: byte[] readByteArray(long)>
VIRTUAL edge: $l2 = virtualinvoke r0.<okio.Buffer: long size()>() in <okio.Buffer: byte[] readByteArray(long)> ==> <okio.Buffer: long size()>
VIRTUAL edge: virtualinvoke r0.<okio.Buffer: void readFully(byte[])>($r1) in <okio.Buffer: byte[] readByteArray(long)> ==> <okio.Buffer: void readFully(byte[])>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "sink") in <okio.Buffer: void readFully(byte[])> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<okio.Buffer: int read(byte[],int,int)>($r1, $i1, $i0) in <okio.Buffer: void readFully(byte[])> ==> <okio.Buffer: int read(byte[],int,int)>
CLINIT edge: staticinvoke <okio.SegmentPool: void recycle(okio.Segment)>($r2) in <okio.Buffer: int read(byte[],int,int)> ==> <okio.SegmentPool: void <clinit>()>
STATIC edge: staticinvoke <okio.SegmentPool: void recycle(okio.Segment)>($r2) in <okio.Buffer: int read(byte[],int,int)> ==> <okio.SegmentPool: void recycle(okio.Segment)>
STATIC edge: staticinvoke <kotlin.collections.ArraysKt: byte[] copyInto(byte[],byte[],int,int,int)>($r3, $r1, $i1, $i3, $i6) in <okio.Buffer: int read(byte[],int,int)> ==> <kotlin.collections.ArraysKt___ArraysJvmKt: byte[] copyInto(byte[],byte[],int,int,int)>
STATIC edge: staticinvoke <okio.'-Util': void checkOffsetAndCount(long,long,long)>($l4, $l5, $l0) in <okio.Buffer: int read(byte[],int,int)> ==> <okio.'-Util': void checkOffsetAndCount(long,long,long)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "sink") in <okio.Buffer: int read(byte[],int,int)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
VIRTUAL edge: $l0 = virtualinvoke r0.<okio.Buffer: long size()>() in <okio.Buffer: int read(byte[],int,int)> ==> <okio.Buffer: long size()>
VIRTUAL edge: virtualinvoke r0.<okio.Buffer: void setSize$okio(long)>($l0) in <okio.Buffer: int read(byte[],int,int)> ==> <okio.Buffer: void setSize$okio(long)>
VIRTUAL edge: r0 = virtualinvoke r0.<okio.Buffer: okio.Buffer writeByte(int)>(48) in <okio.Buffer: okio.Buffer writeHexadecimalUnsignedLong(long)> ==> <okio.Buffer: okio.Buffer writeByte(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<okio.Buffer: okio.Segment writableSegment$okio(int)>($i4) in <okio.Buffer: okio.Buffer writeHexadecimalUnsignedLong(long)> ==> <okio.Buffer: okio.Segment writableSegment$okio(int)>
VIRTUAL edge: $l0 = virtualinvoke r0.<okio.Buffer: long size()>() in <okio.Buffer: okio.Buffer writeHexadecimalUnsignedLong(long)> ==> <okio.Buffer: long size()>
VIRTUAL edge: virtualinvoke r0.<okio.Buffer: void setSize$okio(long)>($l0) in <okio.Buffer: okio.Buffer writeHexadecimalUnsignedLong(long)> ==> <okio.Buffer: void setSize$okio(long)>
VIRTUAL edge: $r2 = virtualinvoke r0.<okio.Buffer: okio.Segment writableSegment$okio(int)>(1) in <okio.Buffer: okio.Buffer writeByte(int)> ==> <okio.Buffer: okio.Segment writableSegment$okio(int)>
VIRTUAL edge: $l4 = virtualinvoke r0.<okio.Buffer: long size()>() in <okio.Buffer: okio.Buffer writeByte(int)> ==> <okio.Buffer: long size()>
VIRTUAL edge: virtualinvoke r0.<okio.Buffer: void setSize$okio(long)>($l4) in <okio.Buffer: okio.Buffer writeByte(int)> ==> <okio.Buffer: void setSize$okio(long)>
SPECIAL edge: $i0 = specialinvoke $r1.<okhttp3.HttpUrl$Builder$Companion: int schemeDelimiterOffset(java.lang.String,int,int)>($r0, $i0, $i1) in <okhttp3.HttpUrl$Builder$Companion: int access$schemeDelimiterOffset(okhttp3.HttpUrl$Builder$Companion,java.lang.String,int,int)> ==> <okhttp3.HttpUrl$Builder$Companion: int schemeDelimiterOffset(java.lang.String,int,int)>
STATIC edge: $i2 = staticinvoke <kotlin.jvm.internal.Intrinsics: int compare(int,int)>($i2, 97) in <okhttp3.HttpUrl$Builder$Companion: int schemeDelimiterOffset(java.lang.String,int,int)> ==> <kotlin.jvm.internal.Intrinsics: int compare(int,int)>
VIRTUAL edge: $i1 = virtualinvoke $r0.<java.lang.String: int length()>() in <kotlin.text.StringsKt__StringsJVMKt: boolean startsWith(java.lang.String,java.lang.String,int,boolean)> ==> <java.lang.String: int length()>
SPECIAL edge: $i0 = specialinvoke $r1.<okhttp3.HttpUrl$Builder$Companion: int slashCount(java.lang.String,int,int)>($r0, $i0, $i1) in <okhttp3.HttpUrl$Builder$Companion: int access$slashCount(okhttp3.HttpUrl$Builder$Companion,java.lang.String,int,int)> ==> <okhttp3.HttpUrl$Builder$Companion: int slashCount(java.lang.String,int,int)>
SPECIAL edge: $i0 = specialinvoke $r1.<okhttp3.HttpUrl$Builder$Companion: int portColonOffset(java.lang.String,int,int)>($r0, $i0, $i1) in <okhttp3.HttpUrl$Builder$Companion: int access$portColonOffset(okhttp3.HttpUrl$Builder$Companion,java.lang.String,int,int)> ==> <okhttp3.HttpUrl$Builder$Companion: int portColonOffset(java.lang.String,int,int)>
SPECIAL edge: $i0 = specialinvoke $r1.<okhttp3.HttpUrl$Builder$Companion: int parsePort(java.lang.String,int,int)>($r0, $i0, $i1) in <okhttp3.HttpUrl$Builder$Companion: int access$parsePort(okhttp3.HttpUrl$Builder$Companion,java.lang.String,int,int)> ==> <okhttp3.HttpUrl$Builder$Companion: int parsePort(java.lang.String,int,int)>
CLINIT edge: $r3 = <okhttp3.HttpUrl: okhttp3.HttpUrl$Companion Companion> in <okhttp3.HttpUrl$Builder$Companion: int parsePort(java.lang.String,int,int)> ==> <okhttp3.HttpUrl: void <clinit>()>
STATIC edge: $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r1) in <okhttp3.HttpUrl$Builder$Companion: int parsePort(java.lang.String,int,int)> ==> <java.lang.Integer: int parseInt(java.lang.String)>
STATIC edge: $r1 = staticinvoke <okhttp3.HttpUrl$Companion: java.lang.String canonicalize$okhttp$default(okhttp3.HttpUrl$Companion,java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean,java.nio.charset.Charset,int,java.lang.Object)>($r3, $r1, $i0, $i1, "", 0, 0, 0, 0, null, 248, null) in <okhttp3.HttpUrl$Builder$Companion: int parsePort(java.lang.String,int,int)> ==> <okhttp3.HttpUrl$Companion: java.lang.String canonicalize$okhttp$default(okhttp3.HttpUrl$Companion,java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean,java.nio.charset.Charset,int,java.lang.Object)>
CLINIT edge: $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r1) in <okhttp3.HttpUrl$Builder$Companion: int parsePort(java.lang.String,int,int)> ==> <java.lang.Integer: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int parseInt(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r0 = virtualinvoke $r1.<okhttp3.HttpUrl$Companion: java.lang.String percentDecode$okhttp(java.lang.String,int,int,boolean)>($r0, $i0, $i1, $z0) in <okhttp3.HttpUrl$Companion: java.lang.String percentDecode$okhttp$default(okhttp3.HttpUrl$Companion,java.lang.String,int,int,boolean,int,java.lang.Object)> ==> <okhttp3.HttpUrl$Companion: java.lang.String percentDecode$okhttp(java.lang.String,int,int,boolean)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$percentDecode") in <okhttp3.HttpUrl$Companion: java.lang.String percentDecode$okhttp(java.lang.String,int,int,boolean)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r1, "(this as java.lang.Strin\u2026ing(startIndex, endIndex)") in <okhttp3.HttpUrl$Companion: java.lang.String percentDecode$okhttp(java.lang.String,int,int,boolean)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke $r2.<okio.Buffer: void <init>()>() in <okhttp3.HttpUrl$Companion: java.lang.String percentDecode$okhttp(java.lang.String,int,int,boolean)> ==> <okio.Buffer: void <init>()>
VIRTUAL edge: virtualinvoke $r2.<okio.Buffer: okio.Buffer writeUtf8(java.lang.String,int,int)>($r1, $i1, $i2) in <okhttp3.HttpUrl$Companion: java.lang.String percentDecode$okhttp(java.lang.String,int,int,boolean)> ==> <okio.Buffer: okio.Buffer writeUtf8(java.lang.String,int,int)>
VIRTUAL edge: $r1 = virtualinvoke $r2.<okio.Buffer: java.lang.String readUtf8()>() in <okhttp3.HttpUrl$Companion: java.lang.String percentDecode$okhttp(java.lang.String,int,int,boolean)> ==> <okio.Buffer: java.lang.String readUtf8()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "string") in <okio.Buffer: okio.Buffer writeUtf8(java.lang.String,int,int)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke r0.<okio.Buffer: okio.Segment writableSegment$okio(int)>(1) in <okio.Buffer: okio.Buffer writeUtf8(java.lang.String,int,int)> ==> <okio.Buffer: okio.Segment writableSegment$okio(int)>
VIRTUAL edge: $l7 = virtualinvoke r0.<okio.Buffer: long size()>() in <okio.Buffer: okio.Buffer writeUtf8(java.lang.String,int,int)> ==> <okio.Buffer: long size()>
VIRTUAL edge: virtualinvoke r0.<okio.Buffer: void setSize$okio(long)>($l7) in <okio.Buffer: okio.Buffer writeUtf8(java.lang.String,int,int)> ==> <okio.Buffer: void setSize$okio(long)>
VIRTUAL edge: $l7 = virtualinvoke r0.<okio.Buffer: long size()>() in <okio.Buffer: okio.Buffer writeUtf8(java.lang.String,int,int)> ==> <okio.Buffer: long size()>
VIRTUAL edge: virtualinvoke r0.<okio.Buffer: void setSize$okio(long)>($l7) in <okio.Buffer: okio.Buffer writeUtf8(java.lang.String,int,int)> ==> <okio.Buffer: void setSize$okio(long)>
VIRTUAL edge: $l7 = virtualinvoke r0.<okio.Buffer: long size()>() in <okio.Buffer: okio.Buffer writeUtf8(java.lang.String,int,int)> ==> <okio.Buffer: long size()>
VIRTUAL edge: virtualinvoke r0.<okio.Buffer: okio.Buffer writeByte(int)>(63) in <okio.Buffer: okio.Buffer writeUtf8(java.lang.String,int,int)> ==> <okio.Buffer: okio.Buffer writeByte(int)>
VIRTUAL edge: $l7 = virtualinvoke r0.<okio.Buffer: long size()>() in <okio.Buffer: okio.Buffer writeUtf8(java.lang.String,int,int)> ==> <okio.Buffer: long size()>
VIRTUAL edge: $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>($i1, $i0) in <okhttp3.HttpUrl$Companion: java.lang.String percentDecode$okhttp(java.lang.String,int,int,boolean)> ==> <java.lang.String: java.lang.String substring(int,int)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String substring(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i2 = virtualinvoke $r1.<java.lang.String: int length()>() in <okio.Buffer: okio.Buffer writeUtf8(java.lang.String,int,int)> ==> <java.lang.String: int length()>
VIRTUAL edge: $r1 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>() in <okio.Buffer: okio.Buffer writeUtf8(java.lang.String,int,int)> ==> <java.lang.String: java.lang.String toString()>
VIRTUAL edge: $r1 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>() in <okio.Buffer: okio.Buffer writeUtf8(java.lang.String,int,int)> ==> <java.lang.String: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<okhttp3.HttpUrl$Companion: void writePercentDecoded(okio.Buffer,java.lang.String,int,int,boolean)>($r2, $r1, $i2, $i0, $z0) in <okhttp3.HttpUrl$Companion: java.lang.String percentDecode$okhttp(java.lang.String,int,int,boolean)> ==> <okhttp3.HttpUrl$Companion: void writePercentDecoded(okio.Buffer,java.lang.String,int,int,boolean)>
CLINIT edge: $i6 = staticinvoke <okhttp3.internal.Util: int parseHexDigit(char)>($c5) in <okhttp3.HttpUrl$Companion: void writePercentDecoded(okio.Buffer,java.lang.String,int,int,boolean)> ==> <okhttp3.internal.Util: void <clinit>()>
STATIC edge: $i3 = staticinvoke <java.lang.Character: int charCount(int)>($i2) in <okhttp3.HttpUrl$Companion: void writePercentDecoded(okio.Buffer,java.lang.String,int,int,boolean)> ==> <java.lang.Character: int charCount(int)>
STATIC edge: $i4 = staticinvoke <okhttp3.internal.Util: int parseHexDigit(char)>($c5) in <okhttp3.HttpUrl$Companion: void writePercentDecoded(okio.Buffer,java.lang.String,int,int,boolean)> ==> <okhttp3.internal.Util: int parseHexDigit(char)>
CLINIT edge: $i3 = staticinvoke <java.lang.Character: int charCount(int)>($i2) in <okhttp3.HttpUrl$Companion: void writePercentDecoded(okio.Buffer,java.lang.String,int,int,boolean)> ==> <java.lang.Character: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int charCount(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type java.lang.String") in <okhttp3.HttpUrl$Companion: void writePercentDecoded(okio.Buffer,java.lang.String,int,int,boolean)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
VIRTUAL edge: $i2 = virtualinvoke $r2.<java.lang.String: int codePointAt(int)>($i1) in <okhttp3.HttpUrl$Companion: void writePercentDecoded(okio.Buffer,java.lang.String,int,int,boolean)> ==> <java.lang.String: int codePointAt(int)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int codePointAt(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r1.<okio.Buffer: okio.Buffer writeByte(int)>($i1) in <okhttp3.HttpUrl$Companion: void writePercentDecoded(okio.Buffer,java.lang.String,int,int,boolean)> ==> <okio.Buffer: okio.Buffer writeByte(int)>
VIRTUAL edge: virtualinvoke $r1.<okio.Buffer: okio.Buffer writeUtf8CodePoint(int)>($i2) in <okhttp3.HttpUrl$Companion: void writePercentDecoded(okio.Buffer,java.lang.String,int,int,boolean)> ==> <okio.Buffer: okio.Buffer writeUtf8CodePoint(int)>
STATIC edge: $r4 = staticinvoke <okio.'-Util': java.lang.String toHexString(int)>($i0) in <okio.Buffer: okio.Buffer writeUtf8CodePoint(int)> ==> <okio.'-Util': java.lang.String toHexString(int)>
CLINIT edge: $r1 = staticinvoke <okio.internal.ByteStringKt: char[] getHEX_DIGIT_CHARS()>() in <okio.'-Util': java.lang.String toHexString(int)> ==> <okio.internal.ByteStringKt: void <clinit>()>
STATIC edge: $r1 = staticinvoke <okio.internal.ByteStringKt: char[] getHEX_DIGIT_CHARS()>() in <okio.'-Util': java.lang.String toHexString(int)> ==> <okio.internal.ByteStringKt: char[] getHEX_DIGIT_CHARS()>
STATIC edge: $r1 = staticinvoke <okio.internal.ByteStringKt: char[] getHEX_DIGIT_CHARS()>() in <okio.'-Util': java.lang.String toHexString(int)> ==> <okio.internal.ByteStringKt: char[] getHEX_DIGIT_CHARS()>
STATIC edge: $r1 = staticinvoke <okio.internal.ByteStringKt: char[] getHEX_DIGIT_CHARS()>() in <okio.'-Util': java.lang.String toHexString(int)> ==> <okio.internal.ByteStringKt: char[] getHEX_DIGIT_CHARS()>
CLINIT edge: $r2 = new java.lang.String in <okio.'-Util': java.lang.String toHexString(int)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: r0 = <okio.internal.ByteStringKt: char[] HEX_DIGIT_CHARS> in <okio.internal.ByteStringKt: char[] getHEX_DIGIT_CHARS()> ==> <okio.internal.ByteStringKt: void <clinit>()>
SPECIAL edge: specialinvoke $r2.<java.lang.String: void <init>(char[],int,int)>($r0, $i1, $i0) in <okio.'-Util': java.lang.String toHexString(int)> ==> <java.lang.String: void <init>(char[],int,int)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(char[],int,int)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke r0.<okio.Buffer: okio.Buffer writeByte(int)>($i0) in <okio.Buffer: okio.Buffer writeUtf8CodePoint(int)> ==> <okio.Buffer: okio.Buffer writeByte(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<okio.Buffer: okio.Segment writableSegment$okio(int)>(2) in <okio.Buffer: okio.Buffer writeUtf8CodePoint(int)> ==> <okio.Buffer: okio.Segment writableSegment$okio(int)>
VIRTUAL edge: $l4 = virtualinvoke r0.<okio.Buffer: long size()>() in <okio.Buffer: okio.Buffer writeUtf8CodePoint(int)> ==> <okio.Buffer: long size()>
VIRTUAL edge: virtualinvoke r0.<okio.Buffer: void setSize$okio(long)>($l4) in <okio.Buffer: okio.Buffer writeUtf8CodePoint(int)> ==> <okio.Buffer: void setSize$okio(long)>
VIRTUAL edge: virtualinvoke r0.<okio.Buffer: okio.Buffer writeByte(int)>(63) in <okio.Buffer: okio.Buffer writeUtf8CodePoint(int)> ==> <okio.Buffer: okio.Buffer writeByte(int)>
VIRTUAL edge: virtualinvoke r0.<okio.Buffer: void setSize$okio(long)>($l4) in <okio.Buffer: okio.Buffer writeUtf8CodePoint(int)> ==> <okio.Buffer: void setSize$okio(long)>
VIRTUAL edge: $i1 = virtualinvoke $r0.<java.lang.String: int length()>() in <okhttp3.HttpUrl$Companion: java.lang.String percentDecode$okhttp$default(okhttp3.HttpUrl$Companion,java.lang.String,int,int,boolean,int,java.lang.Object)> ==> <java.lang.String: int length()>
SPECIAL edge: specialinvoke $r9.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type java.lang.String") in <okhttp3.internal.HostnamesKt: java.lang.String toCanonicalHost(java.lang.String)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r6.<java.lang.AssertionError: void <init>(java.lang.Object)>($r1) in <okhttp3.internal.HostnamesKt: java.lang.String toCanonicalHost(java.lang.String)> ==> <java.lang.AssertionError: void <init>(java.lang.Object)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(java.lang.Object)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Error: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Error: void <init>()> ==> <java.lang.Throwable: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.String: int length()>() in <okhttp3.internal.HostnamesKt: java.lang.String toCanonicalHost(java.lang.String)> ==> <java.lang.String: int length()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.String: int length()>() in <okhttp3.internal.HostnamesKt: java.lang.String toCanonicalHost(java.lang.String)> ==> <java.lang.String: int length()>
VIRTUAL edge: $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r8) in <okhttp3.internal.HostnamesKt: java.lang.String toCanonicalHost(java.lang.String)> ==> <java.lang.String: java.lang.String toLowerCase(java.util.Locale)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String toLowerCase(java.util.Locale)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.lang.String: int length()>() in <okhttp3.internal.HostnamesKt: boolean containsInvalidHostnameAsciiCodes(java.lang.String)> ==> <java.lang.String: int length()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String,int)>($r0, $i0) in <kotlin.text.StringsKt__StringsJVMKt: boolean startsWith(java.lang.String,java.lang.String,int,boolean)> ==> <java.lang.String: boolean startsWith(java.lang.String,int)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean startsWith(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>() in <kotlin.text.StringsKt__StringsKt: boolean contains(java.lang.CharSequence,java.lang.CharSequence,boolean)> ==> <java.lang.String: int length()>
INTERFACE edge: $i1 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>() in <kotlin.text.StringsKt__StringsKt: int indexOf(java.lang.CharSequence,java.lang.String,int,boolean)> ==> <java.lang.String: int length()>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.lang.String: int indexOf(java.lang.String,int)>($r0, $i0) in <kotlin.text.StringsKt__StringsKt: int indexOf(java.lang.CharSequence,java.lang.String,int,boolean)> ==> <java.lang.String: int indexOf(java.lang.String,int)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int indexOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke $r0.<okhttp3.HttpUrl$Companion: java.lang.String canonicalize$okhttp(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean,java.nio.charset.Charset)>($r1, $i0, $i1, $r2, $z0, $z1, $z2, $z3, $r3) in <okhttp3.HttpUrl$Companion: java.lang.String canonicalize$okhttp$default(okhttp3.HttpUrl$Companion,java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean,java.nio.charset.Charset,int,java.lang.Object)> ==> <okhttp3.HttpUrl$Companion: java.lang.String canonicalize$okhttp(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean,java.nio.charset.Charset)>
CLINIT edge: $i3 = staticinvoke <java.lang.Character: int charCount(int)>($i3) in <okhttp3.HttpUrl$Companion: java.lang.String canonicalize$okhttp(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean,java.nio.charset.Charset)> ==> <java.lang.Character: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r1, "(this as java.lang.Strin\u2026ing(startIndex, endIndex)") in <okhttp3.HttpUrl$Companion: java.lang.String canonicalize$okhttp(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean,java.nio.charset.Charset)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
STATIC edge: $i3 = staticinvoke <java.lang.Character: int charCount(int)>($i3) in <okhttp3.HttpUrl$Companion: java.lang.String canonicalize$okhttp(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean,java.nio.charset.Charset)> ==> <java.lang.Character: int charCount(int)>
STATIC edge: $z4 = staticinvoke <kotlin.text.StringsKt: boolean contains$default(java.lang.CharSequence,char,boolean,int,java.lang.Object)>($r5, $c4, 0, 2, null) in <okhttp3.HttpUrl$Companion: java.lang.String canonicalize$okhttp(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean,java.nio.charset.Charset)> ==> <kotlin.text.StringsKt__StringsKt: boolean contains$default(java.lang.CharSequence,char,boolean,int,java.lang.Object)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "encodeSet") in <okhttp3.HttpUrl$Companion: java.lang.String canonicalize$okhttp(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean,java.nio.charset.Charset)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$canonicalize") in <okhttp3.HttpUrl$Companion: java.lang.String canonicalize$okhttp(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean,java.nio.charset.Charset)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke $r4.<okio.Buffer: void <init>()>() in <okhttp3.HttpUrl$Companion: java.lang.String canonicalize$okhttp(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean,java.nio.charset.Charset)> ==> <okio.Buffer: void <init>()>
VIRTUAL edge: virtualinvoke $r4.<okio.Buffer: okio.Buffer writeUtf8(java.lang.String,int,int)>($r1, $i0, $i2) in <okhttp3.HttpUrl$Companion: java.lang.String canonicalize$okhttp(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean,java.nio.charset.Charset)> ==> <okio.Buffer: okio.Buffer writeUtf8(java.lang.String,int,int)>
VIRTUAL edge: $r1 = virtualinvoke $r4.<okio.Buffer: java.lang.String readUtf8()>() in <okhttp3.HttpUrl$Companion: java.lang.String canonicalize$okhttp(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean,java.nio.charset.Charset)> ==> <okio.Buffer: java.lang.String readUtf8()>
VIRTUAL edge: $i3 = virtualinvoke $r1.<java.lang.String: int codePointAt(int)>($i2) in <okhttp3.HttpUrl$Companion: java.lang.String canonicalize$okhttp(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean,java.nio.charset.Charset)> ==> <java.lang.String: int codePointAt(int)>
VIRTUAL edge: $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>($i0, $i1) in <okhttp3.HttpUrl$Companion: java.lang.String canonicalize$okhttp(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean,java.nio.charset.Charset)> ==> <java.lang.String: java.lang.String substring(int,int)>
SPECIAL edge: $z4 = specialinvoke r0.<okhttp3.HttpUrl$Companion: boolean isPercentEncoded(java.lang.String,int,int)>($r1, $i2, $i1) in <okhttp3.HttpUrl$Companion: java.lang.String canonicalize$okhttp(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean,java.nio.charset.Charset)> ==> <okhttp3.HttpUrl$Companion: boolean isPercentEncoded(java.lang.String,int,int)>
SPECIAL edge: specialinvoke r0.<okhttp3.HttpUrl$Companion: void writeCanonicalized(okio.Buffer,java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean,java.nio.charset.Charset)>($r4, $r1, $i2, $i1, $r2, $z0, $z1, $z2, $z3, $r3) in <okhttp3.HttpUrl$Companion: java.lang.String canonicalize$okhttp(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean,java.nio.charset.Charset)> ==> <okhttp3.HttpUrl$Companion: void writeCanonicalized(okio.Buffer,java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean,java.nio.charset.Charset)>
CLINIT edge: $i1 = staticinvoke <okhttp3.internal.Util: int parseHexDigit(char)>($c3) in <okhttp3.HttpUrl$Companion: boolean isPercentEncoded(java.lang.String,int,int)> ==> <okhttp3.internal.Util: void <clinit>()>
STATIC edge: $i1 = staticinvoke <okhttp3.internal.Util: int parseHexDigit(char)>($c3) in <okhttp3.HttpUrl$Companion: boolean isPercentEncoded(java.lang.String,int,int)> ==> <okhttp3.internal.Util: int parseHexDigit(char)>
STATIC edge: $i2 = staticinvoke <java.lang.Character: int charCount(int)>($i2) in <okhttp3.HttpUrl$Companion: void writeCanonicalized(okio.Buffer,java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean,java.nio.charset.Charset)> ==> <java.lang.Character: int charCount(int)>
STATIC edge: $r9 = staticinvoke <okhttp3.HttpUrl: char[] access$getHEX_DIGITS$cp()>() in <okhttp3.HttpUrl$Companion: void writeCanonicalized(okio.Buffer,java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean,java.nio.charset.Charset)> ==> <okhttp3.HttpUrl: char[] access$getHEX_DIGITS$cp()>
STATIC edge: $r9 = staticinvoke <okhttp3.HttpUrl: char[] access$getHEX_DIGITS$cp()>() in <okhttp3.HttpUrl$Companion: void writeCanonicalized(okio.Buffer,java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean,java.nio.charset.Charset)> ==> <okhttp3.HttpUrl: char[] access$getHEX_DIGITS$cp()>
STATIC edge: $z4 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r4, $r8) in <okhttp3.HttpUrl$Companion: void writeCanonicalized(okio.Buffer,java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean,java.nio.charset.Charset)> ==> <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>
STATIC edge: $z4 = staticinvoke <kotlin.text.StringsKt: boolean contains$default(java.lang.CharSequence,char,boolean,int,java.lang.Object)>($r7, $c3, 0, 2, null) in <okhttp3.HttpUrl$Companion: void writeCanonicalized(okio.Buffer,java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean,java.nio.charset.Charset)> ==> <kotlin.text.StringsKt__StringsKt: boolean contains$default(java.lang.CharSequence,char,boolean,int,java.lang.Object)>
CLINIT edge: $i2 = staticinvoke <java.lang.Character: int charCount(int)>($i2) in <okhttp3.HttpUrl$Companion: void writeCanonicalized(okio.Buffer,java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean,java.nio.charset.Charset)> ==> <java.lang.Character: void <clinit>()>
CLINIT edge: $r9 = staticinvoke <okhttp3.HttpUrl: char[] access$getHEX_DIGITS$cp()>() in <okhttp3.HttpUrl$Companion: void writeCanonicalized(okio.Buffer,java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean,java.nio.charset.Charset)> ==> <okhttp3.HttpUrl: void <clinit>()>
CLINIT edge: $i4 = staticinvoke <java.lang.Character: int charCount(int)>($i2) in <okhttp3.HttpUrl$Companion: void writeCanonicalized(okio.Buffer,java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean,java.nio.charset.Charset)> ==> <java.lang.Character: void <clinit>()>
CLINIT edge: r0 = <okhttp3.HttpUrl: char[] HEX_DIGITS> in <okhttp3.HttpUrl: char[] access$getHEX_DIGITS$cp()> ==> <okhttp3.HttpUrl: void <clinit>()>
SPECIAL edge: specialinvoke $r11.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type java.lang.String") in <okhttp3.HttpUrl$Companion: void writeCanonicalized(okio.Buffer,java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean,java.nio.charset.Charset)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r10.<okio.Buffer: void <init>()>() in <okhttp3.HttpUrl$Companion: void writeCanonicalized(okio.Buffer,java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean,java.nio.charset.Charset)> ==> <okio.Buffer: void <init>()>
VIRTUAL edge: virtualinvoke $r5.<okio.Buffer: okio.Buffer writeString(java.lang.String,int,int,java.nio.charset.Charset)>($r2, $i0, $i4, $r4) in <okhttp3.HttpUrl$Companion: void writeCanonicalized(okio.Buffer,java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean,java.nio.charset.Charset)> ==> <okio.Buffer: okio.Buffer writeString(java.lang.String,int,int,java.nio.charset.Charset)>
VIRTUAL edge: virtualinvoke $r5.<okio.Buffer: okio.Buffer writeUtf8CodePoint(int)>($i2) in <okhttp3.HttpUrl$Companion: void writeCanonicalized(okio.Buffer,java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean,java.nio.charset.Charset)> ==> <okio.Buffer: okio.Buffer writeUtf8CodePoint(int)>
VIRTUAL edge: $z4 = virtualinvoke $r5.<okio.Buffer: boolean exhausted()>() in <okhttp3.HttpUrl$Companion: void writeCanonicalized(okio.Buffer,java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean,java.nio.charset.Charset)> ==> <okio.Buffer: boolean exhausted()>
VIRTUAL edge: $b5 = virtualinvoke $r5.<okio.Buffer: byte readByte()>() in <okhttp3.HttpUrl$Companion: void writeCanonicalized(okio.Buffer,java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean,java.nio.charset.Charset)> ==> <okio.Buffer: byte readByte()>
CLINIT edge: $r3 = <kotlin.text.Charsets: java.nio.charset.Charset UTF_8> in <okio.Buffer: okio.Buffer writeString(java.lang.String,int,int,java.nio.charset.Charset)> ==> <kotlin.text.Charsets: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r4, "(this as java.lang.String).getBytes(charset)") in <okio.Buffer: okio.Buffer writeString(java.lang.String,int,int,java.nio.charset.Charset)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r1, "(this as java.lang.Strin\u2026ing(startIndex, endIndex)") in <okio.Buffer: okio.Buffer writeString(java.lang.String,int,int,java.nio.charset.Charset)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
STATIC edge: $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r2, $r3) in <okio.Buffer: okio.Buffer writeString(java.lang.String,int,int,java.nio.charset.Charset)> ==> <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "charset") in <okio.Buffer: okio.Buffer writeString(java.lang.String,int,int,java.nio.charset.Charset)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "string") in <okio.Buffer: okio.Buffer writeString(java.lang.String,int,int,java.nio.charset.Charset)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type java.lang.String") in <okio.Buffer: okio.Buffer writeString(java.lang.String,int,int,java.nio.charset.Charset)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
VIRTUAL edge: r0 = virtualinvoke r0.<okio.Buffer: okio.Buffer writeUtf8(java.lang.String,int,int)>($r1, $i0, $i1) in <okio.Buffer: okio.Buffer writeString(java.lang.String,int,int,java.nio.charset.Charset)> ==> <okio.Buffer: okio.Buffer writeUtf8(java.lang.String,int,int)>
VIRTUAL edge: r0 = virtualinvoke r0.<okio.Buffer: okio.Buffer write(byte[],int,int)>($r4, 0, $i0) in <okio.Buffer: okio.Buffer writeString(java.lang.String,int,int,java.nio.charset.Charset)> ==> <okio.Buffer: okio.Buffer write(byte[],int,int)>
VIRTUAL edge: $i2 = virtualinvoke $r2.<java.lang.String: int codePointAt(int)>($i0) in <okhttp3.HttpUrl$Companion: void writeCanonicalized(okio.Buffer,java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean,java.nio.charset.Charset)> ==> <java.lang.String: int codePointAt(int)>
VIRTUAL edge: $i2 = virtualinvoke $r1.<java.lang.String: int length()>() in <okio.Buffer: okio.Buffer writeString(java.lang.String,int,int,java.nio.charset.Charset)> ==> <java.lang.String: int length()>
VIRTUAL edge: $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>($i0, $i1) in <okio.Buffer: okio.Buffer writeString(java.lang.String,int,int,java.nio.charset.Charset)> ==> <java.lang.String: java.lang.String substring(int,int)>
VIRTUAL edge: $r4 = virtualinvoke $r1.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2) in <okio.Buffer: okio.Buffer writeString(java.lang.String,int,int,java.nio.charset.Charset)> ==> <java.lang.String: byte[] getBytes(java.nio.charset.Charset)>
VIRTUAL edge: $r1 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>() in <okio.Buffer: okio.Buffer writeString(java.lang.String,int,int,java.nio.charset.Charset)> ==> <java.lang.String: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r1.<okio.Buffer: okio.Buffer writeUtf8(java.lang.String)>($r6) in <okhttp3.HttpUrl$Companion: void writeCanonicalized(okio.Buffer,java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean,java.nio.charset.Charset)> ==> <okio.Buffer: okio.Buffer writeUtf8(java.lang.String)>
VIRTUAL edge: virtualinvoke $r1.<okio.Buffer: okio.Buffer writeByte(int)>(37) in <okhttp3.HttpUrl$Companion: void writeCanonicalized(okio.Buffer,java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean,java.nio.charset.Charset)> ==> <okio.Buffer: okio.Buffer writeByte(int)>
VIRTUAL edge: virtualinvoke $r1.<okio.Buffer: okio.Buffer writeByte(int)>($i4) in <okhttp3.HttpUrl$Companion: void writeCanonicalized(okio.Buffer,java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean,java.nio.charset.Charset)> ==> <okio.Buffer: okio.Buffer writeByte(int)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "string") in <okio.Buffer: okio.Buffer writeUtf8(java.lang.String)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.String: int length()>() in <okio.Buffer: okio.Buffer writeUtf8(java.lang.String)> ==> <java.lang.String: int length()>
VIRTUAL edge: r0 = virtualinvoke r0.<okio.Buffer: okio.Buffer writeUtf8(java.lang.String,int,int)>($r1, 0, $i0) in <okio.Buffer: okio.Buffer writeUtf8(java.lang.String)> ==> <okio.Buffer: okio.Buffer writeUtf8(java.lang.String,int,int)>
SPECIAL edge: $z4 = specialinvoke r0.<okhttp3.HttpUrl$Companion: boolean isPercentEncoded(java.lang.String,int,int)>($r2, $i0, $i1) in <okhttp3.HttpUrl$Companion: void writeCanonicalized(okio.Buffer,java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean,java.nio.charset.Charset)> ==> <okhttp3.HttpUrl$Companion: boolean isPercentEncoded(java.lang.String,int,int)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.String: int length()>() in <okhttp3.HttpUrl$Companion: java.lang.String canonicalize$okhttp$default(okhttp3.HttpUrl$Companion,java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean,java.nio.charset.Charset,int,java.lang.Object)> ==> <java.lang.String: int length()>
SPECIAL edge: specialinvoke $r15.<okhttp3.HttpUrl: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.util.List,java.util.List,java.lang.String,java.lang.String)>($r1, $r3, $r4, $r5, $i0, $r6, $r13, $r12, $r14) in <okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()> ==> <okhttp3.HttpUrl: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.util.List,java.util.List,java.lang.String,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r7, "scheme") in <okhttp3.HttpUrl: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.util.List,java.util.List,java.lang.String,java.lang.String)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r7, "https") in <okhttp3.HttpUrl: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.util.List,java.util.List,java.lang.String,java.lang.String)> ==> <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r3, "pathSegments") in <okhttp3.HttpUrl: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.util.List,java.util.List,java.lang.String,java.lang.String)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "password") in <okhttp3.HttpUrl: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.util.List,java.util.List,java.lang.String,java.lang.String)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r8, "username") in <okhttp3.HttpUrl: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.util.List,java.util.List,java.lang.String,java.lang.String)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.HttpUrl: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.util.List,java.util.List,java.lang.String,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: $i0 = specialinvoke r0.<okhttp3.HttpUrl$Builder: int effectivePort()>() in <okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()> ==> <okhttp3.HttpUrl$Builder: int effectivePort()>
VIRTUAL edge: $r14 = virtualinvoke r0.<okhttp3.HttpUrl$Builder: java.lang.String toString()>() in <okhttp3.HttpUrl$Builder: okhttp3.HttpUrl build()> ==> <okhttp3.HttpUrl$Builder: java.lang.String toString()>
CLINIT edge: $r1 = <okhttp3.HttpUrl: okhttp3.HttpUrl$Companion Companion> in <okhttp3.HttpUrl$Builder: int effectivePort()> ==> <okhttp3.HttpUrl: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r2) in <okhttp3.HttpUrl$Builder: int effectivePort()> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>
CLINIT edge: $r3 = <okhttp3.HttpUrl: okhttp3.HttpUrl$Companion Companion> in <okhttp3.HttpUrl$Builder: java.lang.String toString()> ==> <okhttp3.HttpUrl: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r1, "StringBuilder().apply(builderAction).toString()") in <okhttp3.HttpUrl$Builder: java.lang.String toString()> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r4) in <okhttp3.HttpUrl$Builder: java.lang.String toString()> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <kotlin.text.StringsKt: boolean contains$default(java.lang.CharSequence,char,boolean,int,java.lang.Object)>($r2, 58, 0, 2, null) in <okhttp3.HttpUrl$Builder: java.lang.String toString()> ==> <kotlin.text.StringsKt__StringsKt: boolean contains$default(java.lang.CharSequence,char,boolean,int,java.lang.Object)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r1) in <okhttp3.HttpUrl$Builder: java.lang.String toString()> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke $r3.<okhttp3.HttpUrl$Companion: int defaultPort(java.lang.String)>($r1) in <okhttp3.HttpUrl$Builder: java.lang.String toString()> ==> <okhttp3.HttpUrl$Companion: int defaultPort(java.lang.String)>
VIRTUAL edge: virtualinvoke $r3.<okhttp3.HttpUrl$Companion: void toPathString$okhttp(java.util.List,java.lang.StringBuilder)>($r4, $r5) in <okhttp3.HttpUrl$Builder: java.lang.String toString()> ==> <okhttp3.HttpUrl$Companion: void toPathString$okhttp(java.util.List,java.lang.StringBuilder)>
VIRTUAL edge: virtualinvoke $r3.<okhttp3.HttpUrl$Companion: void toQueryString$okhttp(java.util.List,java.lang.StringBuilder)>($r4, $r5) in <okhttp3.HttpUrl$Builder: java.lang.String toString()> ==> <okhttp3.HttpUrl$Companion: void toQueryString$okhttp(java.util.List,java.lang.StringBuilder)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "scheme") in <okhttp3.HttpUrl$Companion: int defaultPort(java.lang.String)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$toPathString") in <okhttp3.HttpUrl$Companion: void toPathString$okhttp(java.util.List,java.lang.StringBuilder)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$toQueryString") in <okhttp3.HttpUrl$Companion: void toQueryString$okhttp(java.util.List,java.lang.StringBuilder)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: $r4 = staticinvoke <kotlin.ranges.RangesKt: kotlin.ranges.IntProgression step(kotlin.ranges.IntProgression,int)>($r4, 2) in <okhttp3.HttpUrl$Companion: void toQueryString$okhttp(java.util.List,java.lang.StringBuilder)> ==> <kotlin.ranges.RangesKt___RangesKt: kotlin.ranges.IntProgression step(kotlin.ranges.IntProgression,int)>
STATIC edge: $r3 = staticinvoke <kotlin.ranges.RangesKt: kotlin.ranges.IntRange until(int,int)>(0, $i0) in <okhttp3.HttpUrl$Companion: void toQueryString$okhttp(java.util.List,java.lang.StringBuilder)> ==> <kotlin.ranges.RangesKt___RangesKt: kotlin.ranges.IntRange until(int,int)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "out") in <okhttp3.HttpUrl$Companion: void toQueryString$okhttp(java.util.List,java.lang.StringBuilder)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke $r4.<kotlin.ranges.IntProgression: int getFirst()>() in <okhttp3.HttpUrl$Companion: void toQueryString$okhttp(java.util.List,java.lang.StringBuilder)> ==> <kotlin.ranges.IntProgression: int getFirst()>
VIRTUAL edge: $i2 = virtualinvoke $r4.<kotlin.ranges.IntProgression: int getLast()>() in <okhttp3.HttpUrl$Companion: void toQueryString$okhttp(java.util.List,java.lang.StringBuilder)> ==> <kotlin.ranges.IntProgression: int getLast()>
VIRTUAL edge: $i3 = virtualinvoke $r4.<kotlin.ranges.IntProgression: int getStep()>() in <okhttp3.HttpUrl$Companion: void toQueryString$okhttp(java.util.List,java.lang.StringBuilder)> ==> <kotlin.ranges.IntProgression: int getStep()>
SPECIAL edge: $i0 = specialinvoke r0.<okhttp3.HttpUrl$Builder: int effectivePort()>() in <okhttp3.HttpUrl$Builder: java.lang.String toString()> ==> <okhttp3.HttpUrl$Builder: int effectivePort()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<okhttp3.HttpUrl$Companion: int defaultPort(java.lang.String)>($r2) in <okhttp3.HttpUrl$Builder: int effectivePort()> ==> <okhttp3.HttpUrl$Companion: int defaultPort(java.lang.String)>
VIRTUAL edge: $i2 = virtualinvoke $r12.<okhttp3.HttpUrl$Companion: int defaultPort(java.lang.String)>($r7) in <okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder parse$okhttp(okhttp3.HttpUrl,java.lang.String)> ==> <okhttp3.HttpUrl$Companion: int defaultPort(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r12.<okhttp3.HttpUrl$Companion: java.util.List toQueryNamesAndValues$okhttp(java.lang.String)>($r4) in <okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder parse$okhttp(okhttp3.HttpUrl,java.lang.String)> ==> <okhttp3.HttpUrl$Companion: java.util.List toQueryNamesAndValues$okhttp(java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$toQueryNamesAndValues") in <okhttp3.HttpUrl$Companion: java.util.List toQueryNamesAndValues$okhttp(java.lang.String)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r4, "(this as java.lang.Strin\u2026ing(startIndex, endIndex)") in <okhttp3.HttpUrl$Companion: java.util.List toQueryNamesAndValues$okhttp(java.lang.String)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r4, "(this as java.lang.Strin\u2026ing(startIndex, endIndex)") in <okhttp3.HttpUrl$Companion: java.util.List toQueryNamesAndValues$okhttp(java.lang.String)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
STATIC edge: $i3 = staticinvoke <kotlin.text.StringsKt: int indexOf$default(java.lang.CharSequence,char,int,boolean,int,java.lang.Object)>($r3, 61, $i1, 0, 4, null) in <okhttp3.HttpUrl$Companion: java.util.List toQueryNamesAndValues$okhttp(java.lang.String)> ==> <kotlin.text.StringsKt__StringsKt: int indexOf$default(java.lang.CharSequence,char,int,boolean,int,java.lang.Object)>
STATIC edge: $i0 = staticinvoke <kotlin.text.StringsKt: int indexOf$default(java.lang.CharSequence,char,int,boolean,int,java.lang.Object)>($r3, 38, $i1, 0, 4, null) in <okhttp3.HttpUrl$Companion: java.util.List toQueryNamesAndValues$okhttp(java.lang.String)> ==> <kotlin.text.StringsKt__StringsKt: int indexOf$default(java.lang.CharSequence,char,int,boolean,int,java.lang.Object)>
VIRTUAL edge: $i2 = virtualinvoke $r1.<java.lang.String: int length()>() in <okhttp3.HttpUrl$Companion: java.util.List toQueryNamesAndValues$okhttp(java.lang.String)> ==> <java.lang.String: int length()>
VIRTUAL edge: $i2 = virtualinvoke $r1.<java.lang.String: int length()>() in <okhttp3.HttpUrl$Companion: java.util.List toQueryNamesAndValues$okhttp(java.lang.String)> ==> <java.lang.String: int length()>
VIRTUAL edge: $r4 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>($i1, $i3) in <okhttp3.HttpUrl$Companion: java.util.List toQueryNamesAndValues$okhttp(java.lang.String)> ==> <java.lang.String: java.lang.String substring(int,int)>
VIRTUAL edge: $r4 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>($i1, $i0) in <okhttp3.HttpUrl$Companion: java.util.List toQueryNamesAndValues$okhttp(java.lang.String)> ==> <java.lang.String: java.lang.String substring(int,int)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>() in <okhttp3.HttpUrl$Companion: int defaultPort(java.lang.String)> ==> <java.lang.String: int hashCode()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("https") in <okhttp3.HttpUrl$Companion: int defaultPort(java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0) in <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>(0, $i4) in <okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder parse$okhttp(okhttp3.HttpUrl,java.lang.String)> ==> <java.lang.String: java.lang.String substring(int,int)>
VIRTUAL edge: $r2 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>() in <okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder parse$okhttp(okhttp3.HttpUrl,java.lang.String)> ==> <java.lang.String: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>($i4, $i0) in <okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder parse$okhttp(okhttp3.HttpUrl,java.lang.String)> ==> <java.lang.String: java.lang.String substring(int,int)>
VIRTUAL edge: $i1 = virtualinvoke $r0.<java.lang.String: int length()>() in <okhttp3.internal.Util: int indexOfFirstNonAsciiWhitespace$default(java.lang.String,int,int,int,java.lang.Object)> ==> <java.lang.String: int length()>
VIRTUAL edge: $i1 = virtualinvoke $r0.<java.lang.String: int length()>() in <okhttp3.internal.Util: int indexOfLastNonAsciiWhitespace$default(java.lang.String,int,int,int,java.lang.Object)> ==> <java.lang.String: int length()>
VIRTUAL edge: virtualinvoke r0.<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder encodedQuery(java.lang.String)>($r4) in <okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder parse$okhttp(okhttp3.HttpUrl,java.lang.String)> ==> <okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder encodedQuery(java.lang.String)>
SPECIAL edge: specialinvoke r0.<okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>($r2, $i1, $i0) in <okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder parse$okhttp(okhttp3.HttpUrl,java.lang.String)> ==> <okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)>
CLINIT edge: $r1 = <okhttp3.HttpUrl: okhttp3.HttpUrl$Companion Companion> in <okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder encodedQuery(java.lang.String)> ==> <okhttp3.HttpUrl: void <clinit>()>
STATIC edge: $r2 = staticinvoke <okhttp3.HttpUrl$Companion: java.lang.String canonicalize$okhttp$default(okhttp3.HttpUrl$Companion,java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean,java.nio.charset.Charset,int,java.lang.Object)>($r1, $r2, 0, 0, " \"\'<>#", 1, 0, 1, 0, null, 211, null) in <okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder encodedQuery(java.lang.String)> ==> <okhttp3.HttpUrl$Companion: java.lang.String canonicalize$okhttp$default(okhttp3.HttpUrl$Companion,java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean,java.nio.charset.Charset,int,java.lang.Object)>
CLINIT edge: $i4 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,java.lang.String,int,int)>($r1, "/\\", $i2, $i0) in <okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)> ==> <okhttp3.internal.Util: void <clinit>()>
STATIC edge: $i4 = staticinvoke <okhttp3.internal.Util: int delimiterOffset(java.lang.String,java.lang.String,int,int)>($r1, "/\\", $i2, $i0) in <okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)> ==> <okhttp3.internal.Util: int delimiterOffset(java.lang.String,java.lang.String,int,int)>
SPECIAL edge: specialinvoke r0.<okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>($r1, $i1, $i4, $z0, 1) in <okhttp3.HttpUrl$Builder: void resolvePath(java.lang.String,int,int)> ==> <okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)>
CLINIT edge: $r2 = <okhttp3.HttpUrl: okhttp3.HttpUrl$Companion Companion> in <okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)> ==> <okhttp3.HttpUrl: void <clinit>()>
STATIC edge: $r1 = staticinvoke <okhttp3.HttpUrl$Companion: java.lang.String canonicalize$okhttp$default(okhttp3.HttpUrl$Companion,java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean,java.nio.charset.Charset,int,java.lang.Object)>($r2, $r1, $i0, $i1, " \"<>^`{}|/\\?#", $z1, 0, 0, 0, null, 240, null) in <okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)> ==> <okhttp3.HttpUrl$Companion: java.lang.String canonicalize$okhttp$default(okhttp3.HttpUrl$Companion,java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean,java.nio.charset.Charset,int,java.lang.Object)>
SPECIAL edge: $z1 = specialinvoke r0.<okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>($r1) in <okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)> ==> <okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)>
SPECIAL edge: $z1 = specialinvoke r0.<okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>($r1) in <okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)> ==> <okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)>
SPECIAL edge: specialinvoke r0.<okhttp3.HttpUrl$Builder: void pop()>() in <okhttp3.HttpUrl$Builder: void push(java.lang.String,int,int,boolean,boolean)> ==> <okhttp3.HttpUrl$Builder: void pop()>
STATIC edge: $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r1, ".") in <okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)> ==> <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>
STATIC edge: $z0 = staticinvoke <kotlin.text.StringsKt: boolean equals(java.lang.String,java.lang.String,boolean)>($r1, "%2e", 1) in <okhttp3.HttpUrl$Builder: boolean isDot(java.lang.String)> ==> <kotlin.text.StringsKt__StringsJVMKt: boolean equals(java.lang.String,java.lang.String,boolean)>
STATIC edge: $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r1, "..") in <okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)> ==> <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>
STATIC edge: $z0 = staticinvoke <kotlin.text.StringsKt: boolean equals(java.lang.String,java.lang.String,boolean)>($r1, "%2e%2e", 1) in <okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)> ==> <kotlin.text.StringsKt__StringsJVMKt: boolean equals(java.lang.String,java.lang.String,boolean)>
STATIC edge: $z0 = staticinvoke <kotlin.text.StringsKt: boolean equals(java.lang.String,java.lang.String,boolean)>($r1, ".%2e", 1) in <okhttp3.HttpUrl$Builder: boolean isDotDot(java.lang.String)> ==> <kotlin.text.StringsKt__StringsJVMKt: boolean equals(java.lang.String,java.lang.String,boolean)>
VIRTUAL edge: $r3 = virtualinvoke $r1.<okhttp3.HttpUrl$Companion: java.util.List toQueryNamesAndValues$okhttp(java.lang.String)>($r2) in <okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder encodedQuery(java.lang.String)> ==> <okhttp3.HttpUrl$Companion: java.util.List toQueryNamesAndValues$okhttp(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.HttpUrl$Builder: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>(3) in <okhttp3.Request$Builder: okhttp3.Request$Builder url(java.lang.String)> ==> <java.lang.String: java.lang.String substring(int)>
VIRTUAL edge: r0 = virtualinvoke r0.<okhttp3.Request$Builder: okhttp3.Request$Builder url(okhttp3.HttpUrl)>($r4) in <okhttp3.Request$Builder: okhttp3.Request$Builder url(java.lang.String)> ==> <okhttp3.Request$Builder: okhttp3.Request$Builder url(okhttp3.HttpUrl)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "url") in <okhttp3.Request$Builder: okhttp3.Request$Builder url(okhttp3.HttpUrl)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r4.<okhttp3.Request$Builder: okhttp3.Request$Builder post(okhttp3.RequestBody)>($r3) in <com.example.notificationtest.InfoRead$1: void run()> ==> <okhttp3.Request$Builder: okhttp3.Request$Builder post(okhttp3.RequestBody)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<okhttp3.Request$Builder: okhttp3.Request build()>() in <com.example.notificationtest.InfoRead$1: void run()> ==> <okhttp3.Request$Builder: okhttp3.Request build()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "body") in <okhttp3.Request$Builder: okhttp3.Request$Builder post(okhttp3.RequestBody)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
CLINIT edge: $r7 = staticinvoke <okhttp3.internal.Util: java.util.Map toImmutableMap(java.util.Map)>($r7) in <okhttp3.Request$Builder: okhttp3.Request build()> ==> <okhttp3.internal.Util: void <clinit>()>
STATIC edge: $r7 = staticinvoke <okhttp3.internal.Util: java.util.Map toImmutableMap(java.util.Map)>($r7) in <okhttp3.Request$Builder: okhttp3.Request build()> ==> <okhttp3.internal.Util: java.util.Map toImmutableMap(java.util.Map)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "Collections.unmodifiableMap(LinkedHashMap(this))") in <okhttp3.internal.Util: java.util.Map toImmutableMap(java.util.Map)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
STATIC edge: $r0 = staticinvoke <kotlin.collections.MapsKt: java.util.Map emptyMap()>() in <okhttp3.internal.Util: java.util.Map toImmutableMap(java.util.Map)> ==> <kotlin.collections.MapsKt__MapsKt: java.util.Map emptyMap()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$toImmutableMap") in <okhttp3.internal.Util: java.util.Map toImmutableMap(java.util.Map)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
CLINIT edge: $r0 = <kotlin.collections.EmptyMap: kotlin.collections.EmptyMap INSTANCE> in <kotlin.collections.MapsKt__MapsKt: java.util.Map emptyMap()> ==> <kotlin.collections.EmptyMap: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r0, "null cannot be cast to non-null type kotlin.collections.Map<K of kotlin.collections.MapsKt__MapsKt.emptyMap, V of kotlin.collections.MapsKt__MapsKt.emptyMap>") in <kotlin.collections.MapsKt__MapsKt: java.util.Map emptyMap()> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void throwJavaNpe(java.lang.String)>($r1) in <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)> ==> <kotlin.jvm.internal.Intrinsics: void throwJavaNpe(java.lang.String)>
STATIC edge: $r1 = staticinvoke <kotlin.jvm.internal.Intrinsics: java.lang.Throwable sanitizeStackTrace(java.lang.Throwable)>($r0) in <kotlin.jvm.internal.Intrinsics: void throwJavaNpe(java.lang.String)> ==> <kotlin.jvm.internal.Intrinsics: java.lang.Throwable sanitizeStackTrace(java.lang.Throwable)>
SPECIAL edge: specialinvoke $r0.<java.lang.NullPointerException: void <init>(java.lang.String)>($r2) in <kotlin.jvm.internal.Intrinsics: void throwJavaNpe(java.lang.String)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<kotlin.collections.EmptyMap: void <init>()>() in <kotlin.collections.EmptyMap: void <clinit>()> ==> <kotlin.collections.EmptyMap: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <kotlin.collections.EmptyMap: void <init>()> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $z0 = interfaceinvoke $r0.<java.util.Map: boolean isEmpty()>() in <okhttp3.internal.Util: java.util.Map toImmutableMap(java.util.Map)> ==> <kotlin.collections.EmptyMap: boolean isEmpty()>
SPECIAL edge: specialinvoke $r3.<okhttp3.Request: void <init>(okhttp3.HttpUrl,java.lang.String,okhttp3.Headers,okhttp3.RequestBody,java.util.Map)>($r4, $r1, $r6, $r2, $r7) in <okhttp3.Request$Builder: okhttp3.Request build()> ==> <okhttp3.Request: void <init>(okhttp3.HttpUrl,java.lang.String,okhttp3.Headers,okhttp3.RequestBody,java.util.Map)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "url") in <okhttp3.Request: void <init>(okhttp3.HttpUrl,java.lang.String,okhttp3.Headers,okhttp3.RequestBody,java.util.Map)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r5, "tags") in <okhttp3.Request: void <init>(okhttp3.HttpUrl,java.lang.String,okhttp3.Headers,okhttp3.RequestBody,java.util.Map)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "method") in <okhttp3.Request: void <init>(okhttp3.HttpUrl,java.lang.String,okhttp3.Headers,okhttp3.RequestBody,java.util.Map)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.Request: void <init>(okhttp3.HttpUrl,java.lang.String,okhttp3.Headers,okhttp3.RequestBody,java.util.Map)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>() in <okhttp3.Request$Builder: okhttp3.Request build()> ==> <java.lang.String: java.lang.String toString()>
VIRTUAL edge: r0 = virtualinvoke r0.<okhttp3.Request$Builder: okhttp3.Request$Builder method(java.lang.String,okhttp3.RequestBody)>("POST", $r1) in <okhttp3.Request$Builder: okhttp3.Request$Builder post(okhttp3.RequestBody)> ==> <okhttp3.Request$Builder: okhttp3.Request$Builder method(java.lang.String,okhttp3.RequestBody)>
CLINIT edge: $z0 = staticinvoke <okhttp3.internal.http.HttpMethod: boolean requiresRequestBody(java.lang.String)>($r1) in <okhttp3.Request$Builder: okhttp3.Request$Builder method(java.lang.String,okhttp3.RequestBody)> ==> <okhttp3.internal.http.HttpMethod: void <clinit>()>
STATIC edge: $z0 = staticinvoke <okhttp3.internal.http.HttpMethod: boolean permitsRequestBody(java.lang.String)>($r1) in <okhttp3.Request$Builder: okhttp3.Request$Builder method(java.lang.String,okhttp3.RequestBody)> ==> <okhttp3.internal.http.HttpMethod: boolean permitsRequestBody(java.lang.String)>
STATIC edge: $z0 = staticinvoke <okhttp3.internal.http.HttpMethod: boolean requiresRequestBody(java.lang.String)>($r1) in <okhttp3.Request$Builder: okhttp3.Request$Builder method(java.lang.String,okhttp3.RequestBody)> ==> <okhttp3.internal.http.HttpMethod: boolean requiresRequestBody(java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "method") in <okhttp3.Request$Builder: okhttp3.Request$Builder method(java.lang.String,okhttp3.RequestBody)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
CLINIT edge: $z0 = staticinvoke <okhttp3.internal.http.HttpMethod: boolean permitsRequestBody(java.lang.String)>($r1) in <okhttp3.Request$Builder: okhttp3.Request$Builder method(java.lang.String,okhttp3.RequestBody)> ==> <okhttp3.internal.http.HttpMethod: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "method") in <okhttp3.internal.http.HttpMethod: boolean permitsRequestBody(java.lang.String)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r0, "HEAD") in <okhttp3.internal.http.HttpMethod: boolean permitsRequestBody(java.lang.String)> ==> <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "method") in <okhttp3.internal.http.HttpMethod: boolean requiresRequestBody(java.lang.String)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r0, "REPORT") in <okhttp3.internal.http.HttpMethod: boolean requiresRequestBody(java.lang.String)> ==> <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>
STATIC edge: $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r0, "PROPPATCH") in <okhttp3.internal.http.HttpMethod: boolean requiresRequestBody(java.lang.String)> ==> <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>
STATIC edge: $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r0, "PATCH") in <okhttp3.internal.http.HttpMethod: boolean requiresRequestBody(java.lang.String)> ==> <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>
STATIC edge: $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r0, "PUT") in <okhttp3.internal.http.HttpMethod: boolean requiresRequestBody(java.lang.String)> ==> <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>
STATIC edge: $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r0, "POST") in <okhttp3.internal.http.HttpMethod: boolean requiresRequestBody(java.lang.String)> ==> <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<okhttp3.internal.http.HttpMethod: void <init>()>() in <okhttp3.internal.http.HttpMethod: void <clinit>()> ==> <okhttp3.internal.http.HttpMethod: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.internal.http.HttpMethod: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>() in <okhttp3.Request$Builder: okhttp3.Request$Builder method(java.lang.String,okhttp3.RequestBody)> ==> <java.lang.String: java.lang.String toString()>
INTERFACE edge: $i0 = interfaceinvoke $r3.<java.lang.CharSequence: int length()>() in <okhttp3.Request$Builder: okhttp3.Request$Builder method(java.lang.String,okhttp3.RequestBody)> ==> <java.lang.String: int length()>
SPECIAL edge: specialinvoke $r3.<okhttp3.Headers$Builder: void <init>()>() in <okhttp3.Request$Builder: void <init>()> ==> <okhttp3.Headers$Builder: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.Headers$Builder: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.Request$Builder: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r0) in <kotlin.text.StringsKt__StringsJVMKt: boolean equals(java.lang.String,java.lang.String,boolean)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r0) in <kotlin.text.StringsKt__StringsJVMKt: boolean equals(java.lang.String,java.lang.String,boolean)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean equalsIgnoreCase(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<okio.Segment: okio.Segment pop()>() in <okio.Buffer: byte readByte()> ==> <okio.Segment: okio.Segment pop()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r2) in <okio.Segment: okio.Segment pop()> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r2) in <okio.Segment: okio.Segment pop()> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.String: boolean regionMatches(int,java.lang.String,int,int)>($i0, $r0, $i1, $i2) in <kotlin.text.StringsKt__StringsJVMKt: boolean regionMatches(java.lang.String,int,java.lang.String,int,int,boolean)> ==> <java.lang.String: boolean regionMatches(int,java.lang.String,int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>($z0, $i0, $r0, $i1, $i2) in <kotlin.text.StringsKt__StringsJVMKt: boolean regionMatches(java.lang.String,int,java.lang.String,int,int,boolean)> ==> <java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean regionMatches(int,java.lang.String,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>($r0) in <kotlin.text.StringsKt__StringsJVMKt: boolean startsWith(java.lang.String,java.lang.String,boolean)> ==> <java.lang.String: boolean startsWith(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean startsWith(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.String: boolean endsWith(java.lang.String)>($r0) in <kotlin.text.StringsKt__StringsJVMKt: boolean endsWith(java.lang.String,java.lang.String,boolean)> ==> <java.lang.String: boolean endsWith(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.String: int length()>() in <kotlin.text.StringsKt__StringsJVMKt: boolean endsWith(java.lang.String,java.lang.String,boolean)> ==> <java.lang.String: int length()>
INTERFACE edge: $i3 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>() in <kotlin.text.StringsKt__StringsKt: boolean regionMatchesImpl(java.lang.CharSequence,int,java.lang.CharSequence,int,int,boolean)> ==> <java.lang.String: int length()>
SPECIAL edge: specialinvoke $r9.<okhttp3.OkHttpClient: void <init>()>() in <com.example.notificationtest.InfoRead$1: void run()> ==> <okhttp3.OkHttpClient: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r9.<okhttp3.OkHttpClient: okhttp3.Call newCall(okhttp3.Request)>($r5) in <com.example.notificationtest.InfoRead$1: void run()> ==> <okhttp3.OkHttpClient: okhttp3.Call newCall(okhttp3.Request)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "request") in <okhttp3.OkHttpClient: okhttp3.Call newCall(okhttp3.Request)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
INTERFACE edge: $r7 = interfaceinvoke $r6.<okhttp3.Call: okhttp3.Response execute()>() in <com.example.notificationtest.InfoRead$1: void run()> ==> <okhttp3.internal.connection.RealCall: okhttp3.Response execute()>
VIRTUAL edge: $r8 = virtualinvoke $r8.<java.lang.Object: java.lang.String toString()>() in <okhttp3.internal.connection.RealCall: okhttp3.Response execute()> ==> <java.lang.String: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<okhttp3.internal.connection.RealCall: void callStart()>() in <okhttp3.internal.connection.RealCall: okhttp3.Response execute()> ==> <okhttp3.internal.connection.RealCall: void callStart()>
VIRTUAL edge: $r5 = virtualinvoke r0.<okhttp3.internal.connection.RealCall: okhttp3.Response getResponseWithInterceptorChain$okhttp()>() in <okhttp3.internal.connection.RealCall: okhttp3.Response execute()> ==> <okhttp3.internal.connection.RealCall: okhttp3.Response getResponseWithInterceptorChain$okhttp()>
CLINIT edge: $r1 = <okhttp3.internal.platform.Platform: okhttp3.internal.platform.Platform$Companion Companion> in <okhttp3.internal.connection.RealCall: void callStart()> ==> <okhttp3.internal.platform.Platform: void <clinit>()>
CLINIT edge: $r16 = new okhttp3.internal.http.RetryAndFollowUpInterceptor in <okhttp3.internal.connection.RealCall: okhttp3.Response getResponseWithInterceptorChain$okhttp()> ==> <okhttp3.internal.http.RetryAndFollowUpInterceptor: void <clinit>()>
STATIC edge: staticinvoke <okhttp3.internal.Util: void closeQuietly(java.io.Closeable)>($r11) in <okhttp3.internal.connection.RealCall: okhttp3.Response getResponseWithInterceptorChain$okhttp()> ==> <okhttp3.internal.Util: void closeQuietly(java.io.Closeable)>
STATIC edge: staticinvoke <kotlin.collections.CollectionsKt: boolean addAll(java.util.Collection,java.lang.Iterable)>($r3, $r6) in <okhttp3.internal.connection.RealCall: okhttp3.Response getResponseWithInterceptorChain$okhttp()> ==> <kotlin.collections.CollectionsKt__MutableCollectionsKt: boolean addAll(java.util.Collection,java.lang.Iterable)>
STATIC edge: staticinvoke <kotlin.collections.CollectionsKt: boolean addAll(java.util.Collection,java.lang.Iterable)>($r3, $r6) in <okhttp3.internal.connection.RealCall: okhttp3.Response getResponseWithInterceptorChain$okhttp()> ==> <kotlin.collections.CollectionsKt__MutableCollectionsKt: boolean addAll(java.util.Collection,java.lang.Iterable)>
CLINIT edge: staticinvoke <okhttp3.internal.Util: void closeQuietly(java.io.Closeable)>($r11) in <okhttp3.internal.connection.RealCall: okhttp3.Response getResponseWithInterceptorChain$okhttp()> ==> <okhttp3.internal.Util: void <clinit>()>
CLINIT edge: $r9 = <okhttp3.internal.connection.ConnectInterceptor: okhttp3.internal.connection.ConnectInterceptor INSTANCE> in <okhttp3.internal.connection.RealCall: okhttp3.Response getResponseWithInterceptorChain$okhttp()> ==> <okhttp3.internal.connection.ConnectInterceptor: void <clinit>()>
CLINIT edge: $r18 = new okhttp3.internal.cache.CacheInterceptor in <okhttp3.internal.connection.RealCall: okhttp3.Response getResponseWithInterceptorChain$okhttp()> ==> <okhttp3.internal.cache.CacheInterceptor: void <clinit>()>
STATIC edge: $r1 = staticinvoke <okhttp3.internal.platform.Platform$Companion: okhttp3.internal.platform.Platform access$findPlatform(okhttp3.internal.platform.Platform$Companion)>($r0) in <okhttp3.internal.platform.Platform: void <clinit>()> ==> <okhttp3.internal.platform.Platform$Companion: okhttp3.internal.platform.Platform access$findPlatform(okhttp3.internal.platform.Platform$Companion)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$closeQuietly") in <okhttp3.internal.Util: void closeQuietly(java.io.Closeable)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>") in <kotlin.collections.CollectionsKt__MutableCollectionsKt: boolean addAll(java.util.Collection,java.lang.Iterable)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "elements") in <kotlin.collections.CollectionsKt__MutableCollectionsKt: boolean addAll(java.util.Collection,java.lang.Iterable)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r0.<okhttp3.internal.platform.Platform$Companion: boolean isAndroid()>() in <okhttp3.internal.platform.Platform$Companion: okhttp3.internal.platform.Platform findPlatform()> ==> <okhttp3.internal.platform.Platform$Companion: boolean isAndroid()>
SPECIAL edge: $r1 = specialinvoke r0.<okhttp3.internal.platform.Platform$Companion: okhttp3.internal.platform.Platform findAndroidPlatform()>() in <okhttp3.internal.platform.Platform$Companion: okhttp3.internal.platform.Platform findPlatform()> ==> <okhttp3.internal.platform.Platform$Companion: okhttp3.internal.platform.Platform findAndroidPlatform()>
SPECIAL edge: $r1 = specialinvoke r0.<okhttp3.internal.platform.Platform$Companion: okhttp3.internal.platform.Platform findJvmPlatform()>() in <okhttp3.internal.platform.Platform$Companion: okhttp3.internal.platform.Platform findPlatform()> ==> <okhttp3.internal.platform.Platform$Companion: okhttp3.internal.platform.Platform findJvmPlatform()>
STATIC edge: $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>("Dalvik", $r1) in <okhttp3.internal.platform.Platform$Companion: boolean isAndroid()> ==> <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>
CLINIT edge: $r1 = <okhttp3.internal.platform.android.AndroidLog: okhttp3.internal.platform.android.AndroidLog INSTANCE> in <okhttp3.internal.platform.Platform$Companion: okhttp3.internal.platform.Platform findAndroidPlatform()> ==> <okhttp3.internal.platform.android.AndroidLog: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r3) in <okhttp3.internal.platform.Platform$Companion: okhttp3.internal.platform.Platform findAndroidPlatform()> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>
CLINIT edge: $r4 = <okhttp3.internal.platform.AndroidPlatform: okhttp3.internal.platform.AndroidPlatform$Companion Companion> in <okhttp3.internal.platform.Platform$Companion: okhttp3.internal.platform.Platform findAndroidPlatform()> ==> <okhttp3.internal.platform.AndroidPlatform: void <clinit>()>
CLINIT edge: $r2 = <okhttp3.internal.platform.Android10Platform: okhttp3.internal.platform.Android10Platform$Companion Companion> in <okhttp3.internal.platform.Platform$Companion: okhttp3.internal.platform.Platform findAndroidPlatform()> ==> <okhttp3.internal.platform.Android10Platform: void <clinit>()>
CLINIT edge: $r1 = <okhttp3.internal.platform.ConscryptPlatform: okhttp3.internal.platform.ConscryptPlatform$Companion Companion> in <okhttp3.internal.platform.Platform$Companion: okhttp3.internal.platform.Platform findJvmPlatform()> ==> <okhttp3.internal.platform.ConscryptPlatform: void <clinit>()>
CLINIT edge: $r10 = <okhttp3.internal.platform.Jdk8WithJettyBootPlatform: okhttp3.internal.platform.Jdk8WithJettyBootPlatform$Companion Companion> in <okhttp3.internal.platform.Platform$Companion: okhttp3.internal.platform.Platform findJvmPlatform()> ==> <okhttp3.internal.platform.Jdk8WithJettyBootPlatform: void <clinit>()>
CLINIT edge: $r8 = <okhttp3.internal.platform.Jdk9Platform: okhttp3.internal.platform.Jdk9Platform$Companion Companion> in <okhttp3.internal.platform.Platform$Companion: okhttp3.internal.platform.Platform findJvmPlatform()> ==> <okhttp3.internal.platform.Platform: void <clinit>()>
CLINIT edge: $r8 = <okhttp3.internal.platform.Jdk9Platform: okhttp3.internal.platform.Jdk9Platform$Companion Companion> in <okhttp3.internal.platform.Platform$Companion: okhttp3.internal.platform.Platform findJvmPlatform()> ==> <okhttp3.internal.platform.Jdk9Platform: void <clinit>()>
CLINIT edge: $r6 = <okhttp3.internal.platform.OpenJSSEPlatform: okhttp3.internal.platform.OpenJSSEPlatform$Companion Companion> in <okhttp3.internal.platform.Platform$Companion: okhttp3.internal.platform.Platform findJvmPlatform()> ==> <okhttp3.internal.platform.OpenJSSEPlatform: void <clinit>()>
CLINIT edge: $r4 = <okhttp3.internal.platform.BouncyCastlePlatform: okhttp3.internal.platform.BouncyCastlePlatform$Companion Companion> in <okhttp3.internal.platform.Platform$Companion: okhttp3.internal.platform.Platform findJvmPlatform()> ==> <okhttp3.internal.platform.Platform: void <clinit>()>
CLINIT edge: $r1 = <okhttp3.internal.platform.ConscryptPlatform: okhttp3.internal.platform.ConscryptPlatform$Companion Companion> in <okhttp3.internal.platform.Platform$Companion: okhttp3.internal.platform.Platform findJvmPlatform()> ==> <okhttp3.internal.platform.Platform: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r5, "OkHttpClient::class.java.name") in <okhttp3.internal.platform.android.AndroidLog: void <clinit>()> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
STATIC edge: $r6 = staticinvoke <kotlin.collections.MapsKt: java.util.Map toMap(java.util.Map)>($r6) in <okhttp3.internal.platform.android.AndroidLog: void <clinit>()> ==> <kotlin.collections.MapsKt__MapsKt: java.util.Map toMap(java.util.Map)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r5, "Http2::class.java.name") in <okhttp3.internal.platform.android.AndroidLog: void <clinit>()> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>("org.conscrypt.Conscrypt$Version", 0, $r4) in <okhttp3.internal.platform.ConscryptPlatform: void <clinit>()> ==> <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>
CLINIT edge: <okhttp3.internal.platform.ConscryptPlatform: boolean isSupported> = $z0 in <okhttp3.internal.platform.ConscryptPlatform: void <clinit>()> ==> <okhttp3.internal.platform.Platform: void <clinit>()>
CLINIT edge: <okhttp3.internal.platform.Jdk8WithJettyBootPlatform: okhttp3.internal.platform.Jdk8WithJettyBootPlatform$Companion Companion> = $r0 in <okhttp3.internal.platform.Jdk8WithJettyBootPlatform: void <clinit>()> ==> <okhttp3.internal.platform.Platform: void <clinit>()>
CLINIT edge: <okhttp3.internal.platform.Jdk9Platform: okhttp3.internal.platform.Jdk9Platform$Companion Companion> = $r2 in <okhttp3.internal.platform.Jdk9Platform: void <clinit>()> ==> <okhttp3.internal.platform.Platform: void <clinit>()>
STATIC edge: $r3 = staticinvoke <kotlin.text.StringsKt: java.lang.Integer toIntOrNull(java.lang.String)>($r4) in <okhttp3.internal.platform.Jdk9Platform: void <clinit>()> ==> <kotlin.text.StringsKt__StringNumberConversionsKt: java.lang.Integer toIntOrNull(java.lang.String)>
CLINIT edge: <okhttp3.internal.platform.Jdk9Platform: boolean isAvailable> = $z0 in <okhttp3.internal.platform.Jdk9Platform: void <clinit>()> ==> <okhttp3.internal.platform.Platform: void <clinit>()>
STATIC edge: staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>("org.openjsse.net.ssl.OpenJSSE", 0, $r3) in <okhttp3.internal.platform.OpenJSSEPlatform: void <clinit>()> ==> <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>
CLINIT edge: <okhttp3.internal.platform.OpenJSSEPlatform: boolean isSupported> = $z0 in <okhttp3.internal.platform.OpenJSSEPlatform: void <clinit>()> ==> <okhttp3.internal.platform.Platform: void <clinit>()>
STATIC edge: staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>("org.bouncycastle.jsse.provider.BouncyCastleJsseProvider", 0, $r3) in <okhttp3.internal.platform.BouncyCastlePlatform: void <clinit>()> ==> <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>
CLINIT edge: <okhttp3.internal.platform.BouncyCastlePlatform: boolean isSupported> = $z0 in <okhttp3.internal.platform.BouncyCastlePlatform: void <clinit>()> ==> <okhttp3.internal.platform.Platform: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>") in <kotlin.collections.MapsKt__MapsKt: java.util.Map toMap(java.util.Map)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: $r0 = staticinvoke <kotlin.collections.MapsKt: java.util.Map emptyMap()>() in <kotlin.collections.MapsKt__MapsKt: java.util.Map toMap(java.util.Map)> ==> <kotlin.collections.MapsKt__MapsKt: java.util.Map emptyMap()>
STATIC edge: $r0 = staticinvoke <kotlin.collections.MapsKt: java.util.Map toSingletonMap(java.util.Map)>($r0) in <kotlin.collections.MapsKt__MapsKt: java.util.Map toMap(java.util.Map)> ==> <kotlin.collections.MapsKt__MapsJVMKt: java.util.Map toSingletonMap(java.util.Map)>
STATIC edge: $r0 = staticinvoke <kotlin.collections.MapsKt: java.util.Map toMutableMap(java.util.Map)>($r0) in <kotlin.collections.MapsKt__MapsKt: java.util.Map toMap(java.util.Map)> ==> <kotlin.collections.MapsKt__MapsKt: java.util.Map toMutableMap(java.util.Map)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>") in <kotlin.text.StringsKt__StringNumberConversionsKt: java.lang.Integer toIntOrNull(java.lang.String)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: $r0 = staticinvoke <kotlin.text.StringsKt: java.lang.Integer toIntOrNull(java.lang.String,int)>($r1, 10) in <kotlin.text.StringsKt__StringNumberConversionsKt: java.lang.Integer toIntOrNull(java.lang.String)> ==> <kotlin.text.StringsKt__StringNumberConversionsKt: java.lang.Integer toIntOrNull(java.lang.String,int)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "with(entries.iterator().\u2026ingletonMap(key, value) }") in <kotlin.collections.MapsKt__MapsJVMKt: java.util.Map toSingletonMap(java.util.Map)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>") in <kotlin.collections.MapsKt__MapsJVMKt: java.util.Map toSingletonMap(java.util.Map)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>") in <kotlin.collections.MapsKt__MapsKt: java.util.Map toMutableMap(java.util.Map)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
CLINIT edge: $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1) in <kotlin.text.StringsKt__StringNumberConversionsKt: java.lang.Integer toIntOrNull(java.lang.String,int)> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <kotlin.text.StringsKt__StringNumberConversionsKt: java.lang.Integer toIntOrNull(java.lang.String,int)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $i7 = staticinvoke <kotlin.text.CharsKt: int digitOf(char,int)>($c3, $i0) in <kotlin.text.StringsKt__StringNumberConversionsKt: java.lang.Integer toIntOrNull(java.lang.String,int)> ==> <kotlin.text.CharsKt__CharJVMKt: int digitOf(char,int)>
STATIC edge: $i4 = staticinvoke <kotlin.jvm.internal.Intrinsics: int compare(int,int)>($i5, 48) in <kotlin.text.StringsKt__StringNumberConversionsKt: java.lang.Integer toIntOrNull(java.lang.String,int)> ==> <kotlin.jvm.internal.Intrinsics: int compare(int,int)>
STATIC edge: staticinvoke <kotlin.text.CharsKt: int checkRadix(int)>($i0) in <kotlin.text.StringsKt__StringNumberConversionsKt: java.lang.Integer toIntOrNull(java.lang.String,int)> ==> <kotlin.text.CharsKt__CharJVMKt: int checkRadix(int)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>") in <kotlin.text.StringsKt__StringNumberConversionsKt: java.lang.Integer toIntOrNull(java.lang.String,int)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
CLINIT edge: $i0 = staticinvoke <java.lang.Character: int digit(int,int)>($i2, $i0) in <kotlin.text.CharsKt__CharJVMKt: int digitOf(char,int)> ==> <java.lang.Character: void <clinit>()>
STATIC edge: $i0 = staticinvoke <java.lang.Character: int digit(int,int)>($i2, $i0) in <kotlin.text.CharsKt__CharJVMKt: int digitOf(char,int)> ==> <java.lang.Character: int digit(int,int)>
CLINIT edge: $r0 = new kotlin.ranges.IntRange in <kotlin.text.CharsKt__CharJVMKt: int checkRadix(int)> ==> <kotlin.ranges.IntRange: void <clinit>()>
CLINIT edge: $r0 = new kotlin.ranges.IntRange in <kotlin.text.CharsKt__CharJVMKt: int checkRadix(int)> ==> <kotlin.ranges.IntProgression: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int digit(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<kotlin.ranges.IntRange: void <init>(int,int)>(2, 36) in <kotlin.text.CharsKt__CharJVMKt: int checkRadix(int)> ==> <kotlin.ranges.IntRange: void <init>(int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r0.<kotlin.ranges.IntRange: boolean contains(int)>($i0) in <kotlin.text.CharsKt__CharJVMKt: int checkRadix(int)> ==> <kotlin.ranges.IntRange: boolean contains(int)>
VIRTUAL edge: $i1 = virtualinvoke r0.<kotlin.ranges.IntRange: int getFirst()>() in <kotlin.ranges.IntRange: boolean contains(int)> ==> <kotlin.ranges.IntProgression: int getFirst()>
VIRTUAL edge: $i1 = virtualinvoke r0.<kotlin.ranges.IntRange: int getLast()>() in <kotlin.ranges.IntRange: boolean contains(int)> ==> <kotlin.ranges.IntProgression: int getLast()>
INTERFACE edge: $r1 = interfaceinvoke $r0.<java.util.Map: java.util.Set entrySet()>() in <kotlin.collections.MapsKt__MapsJVMKt: java.util.Map toSingletonMap(java.util.Map)> ==> <kotlin.collections.EmptyMap: java.util.Set entrySet()>
VIRTUAL edge: $r1 = virtualinvoke r0.<kotlin.collections.EmptyMap: java.util.Set getEntries()>() in <kotlin.collections.EmptyMap: java.util.Set entrySet()> ==> <kotlin.collections.EmptyMap: java.util.Set getEntries()>
CLINIT edge: $r1 = <kotlin.collections.EmptySet: kotlin.collections.EmptySet INSTANCE> in <kotlin.collections.EmptyMap: java.util.Set getEntries()> ==> <kotlin.collections.EmptySet: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<kotlin.collections.EmptySet: void <init>()>() in <kotlin.collections.EmptySet: void <clinit>()> ==> <kotlin.collections.EmptySet: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <kotlin.collections.EmptySet: void <init>()> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>() in <kotlin.collections.MapsKt__MapsJVMKt: java.util.Map toSingletonMap(java.util.Map)> ==> <kotlin.collections.EmptySet: java.util.Iterator iterator()>
CLINIT edge: $r1 = <kotlin.collections.EmptyIterator: kotlin.collections.EmptyIterator INSTANCE> in <kotlin.collections.EmptySet: java.util.Iterator iterator()> ==> <kotlin.collections.EmptyIterator: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<kotlin.collections.EmptyIterator: void <init>()>() in <kotlin.collections.EmptyIterator: void <clinit>()> ==> <kotlin.collections.EmptyIterator: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <kotlin.collections.EmptyIterator: void <init>()> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>() in <kotlin.collections.MapsKt__MapsJVMKt: java.util.Map toSingletonMap(java.util.Map)> ==> <kotlin.collections.EmptyIterator: java.lang.Void next()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
INTERFACE edge: $i0 = interfaceinvoke $r0.<java.util.Map: int size()>() in <kotlin.collections.MapsKt__MapsKt: java.util.Map toMap(java.util.Map)> ==> <kotlin.collections.EmptyMap: int size()>
VIRTUAL edge: $i0 = virtualinvoke r0.<kotlin.collections.EmptyMap: int getSize()>() in <kotlin.collections.EmptyMap: int size()> ==> <kotlin.collections.EmptyMap: int getSize()>
SPECIAL edge: specialinvoke $r1.<okhttp3.internal.platform.BouncyCastlePlatform$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null) in <okhttp3.internal.platform.BouncyCastlePlatform: void <clinit>()> ==> <okhttp3.internal.platform.BouncyCastlePlatform$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>() in <okhttp3.internal.platform.BouncyCastlePlatform: void <clinit>()> ==> <java.lang.Object: java.lang.Class getClass()>
SPECIAL edge: specialinvoke r0.<okhttp3.internal.platform.BouncyCastlePlatform$Companion: void <init>()>() in <okhttp3.internal.platform.BouncyCastlePlatform$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)> ==> <okhttp3.internal.platform.BouncyCastlePlatform$Companion: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.internal.platform.BouncyCastlePlatform$Companion: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<okhttp3.internal.platform.OpenJSSEPlatform$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null) in <okhttp3.internal.platform.OpenJSSEPlatform: void <clinit>()> ==> <okhttp3.internal.platform.OpenJSSEPlatform$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>() in <okhttp3.internal.platform.OpenJSSEPlatform: void <clinit>()> ==> <java.lang.Object: java.lang.Class getClass()>
SPECIAL edge: specialinvoke r0.<okhttp3.internal.platform.OpenJSSEPlatform$Companion: void <init>()>() in <okhttp3.internal.platform.OpenJSSEPlatform$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)> ==> <okhttp3.internal.platform.OpenJSSEPlatform$Companion: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.internal.platform.OpenJSSEPlatform$Companion: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r5.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getApplicationProtocol", $r0) in <okhttp3.internal.platform.Jdk9Platform: void <clinit>()> ==> <java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r2.<okhttp3.internal.platform.Jdk9Platform$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null) in <okhttp3.internal.platform.Jdk9Platform: void <clinit>()> ==> <okhttp3.internal.platform.Jdk9Platform$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>
SPECIAL edge: specialinvoke r0.<okhttp3.internal.platform.Jdk9Platform$Companion: void <init>()>() in <okhttp3.internal.platform.Jdk9Platform$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)> ==> <okhttp3.internal.platform.Jdk9Platform$Companion: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.internal.platform.Jdk9Platform$Companion: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<okhttp3.internal.platform.Jdk8WithJettyBootPlatform$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null) in <okhttp3.internal.platform.Jdk8WithJettyBootPlatform: void <clinit>()> ==> <okhttp3.internal.platform.Jdk8WithJettyBootPlatform$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>
SPECIAL edge: specialinvoke r0.<okhttp3.internal.platform.Jdk8WithJettyBootPlatform$Companion: void <init>()>() in <okhttp3.internal.platform.Jdk8WithJettyBootPlatform$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)> ==> <okhttp3.internal.platform.Jdk8WithJettyBootPlatform$Companion: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.internal.platform.Jdk8WithJettyBootPlatform$Companion: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r2.<okhttp3.internal.platform.ConscryptPlatform$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null) in <okhttp3.internal.platform.ConscryptPlatform: void <clinit>()> ==> <okhttp3.internal.platform.ConscryptPlatform$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>() in <okhttp3.internal.platform.ConscryptPlatform: void <clinit>()> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $z1 = virtualinvoke $r2.<okhttp3.internal.platform.ConscryptPlatform$Companion: boolean atLeastVersion(int,int,int)>(2, 1, 0) in <okhttp3.internal.platform.ConscryptPlatform: void <clinit>()> ==> <okhttp3.internal.platform.ConscryptPlatform$Companion: boolean atLeastVersion(int,int,int)>
SPECIAL edge: specialinvoke r0.<okhttp3.internal.platform.ConscryptPlatform$Companion: void <init>()>() in <okhttp3.internal.platform.ConscryptPlatform$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)> ==> <okhttp3.internal.platform.ConscryptPlatform$Companion: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.internal.platform.ConscryptPlatform$Companion: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<okhttp3.internal.platform.Platform$Companion: boolean isAndroid()>() in <okhttp3.internal.platform.Android10Platform: void <clinit>()> ==> <okhttp3.internal.platform.Platform$Companion: boolean isAndroid()>
SPECIAL edge: specialinvoke $r0.<okhttp3.internal.platform.Android10Platform$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null) in <okhttp3.internal.platform.Android10Platform: void <clinit>()> ==> <okhttp3.internal.platform.Android10Platform$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>
SPECIAL edge: specialinvoke r0.<okhttp3.internal.platform.Android10Platform$Companion: void <init>()>() in <okhttp3.internal.platform.Android10Platform$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)> ==> <okhttp3.internal.platform.Android10Platform$Companion: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.internal.platform.Android10Platform$Companion: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<okhttp3.internal.platform.Platform$Companion: boolean isAndroid()>() in <okhttp3.internal.platform.AndroidPlatform: void <clinit>()> ==> <okhttp3.internal.platform.Platform$Companion: boolean isAndroid()>
SPECIAL edge: specialinvoke $r0.<okhttp3.internal.platform.AndroidPlatform$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null) in <okhttp3.internal.platform.AndroidPlatform: void <clinit>()> ==> <okhttp3.internal.platform.AndroidPlatform$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>
SPECIAL edge: specialinvoke r0.<okhttp3.internal.platform.AndroidPlatform$Companion: void <init>()>() in <okhttp3.internal.platform.AndroidPlatform$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)> ==> <okhttp3.internal.platform.AndroidPlatform$Companion: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.internal.platform.AndroidPlatform$Companion: void <init>()> ==> <java.lang.Object: void <init>()>
INTERFACE edge: interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, "OkHttp") in <okhttp3.internal.platform.android.AndroidLog: void <clinit>()> ==> <kotlin.collections.EmptyMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, "okhttp.Http2") in <okhttp3.internal.platform.android.AndroidLog: void <clinit>()> ==> <kotlin.collections.EmptyMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("okhttp3.mockwebserver.MockWebServer", "okhttp.MockWebServer") in <okhttp3.internal.platform.android.AndroidLog: void <clinit>()> ==> <kotlin.collections.EmptyMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.Package getPackage()>() in <okhttp3.internal.platform.android.AndroidLog: void <clinit>()> ==> <java.lang.Class: java.lang.Package getPackage()>
VIRTUAL edge: $r5 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>() in <okhttp3.internal.platform.android.AndroidLog: void <clinit>()> ==> <java.lang.Class: java.lang.String getName()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Package getPackage()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<okhttp3.internal.platform.android.AndroidLog: void <init>()>() in <okhttp3.internal.platform.android.AndroidLog: void <clinit>()> ==> <okhttp3.internal.platform.android.AndroidLog: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.internal.platform.android.AndroidLog: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r10.<okhttp3.internal.platform.Jdk8WithJettyBootPlatform$Companion: okhttp3.internal.platform.Platform buildIfSupported()>() in <okhttp3.internal.platform.Platform$Companion: okhttp3.internal.platform.Platform findJvmPlatform()> ==> <okhttp3.internal.platform.Jdk8WithJettyBootPlatform$Companion: okhttp3.internal.platform.Platform buildIfSupported()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r8, "serverProviderClass") in <okhttp3.internal.platform.Jdk8WithJettyBootPlatform$Companion: okhttp3.internal.platform.Platform buildIfSupported()> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r11, "getMethod") in <okhttp3.internal.platform.Jdk8WithJettyBootPlatform$Companion: okhttp3.internal.platform.Platform buildIfSupported()> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
STATIC edge: $r8 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>("org.eclipse.jetty.alpn.ALPN$ServerProvider", 1, null) in <okhttp3.internal.platform.Jdk8WithJettyBootPlatform$Companion: okhttp3.internal.platform.Platform buildIfSupported()> ==> <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>
STATIC edge: $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r4) in <okhttp3.internal.platform.Jdk8WithJettyBootPlatform$Companion: okhttp3.internal.platform.Platform buildIfSupported()> ==> <java.lang.Integer: int parseInt(java.lang.String)>
CLINIT edge: $r13 = new okhttp3.internal.platform.Jdk8WithJettyBootPlatform in <okhttp3.internal.platform.Jdk8WithJettyBootPlatform$Companion: okhttp3.internal.platform.Platform buildIfSupported()> ==> <okhttp3.internal.platform.Jdk8WithJettyBootPlatform: void <clinit>()>
CLINIT edge: $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r4) in <okhttp3.internal.platform.Jdk8WithJettyBootPlatform$Companion: okhttp3.internal.platform.Platform buildIfSupported()> ==> <java.lang.Integer: void <clinit>()>
SPECIAL edge: specialinvoke $r13.<okhttp3.internal.platform.Jdk8WithJettyBootPlatform: void <init>(java.lang.reflect.Method,java.lang.reflect.Method,java.lang.reflect.Method,java.lang.Class,java.lang.Class)>($r10, $r11, $r12, $r7, $r8) in <okhttp3.internal.platform.Jdk8WithJettyBootPlatform$Companion: okhttp3.internal.platform.Platform buildIfSupported()> ==> <okhttp3.internal.platform.Jdk8WithJettyBootPlatform: void <init>(java.lang.reflect.Method,java.lang.reflect.Method,java.lang.reflect.Method,java.lang.Class,java.lang.Class)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "putMethod") in <okhttp3.internal.platform.Jdk8WithJettyBootPlatform: void <init>(java.lang.reflect.Method,java.lang.reflect.Method,java.lang.reflect.Method,java.lang.Class,java.lang.Class)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r3, "removeMethod") in <okhttp3.internal.platform.Jdk8WithJettyBootPlatform: void <init>(java.lang.reflect.Method,java.lang.reflect.Method,java.lang.reflect.Method,java.lang.Class,java.lang.Class)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "getMethod") in <okhttp3.internal.platform.Jdk8WithJettyBootPlatform: void <init>(java.lang.reflect.Method,java.lang.reflect.Method,java.lang.reflect.Method,java.lang.Class,java.lang.Class)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke r0.<okhttp3.internal.platform.Platform: void <init>()>() in <okhttp3.internal.platform.Jdk8WithJettyBootPlatform: void <init>(java.lang.reflect.Method,java.lang.reflect.Method,java.lang.reflect.Method,java.lang.Class,java.lang.Class)> ==> <okhttp3.internal.platform.Platform: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.internal.platform.Platform: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r9 = virtualinvoke $r8.<okhttp3.internal.platform.Jdk9Platform$Companion: okhttp3.internal.platform.Jdk9Platform buildIfSupported()>() in <okhttp3.internal.platform.Platform$Companion: okhttp3.internal.platform.Platform findJvmPlatform()> ==> <okhttp3.internal.platform.Jdk9Platform$Companion: okhttp3.internal.platform.Jdk9Platform buildIfSupported()>
CLINIT edge: $r1 = new okhttp3.internal.platform.Jdk9Platform in <okhttp3.internal.platform.Jdk9Platform$Companion: okhttp3.internal.platform.Jdk9Platform buildIfSupported()> ==> <okhttp3.internal.platform.Jdk9Platform: void <clinit>()>
CLINIT edge: $r1 = new okhttp3.internal.platform.Jdk9Platform in <okhttp3.internal.platform.Jdk9Platform$Companion: okhttp3.internal.platform.Jdk9Platform buildIfSupported()> ==> <okhttp3.internal.platform.Platform: void <clinit>()>
SPECIAL edge: specialinvoke $r1.<okhttp3.internal.platform.Jdk9Platform: void <init>()>() in <okhttp3.internal.platform.Jdk9Platform$Companion: okhttp3.internal.platform.Jdk9Platform buildIfSupported()> ==> <okhttp3.internal.platform.Jdk9Platform: void <init>()>
SPECIAL edge: specialinvoke r0.<okhttp3.internal.platform.Platform: void <init>()>() in <okhttp3.internal.platform.Jdk9Platform: void <init>()> ==> <okhttp3.internal.platform.Platform: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke r0.<okhttp3.internal.platform.Jdk9Platform$Companion: boolean isAvailable()>() in <okhttp3.internal.platform.Jdk9Platform$Companion: okhttp3.internal.platform.Jdk9Platform buildIfSupported()> ==> <okhttp3.internal.platform.Jdk9Platform$Companion: boolean isAvailable()>
CLINIT edge: $z0 = staticinvoke <okhttp3.internal.platform.Jdk9Platform: boolean access$isAvailable$cp()>() in <okhttp3.internal.platform.Jdk9Platform$Companion: boolean isAvailable()> ==> <okhttp3.internal.platform.Jdk9Platform: void <clinit>()>
STATIC edge: $z0 = staticinvoke <okhttp3.internal.platform.Jdk9Platform: boolean access$isAvailable$cp()>() in <okhttp3.internal.platform.Jdk9Platform$Companion: boolean isAvailable()> ==> <okhttp3.internal.platform.Jdk9Platform: boolean access$isAvailable$cp()>
CLINIT edge: z0 = <okhttp3.internal.platform.Jdk9Platform: boolean isAvailable> in <okhttp3.internal.platform.Jdk9Platform: boolean access$isAvailable$cp()> ==> <okhttp3.internal.platform.Jdk9Platform: void <clinit>()>
VIRTUAL edge: $r7 = virtualinvoke $r6.<okhttp3.internal.platform.OpenJSSEPlatform$Companion: okhttp3.internal.platform.OpenJSSEPlatform buildIfSupported()>() in <okhttp3.internal.platform.Platform$Companion: okhttp3.internal.platform.Platform findJvmPlatform()> ==> <okhttp3.internal.platform.OpenJSSEPlatform$Companion: okhttp3.internal.platform.OpenJSSEPlatform buildIfSupported()>
CLINIT edge: $r1 = new okhttp3.internal.platform.OpenJSSEPlatform in <okhttp3.internal.platform.OpenJSSEPlatform$Companion: okhttp3.internal.platform.OpenJSSEPlatform buildIfSupported()> ==> <okhttp3.internal.platform.OpenJSSEPlatform: void <clinit>()>
SPECIAL edge: specialinvoke $r1.<okhttp3.internal.platform.OpenJSSEPlatform: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null) in <okhttp3.internal.platform.OpenJSSEPlatform$Companion: okhttp3.internal.platform.OpenJSSEPlatform buildIfSupported()> ==> <okhttp3.internal.platform.OpenJSSEPlatform: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>
SPECIAL edge: specialinvoke r0.<okhttp3.internal.platform.OpenJSSEPlatform: void <init>()>() in <okhttp3.internal.platform.OpenJSSEPlatform: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)> ==> <okhttp3.internal.platform.OpenJSSEPlatform: void <init>()>
SPECIAL edge: specialinvoke r0.<okhttp3.internal.platform.Platform: void <init>()>() in <okhttp3.internal.platform.OpenJSSEPlatform: void <init>()> ==> <okhttp3.internal.platform.Platform: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke r0.<okhttp3.internal.platform.OpenJSSEPlatform$Companion: boolean isSupported()>() in <okhttp3.internal.platform.OpenJSSEPlatform$Companion: okhttp3.internal.platform.OpenJSSEPlatform buildIfSupported()> ==> <okhttp3.internal.platform.OpenJSSEPlatform$Companion: boolean isSupported()>
CLINIT edge: $z0 = staticinvoke <okhttp3.internal.platform.OpenJSSEPlatform: boolean access$isSupported$cp()>() in <okhttp3.internal.platform.OpenJSSEPlatform$Companion: boolean isSupported()> ==> <okhttp3.internal.platform.OpenJSSEPlatform: void <clinit>()>
STATIC edge: $z0 = staticinvoke <okhttp3.internal.platform.OpenJSSEPlatform: boolean access$isSupported$cp()>() in <okhttp3.internal.platform.OpenJSSEPlatform$Companion: boolean isSupported()> ==> <okhttp3.internal.platform.OpenJSSEPlatform: boolean access$isSupported$cp()>
CLINIT edge: z0 = <okhttp3.internal.platform.OpenJSSEPlatform: boolean isSupported> in <okhttp3.internal.platform.OpenJSSEPlatform: boolean access$isSupported$cp()> ==> <okhttp3.internal.platform.OpenJSSEPlatform: void <clinit>()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<okhttp3.internal.platform.BouncyCastlePlatform$Companion: okhttp3.internal.platform.BouncyCastlePlatform buildIfSupported()>() in <okhttp3.internal.platform.Platform$Companion: okhttp3.internal.platform.Platform findJvmPlatform()> ==> <okhttp3.internal.platform.BouncyCastlePlatform$Companion: okhttp3.internal.platform.BouncyCastlePlatform buildIfSupported()>
SPECIAL edge: specialinvoke $r1.<okhttp3.internal.platform.BouncyCastlePlatform: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null) in <okhttp3.internal.platform.BouncyCastlePlatform$Companion: okhttp3.internal.platform.BouncyCastlePlatform buildIfSupported()> ==> <okhttp3.internal.platform.BouncyCastlePlatform: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>
SPECIAL edge: specialinvoke r0.<okhttp3.internal.platform.BouncyCastlePlatform: void <init>()>() in <okhttp3.internal.platform.BouncyCastlePlatform: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)> ==> <okhttp3.internal.platform.BouncyCastlePlatform: void <init>()>
SPECIAL edge: specialinvoke r0.<okhttp3.internal.platform.Platform: void <init>()>() in <okhttp3.internal.platform.BouncyCastlePlatform: void <init>()> ==> <okhttp3.internal.platform.Platform: void <init>()>
CLINIT edge: $z0 = staticinvoke <okhttp3.internal.platform.BouncyCastlePlatform: boolean access$isSupported$cp()>() in <okhttp3.internal.platform.BouncyCastlePlatform$Companion: boolean isSupported()> ==> <okhttp3.internal.platform.BouncyCastlePlatform: void <clinit>()>
STATIC edge: $z0 = staticinvoke <okhttp3.internal.platform.BouncyCastlePlatform: boolean access$isSupported$cp()>() in <okhttp3.internal.platform.BouncyCastlePlatform$Companion: boolean isSupported()> ==> <okhttp3.internal.platform.BouncyCastlePlatform: boolean access$isSupported$cp()>
CLINIT edge: z0 = <okhttp3.internal.platform.BouncyCastlePlatform: boolean isSupported> in <okhttp3.internal.platform.BouncyCastlePlatform: boolean access$isSupported$cp()> ==> <okhttp3.internal.platform.BouncyCastlePlatform: void <clinit>()>
SPECIAL edge: specialinvoke $r3.<okhttp3.internal.platform.Platform: void <init>()>() in <okhttp3.internal.platform.Platform$Companion: okhttp3.internal.platform.Platform findJvmPlatform()> ==> <okhttp3.internal.platform.Platform: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<okhttp3.internal.platform.ConscryptPlatform$Companion: okhttp3.internal.platform.ConscryptPlatform buildIfSupported()>() in <okhttp3.internal.platform.Platform$Companion: okhttp3.internal.platform.Platform findJvmPlatform()> ==> <okhttp3.internal.platform.ConscryptPlatform$Companion: okhttp3.internal.platform.ConscryptPlatform buildIfSupported()>
CLINIT edge: $r1 = new okhttp3.internal.platform.ConscryptPlatform in <okhttp3.internal.platform.ConscryptPlatform$Companion: okhttp3.internal.platform.ConscryptPlatform buildIfSupported()> ==> <okhttp3.internal.platform.ConscryptPlatform: void <clinit>()>
SPECIAL edge: specialinvoke $r1.<okhttp3.internal.platform.ConscryptPlatform: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null) in <okhttp3.internal.platform.ConscryptPlatform$Companion: okhttp3.internal.platform.ConscryptPlatform buildIfSupported()> ==> <okhttp3.internal.platform.ConscryptPlatform: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>
SPECIAL edge: specialinvoke r0.<okhttp3.internal.platform.ConscryptPlatform: void <init>()>() in <okhttp3.internal.platform.ConscryptPlatform: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)> ==> <okhttp3.internal.platform.ConscryptPlatform: void <init>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r1, "Conscrypt.newProvider()") in <okhttp3.internal.platform.ConscryptPlatform: void <init>()> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke r0.<okhttp3.internal.platform.Platform: void <init>()>() in <okhttp3.internal.platform.ConscryptPlatform: void <init>()> ==> <okhttp3.internal.platform.Platform: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke r0.<okhttp3.internal.platform.ConscryptPlatform$Companion: boolean isSupported()>() in <okhttp3.internal.platform.ConscryptPlatform$Companion: okhttp3.internal.platform.ConscryptPlatform buildIfSupported()> ==> <okhttp3.internal.platform.ConscryptPlatform$Companion: boolean isSupported()>
CLINIT edge: $z0 = staticinvoke <okhttp3.internal.platform.ConscryptPlatform: boolean access$isSupported$cp()>() in <okhttp3.internal.platform.ConscryptPlatform$Companion: boolean isSupported()> ==> <okhttp3.internal.platform.ConscryptPlatform: void <clinit>()>
STATIC edge: $z0 = staticinvoke <okhttp3.internal.platform.ConscryptPlatform: boolean access$isSupported$cp()>() in <okhttp3.internal.platform.ConscryptPlatform$Companion: boolean isSupported()> ==> <okhttp3.internal.platform.ConscryptPlatform: boolean access$isSupported$cp()>
CLINIT edge: z0 = <okhttp3.internal.platform.ConscryptPlatform: boolean isSupported> in <okhttp3.internal.platform.ConscryptPlatform: boolean access$isSupported$cp()> ==> <okhttp3.internal.platform.ConscryptPlatform: void <clinit>()>
SPECIAL edge: $z0 = specialinvoke r0.<okhttp3.internal.platform.Platform$Companion: boolean isConscryptPreferred()>() in <okhttp3.internal.platform.Platform$Companion: okhttp3.internal.platform.Platform findJvmPlatform()> ==> <okhttp3.internal.platform.Platform$Companion: boolean isConscryptPreferred()>
SPECIAL edge: $z0 = specialinvoke r0.<okhttp3.internal.platform.Platform$Companion: boolean isBouncyCastlePreferred()>() in <okhttp3.internal.platform.Platform$Companion: okhttp3.internal.platform.Platform findJvmPlatform()> ==> <okhttp3.internal.platform.Platform$Companion: boolean isBouncyCastlePreferred()>
SPECIAL edge: $z0 = specialinvoke r0.<okhttp3.internal.platform.Platform$Companion: boolean isOpenJSSEPreferred()>() in <okhttp3.internal.platform.Platform$Companion: okhttp3.internal.platform.Platform findJvmPlatform()> ==> <okhttp3.internal.platform.Platform$Companion: boolean isOpenJSSEPreferred()>
STATIC edge: $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>("Conscrypt", $r3) in <okhttp3.internal.platform.Platform$Companion: boolean isConscryptPreferred()> ==> <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r2, "Security.getProviders()[0]") in <okhttp3.internal.platform.Platform$Companion: boolean isConscryptPreferred()> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
STATIC edge: $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>("BC", $r3) in <okhttp3.internal.platform.Platform$Companion: boolean isBouncyCastlePreferred()> ==> <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r2, "Security.getProviders()[0]") in <okhttp3.internal.platform.Platform$Companion: boolean isBouncyCastlePreferred()> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
STATIC edge: $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>("OpenJSSE", $r3) in <okhttp3.internal.platform.Platform$Companion: boolean isOpenJSSEPreferred()> ==> <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r2, "Security.getProviders()[0]") in <okhttp3.internal.platform.Platform$Companion: boolean isOpenJSSEPreferred()> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r4.<okhttp3.internal.platform.AndroidPlatform$Companion: okhttp3.internal.platform.Platform buildIfSupported()>() in <okhttp3.internal.platform.Platform$Companion: okhttp3.internal.platform.Platform findAndroidPlatform()> ==> <okhttp3.internal.platform.AndroidPlatform$Companion: okhttp3.internal.platform.Platform buildIfSupported()>
CLINIT edge: $r1 = new okhttp3.internal.platform.AndroidPlatform in <okhttp3.internal.platform.AndroidPlatform$Companion: okhttp3.internal.platform.Platform buildIfSupported()> ==> <okhttp3.internal.platform.AndroidPlatform: void <clinit>()>
CLINIT edge: $r1 = new okhttp3.internal.platform.AndroidPlatform in <okhttp3.internal.platform.AndroidPlatform$Companion: okhttp3.internal.platform.Platform buildIfSupported()> ==> <okhttp3.internal.platform.Platform: void <clinit>()>
SPECIAL edge: specialinvoke $r1.<okhttp3.internal.platform.AndroidPlatform: void <init>()>() in <okhttp3.internal.platform.AndroidPlatform$Companion: okhttp3.internal.platform.Platform buildIfSupported()> ==> <okhttp3.internal.platform.AndroidPlatform: void <init>()>
CLINIT edge: $r2 = <okhttp3.internal.platform.android.StandardAndroidSocketAdapter: okhttp3.internal.platform.android.StandardAndroidSocketAdapter$Companion Companion> in <okhttp3.internal.platform.AndroidPlatform: void <init>()> ==> <okhttp3.internal.platform.android.StandardAndroidSocketAdapter: void <clinit>()>
STATIC edge: $r9 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOfNotNull(java.lang.Object[])>($r1) in <okhttp3.internal.platform.AndroidPlatform: void <init>()> ==> <kotlin.collections.CollectionsKt__CollectionsKt: java.util.List listOfNotNull(java.lang.Object[])>
STATIC edge: $r3 = staticinvoke <okhttp3.internal.platform.android.StandardAndroidSocketAdapter$Companion: okhttp3.internal.platform.android.SocketAdapter buildIfSupported$default(okhttp3.internal.platform.android.StandardAndroidSocketAdapter$Companion,java.lang.String,int,java.lang.Object)>($r2, null, 1, null) in <okhttp3.internal.platform.AndroidPlatform: void <init>()> ==> <okhttp3.internal.platform.android.StandardAndroidSocketAdapter$Companion: okhttp3.internal.platform.android.SocketAdapter buildIfSupported$default(okhttp3.internal.platform.android.StandardAndroidSocketAdapter$Companion,java.lang.String,int,java.lang.Object)>
CLINIT edge: $r15 = <okhttp3.internal.platform.android.CloseGuard: okhttp3.internal.platform.android.CloseGuard$Companion Companion> in <okhttp3.internal.platform.AndroidPlatform: void <init>()> ==> <okhttp3.internal.platform.android.CloseGuard: void <clinit>()>
CLINIT edge: $r8 = <okhttp3.internal.platform.android.BouncyCastleSocketAdapter: okhttp3.internal.platform.android.BouncyCastleSocketAdapter$Companion Companion> in <okhttp3.internal.platform.AndroidPlatform: void <init>()> ==> <okhttp3.internal.platform.android.BouncyCastleSocketAdapter: void <clinit>()>
CLINIT edge: $r7 = <okhttp3.internal.platform.android.ConscryptSocketAdapter: okhttp3.internal.platform.android.ConscryptSocketAdapter$Companion Companion> in <okhttp3.internal.platform.AndroidPlatform: void <init>()> ==> <okhttp3.internal.platform.android.ConscryptSocketAdapter: void <clinit>()>
CLINIT edge: $r2 = <okhttp3.internal.platform.android.StandardAndroidSocketAdapter: okhttp3.internal.platform.android.StandardAndroidSocketAdapter$Companion Companion> in <okhttp3.internal.platform.AndroidPlatform: void <init>()> ==> <okhttp3.internal.platform.android.AndroidSocketAdapter: void <clinit>()>
CLINIT edge: <okhttp3.internal.platform.android.StandardAndroidSocketAdapter: okhttp3.internal.platform.android.StandardAndroidSocketAdapter$Companion Companion> = $r0 in <okhttp3.internal.platform.android.StandardAndroidSocketAdapter: void <clinit>()> ==> <okhttp3.internal.platform.android.AndroidSocketAdapter: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "elements") in <kotlin.collections.CollectionsKt__CollectionsKt: java.util.List listOfNotNull(java.lang.Object[])> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: $r0 = staticinvoke <kotlin.collections.ArraysKt: java.util.List filterNotNull(java.lang.Object[])>($r1) in <kotlin.collections.CollectionsKt__CollectionsKt: java.util.List listOfNotNull(java.lang.Object[])> ==> <kotlin.collections.ArraysKt___ArraysKt: java.util.List filterNotNull(java.lang.Object[])>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>") in <kotlin.collections.ArraysKt___ArraysKt: java.util.List filterNotNull(java.lang.Object[])> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: $r0 = staticinvoke <kotlin.collections.ArraysKt: java.util.Collection filterNotNullTo(java.lang.Object[],java.util.Collection)>($r1, $r0) in <kotlin.collections.ArraysKt___ArraysKt: java.util.List filterNotNull(java.lang.Object[])> ==> <kotlin.collections.ArraysKt___ArraysKt: java.util.Collection filterNotNullTo(java.lang.Object[],java.util.Collection)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>") in <kotlin.collections.ArraysKt___ArraysKt: java.util.Collection filterNotNullTo(java.lang.Object[],java.util.Collection)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke $r1.<okhttp3.internal.platform.android.AndroidSocketAdapter$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null) in <okhttp3.internal.platform.android.AndroidSocketAdapter: void <clinit>()> ==> <okhttp3.internal.platform.android.AndroidSocketAdapter$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>
VIRTUAL edge: $r0 = virtualinvoke $r1.<okhttp3.internal.platform.android.AndroidSocketAdapter$Companion: okhttp3.internal.platform.android.DeferredSocketAdapter$Factory factory(java.lang.String)>("com.google.android.gms.org.conscrypt") in <okhttp3.internal.platform.android.AndroidSocketAdapter: void <clinit>()> ==> <okhttp3.internal.platform.android.AndroidSocketAdapter$Companion: okhttp3.internal.platform.android.DeferredSocketAdapter$Factory factory(java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "packageName") in <okhttp3.internal.platform.android.AndroidSocketAdapter$Companion: okhttp3.internal.platform.android.DeferredSocketAdapter$Factory factory(java.lang.String)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke $r2.<okhttp3.internal.platform.android.AndroidSocketAdapter$Companion$factory$1: void <init>(java.lang.String)>($r1) in <okhttp3.internal.platform.android.AndroidSocketAdapter$Companion: okhttp3.internal.platform.android.DeferredSocketAdapter$Factory factory(java.lang.String)> ==> <okhttp3.internal.platform.android.AndroidSocketAdapter$Companion$factory$1: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.internal.platform.android.AndroidSocketAdapter$Companion$factory$1: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<okhttp3.internal.platform.android.AndroidSocketAdapter$Companion: void <init>()>() in <okhttp3.internal.platform.android.AndroidSocketAdapter$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)> ==> <okhttp3.internal.platform.android.AndroidSocketAdapter$Companion: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.internal.platform.android.AndroidSocketAdapter$Companion: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<okhttp3.internal.platform.android.ConscryptSocketAdapter$Companion$factory$1: void <init>()>() in <okhttp3.internal.platform.android.ConscryptSocketAdapter: void <clinit>()> ==> <okhttp3.internal.platform.android.ConscryptSocketAdapter$Companion$factory$1: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.internal.platform.android.ConscryptSocketAdapter$Companion$factory$1: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<okhttp3.internal.platform.android.ConscryptSocketAdapter$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null) in <okhttp3.internal.platform.android.ConscryptSocketAdapter: void <clinit>()> ==> <okhttp3.internal.platform.android.ConscryptSocketAdapter$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>
SPECIAL edge: specialinvoke r0.<okhttp3.internal.platform.android.ConscryptSocketAdapter$Companion: void <init>()>() in <okhttp3.internal.platform.android.ConscryptSocketAdapter$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)> ==> <okhttp3.internal.platform.android.ConscryptSocketAdapter$Companion: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.internal.platform.android.ConscryptSocketAdapter$Companion: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<okhttp3.internal.platform.android.BouncyCastleSocketAdapter$Companion$factory$1: void <init>()>() in <okhttp3.internal.platform.android.BouncyCastleSocketAdapter: void <clinit>()> ==> <okhttp3.internal.platform.android.BouncyCastleSocketAdapter$Companion$factory$1: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.internal.platform.android.BouncyCastleSocketAdapter$Companion$factory$1: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<okhttp3.internal.platform.android.BouncyCastleSocketAdapter$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null) in <okhttp3.internal.platform.android.BouncyCastleSocketAdapter: void <clinit>()> ==> <okhttp3.internal.platform.android.BouncyCastleSocketAdapter$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>
SPECIAL edge: specialinvoke r0.<okhttp3.internal.platform.android.BouncyCastleSocketAdapter$Companion: void <init>()>() in <okhttp3.internal.platform.android.BouncyCastleSocketAdapter$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)> ==> <okhttp3.internal.platform.android.BouncyCastleSocketAdapter$Companion: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.internal.platform.android.BouncyCastleSocketAdapter$Companion: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<okhttp3.internal.platform.android.CloseGuard$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null) in <okhttp3.internal.platform.android.CloseGuard: void <clinit>()> ==> <okhttp3.internal.platform.android.CloseGuard$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>
SPECIAL edge: specialinvoke r0.<okhttp3.internal.platform.android.CloseGuard$Companion: void <init>()>() in <okhttp3.internal.platform.android.CloseGuard$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)> ==> <okhttp3.internal.platform.android.CloseGuard$Companion: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.internal.platform.android.CloseGuard$Companion: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<okhttp3.internal.platform.android.StandardAndroidSocketAdapter$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null) in <okhttp3.internal.platform.android.StandardAndroidSocketAdapter: void <clinit>()> ==> <okhttp3.internal.platform.android.StandardAndroidSocketAdapter$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>
SPECIAL edge: specialinvoke r0.<okhttp3.internal.platform.android.StandardAndroidSocketAdapter$Companion: void <init>()>() in <okhttp3.internal.platform.android.StandardAndroidSocketAdapter$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)> ==> <okhttp3.internal.platform.android.StandardAndroidSocketAdapter$Companion: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.internal.platform.android.StandardAndroidSocketAdapter$Companion: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r16 = virtualinvoke $r15.<okhttp3.internal.platform.android.CloseGuard$Companion: okhttp3.internal.platform.android.CloseGuard get()>() in <okhttp3.internal.platform.AndroidPlatform: void <init>()> ==> <okhttp3.internal.platform.android.CloseGuard$Companion: okhttp3.internal.platform.android.CloseGuard get()>
CLINIT edge: $r7 = new okhttp3.internal.platform.android.CloseGuard in <okhttp3.internal.platform.android.CloseGuard$Companion: okhttp3.internal.platform.android.CloseGuard get()> ==> <okhttp3.internal.platform.android.CloseGuard: void <clinit>()>
STATIC edge: $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("dalvik.system.CloseGuard") in <okhttp3.internal.platform.android.CloseGuard$Companion: okhttp3.internal.platform.android.CloseGuard get()> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Class forName(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r7.<okhttp3.internal.platform.android.CloseGuard: void <init>(java.lang.reflect.Method,java.lang.reflect.Method,java.lang.reflect.Method)>($r4, $r5, $r6) in <okhttp3.internal.platform.android.CloseGuard$Companion: okhttp3.internal.platform.android.CloseGuard get()> ==> <okhttp3.internal.platform.android.CloseGuard: void <init>(java.lang.reflect.Method,java.lang.reflect.Method,java.lang.reflect.Method)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.internal.platform.android.CloseGuard: void <init>(java.lang.reflect.Method,java.lang.reflect.Method,java.lang.reflect.Method)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r8.<okhttp3.internal.platform.android.BouncyCastleSocketAdapter$Companion: okhttp3.internal.platform.android.DeferredSocketAdapter$Factory getFactory()>() in <okhttp3.internal.platform.AndroidPlatform: void <init>()> ==> <okhttp3.internal.platform.android.BouncyCastleSocketAdapter$Companion: okhttp3.internal.platform.android.DeferredSocketAdapter$Factory getFactory()>
CLINIT edge: $r1 = staticinvoke <okhttp3.internal.platform.android.BouncyCastleSocketAdapter: okhttp3.internal.platform.android.DeferredSocketAdapter$Factory access$getFactory$cp()>() in <okhttp3.internal.platform.android.BouncyCastleSocketAdapter$Companion: okhttp3.internal.platform.android.DeferredSocketAdapter$Factory getFactory()> ==> <okhttp3.internal.platform.android.BouncyCastleSocketAdapter: void <clinit>()>
STATIC edge: $r1 = staticinvoke <okhttp3.internal.platform.android.BouncyCastleSocketAdapter: okhttp3.internal.platform.android.DeferredSocketAdapter$Factory access$getFactory$cp()>() in <okhttp3.internal.platform.android.BouncyCastleSocketAdapter$Companion: okhttp3.internal.platform.android.DeferredSocketAdapter$Factory getFactory()> ==> <okhttp3.internal.platform.android.BouncyCastleSocketAdapter: okhttp3.internal.platform.android.DeferredSocketAdapter$Factory access$getFactory$cp()>
CLINIT edge: r0 = <okhttp3.internal.platform.android.BouncyCastleSocketAdapter: okhttp3.internal.platform.android.DeferredSocketAdapter$Factory factory> in <okhttp3.internal.platform.android.BouncyCastleSocketAdapter: okhttp3.internal.platform.android.DeferredSocketAdapter$Factory access$getFactory$cp()> ==> <okhttp3.internal.platform.android.BouncyCastleSocketAdapter: void <clinit>()>
VIRTUAL edge: $r6 = virtualinvoke $r7.<okhttp3.internal.platform.android.ConscryptSocketAdapter$Companion: okhttp3.internal.platform.android.DeferredSocketAdapter$Factory getFactory()>() in <okhttp3.internal.platform.AndroidPlatform: void <init>()> ==> <okhttp3.internal.platform.android.ConscryptSocketAdapter$Companion: okhttp3.internal.platform.android.DeferredSocketAdapter$Factory getFactory()>
CLINIT edge: $r1 = staticinvoke <okhttp3.internal.platform.android.ConscryptSocketAdapter: okhttp3.internal.platform.android.DeferredSocketAdapter$Factory access$getFactory$cp()>() in <okhttp3.internal.platform.android.ConscryptSocketAdapter$Companion: okhttp3.internal.platform.android.DeferredSocketAdapter$Factory getFactory()> ==> <okhttp3.internal.platform.android.ConscryptSocketAdapter: void <clinit>()>
STATIC edge: $r1 = staticinvoke <okhttp3.internal.platform.android.ConscryptSocketAdapter: okhttp3.internal.platform.android.DeferredSocketAdapter$Factory access$getFactory$cp()>() in <okhttp3.internal.platform.android.ConscryptSocketAdapter$Companion: okhttp3.internal.platform.android.DeferredSocketAdapter$Factory getFactory()> ==> <okhttp3.internal.platform.android.ConscryptSocketAdapter: okhttp3.internal.platform.android.DeferredSocketAdapter$Factory access$getFactory$cp()>
CLINIT edge: r0 = <okhttp3.internal.platform.android.ConscryptSocketAdapter: okhttp3.internal.platform.android.DeferredSocketAdapter$Factory factory> in <okhttp3.internal.platform.android.ConscryptSocketAdapter: okhttp3.internal.platform.android.DeferredSocketAdapter$Factory access$getFactory$cp()> ==> <okhttp3.internal.platform.android.ConscryptSocketAdapter: void <clinit>()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<okhttp3.internal.platform.android.AndroidSocketAdapter$Companion: okhttp3.internal.platform.android.DeferredSocketAdapter$Factory getPlayProviderFactory()>() in <okhttp3.internal.platform.AndroidPlatform: void <init>()> ==> <okhttp3.internal.platform.android.AndroidSocketAdapter$Companion: okhttp3.internal.platform.android.DeferredSocketAdapter$Factory getPlayProviderFactory()>
CLINIT edge: $r1 = staticinvoke <okhttp3.internal.platform.android.AndroidSocketAdapter: okhttp3.internal.platform.android.DeferredSocketAdapter$Factory access$getPlayProviderFactory$cp()>() in <okhttp3.internal.platform.android.AndroidSocketAdapter$Companion: okhttp3.internal.platform.android.DeferredSocketAdapter$Factory getPlayProviderFactory()> ==> <okhttp3.internal.platform.android.AndroidSocketAdapter: void <clinit>()>
STATIC edge: $r1 = staticinvoke <okhttp3.internal.platform.android.AndroidSocketAdapter: okhttp3.internal.platform.android.DeferredSocketAdapter$Factory access$getPlayProviderFactory$cp()>() in <okhttp3.internal.platform.android.AndroidSocketAdapter$Companion: okhttp3.internal.platform.android.DeferredSocketAdapter$Factory getPlayProviderFactory()> ==> <okhttp3.internal.platform.android.AndroidSocketAdapter: okhttp3.internal.platform.android.DeferredSocketAdapter$Factory access$getPlayProviderFactory$cp()>
CLINIT edge: r0 = <okhttp3.internal.platform.android.AndroidSocketAdapter: okhttp3.internal.platform.android.DeferredSocketAdapter$Factory playProviderFactory> in <okhttp3.internal.platform.android.AndroidSocketAdapter: okhttp3.internal.platform.android.DeferredSocketAdapter$Factory access$getPlayProviderFactory$cp()> ==> <okhttp3.internal.platform.android.AndroidSocketAdapter: void <clinit>()>
SPECIAL edge: specialinvoke $r4.<okhttp3.internal.platform.android.DeferredSocketAdapter: void <init>(okhttp3.internal.platform.android.DeferredSocketAdapter$Factory)>($r6) in <okhttp3.internal.platform.AndroidPlatform: void <init>()> ==> <okhttp3.internal.platform.android.DeferredSocketAdapter: void <init>(okhttp3.internal.platform.android.DeferredSocketAdapter$Factory)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "socketAdapterFactory") in <okhttp3.internal.platform.android.DeferredSocketAdapter: void <init>(okhttp3.internal.platform.android.DeferredSocketAdapter$Factory)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.internal.platform.android.DeferredSocketAdapter: void <init>(okhttp3.internal.platform.android.DeferredSocketAdapter$Factory)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $z0 = interfaceinvoke $r3.<okhttp3.internal.platform.android.SocketAdapter: boolean isSupported()>() in <okhttp3.internal.platform.AndroidPlatform: void <init>()> ==> <okhttp3.internal.platform.android.DeferredSocketAdapter: boolean isSupported()>
VIRTUAL edge: $r1 = virtualinvoke $r2.<okhttp3.internal.platform.android.StandardAndroidSocketAdapter$Companion: okhttp3.internal.platform.android.SocketAdapter buildIfSupported(java.lang.String)>($r3) in <okhttp3.internal.platform.android.StandardAndroidSocketAdapter$Companion: okhttp3.internal.platform.android.SocketAdapter buildIfSupported$default(okhttp3.internal.platform.android.StandardAndroidSocketAdapter$Companion,java.lang.String,int,java.lang.Object)> ==> <okhttp3.internal.platform.android.StandardAndroidSocketAdapter$Companion: okhttp3.internal.platform.android.SocketAdapter buildIfSupported(java.lang.String)>
CLINIT edge: $r7 = new okhttp3.internal.platform.android.StandardAndroidSocketAdapter in <okhttp3.internal.platform.android.StandardAndroidSocketAdapter$Companion: okhttp3.internal.platform.android.SocketAdapter buildIfSupported(java.lang.String)> ==> <okhttp3.internal.platform.android.StandardAndroidSocketAdapter: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r6, "paramsClass") in <okhttp3.internal.platform.android.StandardAndroidSocketAdapter$Companion: okhttp3.internal.platform.android.SocketAdapter buildIfSupported(java.lang.String)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
STATIC edge: $r6 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r1) in <okhttp3.internal.platform.android.StandardAndroidSocketAdapter$Companion: okhttp3.internal.platform.android.SocketAdapter buildIfSupported(java.lang.String)> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "packageName") in <okhttp3.internal.platform.android.StandardAndroidSocketAdapter$Companion: okhttp3.internal.platform.android.SocketAdapter buildIfSupported(java.lang.String)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
CLINIT edge: $r11 = <okhttp3.internal.platform.Platform: okhttp3.internal.platform.Platform$Companion Companion> in <okhttp3.internal.platform.android.StandardAndroidSocketAdapter$Companion: okhttp3.internal.platform.android.SocketAdapter buildIfSupported(java.lang.String)> ==> <okhttp3.internal.platform.Platform: void <clinit>()>
CLINIT edge: $r7 = new okhttp3.internal.platform.android.StandardAndroidSocketAdapter in <okhttp3.internal.platform.android.StandardAndroidSocketAdapter$Companion: okhttp3.internal.platform.android.SocketAdapter buildIfSupported(java.lang.String)> ==> <okhttp3.internal.platform.android.AndroidSocketAdapter: void <clinit>()>
CLINIT edge: $r1 = staticinvoke <okhttp3.internal.platform.Platform: okhttp3.internal.platform.Platform access$getPlatform$cp()>() in <okhttp3.internal.platform.Platform$Companion: okhttp3.internal.platform.Platform get()> ==> <okhttp3.internal.platform.Platform: void <clinit>()>
STATIC edge: $r1 = staticinvoke <okhttp3.internal.platform.Platform: okhttp3.internal.platform.Platform access$getPlatform$cp()>() in <okhttp3.internal.platform.Platform$Companion: okhttp3.internal.platform.Platform get()> ==> <okhttp3.internal.platform.Platform: okhttp3.internal.platform.Platform access$getPlatform$cp()>
SPECIAL edge: specialinvoke $r9.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type java.lang.Class<in javax.net.ssl.SSLSocketFactory>") in <okhttp3.internal.platform.android.StandardAndroidSocketAdapter$Companion: okhttp3.internal.platform.android.SocketAdapter buildIfSupported(java.lang.String)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r7.<okhttp3.internal.platform.android.StandardAndroidSocketAdapter: void <init>(java.lang.Class,java.lang.Class,java.lang.Class)>($r4, $r5, $r6) in <okhttp3.internal.platform.android.StandardAndroidSocketAdapter$Companion: okhttp3.internal.platform.android.SocketAdapter buildIfSupported(java.lang.String)> ==> <okhttp3.internal.platform.android.StandardAndroidSocketAdapter: void <init>(java.lang.Class,java.lang.Class,java.lang.Class)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "sslSocketClass") in <okhttp3.internal.platform.android.StandardAndroidSocketAdapter: void <init>(java.lang.Class,java.lang.Class,java.lang.Class)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r3, "paramClass") in <okhttp3.internal.platform.android.StandardAndroidSocketAdapter: void <init>(java.lang.Class,java.lang.Class,java.lang.Class)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "sslSocketFactoryClass") in <okhttp3.internal.platform.android.StandardAndroidSocketAdapter: void <init>(java.lang.Class,java.lang.Class,java.lang.Class)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke r0.<okhttp3.internal.platform.android.AndroidSocketAdapter: void <init>(java.lang.Class)>($r1) in <okhttp3.internal.platform.android.StandardAndroidSocketAdapter: void <init>(java.lang.Class,java.lang.Class,java.lang.Class)> ==> <okhttp3.internal.platform.android.AndroidSocketAdapter: void <init>(java.lang.Class)>
CLINIT edge: $r3 = <java.lang.Boolean: java.lang.Class TYPE> in <okhttp3.internal.platform.android.AndroidSocketAdapter: void <init>(java.lang.Class)> ==> <java.lang.Boolean: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r4, "sslSocketClass.getDeclar\u2026:class.javaPrimitiveType)") in <okhttp3.internal.platform.android.AndroidSocketAdapter: void <init>(java.lang.Class)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "sslSocketClass") in <okhttp3.internal.platform.android.AndroidSocketAdapter: void <init>(java.lang.Class)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.internal.platform.android.AndroidSocketAdapter: void <init>(java.lang.Class)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $z0 = interfaceinvoke $r3.<okhttp3.internal.platform.android.SocketAdapter: boolean isSupported()>() in <okhttp3.internal.platform.AndroidPlatform: void <init>()> ==> <okhttp3.internal.platform.android.AndroidSocketAdapter: boolean isSupported()>
CLINIT edge: $r1 = <okhttp3.internal.platform.AndroidPlatform: okhttp3.internal.platform.AndroidPlatform$Companion Companion> in <okhttp3.internal.platform.android.AndroidSocketAdapter: boolean isSupported()> ==> <okhttp3.internal.platform.AndroidPlatform: void <clinit>()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<okhttp3.internal.platform.AndroidPlatform$Companion: boolean isSupported()>() in <okhttp3.internal.platform.android.AndroidSocketAdapter: boolean isSupported()> ==> <okhttp3.internal.platform.AndroidPlatform$Companion: boolean isSupported()>
CLINIT edge: $z0 = staticinvoke <okhttp3.internal.platform.AndroidPlatform: boolean access$isSupported$cp()>() in <okhttp3.internal.platform.AndroidPlatform$Companion: boolean isSupported()> ==> <okhttp3.internal.platform.AndroidPlatform: void <clinit>()>
STATIC edge: $z0 = staticinvoke <okhttp3.internal.platform.AndroidPlatform: boolean access$isSupported$cp()>() in <okhttp3.internal.platform.AndroidPlatform$Companion: boolean isSupported()> ==> <okhttp3.internal.platform.AndroidPlatform: boolean access$isSupported$cp()>
CLINIT edge: $z0 = staticinvoke <okhttp3.internal.platform.AndroidPlatform: boolean access$isSupported$cp()>() in <okhttp3.internal.platform.AndroidPlatform$Companion: boolean isSupported()> ==> <okhttp3.internal.platform.Platform: void <clinit>()>
CLINIT edge: z0 = <okhttp3.internal.platform.AndroidPlatform: boolean isSupported> in <okhttp3.internal.platform.AndroidPlatform: boolean access$isSupported$cp()> ==> <okhttp3.internal.platform.AndroidPlatform: void <clinit>()>
SPECIAL edge: specialinvoke r0.<okhttp3.internal.platform.Platform: void <init>()>() in <okhttp3.internal.platform.AndroidPlatform: void <init>()> ==> <okhttp3.internal.platform.Platform: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke r0.<okhttp3.internal.platform.AndroidPlatform$Companion: boolean isSupported()>() in <okhttp3.internal.platform.AndroidPlatform$Companion: okhttp3.internal.platform.Platform buildIfSupported()> ==> <okhttp3.internal.platform.AndroidPlatform$Companion: boolean isSupported()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<okhttp3.internal.platform.Android10Platform$Companion: okhttp3.internal.platform.Platform buildIfSupported()>() in <okhttp3.internal.platform.Platform$Companion: okhttp3.internal.platform.Platform findAndroidPlatform()> ==> <okhttp3.internal.platform.Android10Platform$Companion: okhttp3.internal.platform.Platform buildIfSupported()>
CLINIT edge: $r1 = new okhttp3.internal.platform.Android10Platform in <okhttp3.internal.platform.Android10Platform$Companion: okhttp3.internal.platform.Platform buildIfSupported()> ==> <okhttp3.internal.platform.Android10Platform: void <clinit>()>
CLINIT edge: $r1 = new okhttp3.internal.platform.Android10Platform in <okhttp3.internal.platform.Android10Platform$Companion: okhttp3.internal.platform.Platform buildIfSupported()> ==> <okhttp3.internal.platform.Platform: void <clinit>()>
SPECIAL edge: specialinvoke $r1.<okhttp3.internal.platform.Android10Platform: void <init>()>() in <okhttp3.internal.platform.Android10Platform$Companion: okhttp3.internal.platform.Platform buildIfSupported()> ==> <okhttp3.internal.platform.Android10Platform: void <init>()>
CLINIT edge: $r2 = <okhttp3.internal.platform.android.Android10SocketAdapter: okhttp3.internal.platform.android.Android10SocketAdapter$Companion Companion> in <okhttp3.internal.platform.Android10Platform: void <init>()> ==> <okhttp3.internal.platform.android.Android10SocketAdapter: void <clinit>()>
STATIC edge: $r9 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOfNotNull(java.lang.Object[])>($r1) in <okhttp3.internal.platform.Android10Platform: void <init>()> ==> <kotlin.collections.CollectionsKt__CollectionsKt: java.util.List listOfNotNull(java.lang.Object[])>
CLINIT edge: $r8 = <okhttp3.internal.platform.android.BouncyCastleSocketAdapter: okhttp3.internal.platform.android.BouncyCastleSocketAdapter$Companion Companion> in <okhttp3.internal.platform.Android10Platform: void <init>()> ==> <okhttp3.internal.platform.android.BouncyCastleSocketAdapter: void <clinit>()>
CLINIT edge: $r7 = <okhttp3.internal.platform.android.ConscryptSocketAdapter: okhttp3.internal.platform.android.ConscryptSocketAdapter$Companion Companion> in <okhttp3.internal.platform.Android10Platform: void <init>()> ==> <okhttp3.internal.platform.android.ConscryptSocketAdapter: void <clinit>()>
CLINIT edge: $r5 = <okhttp3.internal.platform.android.AndroidSocketAdapter: okhttp3.internal.platform.android.AndroidSocketAdapter$Companion Companion> in <okhttp3.internal.platform.Android10Platform: void <init>()> ==> <okhttp3.internal.platform.android.AndroidSocketAdapter: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<okhttp3.internal.platform.android.Android10SocketAdapter$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null) in <okhttp3.internal.platform.android.Android10SocketAdapter: void <clinit>()> ==> <okhttp3.internal.platform.android.Android10SocketAdapter$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>
SPECIAL edge: specialinvoke r0.<okhttp3.internal.platform.android.Android10SocketAdapter$Companion: void <init>()>() in <okhttp3.internal.platform.android.Android10SocketAdapter$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)> ==> <okhttp3.internal.platform.android.Android10SocketAdapter$Companion: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.internal.platform.android.Android10SocketAdapter$Companion: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r8.<okhttp3.internal.platform.android.BouncyCastleSocketAdapter$Companion: okhttp3.internal.platform.android.DeferredSocketAdapter$Factory getFactory()>() in <okhttp3.internal.platform.Android10Platform: void <init>()> ==> <okhttp3.internal.platform.android.BouncyCastleSocketAdapter$Companion: okhttp3.internal.platform.android.DeferredSocketAdapter$Factory getFactory()>
VIRTUAL edge: $r6 = virtualinvoke $r7.<okhttp3.internal.platform.android.ConscryptSocketAdapter$Companion: okhttp3.internal.platform.android.DeferredSocketAdapter$Factory getFactory()>() in <okhttp3.internal.platform.Android10Platform: void <init>()> ==> <okhttp3.internal.platform.android.ConscryptSocketAdapter$Companion: okhttp3.internal.platform.android.DeferredSocketAdapter$Factory getFactory()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<okhttp3.internal.platform.android.AndroidSocketAdapter$Companion: okhttp3.internal.platform.android.DeferredSocketAdapter$Factory getPlayProviderFactory()>() in <okhttp3.internal.platform.Android10Platform: void <init>()> ==> <okhttp3.internal.platform.android.AndroidSocketAdapter$Companion: okhttp3.internal.platform.android.DeferredSocketAdapter$Factory getPlayProviderFactory()>
SPECIAL edge: specialinvoke $r4.<okhttp3.internal.platform.android.DeferredSocketAdapter: void <init>(okhttp3.internal.platform.android.DeferredSocketAdapter$Factory)>($r6) in <okhttp3.internal.platform.Android10Platform: void <init>()> ==> <okhttp3.internal.platform.android.DeferredSocketAdapter: void <init>(okhttp3.internal.platform.android.DeferredSocketAdapter$Factory)>
INTERFACE edge: $z0 = interfaceinvoke $r3.<okhttp3.internal.platform.android.SocketAdapter: boolean isSupported()>() in <okhttp3.internal.platform.Android10Platform: void <init>()> ==> <okhttp3.internal.platform.android.DeferredSocketAdapter: boolean isSupported()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<okhttp3.internal.platform.android.Android10SocketAdapter$Companion: okhttp3.internal.platform.android.SocketAdapter buildIfSupported()>() in <okhttp3.internal.platform.Android10Platform: void <init>()> ==> <okhttp3.internal.platform.android.Android10SocketAdapter$Companion: okhttp3.internal.platform.android.SocketAdapter buildIfSupported()>
CLINIT edge: $r1 = new okhttp3.internal.platform.android.Android10SocketAdapter in <okhttp3.internal.platform.android.Android10SocketAdapter$Companion: okhttp3.internal.platform.android.SocketAdapter buildIfSupported()> ==> <okhttp3.internal.platform.android.Android10SocketAdapter: void <clinit>()>
SPECIAL edge: specialinvoke $r1.<okhttp3.internal.platform.android.Android10SocketAdapter: void <init>()>() in <okhttp3.internal.platform.android.Android10SocketAdapter$Companion: okhttp3.internal.platform.android.SocketAdapter buildIfSupported()> ==> <okhttp3.internal.platform.android.Android10SocketAdapter: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.internal.platform.android.Android10SocketAdapter: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke r0.<okhttp3.internal.platform.android.Android10SocketAdapter$Companion: boolean isSupported()>() in <okhttp3.internal.platform.android.Android10SocketAdapter$Companion: okhttp3.internal.platform.android.SocketAdapter buildIfSupported()> ==> <okhttp3.internal.platform.android.Android10SocketAdapter$Companion: boolean isSupported()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<okhttp3.internal.platform.Platform$Companion: boolean isAndroid()>() in <okhttp3.internal.platform.android.Android10SocketAdapter$Companion: boolean isSupported()> ==> <okhttp3.internal.platform.Platform$Companion: boolean isAndroid()>
INTERFACE edge: $z0 = interfaceinvoke $r3.<okhttp3.internal.platform.android.SocketAdapter: boolean isSupported()>() in <okhttp3.internal.platform.Android10Platform: void <init>()> ==> <okhttp3.internal.platform.android.Android10SocketAdapter: boolean isSupported()>
CLINIT edge: $r1 = <okhttp3.internal.platform.android.Android10SocketAdapter: okhttp3.internal.platform.android.Android10SocketAdapter$Companion Companion> in <okhttp3.internal.platform.android.Android10SocketAdapter: boolean isSupported()> ==> <okhttp3.internal.platform.android.Android10SocketAdapter: void <clinit>()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<okhttp3.internal.platform.android.Android10SocketAdapter$Companion: boolean isSupported()>() in <okhttp3.internal.platform.android.Android10SocketAdapter: boolean isSupported()> ==> <okhttp3.internal.platform.android.Android10SocketAdapter$Companion: boolean isSupported()>
SPECIAL edge: specialinvoke r0.<okhttp3.internal.platform.Platform: void <init>()>() in <okhttp3.internal.platform.Android10Platform: void <init>()> ==> <okhttp3.internal.platform.Platform: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke r0.<okhttp3.internal.platform.Android10Platform$Companion: boolean isSupported()>() in <okhttp3.internal.platform.Android10Platform$Companion: okhttp3.internal.platform.Platform buildIfSupported()> ==> <okhttp3.internal.platform.Android10Platform$Companion: boolean isSupported()>
CLINIT edge: $z0 = staticinvoke <okhttp3.internal.platform.Android10Platform: boolean access$isSupported$cp()>() in <okhttp3.internal.platform.Android10Platform$Companion: boolean isSupported()> ==> <okhttp3.internal.platform.Android10Platform: void <clinit>()>
STATIC edge: $z0 = staticinvoke <okhttp3.internal.platform.Android10Platform: boolean access$isSupported$cp()>() in <okhttp3.internal.platform.Android10Platform$Companion: boolean isSupported()> ==> <okhttp3.internal.platform.Android10Platform: boolean access$isSupported$cp()>
CLINIT edge: z0 = <okhttp3.internal.platform.Android10Platform: boolean isSupported> in <okhttp3.internal.platform.Android10Platform: boolean access$isSupported$cp()> ==> <okhttp3.internal.platform.Android10Platform: void <clinit>()>
VIRTUAL edge: virtualinvoke $r1.<okhttp3.internal.platform.android.AndroidLog: void enable()>() in <okhttp3.internal.platform.Platform$Companion: okhttp3.internal.platform.Platform findAndroidPlatform()> ==> <okhttp3.internal.platform.android.AndroidLog: void enable()>
CLINIT edge: $r1 = <okhttp3.internal.platform.android.AndroidLog: java.util.Map knownLoggers> in <okhttp3.internal.platform.android.AndroidLog: void enable()> ==> <okhttp3.internal.platform.android.AndroidLog: void <clinit>()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>() in <okhttp3.internal.platform.android.AndroidLog: void enable()> ==> <kotlin.collections.EmptyMap: java.util.Set entrySet()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>() in <okhttp3.internal.platform.android.AndroidLog: void enable()> ==> <kotlin.collections.EmptySet: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>() in <okhttp3.internal.platform.android.AndroidLog: void enable()> ==> <kotlin.collections.EmptyIterator: boolean hasNext()>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>() in <okhttp3.internal.platform.android.AndroidLog: void enable()> ==> <kotlin.collections.EmptyIterator: java.lang.Void next()>
SPECIAL edge: specialinvoke r0.<okhttp3.internal.platform.android.AndroidLog: void enableLogging(java.lang.String,java.lang.String)>($r6, $r7) in <okhttp3.internal.platform.android.AndroidLog: void enable()> ==> <okhttp3.internal.platform.android.AndroidLog: void enableLogging(java.lang.String,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r3, "logger") in <okhttp3.internal.platform.android.AndroidLog: void enableLogging(java.lang.String,java.lang.String)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
CLINIT edge: $r6 = <okhttp3.internal.platform.android.AndroidLogHandler: okhttp3.internal.platform.android.AndroidLogHandler INSTANCE> in <okhttp3.internal.platform.android.AndroidLog: void enableLogging(java.lang.String,java.lang.String)> ==> <okhttp3.internal.platform.android.AndroidLogHandler: void <clinit>()>
CLINIT edge: $r4 = <okhttp3.internal.platform.android.AndroidLog: java.util.concurrent.CopyOnWriteArraySet configuredLoggers> in <okhttp3.internal.platform.android.AndroidLog: void enableLogging(java.lang.String,java.lang.String)> ==> <okhttp3.internal.platform.android.AndroidLog: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<okhttp3.internal.platform.android.AndroidLogHandler: void <init>()>() in <okhttp3.internal.platform.android.AndroidLogHandler: void <clinit>()> ==> <okhttp3.internal.platform.android.AndroidLogHandler: void <init>()>
SPECIAL edge: specialinvoke $r0.<okhttp3.internal.cache.CacheInterceptor$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null) in <okhttp3.internal.cache.CacheInterceptor: void <clinit>()> ==> <okhttp3.internal.cache.CacheInterceptor$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>
SPECIAL edge: specialinvoke r0.<okhttp3.internal.cache.CacheInterceptor$Companion: void <init>()>() in <okhttp3.internal.cache.CacheInterceptor$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)> ==> <okhttp3.internal.cache.CacheInterceptor$Companion: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.internal.cache.CacheInterceptor$Companion: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<okhttp3.internal.connection.ConnectInterceptor: void <init>()>() in <okhttp3.internal.connection.ConnectInterceptor: void <clinit>()> ==> <okhttp3.internal.connection.ConnectInterceptor: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.internal.connection.ConnectInterceptor: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<okhttp3.internal.http.RetryAndFollowUpInterceptor$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null) in <okhttp3.internal.http.RetryAndFollowUpInterceptor: void <clinit>()> ==> <okhttp3.internal.http.RetryAndFollowUpInterceptor$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>
SPECIAL edge: specialinvoke r0.<okhttp3.internal.http.RetryAndFollowUpInterceptor$Companion: void <init>()>() in <okhttp3.internal.http.RetryAndFollowUpInterceptor$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)> ==> <okhttp3.internal.http.RetryAndFollowUpInterceptor$Companion: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.internal.http.RetryAndFollowUpInterceptor$Companion: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>() in <okhttp3.internal.platform.Platform: void <clinit>()> ==> <java.lang.Class: java.lang.String getName()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "message") in <okhttp3.internal.platform.Platform: void log(java.lang.String,int,java.lang.Throwable)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
CLINIT edge: $r4 = <okhttp3.internal.platform.Platform: java.util.logging.Logger logger> in <okhttp3.internal.platform.Platform: void log(java.lang.String,int,java.lang.Throwable)> ==> <okhttp3.internal.platform.Platform: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<okhttp3.internal.platform.Platform$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null) in <okhttp3.internal.platform.Platform: void <clinit>()> ==> <okhttp3.internal.platform.Platform$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>
SPECIAL edge: specialinvoke r0.<okhttp3.internal.platform.Platform$Companion: void <init>()>() in <okhttp3.internal.platform.Platform$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)> ==> <okhttp3.internal.platform.Platform$Companion: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.internal.platform.Platform$Companion: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r22.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type kotlin.Throwable") in <okhttp3.internal.connection.RealCall: okhttp3.Response getResponseWithInterceptorChain$okhttp()> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r20.<okhttp3.internal.http.RealInterceptorChain: void <init>(okhttp3.internal.connection.RealCall,java.util.List,int,okhttp3.internal.connection.Exchange,okhttp3.Request,int,int,int)>(r0, $r2, 0, null, $r1, $i0, $i1, $i2) in <okhttp3.internal.connection.RealCall: okhttp3.Response getResponseWithInterceptorChain$okhttp()> ==> <okhttp3.internal.http.RealInterceptorChain: void <init>(okhttp3.internal.connection.RealCall,java.util.List,int,okhttp3.internal.connection.Exchange,okhttp3.Request,int,int,int)>
VIRTUAL edge: $r10 = virtualinvoke $r20.<okhttp3.internal.http.RealInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>($r1) in <okhttp3.internal.connection.RealCall: okhttp3.Response getResponseWithInterceptorChain$okhttp()> ==> <okhttp3.internal.http.RealInterceptorChain: okhttp3.Response proceed(okhttp3.Request)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "call") in <okhttp3.internal.http.RealInterceptorChain: void <init>(okhttp3.internal.connection.RealCall,java.util.List,int,okhttp3.internal.connection.Exchange,okhttp3.Request,int,int,int)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "request") in <okhttp3.internal.http.RealInterceptorChain: okhttp3.Response proceed(okhttp3.Request)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: $r12 = staticinvoke <okhttp3.internal.http.RealInterceptorChain: okhttp3.internal.http.RealInterceptorChain copy$okhttp$default(okhttp3.internal.http.RealInterceptorChain,int,okhttp3.internal.connection.Exchange,okhttp3.Request,int,int,int,int,java.lang.Object)>(r0, $i0, null, $r1, 0, 0, 0, 58, null) in <okhttp3.internal.http.RealInterceptorChain: okhttp3.Response proceed(okhttp3.Request)> ==> <okhttp3.internal.http.RealInterceptorChain: okhttp3.internal.http.RealInterceptorChain copy$okhttp$default(okhttp3.internal.http.RealInterceptorChain,int,okhttp3.internal.connection.Exchange,okhttp3.Request,int,int,int,int,java.lang.Object)>
VIRTUAL edge: $r9 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>() in <okhttp3.internal.http.RealInterceptorChain: okhttp3.Response proceed(okhttp3.Request)> ==> <java.lang.String: java.lang.String toString()>
VIRTUAL edge: $r9 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>() in <okhttp3.internal.http.RealInterceptorChain: okhttp3.Response proceed(okhttp3.Request)> ==> <java.lang.String: java.lang.String toString()>
VIRTUAL edge: $r9 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>() in <okhttp3.internal.http.RealInterceptorChain: okhttp3.Response proceed(okhttp3.Request)> ==> <java.lang.String: java.lang.String toString()>
SPECIAL edge: specialinvoke $r16.<java.lang.NullPointerException: void <init>(java.lang.String)>($r9) in <okhttp3.internal.http.RealInterceptorChain: okhttp3.Response proceed(okhttp3.Request)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke $r1.<okhttp3.internal.http.RealInterceptorChain: okhttp3.internal.http.RealInterceptorChain copy$okhttp(int,okhttp3.internal.connection.Exchange,okhttp3.Request,int,int,int)>($i2, $r2, $r0, $i0, $i1, $i3) in <okhttp3.internal.http.RealInterceptorChain: okhttp3.internal.http.RealInterceptorChain copy$okhttp$default(okhttp3.internal.http.RealInterceptorChain,int,okhttp3.internal.connection.Exchange,okhttp3.Request,int,int,int,int,java.lang.Object)> ==> <okhttp3.internal.http.RealInterceptorChain: okhttp3.internal.http.RealInterceptorChain copy$okhttp(int,okhttp3.internal.connection.Exchange,okhttp3.Request,int,int,int)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "request") in <okhttp3.internal.http.RealInterceptorChain: okhttp3.internal.http.RealInterceptorChain copy$okhttp(int,okhttp3.internal.connection.Exchange,okhttp3.Request,int,int,int)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke $r5.<okhttp3.internal.http.RealInterceptorChain: void <init>(okhttp3.internal.connection.RealCall,java.util.List,int,okhttp3.internal.connection.Exchange,okhttp3.Request,int,int,int)>($r3, $r4, $i0, $r1, $r2, $i1, $i2, $i3) in <okhttp3.internal.http.RealInterceptorChain: okhttp3.internal.http.RealInterceptorChain copy$okhttp(int,okhttp3.internal.connection.Exchange,okhttp3.Request,int,int,int)> ==> <okhttp3.internal.http.RealInterceptorChain: void <init>(okhttp3.internal.connection.RealCall,java.util.List,int,okhttp3.internal.connection.Exchange,okhttp3.Request,int,int,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.internal.http.RealInterceptorChain: void <init>(okhttp3.internal.connection.RealCall,java.util.List,int,okhttp3.internal.connection.Exchange,okhttp3.Request,int,int,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r19.<okhttp3.internal.http.CallServerInterceptor: void <init>(boolean)>($z0) in <okhttp3.internal.connection.RealCall: okhttp3.Response getResponseWithInterceptorChain$okhttp()> ==> <okhttp3.internal.http.CallServerInterceptor: void <init>(boolean)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.internal.http.CallServerInterceptor: void <init>(boolean)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r18.<okhttp3.internal.cache.CacheInterceptor: void <init>(okhttp3.Cache)>($r8) in <okhttp3.internal.connection.RealCall: okhttp3.Response getResponseWithInterceptorChain$okhttp()> ==> <okhttp3.internal.cache.CacheInterceptor: void <init>(okhttp3.Cache)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.internal.cache.CacheInterceptor: void <init>(okhttp3.Cache)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r17.<okhttp3.internal.http.BridgeInterceptor: void <init>(okhttp3.CookieJar)>($r7) in <okhttp3.internal.connection.RealCall: okhttp3.Response getResponseWithInterceptorChain$okhttp()> ==> <okhttp3.internal.http.BridgeInterceptor: void <init>(okhttp3.CookieJar)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "cookieJar") in <okhttp3.internal.http.BridgeInterceptor: void <init>(okhttp3.CookieJar)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.internal.http.BridgeInterceptor: void <init>(okhttp3.CookieJar)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r16.<okhttp3.internal.http.RetryAndFollowUpInterceptor: void <init>(okhttp3.OkHttpClient)>($r4) in <okhttp3.internal.connection.RealCall: okhttp3.Response getResponseWithInterceptorChain$okhttp()> ==> <okhttp3.internal.http.RetryAndFollowUpInterceptor: void <init>(okhttp3.OkHttpClient)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "client") in <okhttp3.internal.http.RetryAndFollowUpInterceptor: void <init>(okhttp3.OkHttpClient)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.internal.http.RetryAndFollowUpInterceptor: void <init>(okhttp3.OkHttpClient)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $z1 = virtualinvoke r0.<okhttp3.internal.connection.RealCall: boolean isCanceled()>() in <okhttp3.internal.connection.RealCall: okhttp3.Response getResponseWithInterceptorChain$okhttp()> ==> <okhttp3.internal.connection.RealCall: boolean isCanceled()>
VIRTUAL edge: virtualinvoke r0.<okhttp3.internal.connection.RealCall: java.io.IOException noMoreExchanges$okhttp(java.io.IOException)>(null) in <okhttp3.internal.connection.RealCall: okhttp3.Response getResponseWithInterceptorChain$okhttp()> ==> <okhttp3.internal.connection.RealCall: java.io.IOException noMoreExchanges$okhttp(java.io.IOException)>
CLINIT edge: $r2 = <kotlin.Unit: kotlin.Unit INSTANCE> in <okhttp3.internal.connection.RealCall: java.io.IOException noMoreExchanges$okhttp(java.io.IOException)> ==> <kotlin.Unit: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<kotlin.Unit: void <init>()>() in <kotlin.Unit: void <clinit>()> ==> <kotlin.Unit: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <kotlin.Unit: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: $r1 = specialinvoke r0.<okhttp3.internal.connection.RealCall: java.io.IOException callDone(java.io.IOException)>($r1) in <okhttp3.internal.connection.RealCall: java.io.IOException noMoreExchanges$okhttp(java.io.IOException)> ==> <okhttp3.internal.connection.RealCall: java.io.IOException callDone(java.io.IOException)>
CLINIT edge: $z0 = <okhttp3.internal.Util: boolean assertionsEnabled> in <okhttp3.internal.connection.RealCall: java.io.IOException callDone(java.io.IOException)> ==> <okhttp3.internal.Util: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r14) in <okhttp3.internal.connection.RealCall: java.io.IOException callDone(java.io.IOException)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>
STATIC edge: staticinvoke <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>($r8) in <okhttp3.internal.connection.RealCall: java.io.IOException callDone(java.io.IOException)> ==> <okhttp3.internal.Util: void closeQuietly(java.net.Socket)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r4, "Thread.currentThread()") in <okhttp3.internal.connection.RealCall: java.io.IOException callDone(java.io.IOException)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r4, "Thread.currentThread()") in <okhttp3.internal.connection.RealCall: java.io.IOException callDone(java.io.IOException)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "$this$closeQuietly") in <okhttp3.internal.Util: void closeQuietly(java.net.Socket)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r3, "bio == null") in <okhttp3.internal.Util: void closeQuietly(java.net.Socket)> ==> <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.Thread: java.lang.String getName()>() in <okhttp3.internal.connection.RealCall: java.io.IOException callDone(java.io.IOException)> ==> <java.lang.Thread: java.lang.String getName()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.String getName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.RuntimeException: java.lang.String getMessage()>() in <okhttp3.internal.Util: void closeQuietly(java.net.Socket)> ==> <java.lang.Throwable: java.lang.String getMessage()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.String getMessage()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>() in <okhttp3.internal.connection.RealCall: java.io.IOException callDone(java.io.IOException)> ==> <java.lang.String: java.lang.String toString()>
SPECIAL edge: specialinvoke $r2.<java.lang.AssertionError: void <init>(java.lang.Object)>($r5) in <okhttp3.internal.connection.RealCall: java.io.IOException callDone(java.io.IOException)> ==> <java.lang.AssertionError: void <init>(java.lang.Object)>
VIRTUAL edge: $r8 = virtualinvoke r0.<okhttp3.internal.connection.RealCall: java.net.Socket releaseConnectionNoEvents$okhttp()>() in <okhttp3.internal.connection.RealCall: java.io.IOException callDone(java.io.IOException)> ==> <okhttp3.internal.connection.RealCall: java.net.Socket releaseConnectionNoEvents$okhttp()>
SPECIAL edge: $r14 = specialinvoke r0.<okhttp3.internal.connection.RealCall: java.io.IOException timeoutExit(java.io.IOException)>($r1) in <okhttp3.internal.connection.RealCall: java.io.IOException callDone(java.io.IOException)> ==> <okhttp3.internal.connection.RealCall: java.io.IOException timeoutExit(java.io.IOException)>
CLINIT edge: $z0 = <okhttp3.internal.Util: boolean assertionsEnabled> in <okhttp3.internal.connection.RealCall: java.net.Socket releaseConnectionNoEvents$okhttp()> ==> <okhttp3.internal.Util: void <clinit>()>
STATIC edge: $z1 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r10, r0) in <okhttp3.internal.connection.RealCall: java.net.Socket releaseConnectionNoEvents$okhttp()> ==> <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r3, "Thread.currentThread()") in <okhttp3.internal.connection.RealCall: java.net.Socket releaseConnectionNoEvents$okhttp()> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r1) in <okhttp3.internal.connection.RealCall: java.net.Socket releaseConnectionNoEvents$okhttp()> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.Thread: java.lang.String getName()>() in <okhttp3.internal.connection.RealCall: java.net.Socket releaseConnectionNoEvents$okhttp()> ==> <java.lang.Thread: java.lang.String getName()>
VIRTUAL edge: virtualinvoke $r3.<java.io.InterruptedIOException: java.lang.Throwable initCause(java.lang.Throwable)>($r4) in <okhttp3.internal.connection.RealCall: java.io.IOException timeoutExit(java.io.IOException)> ==> <java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>() in <okhttp3.internal.connection.RealCall: java.net.Socket releaseConnectionNoEvents$okhttp()> ==> <java.lang.String: java.lang.String toString()>
SPECIAL edge: specialinvoke $r14.<java.lang.AssertionError: void <init>(java.lang.Object)>($r4) in <okhttp3.internal.connection.RealCall: java.net.Socket releaseConnectionNoEvents$okhttp()> ==> <java.lang.AssertionError: void <init>(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<okhttp3.internal.platform.Platform$Companion: okhttp3.internal.platform.Platform get()>() in <okhttp3.internal.connection.RealCall: void callStart()> ==> <okhttp3.internal.platform.Platform$Companion: okhttp3.internal.platform.Platform get()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<okhttp3.internal.platform.Platform: java.lang.Object getStackTraceForCloseable(java.lang.String)>("response.body().close()") in <okhttp3.internal.connection.RealCall: void callStart()> ==> <okhttp3.internal.platform.Platform: java.lang.Object getStackTraceForCloseable(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<okhttp3.internal.platform.Platform: java.lang.Object getStackTraceForCloseable(java.lang.String)>("response.body().close()") in <okhttp3.internal.connection.RealCall: void callStart()> ==> <okhttp3.internal.platform.AndroidPlatform: java.lang.Object getStackTraceForCloseable(java.lang.String)>
CLINIT edge: $r3 = <okhttp3.internal.platform.Platform: java.util.logging.Logger logger> in <okhttp3.internal.platform.Platform: java.lang.Object getStackTraceForCloseable(java.lang.String)> ==> <okhttp3.internal.platform.Platform: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "closer") in <okhttp3.internal.platform.Platform: java.lang.Object getStackTraceForCloseable(java.lang.String)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "closer") in <okhttp3.internal.platform.AndroidPlatform: java.lang.Object getStackTraceForCloseable(java.lang.String)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke $r3.<okhttp3.internal.platform.android.CloseGuard: java.lang.Object createAndOpen(java.lang.String)>($r2) in <okhttp3.internal.platform.AndroidPlatform: java.lang.Object getStackTraceForCloseable(java.lang.String)> ==> <okhttp3.internal.platform.android.CloseGuard: java.lang.Object createAndOpen(java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "closer") in <okhttp3.internal.platform.android.CloseGuard: java.lang.Object createAndOpen(java.lang.String)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r4) in <okhttp3.internal.platform.android.CloseGuard: java.lang.Object createAndOpen(java.lang.String)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>
SPECIAL edge: specialinvoke $r4.<java.lang.Throwable: void <init>(java.lang.String)>($r1) in <okhttp3.internal.platform.Platform: java.lang.Object getStackTraceForCloseable(java.lang.String)> ==> <java.lang.Throwable: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Throwable: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r2.<okhttp3.internal.connection.RealCall: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean)>(r0, $r1, 0) in <okhttp3.OkHttpClient: okhttp3.Call newCall(okhttp3.Request)> ==> <okhttp3.internal.connection.RealCall: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean)>
CLINIT edge: $r8 = new okhttp3.internal.connection.RealCall$timeout$1 in <okhttp3.internal.connection.RealCall: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean)> ==> <okio.AsyncTimeout: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "originalRequest") in <okhttp3.internal.connection.RealCall: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
CLINIT edge: $r10 = <kotlin.Unit: kotlin.Unit INSTANCE> in <okhttp3.internal.connection.RealCall: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean)> ==> <kotlin.Unit: void <clinit>()>
CLINIT edge: $r8 = new okhttp3.internal.connection.RealCall$timeout$1 in <okhttp3.internal.connection.RealCall: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean)> ==> <okio.Timeout: void <clinit>()>
CLINIT edge: <okio.AsyncTimeout: okio.AsyncTimeout$Companion Companion> = $r1 in <okio.AsyncTimeout: void <clinit>()> ==> <okio.Timeout: void <clinit>()>
SPECIAL edge: specialinvoke $r1.<okio.Timeout$Companion$NONE$1: void <init>()>() in <okio.Timeout: void <clinit>()> ==> <okio.Timeout$Companion$NONE$1: void <init>()>
SPECIAL edge: specialinvoke r0.<okio.Timeout: void <init>()>() in <okio.Timeout$Companion$NONE$1: void <init>()> ==> <okio.Timeout: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okio.Timeout: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<okio.Timeout$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null) in <okio.Timeout: void <clinit>()> ==> <okio.Timeout$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>
SPECIAL edge: specialinvoke r0.<okio.Timeout$Companion: void <init>()>() in <okio.Timeout$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)> ==> <okio.Timeout$Companion: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okio.Timeout$Companion: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<okio.AsyncTimeout$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null) in <okio.AsyncTimeout: void <clinit>()> ==> <okio.AsyncTimeout$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>
SPECIAL edge: specialinvoke r0.<okio.AsyncTimeout$Companion: void <init>()>() in <okio.AsyncTimeout$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)> ==> <okio.AsyncTimeout$Companion: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okio.AsyncTimeout$Companion: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r8.<okhttp3.internal.connection.RealCall$timeout$1: void <init>(okhttp3.internal.connection.RealCall)>(r0) in <okhttp3.internal.connection.RealCall: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean)> ==> <okhttp3.internal.connection.RealCall$timeout$1: void <init>(okhttp3.internal.connection.RealCall)>
VIRTUAL edge: virtualinvoke $r8.<okhttp3.internal.connection.RealCall$timeout$1: okio.Timeout timeout(long,java.util.concurrent.TimeUnit)>($l1, $r9) in <okhttp3.internal.connection.RealCall: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean)> ==> <okio.Timeout: okio.Timeout timeout(long,java.util.concurrent.TimeUnit)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "unit") in <okio.Timeout: okio.Timeout timeout(long,java.util.concurrent.TimeUnit)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke r0.<okio.AsyncTimeout: void <init>()>() in <okhttp3.internal.connection.RealCall$timeout$1: void <init>(okhttp3.internal.connection.RealCall)> ==> <okio.AsyncTimeout: void <init>()>
SPECIAL edge: specialinvoke r0.<okio.Timeout: void <init>()>() in <okio.AsyncTimeout: void <init>()> ==> <okio.Timeout: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.internal.connection.RealCall: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r1.<okhttp3.OkHttpClient: okhttp3.ConnectionPool connectionPool()>() in <okhttp3.internal.connection.RealCall: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean)> ==> <okhttp3.OkHttpClient: okhttp3.ConnectionPool connectionPool()>
VIRTUAL edge: $r5 = virtualinvoke $r1.<okhttp3.OkHttpClient: okhttp3.EventListener$Factory eventListenerFactory()>() in <okhttp3.internal.connection.RealCall: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean)> ==> <okhttp3.OkHttpClient: okhttp3.EventListener$Factory eventListenerFactory()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<okhttp3.OkHttpClient: int callTimeoutMillis()>() in <okhttp3.internal.connection.RealCall: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean)> ==> <okhttp3.OkHttpClient: int callTimeoutMillis()>
SPECIAL edge: specialinvoke $r1.<okhttp3.OkHttpClient$Builder: void <init>()>() in <okhttp3.OkHttpClient: void <init>()> ==> <okhttp3.OkHttpClient$Builder: void <init>()>
CLINIT edge: $r5 = <okhttp3.EventListener: okhttp3.EventListener NONE> in <okhttp3.OkHttpClient$Builder: void <init>()> ==> <okhttp3.EventListener: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r10, "SocketFactory.getDefault()") in <okhttp3.OkHttpClient$Builder: void <init>()> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
STATIC edge: $r6 = staticinvoke <okhttp3.internal.Util: okhttp3.EventListener$Factory asFactory(okhttp3.EventListener)>($r5) in <okhttp3.OkHttpClient$Builder: void <init>()> ==> <okhttp3.internal.Util: okhttp3.EventListener$Factory asFactory(okhttp3.EventListener)>
CLINIT edge: $r14 = <okhttp3.CertificatePinner: okhttp3.CertificatePinner DEFAULT> in <okhttp3.OkHttpClient$Builder: void <init>()> ==> <okhttp3.CertificatePinner: void <clinit>()>
CLINIT edge: $r12 = <okhttp3.internal.tls.OkHostnameVerifier: okhttp3.internal.tls.OkHostnameVerifier INSTANCE> in <okhttp3.OkHttpClient$Builder: void <init>()> ==> <okhttp3.internal.tls.OkHostnameVerifier: void <clinit>()>
CLINIT edge: $r11 = <okhttp3.OkHttpClient: okhttp3.OkHttpClient$Companion Companion> in <okhttp3.OkHttpClient$Builder: void <init>()> ==> <okhttp3.OkHttpClient: void <clinit>()>
CLINIT edge: $r9 = <okhttp3.Dns: okhttp3.Dns SYSTEM> in <okhttp3.OkHttpClient$Builder: void <init>()> ==> <okhttp3.Dns: void <clinit>()>
CLINIT edge: $r8 = <okhttp3.CookieJar: okhttp3.CookieJar NO_COOKIES> in <okhttp3.OkHttpClient$Builder: void <init>()> ==> <okhttp3.CookieJar: void <clinit>()>
CLINIT edge: $r7 = <okhttp3.Authenticator: okhttp3.Authenticator NONE> in <okhttp3.OkHttpClient$Builder: void <init>()> ==> <okhttp3.Authenticator: void <clinit>()>
CLINIT edge: $r6 = staticinvoke <okhttp3.internal.Util: okhttp3.EventListener$Factory asFactory(okhttp3.EventListener)>($r5) in <okhttp3.OkHttpClient$Builder: void <init>()> ==> <okhttp3.internal.Util: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$asFactory") in <okhttp3.internal.Util: okhttp3.EventListener$Factory asFactory(okhttp3.EventListener)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke $r1.<okhttp3.CookieJar$Companion$NoCookies: void <init>()>() in <okhttp3.CookieJar: void <clinit>()> ==> <okhttp3.CookieJar$Companion$NoCookies: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.CookieJar$Companion$NoCookies: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<okhttp3.CookieJar$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null) in <okhttp3.CookieJar: void <clinit>()> ==> <okhttp3.CookieJar$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>
SPECIAL edge: specialinvoke r0.<okhttp3.CookieJar$Companion: void <init>()>() in <okhttp3.CookieJar$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)> ==> <okhttp3.CookieJar$Companion: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.CookieJar$Companion: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<okhttp3.Dns$Companion$DnsSystem: void <init>()>() in <okhttp3.Dns: void <clinit>()> ==> <okhttp3.Dns$Companion$DnsSystem: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.Dns$Companion$DnsSystem: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<okhttp3.Dns$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null) in <okhttp3.Dns: void <clinit>()> ==> <okhttp3.Dns$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>
SPECIAL edge: specialinvoke r0.<okhttp3.Dns$Companion: void <init>()>() in <okhttp3.Dns$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)> ==> <okhttp3.Dns$Companion: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.Dns$Companion: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r3.<okhttp3.internal.authenticator.JavaNetAuthenticator: void <init>(okhttp3.Dns,int,kotlin.jvm.internal.DefaultConstructorMarker)>(null, 1, null) in <okhttp3.Authenticator: void <clinit>()> ==> <okhttp3.internal.authenticator.JavaNetAuthenticator: void <init>(okhttp3.Dns,int,kotlin.jvm.internal.DefaultConstructorMarker)>
CLINIT edge: $r2 = <okhttp3.Dns: okhttp3.Dns SYSTEM> in <okhttp3.internal.authenticator.JavaNetAuthenticator: void <init>(okhttp3.Dns,int,kotlin.jvm.internal.DefaultConstructorMarker)> ==> <okhttp3.Dns: void <clinit>()>
SPECIAL edge: specialinvoke r0.<okhttp3.internal.authenticator.JavaNetAuthenticator: void <init>(okhttp3.Dns)>($r2) in <okhttp3.internal.authenticator.JavaNetAuthenticator: void <init>(okhttp3.Dns,int,kotlin.jvm.internal.DefaultConstructorMarker)> ==> <okhttp3.internal.authenticator.JavaNetAuthenticator: void <init>(okhttp3.Dns)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "defaultDns") in <okhttp3.internal.authenticator.JavaNetAuthenticator: void <init>(okhttp3.Dns)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.internal.authenticator.JavaNetAuthenticator: void <init>(okhttp3.Dns)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<okhttp3.Authenticator$Companion$AuthenticatorNone: void <init>()>() in <okhttp3.Authenticator: void <clinit>()> ==> <okhttp3.Authenticator$Companion$AuthenticatorNone: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.Authenticator$Companion$AuthenticatorNone: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<okhttp3.Authenticator$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null) in <okhttp3.Authenticator: void <clinit>()> ==> <okhttp3.Authenticator$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>
SPECIAL edge: specialinvoke r0.<okhttp3.Authenticator$Companion: void <init>()>() in <okhttp3.Authenticator$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)> ==> <okhttp3.Authenticator$Companion: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.Authenticator$Companion: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<okhttp3.internal.tls.OkHostnameVerifier: void <init>()>() in <okhttp3.internal.tls.OkHostnameVerifier: void <clinit>()> ==> <okhttp3.internal.tls.OkHostnameVerifier: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.internal.tls.OkHostnameVerifier: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r2.<okhttp3.CertificatePinner$Builder: void <init>()>() in <okhttp3.CertificatePinner: void <clinit>()> ==> <okhttp3.CertificatePinner$Builder: void <init>()>
VIRTUAL edge: $r0 = virtualinvoke $r2.<okhttp3.CertificatePinner$Builder: okhttp3.CertificatePinner build()>() in <okhttp3.CertificatePinner: void <clinit>()> ==> <okhttp3.CertificatePinner$Builder: okhttp3.CertificatePinner build()>
STATIC edge: $r2 = staticinvoke <kotlin.collections.CollectionsKt: java.util.Set toSet(java.lang.Iterable)>($r4) in <okhttp3.CertificatePinner$Builder: okhttp3.CertificatePinner build()> ==> <kotlin.collections.CollectionsKt___CollectionsKt: java.util.Set toSet(java.lang.Iterable)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>") in <kotlin.collections.CollectionsKt___CollectionsKt: java.util.Set toSet(java.lang.Iterable)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: $r3 = staticinvoke <kotlin.collections.SetsKt: java.util.Set optimizeReadOnlySet(java.util.Set)>($r3) in <kotlin.collections.CollectionsKt___CollectionsKt: java.util.Set toSet(java.lang.Iterable)> ==> <kotlin.collections.SetsKt__SetsKt: java.util.Set optimizeReadOnlySet(java.util.Set)>
STATIC edge: $r1 = staticinvoke <kotlin.collections.CollectionsKt: java.util.Collection toCollection(java.lang.Iterable,java.util.Collection)>($r0, $r1) in <kotlin.collections.CollectionsKt___CollectionsKt: java.util.Set toSet(java.lang.Iterable)> ==> <kotlin.collections.CollectionsKt___CollectionsKt: java.util.Collection toCollection(java.lang.Iterable,java.util.Collection)>
STATIC edge: $r3 = staticinvoke <kotlin.collections.SetsKt: java.util.Set emptySet()>() in <kotlin.collections.CollectionsKt___CollectionsKt: java.util.Set toSet(java.lang.Iterable)> ==> <kotlin.collections.SetsKt__SetsKt: java.util.Set emptySet()>
STATIC edge: $r3 = staticinvoke <kotlin.collections.SetsKt: java.util.Set setOf(java.lang.Object)>($r5) in <kotlin.collections.CollectionsKt___CollectionsKt: java.util.Set toSet(java.lang.Iterable)> ==> <kotlin.collections.SetsKt__SetsJVMKt: java.util.Set setOf(java.lang.Object)>
STATIC edge: $i0 = staticinvoke <kotlin.collections.MapsKt: int mapCapacity(int)>($i0) in <kotlin.collections.CollectionsKt___CollectionsKt: java.util.Set toSet(java.lang.Iterable)> ==> <kotlin.collections.MapsKt__MapsJVMKt: int mapCapacity(int)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>") in <kotlin.collections.SetsKt__SetsKt: java.util.Set optimizeReadOnlySet(java.util.Set)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: $r0 = staticinvoke <kotlin.collections.SetsKt: java.util.Set emptySet()>() in <kotlin.collections.SetsKt__SetsKt: java.util.Set optimizeReadOnlySet(java.util.Set)> ==> <kotlin.collections.SetsKt__SetsKt: java.util.Set emptySet()>
STATIC edge: $r0 = staticinvoke <kotlin.collections.SetsKt: java.util.Set setOf(java.lang.Object)>($r2) in <kotlin.collections.SetsKt__SetsKt: java.util.Set optimizeReadOnlySet(java.util.Set)> ==> <kotlin.collections.SetsKt__SetsJVMKt: java.util.Set setOf(java.lang.Object)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>") in <kotlin.collections.CollectionsKt___CollectionsKt: java.util.Collection toCollection(java.lang.Iterable,java.util.Collection)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
CLINIT edge: $r0 = <kotlin.collections.EmptySet: kotlin.collections.EmptySet INSTANCE> in <kotlin.collections.SetsKt__SetsKt: java.util.Set emptySet()> ==> <kotlin.collections.EmptySet: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "singleton(element)") in <kotlin.collections.SetsKt__SetsJVMKt: java.util.Set setOf(java.lang.Object)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
INTERFACE edge: $i0 = interfaceinvoke $r0.<java.util.Set: int size()>() in <kotlin.collections.SetsKt__SetsKt: java.util.Set optimizeReadOnlySet(java.util.Set)> ==> <kotlin.collections.EmptySet: int size()>
INTERFACE edge: $r1 = interfaceinvoke $r0.<java.util.Set: java.util.Iterator iterator()>() in <kotlin.collections.SetsKt__SetsKt: java.util.Set optimizeReadOnlySet(java.util.Set)> ==> <kotlin.collections.EmptySet: java.util.Iterator iterator()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>() in <kotlin.collections.SetsKt__SetsKt: java.util.Set optimizeReadOnlySet(java.util.Set)> ==> <kotlin.collections.EmptyIterator: java.lang.Void next()>
VIRTUAL edge: $i0 = virtualinvoke r0.<kotlin.collections.EmptySet: int getSize()>() in <kotlin.collections.EmptySet: int size()> ==> <kotlin.collections.EmptySet: int getSize()>
SPECIAL edge: specialinvoke $r1.<okhttp3.CertificatePinner: void <init>(java.util.Set,okhttp3.internal.tls.CertificateChainCleaner,int,kotlin.jvm.internal.DefaultConstructorMarker)>($r2, null, 2, null) in <okhttp3.CertificatePinner$Builder: okhttp3.CertificatePinner build()> ==> <okhttp3.CertificatePinner: void <init>(java.util.Set,okhttp3.internal.tls.CertificateChainCleaner,int,kotlin.jvm.internal.DefaultConstructorMarker)>
SPECIAL edge: specialinvoke r0.<okhttp3.CertificatePinner: void <init>(java.util.Set,okhttp3.internal.tls.CertificateChainCleaner)>($r1, $r3) in <okhttp3.CertificatePinner: void <init>(java.util.Set,okhttp3.internal.tls.CertificateChainCleaner,int,kotlin.jvm.internal.DefaultConstructorMarker)> ==> <okhttp3.CertificatePinner: void <init>(java.util.Set,okhttp3.internal.tls.CertificateChainCleaner)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "pins") in <okhttp3.CertificatePinner: void <init>(java.util.Set,okhttp3.internal.tls.CertificateChainCleaner)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.CertificatePinner: void <init>(java.util.Set,okhttp3.internal.tls.CertificateChainCleaner)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.CertificatePinner$Builder: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<okhttp3.CertificatePinner$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null) in <okhttp3.CertificatePinner: void <clinit>()> ==> <okhttp3.CertificatePinner$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>
SPECIAL edge: specialinvoke r0.<okhttp3.CertificatePinner$Companion: void <init>()>() in <okhttp3.CertificatePinner$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)> ==> <okhttp3.CertificatePinner$Companion: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.CertificatePinner$Companion: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<okhttp3.internal.Util$asFactory$1: void <init>(okhttp3.EventListener)>($r0) in <okhttp3.internal.Util: okhttp3.EventListener$Factory asFactory(okhttp3.EventListener)> ==> <okhttp3.internal.Util$asFactory$1: void <init>(okhttp3.EventListener)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.internal.Util$asFactory$1: void <init>(okhttp3.EventListener)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<okhttp3.EventListener$Companion$NONE$1: void <init>()>() in <okhttp3.EventListener: void <clinit>()> ==> <okhttp3.EventListener$Companion$NONE$1: void <init>()>
SPECIAL edge: specialinvoke r0.<okhttp3.EventListener: void <init>()>() in <okhttp3.EventListener$Companion$NONE$1: void <init>()> ==> <okhttp3.EventListener: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.EventListener: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<okhttp3.EventListener$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null) in <okhttp3.EventListener: void <clinit>()> ==> <okhttp3.EventListener$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>
SPECIAL edge: specialinvoke r0.<okhttp3.EventListener$Companion: void <init>()>() in <okhttp3.EventListener$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)> ==> <okhttp3.EventListener$Companion: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.EventListener$Companion: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r11.<okhttp3.OkHttpClient$Companion: java.util.List getDEFAULT_CONNECTION_SPECS$okhttp()>() in <okhttp3.OkHttpClient$Builder: void <init>()> ==> <okhttp3.OkHttpClient$Companion: java.util.List getDEFAULT_CONNECTION_SPECS$okhttp()>
VIRTUAL edge: $r4 = virtualinvoke $r11.<okhttp3.OkHttpClient$Companion: java.util.List getDEFAULT_PROTOCOLS$okhttp()>() in <okhttp3.OkHttpClient$Builder: void <init>()> ==> <okhttp3.OkHttpClient$Companion: java.util.List getDEFAULT_PROTOCOLS$okhttp()>
CLINIT edge: $r1 = staticinvoke <okhttp3.OkHttpClient: java.util.List access$getDEFAULT_CONNECTION_SPECS$cp()>() in <okhttp3.OkHttpClient$Companion: java.util.List getDEFAULT_CONNECTION_SPECS$okhttp()> ==> <okhttp3.OkHttpClient: void <clinit>()>
STATIC edge: $r1 = staticinvoke <okhttp3.OkHttpClient: java.util.List access$getDEFAULT_CONNECTION_SPECS$cp()>() in <okhttp3.OkHttpClient$Companion: java.util.List getDEFAULT_CONNECTION_SPECS$okhttp()> ==> <okhttp3.OkHttpClient: java.util.List access$getDEFAULT_CONNECTION_SPECS$cp()>
CLINIT edge: $r1 = staticinvoke <okhttp3.OkHttpClient: java.util.List access$getDEFAULT_PROTOCOLS$cp()>() in <okhttp3.OkHttpClient$Companion: java.util.List getDEFAULT_PROTOCOLS$okhttp()> ==> <okhttp3.OkHttpClient: void <clinit>()>
STATIC edge: $r1 = staticinvoke <okhttp3.OkHttpClient: java.util.List access$getDEFAULT_PROTOCOLS$cp()>() in <okhttp3.OkHttpClient$Companion: java.util.List getDEFAULT_PROTOCOLS$okhttp()> ==> <okhttp3.OkHttpClient: java.util.List access$getDEFAULT_PROTOCOLS$cp()>
CLINIT edge: r0 = <okhttp3.OkHttpClient: java.util.List DEFAULT_CONNECTION_SPECS> in <okhttp3.OkHttpClient: java.util.List access$getDEFAULT_CONNECTION_SPECS$cp()> ==> <okhttp3.OkHttpClient: void <clinit>()>
CLINIT edge: r0 = <okhttp3.OkHttpClient: java.util.List DEFAULT_PROTOCOLS> in <okhttp3.OkHttpClient: java.util.List access$getDEFAULT_PROTOCOLS$cp()> ==> <okhttp3.OkHttpClient: void <clinit>()>
SPECIAL edge: specialinvoke $r2.<okhttp3.ConnectionPool: void <init>()>() in <okhttp3.OkHttpClient$Builder: void <init>()> ==> <okhttp3.ConnectionPool: void <init>()>
SPECIAL edge: specialinvoke r0.<okhttp3.ConnectionPool: void <init>(int,long,java.util.concurrent.TimeUnit)>(5, 5L, $r1) in <okhttp3.ConnectionPool: void <init>()> ==> <okhttp3.ConnectionPool: void <init>(int,long,java.util.concurrent.TimeUnit)>
CLINIT edge: $r3 = new okhttp3.internal.connection.RealConnectionPool in <okhttp3.ConnectionPool: void <init>(int,long,java.util.concurrent.TimeUnit)> ==> <okhttp3.internal.connection.RealConnectionPool: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "timeUnit") in <okhttp3.ConnectionPool: void <init>(int,long,java.util.concurrent.TimeUnit)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
CLINIT edge: $r2 = <okhttp3.internal.concurrent.TaskRunner: okhttp3.internal.concurrent.TaskRunner INSTANCE> in <okhttp3.ConnectionPool: void <init>(int,long,java.util.concurrent.TimeUnit)> ==> <okhttp3.internal.concurrent.TaskRunner: void <clinit>()>
CLINIT edge: $r4 = <okhttp3.internal.Util: java.lang.String okHttpName> in <okhttp3.internal.concurrent.TaskRunner: void <clinit>()> ==> <okhttp3.internal.Util: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r8, "Logger.getLogger(TaskRunner::class.java.name)") in <okhttp3.internal.concurrent.TaskRunner: void <clinit>()> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
STATIC edge: $r5 = staticinvoke <okhttp3.internal.Util: java.util.concurrent.ThreadFactory threadFactory(java.lang.String,boolean)>($r4, 1) in <okhttp3.internal.concurrent.TaskRunner: void <clinit>()> ==> <okhttp3.internal.Util: java.util.concurrent.ThreadFactory threadFactory(java.lang.String,boolean)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "name") in <okhttp3.internal.Util: java.util.concurrent.ThreadFactory threadFactory(java.lang.String,boolean)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke $r1.<okhttp3.internal.Util$threadFactory$1: void <init>(java.lang.String,boolean)>($r0, $z0) in <okhttp3.internal.Util: java.util.concurrent.ThreadFactory threadFactory(java.lang.String,boolean)> ==> <okhttp3.internal.Util$threadFactory$1: void <init>(java.lang.String,boolean)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.internal.Util$threadFactory$1: void <init>(java.lang.String,boolean)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>() in <okhttp3.internal.concurrent.TaskRunner: void <clinit>()> ==> <java.lang.Class: java.lang.String getName()>
SPECIAL edge: specialinvoke $r2.<okhttp3.internal.concurrent.TaskRunner$RealBackend: void <init>(java.util.concurrent.ThreadFactory)>($r5) in <okhttp3.internal.concurrent.TaskRunner: void <clinit>()> ==> <okhttp3.internal.concurrent.TaskRunner$RealBackend: void <init>(java.util.concurrent.ThreadFactory)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "threadFactory") in <okhttp3.internal.concurrent.TaskRunner$RealBackend: void <init>(java.util.concurrent.ThreadFactory)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.internal.concurrent.TaskRunner$RealBackend: void <init>(java.util.concurrent.ThreadFactory)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<okhttp3.internal.concurrent.TaskRunner: void <init>(okhttp3.internal.concurrent.TaskRunner$Backend)>($r6) in <okhttp3.internal.concurrent.TaskRunner: void <clinit>()> ==> <okhttp3.internal.concurrent.TaskRunner: void <init>(okhttp3.internal.concurrent.TaskRunner$Backend)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "backend") in <okhttp3.internal.concurrent.TaskRunner: void <init>(okhttp3.internal.concurrent.TaskRunner$Backend)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke $r4.<okhttp3.internal.concurrent.TaskRunner$runnable$1: void <init>(okhttp3.internal.concurrent.TaskRunner)>(r0) in <okhttp3.internal.concurrent.TaskRunner: void <init>(okhttp3.internal.concurrent.TaskRunner$Backend)> ==> <okhttp3.internal.concurrent.TaskRunner$runnable$1: void <init>(okhttp3.internal.concurrent.TaskRunner)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.internal.concurrent.TaskRunner$runnable$1: void <init>(okhttp3.internal.concurrent.TaskRunner)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.internal.concurrent.TaskRunner: void <init>(okhttp3.internal.concurrent.TaskRunner$Backend)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<okhttp3.internal.concurrent.TaskRunner$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null) in <okhttp3.internal.concurrent.TaskRunner: void <clinit>()> ==> <okhttp3.internal.concurrent.TaskRunner$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>
SPECIAL edge: specialinvoke r0.<okhttp3.internal.concurrent.TaskRunner$Companion: void <init>()>() in <okhttp3.internal.concurrent.TaskRunner$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)> ==> <okhttp3.internal.concurrent.TaskRunner$Companion: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.internal.concurrent.TaskRunner$Companion: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<okhttp3.internal.connection.RealConnectionPool$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null) in <okhttp3.internal.connection.RealConnectionPool: void <clinit>()> ==> <okhttp3.internal.connection.RealConnectionPool$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>
SPECIAL edge: specialinvoke r0.<okhttp3.internal.connection.RealConnectionPool$Companion: void <init>()>() in <okhttp3.internal.connection.RealConnectionPool$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)> ==> <okhttp3.internal.connection.RealConnectionPool$Companion: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.internal.connection.RealConnectionPool$Companion: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r3.<okhttp3.internal.connection.RealConnectionPool: void <init>(okhttp3.internal.concurrent.TaskRunner,int,long,java.util.concurrent.TimeUnit)>($r2, $i0, $l1, $r1) in <okhttp3.ConnectionPool: void <init>(int,long,java.util.concurrent.TimeUnit)> ==> <okhttp3.internal.connection.RealConnectionPool: void <init>(okhttp3.internal.concurrent.TaskRunner,int,long,java.util.concurrent.TimeUnit)>
CLINIT edge: $r5 = <okhttp3.internal.Util: java.lang.String okHttpName> in <okhttp3.internal.connection.RealConnectionPool: void <init>(okhttp3.internal.concurrent.TaskRunner,int,long,java.util.concurrent.TimeUnit)> ==> <okhttp3.internal.Util: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "timeUnit") in <okhttp3.internal.connection.RealConnectionPool: void <init>(okhttp3.internal.concurrent.TaskRunner,int,long,java.util.concurrent.TimeUnit)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke $r8.<okhttp3.internal.connection.RealConnectionPool$cleanupTask$1: void <init>(okhttp3.internal.connection.RealConnectionPool,java.lang.String)>(r0, $r5) in <okhttp3.internal.connection.RealConnectionPool: void <init>(okhttp3.internal.concurrent.TaskRunner,int,long,java.util.concurrent.TimeUnit)> ==> <okhttp3.internal.connection.RealConnectionPool$cleanupTask$1: void <init>(okhttp3.internal.connection.RealConnectionPool,java.lang.String)>
SPECIAL edge: specialinvoke r0.<okhttp3.internal.concurrent.Task: void <init>(java.lang.String,boolean,int,kotlin.jvm.internal.DefaultConstructorMarker)>($r1, 0, 2, null) in <okhttp3.internal.connection.RealConnectionPool$cleanupTask$1: void <init>(okhttp3.internal.connection.RealConnectionPool,java.lang.String)> ==> <okhttp3.internal.concurrent.Task: void <init>(java.lang.String,boolean,int,kotlin.jvm.internal.DefaultConstructorMarker)>
SPECIAL edge: specialinvoke r0.<okhttp3.internal.concurrent.Task: void <init>(java.lang.String,boolean)>($r1, $z0) in <okhttp3.internal.concurrent.Task: void <init>(java.lang.String,boolean,int,kotlin.jvm.internal.DefaultConstructorMarker)> ==> <okhttp3.internal.concurrent.Task: void <init>(java.lang.String,boolean)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "name") in <okhttp3.internal.concurrent.Task: void <init>(java.lang.String,boolean)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.internal.concurrent.Task: void <init>(java.lang.String,boolean)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r1.<okhttp3.internal.concurrent.TaskRunner: okhttp3.internal.concurrent.TaskQueue newQueue()>() in <okhttp3.internal.connection.RealConnectionPool: void <init>(okhttp3.internal.concurrent.TaskRunner,int,long,java.util.concurrent.TimeUnit)> ==> <okhttp3.internal.concurrent.TaskRunner: okhttp3.internal.concurrent.TaskQueue newQueue()>
SPECIAL edge: specialinvoke $r2.<okhttp3.internal.concurrent.TaskQueue: void <init>(okhttp3.internal.concurrent.TaskRunner,java.lang.String)>(r0, $r3) in <okhttp3.internal.concurrent.TaskRunner: okhttp3.internal.concurrent.TaskQueue newQueue()> ==> <okhttp3.internal.concurrent.TaskQueue: void <init>(okhttp3.internal.concurrent.TaskRunner,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "taskRunner") in <okhttp3.internal.concurrent.TaskQueue: void <init>(okhttp3.internal.concurrent.TaskRunner,java.lang.String)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "name") in <okhttp3.internal.concurrent.TaskQueue: void <init>(okhttp3.internal.concurrent.TaskRunner,java.lang.String)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.internal.concurrent.TaskQueue: void <init>(okhttp3.internal.concurrent.TaskRunner,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.internal.connection.RealConnectionPool: void <init>(okhttp3.internal.concurrent.TaskRunner,int,long,java.util.concurrent.TimeUnit)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<okhttp3.ConnectionPool: void <init>(okhttp3.internal.connection.RealConnectionPool)>($r3) in <okhttp3.ConnectionPool: void <init>(int,long,java.util.concurrent.TimeUnit)> ==> <okhttp3.ConnectionPool: void <init>(okhttp3.internal.connection.RealConnectionPool)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "delegate") in <okhttp3.ConnectionPool: void <init>(okhttp3.internal.connection.RealConnectionPool)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.ConnectionPool: void <init>(okhttp3.internal.connection.RealConnectionPool)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<okhttp3.Dispatcher: void <init>()>() in <okhttp3.OkHttpClient$Builder: void <init>()> ==> <okhttp3.Dispatcher: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.Dispatcher: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.OkHttpClient$Builder: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>($r1) in <okhttp3.OkHttpClient: void <init>()> ==> <okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)>
CLINIT edge: $r4 = staticinvoke <okhttp3.internal.Util: java.util.List toImmutableList(java.util.List)>($r4) in <okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)> ==> <okhttp3.internal.Util: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r26) in <okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r26) in <okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>
STATIC edge: $r4 = staticinvoke <okhttp3.internal.Util: java.util.List toImmutableList(java.util.List)>($r4) in <okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)> ==> <okhttp3.internal.Util: java.util.List toImmutableList(java.util.List)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "builder") in <okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
CLINIT edge: $r30 = <okhttp3.internal.tls.CertificateChainCleaner: okhttp3.internal.tls.CertificateChainCleaner$Companion Companion> in <okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)> ==> <okhttp3.internal.tls.CertificateChainCleaner: void <clinit>()>
CLINIT edge: $r28 = <okhttp3.internal.platform.Platform: okhttp3.internal.platform.Platform$Companion Companion> in <okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)> ==> <okhttp3.internal.platform.Platform: void <clinit>()>
CLINIT edge: $r24 = <okhttp3.CertificatePinner: okhttp3.CertificatePinner DEFAULT> in <okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)> ==> <okhttp3.CertificatePinner: void <clinit>()>
CLINIT edge: $r11 = <okhttp3.internal.proxy.NullProxySelector: okhttp3.internal.proxy.NullProxySelector INSTANCE> in <okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)> ==> <okhttp3.internal.proxy.NullProxySelector: void <clinit>()>
CLINIT edge: $r11 = <okhttp3.internal.proxy.NullProxySelector: okhttp3.internal.proxy.NullProxySelector INSTANCE> in <okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)> ==> <okhttp3.internal.proxy.NullProxySelector: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "Collections.unmodifiableList(toMutableList())") in <okhttp3.internal.Util: java.util.List toImmutableList(java.util.List)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
STATIC edge: $r0 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List toMutableList(java.util.Collection)>($r1) in <okhttp3.internal.Util: java.util.List toImmutableList(java.util.List)> ==> <kotlin.collections.CollectionsKt___CollectionsKt: java.util.List toMutableList(java.util.Collection)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$toImmutableList") in <okhttp3.internal.Util: java.util.List toImmutableList(java.util.List)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>") in <kotlin.collections.CollectionsKt___CollectionsKt: java.util.List toMutableList(java.util.Collection)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke $r0.<okhttp3.internal.proxy.NullProxySelector: void <init>()>() in <okhttp3.internal.proxy.NullProxySelector: void <clinit>()> ==> <okhttp3.internal.proxy.NullProxySelector: void <init>()>
SPECIAL edge: specialinvoke $r0.<okhttp3.internal.tls.CertificateChainCleaner$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null) in <okhttp3.internal.tls.CertificateChainCleaner: void <clinit>()> ==> <okhttp3.internal.tls.CertificateChainCleaner$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>
SPECIAL edge: specialinvoke r0.<okhttp3.internal.tls.CertificateChainCleaner$Companion: void <init>()>() in <okhttp3.internal.tls.CertificateChainCleaner$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)> ==> <okhttp3.internal.tls.CertificateChainCleaner$Companion: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.internal.tls.CertificateChainCleaner$Companion: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r26 = virtualinvoke $r30.<okhttp3.internal.tls.CertificateChainCleaner$Companion: okhttp3.internal.tls.CertificateChainCleaner get(javax.net.ssl.X509TrustManager)>($r27) in <okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)> ==> <okhttp3.internal.tls.CertificateChainCleaner$Companion: okhttp3.internal.tls.CertificateChainCleaner get(javax.net.ssl.X509TrustManager)>
CLINIT edge: $r2 = <okhttp3.internal.platform.Platform: okhttp3.internal.platform.Platform$Companion Companion> in <okhttp3.internal.tls.CertificateChainCleaner$Companion: okhttp3.internal.tls.CertificateChainCleaner get(javax.net.ssl.X509TrustManager)> ==> <okhttp3.internal.platform.Platform: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "trustManager") in <okhttp3.internal.tls.CertificateChainCleaner$Companion: okhttp3.internal.tls.CertificateChainCleaner get(javax.net.ssl.X509TrustManager)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<okhttp3.internal.platform.Platform$Companion: okhttp3.internal.platform.Platform get()>() in <okhttp3.internal.tls.CertificateChainCleaner$Companion: okhttp3.internal.tls.CertificateChainCleaner get(javax.net.ssl.X509TrustManager)> ==> <okhttp3.internal.platform.Platform$Companion: okhttp3.internal.platform.Platform get()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<okhttp3.internal.platform.Platform: okhttp3.internal.tls.CertificateChainCleaner buildCertificateChainCleaner(javax.net.ssl.X509TrustManager)>($r1) in <okhttp3.internal.tls.CertificateChainCleaner$Companion: okhttp3.internal.tls.CertificateChainCleaner get(javax.net.ssl.X509TrustManager)> ==> <okhttp3.internal.platform.Platform: okhttp3.internal.tls.CertificateChainCleaner buildCertificateChainCleaner(javax.net.ssl.X509TrustManager)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<okhttp3.internal.platform.Platform: okhttp3.internal.tls.CertificateChainCleaner buildCertificateChainCleaner(javax.net.ssl.X509TrustManager)>($r1) in <okhttp3.internal.tls.CertificateChainCleaner$Companion: okhttp3.internal.tls.CertificateChainCleaner get(javax.net.ssl.X509TrustManager)> ==> <okhttp3.internal.platform.AndroidPlatform: okhttp3.internal.tls.CertificateChainCleaner buildCertificateChainCleaner(javax.net.ssl.X509TrustManager)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<okhttp3.internal.platform.Platform: okhttp3.internal.tls.CertificateChainCleaner buildCertificateChainCleaner(javax.net.ssl.X509TrustManager)>($r1) in <okhttp3.internal.tls.CertificateChainCleaner$Companion: okhttp3.internal.tls.CertificateChainCleaner get(javax.net.ssl.X509TrustManager)> ==> <okhttp3.internal.platform.Android10Platform: okhttp3.internal.tls.CertificateChainCleaner buildCertificateChainCleaner(javax.net.ssl.X509TrustManager)>
CLINIT edge: $r3 = new okhttp3.internal.tls.BasicCertificateChainCleaner in <okhttp3.internal.platform.Platform: okhttp3.internal.tls.CertificateChainCleaner buildCertificateChainCleaner(javax.net.ssl.X509TrustManager)> ==> <okhttp3.internal.tls.BasicCertificateChainCleaner: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "trustManager") in <okhttp3.internal.platform.Platform: okhttp3.internal.tls.CertificateChainCleaner buildCertificateChainCleaner(javax.net.ssl.X509TrustManager)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
CLINIT edge: $r3 = new okhttp3.internal.tls.BasicCertificateChainCleaner in <okhttp3.internal.platform.Platform: okhttp3.internal.tls.CertificateChainCleaner buildCertificateChainCleaner(javax.net.ssl.X509TrustManager)> ==> <okhttp3.internal.tls.CertificateChainCleaner: void <clinit>()>
CLINIT edge: $r2 = <okhttp3.internal.platform.android.AndroidCertificateChainCleaner: okhttp3.internal.platform.android.AndroidCertificateChainCleaner$Companion Companion> in <okhttp3.internal.platform.AndroidPlatform: okhttp3.internal.tls.CertificateChainCleaner buildCertificateChainCleaner(javax.net.ssl.X509TrustManager)> ==> <okhttp3.internal.platform.android.AndroidCertificateChainCleaner: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "trustManager") in <okhttp3.internal.platform.AndroidPlatform: okhttp3.internal.tls.CertificateChainCleaner buildCertificateChainCleaner(javax.net.ssl.X509TrustManager)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
CLINIT edge: $r2 = <okhttp3.internal.platform.android.AndroidCertificateChainCleaner: okhttp3.internal.platform.android.AndroidCertificateChainCleaner$Companion Companion> in <okhttp3.internal.platform.AndroidPlatform: okhttp3.internal.tls.CertificateChainCleaner buildCertificateChainCleaner(javax.net.ssl.X509TrustManager)> ==> <okhttp3.internal.tls.CertificateChainCleaner: void <clinit>()>
CLINIT edge: $r2 = <okhttp3.internal.platform.android.AndroidCertificateChainCleaner: okhttp3.internal.platform.android.AndroidCertificateChainCleaner$Companion Companion> in <okhttp3.internal.platform.Android10Platform: okhttp3.internal.tls.CertificateChainCleaner buildCertificateChainCleaner(javax.net.ssl.X509TrustManager)> ==> <okhttp3.internal.platform.android.AndroidCertificateChainCleaner: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "trustManager") in <okhttp3.internal.platform.Android10Platform: okhttp3.internal.tls.CertificateChainCleaner buildCertificateChainCleaner(javax.net.ssl.X509TrustManager)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
CLINIT edge: $r2 = <okhttp3.internal.platform.android.AndroidCertificateChainCleaner: okhttp3.internal.platform.android.AndroidCertificateChainCleaner$Companion Companion> in <okhttp3.internal.platform.Android10Platform: okhttp3.internal.tls.CertificateChainCleaner buildCertificateChainCleaner(javax.net.ssl.X509TrustManager)> ==> <okhttp3.internal.tls.CertificateChainCleaner: void <clinit>()>
CLINIT edge: <okhttp3.internal.tls.BasicCertificateChainCleaner: okhttp3.internal.tls.BasicCertificateChainCleaner$Companion Companion> = $r0 in <okhttp3.internal.tls.BasicCertificateChainCleaner: void <clinit>()> ==> <okhttp3.internal.tls.CertificateChainCleaner: void <clinit>()>
CLINIT edge: <okhttp3.internal.platform.android.AndroidCertificateChainCleaner: okhttp3.internal.platform.android.AndroidCertificateChainCleaner$Companion Companion> = $r0 in <okhttp3.internal.platform.android.AndroidCertificateChainCleaner: void <clinit>()> ==> <okhttp3.internal.tls.CertificateChainCleaner: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<okhttp3.internal.platform.android.AndroidCertificateChainCleaner$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null) in <okhttp3.internal.platform.android.AndroidCertificateChainCleaner: void <clinit>()> ==> <okhttp3.internal.platform.android.AndroidCertificateChainCleaner$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>
SPECIAL edge: specialinvoke r0.<okhttp3.internal.platform.android.AndroidCertificateChainCleaner$Companion: void <init>()>() in <okhttp3.internal.platform.android.AndroidCertificateChainCleaner$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)> ==> <okhttp3.internal.platform.android.AndroidCertificateChainCleaner$Companion: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.internal.platform.android.AndroidCertificateChainCleaner$Companion: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<okhttp3.internal.tls.BasicCertificateChainCleaner$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null) in <okhttp3.internal.tls.BasicCertificateChainCleaner: void <clinit>()> ==> <okhttp3.internal.tls.BasicCertificateChainCleaner$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>
SPECIAL edge: specialinvoke r0.<okhttp3.internal.tls.BasicCertificateChainCleaner$Companion: void <init>()>() in <okhttp3.internal.tls.BasicCertificateChainCleaner$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)> ==> <okhttp3.internal.tls.BasicCertificateChainCleaner$Companion: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.internal.tls.BasicCertificateChainCleaner$Companion: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: $r4 = specialinvoke r0.<okhttp3.internal.platform.Platform: okhttp3.internal.tls.CertificateChainCleaner buildCertificateChainCleaner(javax.net.ssl.X509TrustManager)>($r1) in <okhttp3.internal.platform.Android10Platform: okhttp3.internal.tls.CertificateChainCleaner buildCertificateChainCleaner(javax.net.ssl.X509TrustManager)> ==> <okhttp3.internal.platform.Platform: okhttp3.internal.tls.CertificateChainCleaner buildCertificateChainCleaner(javax.net.ssl.X509TrustManager)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<okhttp3.internal.platform.android.AndroidCertificateChainCleaner$Companion: okhttp3.internal.platform.android.AndroidCertificateChainCleaner buildIfSupported(javax.net.ssl.X509TrustManager)>($r1) in <okhttp3.internal.platform.Android10Platform: okhttp3.internal.tls.CertificateChainCleaner buildCertificateChainCleaner(javax.net.ssl.X509TrustManager)> ==> <okhttp3.internal.platform.android.AndroidCertificateChainCleaner$Companion: okhttp3.internal.platform.android.AndroidCertificateChainCleaner buildIfSupported(javax.net.ssl.X509TrustManager)>
CLINIT edge: $r4 = new okhttp3.internal.platform.android.AndroidCertificateChainCleaner in <okhttp3.internal.platform.android.AndroidCertificateChainCleaner$Companion: okhttp3.internal.platform.android.AndroidCertificateChainCleaner buildIfSupported(javax.net.ssl.X509TrustManager)> ==> <okhttp3.internal.platform.android.AndroidCertificateChainCleaner: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "trustManager") in <okhttp3.internal.platform.android.AndroidCertificateChainCleaner$Companion: okhttp3.internal.platform.android.AndroidCertificateChainCleaner buildIfSupported(javax.net.ssl.X509TrustManager)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
CLINIT edge: $r4 = new okhttp3.internal.platform.android.AndroidCertificateChainCleaner in <okhttp3.internal.platform.android.AndroidCertificateChainCleaner$Companion: okhttp3.internal.platform.android.AndroidCertificateChainCleaner buildIfSupported(javax.net.ssl.X509TrustManager)> ==> <okhttp3.internal.tls.CertificateChainCleaner: void <clinit>()>
SPECIAL edge: specialinvoke $r4.<okhttp3.internal.platform.android.AndroidCertificateChainCleaner: void <init>(javax.net.ssl.X509TrustManager,android.net.http.X509TrustManagerExtensions)>($r1, $r3) in <okhttp3.internal.platform.android.AndroidCertificateChainCleaner$Companion: okhttp3.internal.platform.android.AndroidCertificateChainCleaner buildIfSupported(javax.net.ssl.X509TrustManager)> ==> <okhttp3.internal.platform.android.AndroidCertificateChainCleaner: void <init>(javax.net.ssl.X509TrustManager,android.net.http.X509TrustManagerExtensions)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "trustManager") in <okhttp3.internal.platform.android.AndroidCertificateChainCleaner: void <init>(javax.net.ssl.X509TrustManager,android.net.http.X509TrustManagerExtensions)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "x509TrustManagerExtensions") in <okhttp3.internal.platform.android.AndroidCertificateChainCleaner: void <init>(javax.net.ssl.X509TrustManager,android.net.http.X509TrustManagerExtensions)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke r0.<okhttp3.internal.tls.CertificateChainCleaner: void <init>()>() in <okhttp3.internal.platform.android.AndroidCertificateChainCleaner: void <init>(javax.net.ssl.X509TrustManager,android.net.http.X509TrustManagerExtensions)> ==> <okhttp3.internal.tls.CertificateChainCleaner: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.internal.tls.CertificateChainCleaner: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<okhttp3.internal.platform.android.AndroidCertificateChainCleaner$Companion: okhttp3.internal.platform.android.AndroidCertificateChainCleaner buildIfSupported(javax.net.ssl.X509TrustManager)>($r1) in <okhttp3.internal.platform.AndroidPlatform: okhttp3.internal.tls.CertificateChainCleaner buildCertificateChainCleaner(javax.net.ssl.X509TrustManager)> ==> <okhttp3.internal.platform.android.AndroidCertificateChainCleaner$Companion: okhttp3.internal.platform.android.AndroidCertificateChainCleaner buildIfSupported(javax.net.ssl.X509TrustManager)>
SPECIAL edge: $r4 = specialinvoke r0.<okhttp3.internal.platform.Platform: okhttp3.internal.tls.CertificateChainCleaner buildCertificateChainCleaner(javax.net.ssl.X509TrustManager)>($r1) in <okhttp3.internal.platform.AndroidPlatform: okhttp3.internal.tls.CertificateChainCleaner buildCertificateChainCleaner(javax.net.ssl.X509TrustManager)> ==> <okhttp3.internal.platform.Platform: okhttp3.internal.tls.CertificateChainCleaner buildCertificateChainCleaner(javax.net.ssl.X509TrustManager)>
SPECIAL edge: specialinvoke $r3.<okhttp3.internal.tls.BasicCertificateChainCleaner: void <init>(okhttp3.internal.tls.TrustRootIndex)>($r1) in <okhttp3.internal.platform.Platform: okhttp3.internal.tls.CertificateChainCleaner buildCertificateChainCleaner(javax.net.ssl.X509TrustManager)> ==> <okhttp3.internal.tls.BasicCertificateChainCleaner: void <init>(okhttp3.internal.tls.TrustRootIndex)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "trustRootIndex") in <okhttp3.internal.tls.BasicCertificateChainCleaner: void <init>(okhttp3.internal.tls.TrustRootIndex)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke r0.<okhttp3.internal.tls.CertificateChainCleaner: void <init>()>() in <okhttp3.internal.tls.BasicCertificateChainCleaner: void <init>(okhttp3.internal.tls.TrustRootIndex)> ==> <okhttp3.internal.tls.CertificateChainCleaner: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke r0.<okhttp3.internal.platform.Platform: okhttp3.internal.tls.TrustRootIndex buildTrustRootIndex(javax.net.ssl.X509TrustManager)>($r2) in <okhttp3.internal.platform.Platform: okhttp3.internal.tls.CertificateChainCleaner buildCertificateChainCleaner(javax.net.ssl.X509TrustManager)> ==> <okhttp3.internal.platform.Platform: okhttp3.internal.tls.TrustRootIndex buildTrustRootIndex(javax.net.ssl.X509TrustManager)>
VIRTUAL edge: $r1 = virtualinvoke r0.<okhttp3.internal.platform.Platform: okhttp3.internal.tls.TrustRootIndex buildTrustRootIndex(javax.net.ssl.X509TrustManager)>($r2) in <okhttp3.internal.platform.Platform: okhttp3.internal.tls.CertificateChainCleaner buildCertificateChainCleaner(javax.net.ssl.X509TrustManager)> ==> <okhttp3.internal.platform.AndroidPlatform: okhttp3.internal.tls.TrustRootIndex buildTrustRootIndex(javax.net.ssl.X509TrustManager)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "trustManager") in <okhttp3.internal.platform.Platform: okhttp3.internal.tls.TrustRootIndex buildTrustRootIndex(javax.net.ssl.X509TrustManager)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r3, "trustManager.acceptedIssuers") in <okhttp3.internal.platform.Platform: okhttp3.internal.tls.TrustRootIndex buildTrustRootIndex(javax.net.ssl.X509TrustManager)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "trustManager") in <okhttp3.internal.platform.AndroidPlatform: okhttp3.internal.tls.TrustRootIndex buildTrustRootIndex(javax.net.ssl.X509TrustManager)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r5, "method") in <okhttp3.internal.platform.AndroidPlatform: okhttp3.internal.tls.TrustRootIndex buildTrustRootIndex(javax.net.ssl.X509TrustManager)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke $r6.<okhttp3.internal.platform.AndroidPlatform$CustomTrustRootIndex: void <init>(javax.net.ssl.X509TrustManager,java.lang.reflect.Method)>($r1, $r5) in <okhttp3.internal.platform.AndroidPlatform: okhttp3.internal.tls.TrustRootIndex buildTrustRootIndex(javax.net.ssl.X509TrustManager)> ==> <okhttp3.internal.platform.AndroidPlatform$CustomTrustRootIndex: void <init>(javax.net.ssl.X509TrustManager,java.lang.reflect.Method)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "trustManager") in <okhttp3.internal.platform.AndroidPlatform$CustomTrustRootIndex: void <init>(javax.net.ssl.X509TrustManager,java.lang.reflect.Method)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "findByIssuerAndSignatureMethod") in <okhttp3.internal.platform.AndroidPlatform$CustomTrustRootIndex: void <init>(javax.net.ssl.X509TrustManager,java.lang.reflect.Method)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.internal.platform.AndroidPlatform$CustomTrustRootIndex: void <init>(javax.net.ssl.X509TrustManager,java.lang.reflect.Method)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: $r7 = specialinvoke r0.<okhttp3.internal.platform.Platform: okhttp3.internal.tls.TrustRootIndex buildTrustRootIndex(javax.net.ssl.X509TrustManager)>($r1) in <okhttp3.internal.platform.AndroidPlatform: okhttp3.internal.tls.TrustRootIndex buildTrustRootIndex(javax.net.ssl.X509TrustManager)> ==> <okhttp3.internal.platform.Platform: okhttp3.internal.tls.TrustRootIndex buildTrustRootIndex(javax.net.ssl.X509TrustManager)>
SPECIAL edge: specialinvoke $r2.<okhttp3.internal.tls.BasicTrustRootIndex: void <init>(java.security.cert.X509Certificate[])>($r3) in <okhttp3.internal.platform.Platform: okhttp3.internal.tls.TrustRootIndex buildTrustRootIndex(javax.net.ssl.X509TrustManager)> ==> <okhttp3.internal.tls.BasicTrustRootIndex: void <init>(java.security.cert.X509Certificate[])>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "caCerts") in <okhttp3.internal.tls.BasicTrustRootIndex: void <init>(java.security.cert.X509Certificate[])> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r5, "caCert.subjectX500Principal") in <okhttp3.internal.tls.BasicTrustRootIndex: void <init>(java.security.cert.X509Certificate[])> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.internal.tls.BasicTrustRootIndex: void <init>(java.security.cert.X509Certificate[])> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r29 = virtualinvoke $r28.<okhttp3.internal.platform.Platform$Companion: okhttp3.internal.platform.Platform get()>() in <okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)> ==> <okhttp3.internal.platform.Platform$Companion: okhttp3.internal.platform.Platform get()>
VIRTUAL edge: $r27 = virtualinvoke $r29.<okhttp3.internal.platform.Platform: javax.net.ssl.X509TrustManager platformTrustManager()>() in <okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)> ==> <okhttp3.internal.platform.Platform: javax.net.ssl.X509TrustManager platformTrustManager()>
VIRTUAL edge: $r25 = virtualinvoke $r29.<okhttp3.internal.platform.Platform: javax.net.ssl.SSLSocketFactory newSslSocketFactory(javax.net.ssl.X509TrustManager)>($r27) in <okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)> ==> <okhttp3.internal.platform.Platform: javax.net.ssl.SSLSocketFactory newSslSocketFactory(javax.net.ssl.X509TrustManager)>
VIRTUAL edge: $r27 = virtualinvoke $r29.<okhttp3.internal.platform.Platform: javax.net.ssl.X509TrustManager platformTrustManager()>() in <okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)> ==> <okhttp3.internal.platform.OpenJSSEPlatform: javax.net.ssl.X509TrustManager platformTrustManager()>
VIRTUAL edge: $r27 = virtualinvoke $r29.<okhttp3.internal.platform.Platform: javax.net.ssl.X509TrustManager platformTrustManager()>() in <okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)> ==> <okhttp3.internal.platform.BouncyCastlePlatform: javax.net.ssl.X509TrustManager platformTrustManager()>
VIRTUAL edge: $r27 = virtualinvoke $r29.<okhttp3.internal.platform.Platform: javax.net.ssl.X509TrustManager platformTrustManager()>() in <okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)> ==> <okhttp3.internal.platform.ConscryptPlatform: javax.net.ssl.X509TrustManager platformTrustManager()>
VIRTUAL edge: $r25 = virtualinvoke $r29.<okhttp3.internal.platform.Platform: javax.net.ssl.SSLSocketFactory newSslSocketFactory(javax.net.ssl.X509TrustManager)>($r27) in <okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)> ==> <okhttp3.internal.platform.ConscryptPlatform: javax.net.ssl.SSLSocketFactory newSslSocketFactory(javax.net.ssl.X509TrustManager)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r1, "java.util.Arrays.toString(this)") in <okhttp3.internal.platform.Platform: javax.net.ssl.X509TrustManager platformTrustManager()> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r3) in <okhttp3.internal.platform.Platform: javax.net.ssl.X509TrustManager platformTrustManager()> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "trustManager") in <okhttp3.internal.platform.Platform: javax.net.ssl.SSLSocketFactory newSslSocketFactory(javax.net.ssl.X509TrustManager)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r5, "newSSLContext().apply {\n\u2026ll)\n      }.socketFactory") in <okhttp3.internal.platform.Platform: javax.net.ssl.SSLSocketFactory newSslSocketFactory(javax.net.ssl.X509TrustManager)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r1, "java.util.Arrays.toString(this)") in <okhttp3.internal.platform.OpenJSSEPlatform: javax.net.ssl.X509TrustManager platformTrustManager()> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r4) in <okhttp3.internal.platform.OpenJSSEPlatform: javax.net.ssl.X509TrustManager platformTrustManager()> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r3, "factory") in <okhttp3.internal.platform.OpenJSSEPlatform: javax.net.ssl.X509TrustManager platformTrustManager()> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r7, "java.util.Arrays.toString(this)") in <okhttp3.internal.platform.BouncyCastlePlatform: javax.net.ssl.X509TrustManager platformTrustManager()> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r2) in <okhttp3.internal.platform.BouncyCastlePlatform: javax.net.ssl.X509TrustManager platformTrustManager()> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>
CLINIT edge: $r6 = <okhttp3.internal.platform.ConscryptPlatform$DisabledHostnameVerifier: okhttp3.internal.platform.ConscryptPlatform$DisabledHostnameVerifier INSTANCE> in <okhttp3.internal.platform.ConscryptPlatform: javax.net.ssl.X509TrustManager platformTrustManager()> ==> <okhttp3.internal.platform.ConscryptPlatform$DisabledHostnameVerifier: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r1, "java.util.Arrays.toString(this)") in <okhttp3.internal.platform.ConscryptPlatform: javax.net.ssl.X509TrustManager platformTrustManager()> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r3) in <okhttp3.internal.platform.ConscryptPlatform: javax.net.ssl.X509TrustManager platformTrustManager()> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "trustManager") in <okhttp3.internal.platform.ConscryptPlatform: javax.net.ssl.SSLSocketFactory newSslSocketFactory(javax.net.ssl.X509TrustManager)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r5, "newSSLContext().apply {\n\u2026null)\n    }.socketFactory") in <okhttp3.internal.platform.ConscryptPlatform: javax.net.ssl.SSLSocketFactory newSslSocketFactory(javax.net.ssl.X509TrustManager)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke $r0.<okhttp3.internal.platform.ConscryptPlatform$DisabledHostnameVerifier: void <init>()>() in <okhttp3.internal.platform.ConscryptPlatform$DisabledHostnameVerifier: void <clinit>()> ==> <okhttp3.internal.platform.ConscryptPlatform$DisabledHostnameVerifier: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.internal.platform.ConscryptPlatform$DisabledHostnameVerifier: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke r0.<okhttp3.internal.platform.ConscryptPlatform: javax.net.ssl.SSLContext newSSLContext()>() in <okhttp3.internal.platform.ConscryptPlatform: javax.net.ssl.SSLSocketFactory newSslSocketFactory(javax.net.ssl.X509TrustManager)> ==> <okhttp3.internal.platform.ConscryptPlatform: javax.net.ssl.SSLContext newSSLContext()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r1, "SSLContext.getInstance(\"TLS\", provider)") in <okhttp3.internal.platform.ConscryptPlatform: javax.net.ssl.SSLContext newSSLContext()> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke $r8.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type javax.net.ssl.X509TrustManager") in <okhttp3.internal.platform.ConscryptPlatform: javax.net.ssl.X509TrustManager platformTrustManager()> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type javax.net.ssl.X509TrustManager") in <okhttp3.internal.platform.BouncyCastlePlatform: javax.net.ssl.X509TrustManager platformTrustManager()> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r7.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type javax.net.ssl.X509TrustManager") in <okhttp3.internal.platform.OpenJSSEPlatform: javax.net.ssl.X509TrustManager platformTrustManager()> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r7.<java.lang.AssertionError: void <init>(java.lang.String,java.lang.Throwable)>($r9, $r6) in <okhttp3.internal.platform.Platform: javax.net.ssl.SSLSocketFactory newSslSocketFactory(javax.net.ssl.X509TrustManager)> ==> <java.lang.AssertionError: void <init>(java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.Error: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke r0.<okhttp3.internal.platform.Platform: javax.net.ssl.SSLContext newSSLContext()>() in <okhttp3.internal.platform.Platform: javax.net.ssl.SSLSocketFactory newSslSocketFactory(javax.net.ssl.X509TrustManager)> ==> <okhttp3.internal.platform.Platform: javax.net.ssl.SSLContext newSSLContext()>
VIRTUAL edge: $r2 = virtualinvoke r0.<okhttp3.internal.platform.Platform: javax.net.ssl.SSLContext newSSLContext()>() in <okhttp3.internal.platform.Platform: javax.net.ssl.SSLSocketFactory newSslSocketFactory(javax.net.ssl.X509TrustManager)> ==> <okhttp3.internal.platform.OpenJSSEPlatform: javax.net.ssl.SSLContext newSSLContext()>
VIRTUAL edge: $r2 = virtualinvoke r0.<okhttp3.internal.platform.Platform: javax.net.ssl.SSLContext newSSLContext()>() in <okhttp3.internal.platform.Platform: javax.net.ssl.SSLSocketFactory newSslSocketFactory(javax.net.ssl.X509TrustManager)> ==> <okhttp3.internal.platform.BouncyCastlePlatform: javax.net.ssl.SSLContext newSSLContext()>
VIRTUAL edge: $r2 = virtualinvoke r0.<okhttp3.internal.platform.Platform: javax.net.ssl.SSLContext newSSLContext()>() in <okhttp3.internal.platform.Platform: javax.net.ssl.SSLSocketFactory newSslSocketFactory(javax.net.ssl.X509TrustManager)> ==> <okhttp3.internal.platform.ConscryptPlatform: javax.net.ssl.SSLContext newSSLContext()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r1, "SSLContext.getInstance(\"TLS\")") in <okhttp3.internal.platform.Platform: javax.net.ssl.SSLContext newSSLContext()> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r1, "SSLContext.getInstance(\"TLSv1.3\", provider)") in <okhttp3.internal.platform.OpenJSSEPlatform: javax.net.ssl.SSLContext newSSLContext()> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r1, "SSLContext.getInstance(\"TLS\", provider)") in <okhttp3.internal.platform.BouncyCastlePlatform: javax.net.ssl.SSLContext newSSLContext()> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type javax.net.ssl.X509TrustManager") in <okhttp3.internal.platform.Platform: javax.net.ssl.X509TrustManager platformTrustManager()> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
VIRTUAL edge: $r24 = virtualinvoke $r24.<okhttp3.CertificatePinner: okhttp3.CertificatePinner withCertificateChainCleaner$okhttp(okhttp3.internal.tls.CertificateChainCleaner)>($r26) in <okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)> ==> <okhttp3.CertificatePinner: okhttp3.CertificatePinner withCertificateChainCleaner$okhttp(okhttp3.internal.tls.CertificateChainCleaner)>
CLINIT edge: $r4 = new okhttp3.CertificatePinner in <okhttp3.CertificatePinner: okhttp3.CertificatePinner withCertificateChainCleaner$okhttp(okhttp3.internal.tls.CertificateChainCleaner)> ==> <okhttp3.CertificatePinner: void <clinit>()>
STATIC edge: $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r3, $r1) in <okhttp3.CertificatePinner: okhttp3.CertificatePinner withCertificateChainCleaner$okhttp(okhttp3.internal.tls.CertificateChainCleaner)> ==> <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "certificateChainCleaner") in <okhttp3.CertificatePinner: okhttp3.CertificatePinner withCertificateChainCleaner$okhttp(okhttp3.internal.tls.CertificateChainCleaner)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke $r4.<okhttp3.CertificatePinner: void <init>(java.util.Set,okhttp3.internal.tls.CertificateChainCleaner)>($r2, $r1) in <okhttp3.CertificatePinner: okhttp3.CertificatePinner withCertificateChainCleaner$okhttp(okhttp3.internal.tls.CertificateChainCleaner)> ==> <okhttp3.CertificatePinner: void <init>(java.util.Set,okhttp3.internal.tls.CertificateChainCleaner)>
SPECIAL edge: specialinvoke $r18.<okhttp3.internal.connection.RouteDatabase: void <init>()>() in <okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)> ==> <okhttp3.internal.connection.RouteDatabase: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.internal.connection.RouteDatabase: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<okhttp3.OkHttpClient$Builder: okhttp3.Dispatcher getDispatcher$okhttp()>() in <okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)> ==> <okhttp3.OkHttpClient$Builder: okhttp3.Dispatcher getDispatcher$okhttp()>
VIRTUAL edge: $r3 = virtualinvoke $r1.<okhttp3.OkHttpClient$Builder: okhttp3.ConnectionPool getConnectionPool$okhttp()>() in <okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)> ==> <okhttp3.OkHttpClient$Builder: okhttp3.ConnectionPool getConnectionPool$okhttp()>
VIRTUAL edge: $r4 = virtualinvoke $r1.<okhttp3.OkHttpClient$Builder: java.util.List getInterceptors$okhttp()>() in <okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)> ==> <okhttp3.OkHttpClient$Builder: java.util.List getInterceptors$okhttp()>
VIRTUAL edge: $r4 = virtualinvoke $r1.<okhttp3.OkHttpClient$Builder: java.util.List getNetworkInterceptors$okhttp()>() in <okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)> ==> <okhttp3.OkHttpClient$Builder: java.util.List getNetworkInterceptors$okhttp()>
VIRTUAL edge: $r5 = virtualinvoke $r1.<okhttp3.OkHttpClient$Builder: okhttp3.EventListener$Factory getEventListenerFactory$okhttp()>() in <okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)> ==> <okhttp3.OkHttpClient$Builder: okhttp3.EventListener$Factory getEventListenerFactory$okhttp()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<okhttp3.OkHttpClient$Builder: boolean getRetryOnConnectionFailure$okhttp()>() in <okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)> ==> <okhttp3.OkHttpClient$Builder: boolean getRetryOnConnectionFailure$okhttp()>
VIRTUAL edge: $r6 = virtualinvoke $r1.<okhttp3.OkHttpClient$Builder: okhttp3.Authenticator getAuthenticator$okhttp()>() in <okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)> ==> <okhttp3.OkHttpClient$Builder: okhttp3.Authenticator getAuthenticator$okhttp()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<okhttp3.OkHttpClient$Builder: boolean getFollowRedirects$okhttp()>() in <okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)> ==> <okhttp3.OkHttpClient$Builder: boolean getFollowRedirects$okhttp()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<okhttp3.OkHttpClient$Builder: boolean getFollowSslRedirects$okhttp()>() in <okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)> ==> <okhttp3.OkHttpClient$Builder: boolean getFollowSslRedirects$okhttp()>
VIRTUAL edge: $r7 = virtualinvoke $r1.<okhttp3.OkHttpClient$Builder: okhttp3.CookieJar getCookieJar$okhttp()>() in <okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)> ==> <okhttp3.OkHttpClient$Builder: okhttp3.CookieJar getCookieJar$okhttp()>
VIRTUAL edge: $r8 = virtualinvoke $r1.<okhttp3.OkHttpClient$Builder: okhttp3.Cache getCache$okhttp()>() in <okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)> ==> <okhttp3.OkHttpClient$Builder: okhttp3.Cache getCache$okhttp()>
VIRTUAL edge: $r9 = virtualinvoke $r1.<okhttp3.OkHttpClient$Builder: okhttp3.Dns getDns$okhttp()>() in <okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)> ==> <okhttp3.OkHttpClient$Builder: okhttp3.Dns getDns$okhttp()>
VIRTUAL edge: $r10 = virtualinvoke $r1.<okhttp3.OkHttpClient$Builder: java.net.Proxy getProxy$okhttp()>() in <okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)> ==> <okhttp3.OkHttpClient$Builder: java.net.Proxy getProxy$okhttp()>
VIRTUAL edge: $r13 = virtualinvoke $r1.<okhttp3.OkHttpClient$Builder: java.net.ProxySelector getProxySelector$okhttp()>() in <okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)> ==> <okhttp3.OkHttpClient$Builder: java.net.ProxySelector getProxySelector$okhttp()>
VIRTUAL edge: $r6 = virtualinvoke $r1.<okhttp3.OkHttpClient$Builder: okhttp3.Authenticator getProxyAuthenticator$okhttp()>() in <okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)> ==> <okhttp3.OkHttpClient$Builder: okhttp3.Authenticator getProxyAuthenticator$okhttp()>
VIRTUAL edge: $r14 = virtualinvoke $r1.<okhttp3.OkHttpClient$Builder: javax.net.SocketFactory getSocketFactory$okhttp()>() in <okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)> ==> <okhttp3.OkHttpClient$Builder: javax.net.SocketFactory getSocketFactory$okhttp()>
VIRTUAL edge: $r4 = virtualinvoke $r1.<okhttp3.OkHttpClient$Builder: java.util.List getConnectionSpecs$okhttp()>() in <okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)> ==> <okhttp3.OkHttpClient$Builder: java.util.List getConnectionSpecs$okhttp()>
VIRTUAL edge: $r15 = virtualinvoke $r1.<okhttp3.OkHttpClient$Builder: java.util.List getProtocols$okhttp()>() in <okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)> ==> <okhttp3.OkHttpClient$Builder: java.util.List getProtocols$okhttp()>
VIRTUAL edge: $r16 = virtualinvoke $r1.<okhttp3.OkHttpClient$Builder: javax.net.ssl.HostnameVerifier getHostnameVerifier$okhttp()>() in <okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)> ==> <okhttp3.OkHttpClient$Builder: javax.net.ssl.HostnameVerifier getHostnameVerifier$okhttp()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<okhttp3.OkHttpClient$Builder: int getCallTimeout$okhttp()>() in <okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)> ==> <okhttp3.OkHttpClient$Builder: int getCallTimeout$okhttp()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<okhttp3.OkHttpClient$Builder: int getConnectTimeout$okhttp()>() in <okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)> ==> <okhttp3.OkHttpClient$Builder: int getConnectTimeout$okhttp()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<okhttp3.OkHttpClient$Builder: int getReadTimeout$okhttp()>() in <okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)> ==> <okhttp3.OkHttpClient$Builder: int getReadTimeout$okhttp()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<okhttp3.OkHttpClient$Builder: int getWriteTimeout$okhttp()>() in <okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)> ==> <okhttp3.OkHttpClient$Builder: int getWriteTimeout$okhttp()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<okhttp3.OkHttpClient$Builder: int getPingInterval$okhttp()>() in <okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)> ==> <okhttp3.OkHttpClient$Builder: int getPingInterval$okhttp()>
VIRTUAL edge: $l1 = virtualinvoke $r1.<okhttp3.OkHttpClient$Builder: long getMinWebSocketMessageToCompress$okhttp()>() in <okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)> ==> <okhttp3.OkHttpClient$Builder: long getMinWebSocketMessageToCompress$okhttp()>
VIRTUAL edge: $r17 = virtualinvoke $r1.<okhttp3.OkHttpClient$Builder: okhttp3.internal.connection.RouteDatabase getRouteDatabase$okhttp()>() in <okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)> ==> <okhttp3.OkHttpClient$Builder: okhttp3.internal.connection.RouteDatabase getRouteDatabase$okhttp()>
VIRTUAL edge: $r25 = virtualinvoke $r1.<okhttp3.OkHttpClient$Builder: javax.net.ssl.SSLSocketFactory getSslSocketFactoryOrNull$okhttp()>() in <okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)> ==> <okhttp3.OkHttpClient$Builder: javax.net.ssl.SSLSocketFactory getSslSocketFactoryOrNull$okhttp()>
VIRTUAL edge: $r25 = virtualinvoke $r1.<okhttp3.OkHttpClient$Builder: javax.net.ssl.SSLSocketFactory getSslSocketFactoryOrNull$okhttp()>() in <okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)> ==> <okhttp3.OkHttpClient$Builder: javax.net.ssl.SSLSocketFactory getSslSocketFactoryOrNull$okhttp()>
VIRTUAL edge: $r26 = virtualinvoke $r1.<okhttp3.OkHttpClient$Builder: okhttp3.internal.tls.CertificateChainCleaner getCertificateChainCleaner$okhttp()>() in <okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)> ==> <okhttp3.OkHttpClient$Builder: okhttp3.internal.tls.CertificateChainCleaner getCertificateChainCleaner$okhttp()>
VIRTUAL edge: $r27 = virtualinvoke $r1.<okhttp3.OkHttpClient$Builder: javax.net.ssl.X509TrustManager getX509TrustManagerOrNull$okhttp()>() in <okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)> ==> <okhttp3.OkHttpClient$Builder: javax.net.ssl.X509TrustManager getX509TrustManagerOrNull$okhttp()>
VIRTUAL edge: $r24 = virtualinvoke $r1.<okhttp3.OkHttpClient$Builder: okhttp3.CertificatePinner getCertificatePinner$okhttp()>() in <okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)> ==> <okhttp3.OkHttpClient$Builder: okhttp3.CertificatePinner getCertificatePinner$okhttp()>
VIRTUAL edge: $r24 = virtualinvoke $r1.<okhttp3.OkHttpClient$Builder: okhttp3.CertificatePinner getCertificatePinner$okhttp()>() in <okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)> ==> <okhttp3.OkHttpClient$Builder: okhttp3.CertificatePinner getCertificatePinner$okhttp()>
INTERFACE edge: $r21 = interfaceinvoke $r19.<java.lang.Iterable: java.util.Iterator iterator()>() in <okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)> ==> <kotlin.collections.EmptyList: java.util.Iterator iterator()>
CLINIT edge: $r1 = <kotlin.collections.EmptyIterator: kotlin.collections.EmptyIterator INSTANCE> in <kotlin.collections.EmptyList: java.util.Iterator iterator()> ==> <kotlin.collections.EmptyIterator: void <clinit>()>
INTERFACE edge: $z1 = interfaceinvoke $r21.<java.util.Iterator: boolean hasNext()>() in <okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)> ==> <kotlin.collections.EmptyIterator: boolean hasNext()>
INTERFACE edge: $r22 = interfaceinvoke $r21.<java.util.Iterator: java.lang.Object next()>() in <okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)> ==> <kotlin.collections.EmptyIterator: java.lang.Void next()>
INTERFACE edge: $z1 = interfaceinvoke $r20.<java.util.Collection: boolean isEmpty()>() in <okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)> ==> <kotlin.collections.EmptyList: boolean isEmpty()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<okhttp3.OkHttpClient: void verifyClientState()>() in <okhttp3.OkHttpClient: void <init>(okhttp3.OkHttpClient$Builder)> ==> <okhttp3.OkHttpClient: void verifyClientState()>
CLINIT edge: $r12 = <okhttp3.CertificatePinner: okhttp3.CertificatePinner DEFAULT> in <okhttp3.OkHttpClient: void verifyClientState()> ==> <okhttp3.CertificatePinner: void <clinit>()>
STATIC edge: $z1 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r11, $r12) in <okhttp3.OkHttpClient: void verifyClientState()> ==> <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r16.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type kotlin.collections.List<okhttp3.Interceptor?>") in <okhttp3.OkHttpClient: void verifyClientState()> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r8.<java.lang.Object: java.lang.String toString()>() in <okhttp3.OkHttpClient: void verifyClientState()> ==> <java.lang.String: java.lang.String toString()>
VIRTUAL edge: $r8 = virtualinvoke $r8.<java.lang.Object: java.lang.String toString()>() in <okhttp3.OkHttpClient: void verifyClientState()> ==> <java.lang.String: java.lang.String toString()>
VIRTUAL edge: $r8 = virtualinvoke $r8.<java.lang.Object: java.lang.String toString()>() in <okhttp3.OkHttpClient: void verifyClientState()> ==> <java.lang.String: java.lang.String toString()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.List: boolean contains(java.lang.Object)>(null) in <okhttp3.OkHttpClient: void verifyClientState()> ==> <kotlin.collections.EmptyList: boolean contains(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<kotlin.collections.EmptyList: boolean contains(java.lang.Void)>($r2) in <kotlin.collections.EmptyList: boolean contains(java.lang.Object)> ==> <kotlin.collections.EmptyList: boolean contains(java.lang.Void)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "element") in <kotlin.collections.EmptyList: boolean contains(java.lang.Void)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
INTERFACE edge: $r4 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>() in <okhttp3.OkHttpClient: void verifyClientState()> ==> <kotlin.collections.EmptyList: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>() in <okhttp3.OkHttpClient: void verifyClientState()> ==> <kotlin.collections.EmptyIterator: boolean hasNext()>
INTERFACE edge: $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>() in <okhttp3.OkHttpClient: void verifyClientState()> ==> <kotlin.collections.EmptyIterator: java.lang.Void next()>
INTERFACE edge: $z0 = interfaceinvoke $r3.<java.util.Collection: boolean isEmpty()>() in <okhttp3.OkHttpClient: void verifyClientState()> ==> <kotlin.collections.EmptyList: boolean isEmpty()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0) in <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)> ==> <okhttp3.CertificatePinner: boolean equals(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r4, $r1) in <okhttp3.CertificatePinner: boolean equals(java.lang.Object)> ==> <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0) in <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)> ==> <okhttp3.internal.tls.BasicCertificateChainCleaner: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0) in <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)> ==> <okhttp3.internal.platform.android.AndroidCertificateChainCleaner: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0) in <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)> ==> <kotlin.collections.EmptySet: boolean equals(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.Set: boolean isEmpty()>() in <kotlin.collections.EmptySet: boolean equals(java.lang.Object)> ==> <kotlin.collections.EmptySet: boolean isEmpty()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0) in <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)> ==> <okhttp3.internal.tls.BasicTrustRootIndex: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0) in <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)> ==> <okhttp3.internal.platform.AndroidPlatform$CustomTrustRootIndex: boolean equals(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r3, $r4) in <okhttp3.internal.tls.BasicTrustRootIndex: boolean equals(java.lang.Object)> ==> <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.example.notificationtest.InfoRead$1: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.Thread: void <init>(java.lang.Runnable)>($r2) in <com.example.notificationtest.InfoRead: void sendInfoToServer(java.lang.String)> ==> <java.lang.Thread: void <init>(java.lang.Runnable)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.Thread: void start()>() in <com.example.notificationtest.InfoRead: void sendInfoToServer(java.lang.String)> ==> <java.lang.Thread: void start()>
GENERIC_FAKE edge: virtualinvoke $r1.<java.lang.Thread: void start()>() in <com.example.notificationtest.InfoRead: void sendInfoToServer(java.lang.String)> ==> <java.lang.Thread: void run()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void start()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke r0.<androidx.activity.ComponentActivity: androidx.lifecycle.Lifecycle getLifecycle()>() in <androidx.activity.ComponentActivity: void onSaveInstanceState(android.os.Bundle)> ==> <androidx.activity.ComponentActivity: androidx.lifecycle.Lifecycle getLifecycle()>
SPECIAL edge: specialinvoke r0.<androidx.core.app.ComponentActivity: void onSaveInstanceState(android.os.Bundle)>($r1) in <androidx.activity.ComponentActivity: void onSaveInstanceState(android.os.Bundle)> ==> <androidx.core.app.ComponentActivity: void onSaveInstanceState(android.os.Bundle)>
CLINIT edge: $r3 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State CREATED> in <androidx.core.app.ComponentActivity: void onSaveInstanceState(android.os.Bundle)> ==> <androidx.lifecycle.Lifecycle$State: void <clinit>()>
SPECIAL edge: specialinvoke $r8.<com.example.notificationtest.MyBroadcastReceiver: void <init>()>() in <com.example.notificationtest.MainActivity: void onCreate(android.os.Bundle)> ==> <com.example.notificationtest.MyBroadcastReceiver: void <init>()>
SPECIAL edge: specialinvoke $r6.<com.example.notificationtest.MainActivity$1: void <init>(com.example.notificationtest.MainActivity)>(r0) in <com.example.notificationtest.MainActivity: void onCreate(android.os.Bundle)> ==> <com.example.notificationtest.MainActivity$1: void <init>(com.example.notificationtest.MainActivity)>
SPECIAL edge: specialinvoke r0.<androidx.appcompat.app.AppCompatActivity: void onCreate(android.os.Bundle)>($r1) in <com.example.notificationtest.MainActivity: void onCreate(android.os.Bundle)> ==> <androidx.fragment.app.FragmentActivity: void onCreate(android.os.Bundle)>
VIRTUAL edge: virtualinvoke r0.<com.example.notificationtest.MainActivity: void setContentView(int)>(2131427356) in <com.example.notificationtest.MainActivity: void onCreate(android.os.Bundle)> ==> <androidx.appcompat.app.AppCompatActivity: void setContentView(int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.example.notificationtest.MainActivity: android.view.View findViewById(int)>(2131231175) in <com.example.notificationtest.MainActivity: void onCreate(android.os.Bundle)> ==> <androidx.appcompat.app.AppCompatActivity: android.view.View findViewById(int)>
CLINIT edge: $r1 = <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_CREATE> in <androidx.fragment.app.FragmentActivity: void onCreate(android.os.Bundle)> ==> <androidx.lifecycle.Lifecycle$Event: void <clinit>()>
VIRTUAL edge: $r1 = virtualinvoke r0.<androidx.appcompat.app.AppCompatActivity: androidx.appcompat.app.AppCompatDelegate getDelegate()>() in <androidx.appcompat.app.AppCompatActivity: android.view.View findViewById(int)> ==> <androidx.appcompat.app.AppCompatActivity: androidx.appcompat.app.AppCompatDelegate getDelegate()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<androidx.appcompat.app.AppCompatDelegate: android.view.View findViewById(int)>($i0) in <androidx.appcompat.app.AppCompatActivity: android.view.View findViewById(int)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: android.view.View findViewById(int)>
SPECIAL edge: specialinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: void ensureSubDecor()>() in <androidx.appcompat.app.AppCompatDelegateImpl: android.view.View findViewById(int)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: void ensureSubDecor()>
SPECIAL edge: $r1 = specialinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: android.view.ViewGroup createSubDecor()>() in <androidx.appcompat.app.AppCompatDelegateImpl: void ensureSubDecor()> ==> <androidx.appcompat.app.AppCompatDelegateImpl: android.view.ViewGroup createSubDecor()>
VIRTUAL edge: $r2 = virtualinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: java.lang.CharSequence getTitle()>() in <androidx.appcompat.app.AppCompatDelegateImpl: void ensureSubDecor()> ==> <androidx.appcompat.app.AppCompatDelegateImpl: java.lang.CharSequence getTitle()>
VIRTUAL edge: $r4 = virtualinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.app.ActionBar peekSupportActionBar()>() in <androidx.appcompat.app.AppCompatDelegateImpl: void ensureSubDecor()> ==> <androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.app.ActionBar peekSupportActionBar()>
VIRTUAL edge: $r4 = virtualinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.app.ActionBar peekSupportActionBar()>() in <androidx.appcompat.app.AppCompatDelegateImpl: void ensureSubDecor()> ==> <androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.app.ActionBar peekSupportActionBar()>
SPECIAL edge: specialinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: void applyFixedSizeWindow()>() in <androidx.appcompat.app.AppCompatDelegateImpl: void ensureSubDecor()> ==> <androidx.appcompat.app.AppCompatDelegateImpl: void applyFixedSizeWindow()>
VIRTUAL edge: virtualinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: void onSubDecorInstalled(android.view.ViewGroup)>($r1) in <androidx.appcompat.app.AppCompatDelegateImpl: void ensureSubDecor()> ==> <androidx.appcompat.app.AppCompatDelegateImpl: void onSubDecorInstalled(android.view.ViewGroup)>
VIRTUAL edge: $r6 = virtualinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState getPanelState(int,boolean)>(0, 0) in <androidx.appcompat.app.AppCompatDelegateImpl: void ensureSubDecor()> ==> <androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState getPanelState(int,boolean)>
SPECIAL edge: specialinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: void invalidatePanelMenu(int)>(108) in <androidx.appcompat.app.AppCompatDelegateImpl: void ensureSubDecor()> ==> <androidx.appcompat.app.AppCompatDelegateImpl: void invalidatePanelMenu(int)>
CLINIT edge: $r2 = <androidx.appcompat.R$styleable: int[] AppCompatTheme> in <androidx.appcompat.app.AppCompatDelegateImpl: android.view.ViewGroup createSubDecor()> ==> <androidx.appcompat.R$styleable: void <clinit>()>
STATIC edge: staticinvoke <androidx.appcompat.widget.ViewUtils: void makeOptionalFitsSystemWindows(android.view.View)>($r7) in <androidx.appcompat.app.AppCompatDelegateImpl: android.view.ViewGroup createSubDecor()> ==> <androidx.appcompat.widget.ViewUtils: void makeOptionalFitsSystemWindows(android.view.View)>
STATIC edge: staticinvoke <androidx.core.view.ViewCompat: void setOnApplyWindowInsetsListener(android.view.View,androidx.core.view.OnApplyWindowInsetsListener)>($r7, $r20) in <androidx.appcompat.app.AppCompatDelegateImpl: android.view.ViewGroup createSubDecor()> ==> <androidx.core.view.ViewCompat: void setOnApplyWindowInsetsListener(android.view.View,androidx.core.view.OnApplyWindowInsetsListener)>
CLINIT edge: staticinvoke <androidx.appcompat.widget.ViewUtils: void makeOptionalFitsSystemWindows(android.view.View)>($r7) in <androidx.appcompat.app.AppCompatDelegateImpl: android.view.ViewGroup createSubDecor()> ==> <androidx.appcompat.widget.ViewUtils: void <clinit>()>
CLINIT edge: staticinvoke <androidx.core.view.ViewCompat: void setOnApplyWindowInsetsListener(android.view.View,androidx.core.view.OnApplyWindowInsetsListener)>($r7, $r20) in <androidx.appcompat.app.AppCompatDelegateImpl: android.view.ViewGroup createSubDecor()> ==> <androidx.core.view.ViewCompat: void <clinit>()>
CLINIT edge: $r6 = <androidx.appcompat.R$styleable: int[] AppCompatTheme> in <androidx.appcompat.app.AppCompatDelegateImpl: void applyFixedSizeWindow()> ==> <androidx.appcompat.R$styleable: void <clinit>()>
CLINIT edge: staticinvoke <androidx.core.view.ViewCompat: void postOnAnimation(android.view.View,java.lang.Runnable)>($r1, $r3) in <androidx.appcompat.app.AppCompatDelegateImpl: void invalidatePanelMenu(int)> ==> <androidx.core.view.ViewCompat: void <clinit>()>
STATIC edge: staticinvoke <androidx.core.view.ViewCompat: void postOnAnimation(android.view.View,java.lang.Runnable)>($r1, $r3) in <androidx.appcompat.app.AppCompatDelegateImpl: void invalidatePanelMenu(int)> ==> <androidx.core.view.ViewCompat: void postOnAnimation(android.view.View,java.lang.Runnable)>
STATIC edge: staticinvoke <androidx.core.view.ViewCompat$Api21Impl: void setOnApplyWindowInsetsListener(android.view.View,androidx.core.view.OnApplyWindowInsetsListener)>($r0, $r1) in <androidx.core.view.ViewCompat: void setOnApplyWindowInsetsListener(android.view.View,androidx.core.view.OnApplyWindowInsetsListener)> ==> <androidx.core.view.ViewCompat$Api21Impl: void setOnApplyWindowInsetsListener(android.view.View,androidx.core.view.OnApplyWindowInsetsListener)>
STATIC edge: staticinvoke <androidx.core.view.ViewCompat$Api16Impl: void postOnAnimation(android.view.View,java.lang.Runnable)>($r0, $r1) in <androidx.core.view.ViewCompat: void postOnAnimation(android.view.View,java.lang.Runnable)> ==> <androidx.core.view.ViewCompat$Api16Impl: void postOnAnimation(android.view.View,java.lang.Runnable)>
SPECIAL edge: specialinvoke $r4.<androidx.core.view.ViewCompat$Api21Impl$1: void <init>(android.view.View,androidx.core.view.OnApplyWindowInsetsListener)>($r0, $r2) in <androidx.core.view.ViewCompat$Api21Impl: void setOnApplyWindowInsetsListener(android.view.View,androidx.core.view.OnApplyWindowInsetsListener)> ==> <androidx.core.view.ViewCompat$Api21Impl$1: void <init>(android.view.View,androidx.core.view.OnApplyWindowInsetsListener)>
VIRTUAL edge: $r3 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("computeFitSystemWindows", $r2) in <androidx.appcompat.widget.ViewUtils: void <clinit>()> ==> <java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r21.<androidx.appcompat.app.AppCompatDelegateImpl$5: void <init>(androidx.appcompat.app.AppCompatDelegateImpl)>(r0) in <androidx.appcompat.app.AppCompatDelegateImpl: android.view.ViewGroup createSubDecor()> ==> <androidx.appcompat.app.AppCompatDelegateImpl$5: void <init>(androidx.appcompat.app.AppCompatDelegateImpl)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.appcompat.app.AppCompatDelegateImpl$5: void <init>(androidx.appcompat.app.AppCompatDelegateImpl)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r20.<androidx.appcompat.app.AppCompatDelegateImpl$3: void <init>(androidx.appcompat.app.AppCompatDelegateImpl)>(r0) in <androidx.appcompat.app.AppCompatDelegateImpl: android.view.ViewGroup createSubDecor()> ==> <androidx.appcompat.app.AppCompatDelegateImpl$3: void <init>(androidx.appcompat.app.AppCompatDelegateImpl)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.appcompat.app.AppCompatDelegateImpl$3: void <init>(androidx.appcompat.app.AppCompatDelegateImpl)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r19.<androidx.appcompat.view.ContextThemeWrapper: void <init>(android.content.Context,int)>($r1, $i0) in <androidx.appcompat.app.AppCompatDelegateImpl: android.view.ViewGroup createSubDecor()> ==> <androidx.appcompat.view.ContextThemeWrapper: void <init>(android.content.Context,int)>
VIRTUAL edge: $r8 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources$Theme getTheme()>() in <androidx.appcompat.app.AppCompatDelegateImpl: android.view.ViewGroup createSubDecor()> ==> <androidx.appcompat.view.ContextThemeWrapper: android.content.res.Resources$Theme getTheme()>
SPECIAL edge: specialinvoke r0.<androidx.appcompat.view.ContextThemeWrapper: void initializeTheme()>() in <androidx.appcompat.view.ContextThemeWrapper: android.content.res.Resources$Theme getTheme()> ==> <androidx.appcompat.view.ContextThemeWrapper: void initializeTheme()>
VIRTUAL edge: $r2 = virtualinvoke r0.<androidx.appcompat.view.ContextThemeWrapper: android.content.res.Resources getResources()>() in <androidx.appcompat.view.ContextThemeWrapper: void initializeTheme()> ==> <androidx.appcompat.view.ContextThemeWrapper: android.content.res.Resources getResources()>
VIRTUAL edge: virtualinvoke r0.<androidx.appcompat.view.ContextThemeWrapper: void onApplyThemeResource(android.content.res.Resources$Theme,int,boolean)>($r1, $i0, $z0) in <androidx.appcompat.view.ContextThemeWrapper: void initializeTheme()> ==> <androidx.appcompat.view.ContextThemeWrapper: void onApplyThemeResource(android.content.res.Resources$Theme,int,boolean)>
SPECIAL edge: $r1 = specialinvoke r0.<androidx.appcompat.view.ContextThemeWrapper: android.content.res.Resources getResourcesInternal()>() in <androidx.appcompat.view.ContextThemeWrapper: android.content.res.Resources getResources()> ==> <androidx.appcompat.view.ContextThemeWrapper: android.content.res.Resources getResourcesInternal()>
STATIC edge: $r3 = staticinvoke <androidx.appcompat.view.ContextThemeWrapper$Api17Impl: android.content.Context createConfigurationContext(androidx.appcompat.view.ContextThemeWrapper,android.content.res.Configuration)>(r0, $r2) in <androidx.appcompat.view.ContextThemeWrapper: android.content.res.Resources getResourcesInternal()> ==> <androidx.appcompat.view.ContextThemeWrapper$Api17Impl: android.content.Context createConfigurationContext(androidx.appcompat.view.ContextThemeWrapper,android.content.res.Configuration)>
STATIC edge: $z0 = staticinvoke <androidx.appcompat.view.ContextThemeWrapper: boolean isEmptyConfiguration(android.content.res.Configuration)>($r2) in <androidx.appcompat.view.ContextThemeWrapper: android.content.res.Resources getResourcesInternal()> ==> <androidx.appcompat.view.ContextThemeWrapper: boolean isEmptyConfiguration(android.content.res.Configuration)>
VIRTUAL edge: virtualinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: boolean requestWindowFeature(int)>(1) in <androidx.appcompat.app.AppCompatDelegateImpl: android.view.ViewGroup createSubDecor()> ==> <androidx.appcompat.app.AppCompatDelegateImpl: boolean requestWindowFeature(int)>
VIRTUAL edge: virtualinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: boolean requestWindowFeature(int)>(10) in <androidx.appcompat.app.AppCompatDelegateImpl: android.view.ViewGroup createSubDecor()> ==> <androidx.appcompat.app.AppCompatDelegateImpl: boolean requestWindowFeature(int)>
SPECIAL edge: specialinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: void ensureWindow()>() in <androidx.appcompat.app.AppCompatDelegateImpl: android.view.ViewGroup createSubDecor()> ==> <androidx.appcompat.app.AppCompatDelegateImpl: void ensureWindow()>
VIRTUAL edge: $r11 = virtualinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: android.view.Window$Callback getWindowCallback()>() in <androidx.appcompat.app.AppCompatDelegateImpl: android.view.ViewGroup createSubDecor()> ==> <androidx.appcompat.app.AppCompatDelegateImpl: android.view.Window$Callback getWindowCallback()>
SPECIAL edge: specialinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: void attachToWindow(android.view.Window)>($r1) in <androidx.appcompat.app.AppCompatDelegateImpl: void ensureWindow()> ==> <androidx.appcompat.app.AppCompatDelegateImpl: void attachToWindow(android.view.Window)>
SPECIAL edge: $i0 = specialinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: int sanitizeWindowFeatureId(int)>($i0) in <androidx.appcompat.app.AppCompatDelegateImpl: boolean requestWindowFeature(int)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: int sanitizeWindowFeatureId(int)>
SPECIAL edge: specialinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: void throwFeatureRequestIfSubDecorInstalled()>() in <androidx.appcompat.app.AppCompatDelegateImpl: boolean requestWindowFeature(int)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: void throwFeatureRequestIfSubDecorInstalled()>
SPECIAL edge: specialinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: void throwFeatureRequestIfSubDecorInstalled()>() in <androidx.appcompat.app.AppCompatDelegateImpl: boolean requestWindowFeature(int)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: void throwFeatureRequestIfSubDecorInstalled()>
SPECIAL edge: specialinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: void throwFeatureRequestIfSubDecorInstalled()>() in <androidx.appcompat.app.AppCompatDelegateImpl: boolean requestWindowFeature(int)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: void throwFeatureRequestIfSubDecorInstalled()>
SPECIAL edge: specialinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: void throwFeatureRequestIfSubDecorInstalled()>() in <androidx.appcompat.app.AppCompatDelegateImpl: boolean requestWindowFeature(int)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: void throwFeatureRequestIfSubDecorInstalled()>
SPECIAL edge: specialinvoke r0.<androidx.appcompat.app.AppCompatActivity: void initViewTreeOwners()>() in <androidx.appcompat.app.AppCompatActivity: void setContentView(int)> ==> <androidx.appcompat.app.AppCompatActivity: void initViewTreeOwners()>
VIRTUAL edge: $r1 = virtualinvoke r0.<androidx.appcompat.app.AppCompatActivity: androidx.appcompat.app.AppCompatDelegate getDelegate()>() in <androidx.appcompat.app.AppCompatActivity: void setContentView(int)> ==> <androidx.appcompat.app.AppCompatActivity: androidx.appcompat.app.AppCompatDelegate getDelegate()>
STATIC edge: staticinvoke <androidx.lifecycle.ViewTreeLifecycleOwner: void set(android.view.View,androidx.lifecycle.LifecycleOwner)>($r2, r0) in <androidx.appcompat.app.AppCompatActivity: void initViewTreeOwners()> ==> <androidx.lifecycle.ViewTreeLifecycleOwner: void set(android.view.View,androidx.lifecycle.LifecycleOwner)>
STATIC edge: staticinvoke <androidx.activity.ViewTreeOnBackPressedDispatcherOwner: void set(android.view.View,androidx.activity.OnBackPressedDispatcherOwner)>($r2, r0) in <androidx.appcompat.app.AppCompatActivity: void initViewTreeOwners()> ==> <androidx.activity.ViewTreeOnBackPressedDispatcherOwner: void set(android.view.View,androidx.activity.OnBackPressedDispatcherOwner)>
STATIC edge: staticinvoke <androidx.savedstate.ViewTreeSavedStateRegistryOwner: void set(android.view.View,androidx.savedstate.SavedStateRegistryOwner)>($r2, r0) in <androidx.appcompat.app.AppCompatActivity: void initViewTreeOwners()> ==> <androidx.savedstate.ViewTreeSavedStateRegistryOwner: void set(android.view.View,androidx.savedstate.SavedStateRegistryOwner)>
STATIC edge: staticinvoke <androidx.lifecycle.ViewTreeViewModelStoreOwner: void set(android.view.View,androidx.lifecycle.ViewModelStoreOwner)>($r2, r0) in <androidx.appcompat.app.AppCompatActivity: void initViewTreeOwners()> ==> <androidx.lifecycle.ViewTreeViewModelStoreOwner: void set(android.view.View,androidx.lifecycle.ViewModelStoreOwner)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>") in <androidx.lifecycle.ViewTreeLifecycleOwner: void set(android.view.View,androidx.lifecycle.LifecycleOwner)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>") in <androidx.activity.ViewTreeOnBackPressedDispatcherOwner: void set(android.view.View,androidx.activity.OnBackPressedDispatcherOwner)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "onBackPressedDispatcherOwner") in <androidx.activity.ViewTreeOnBackPressedDispatcherOwner: void set(android.view.View,androidx.activity.OnBackPressedDispatcherOwner)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>") in <androidx.savedstate.ViewTreeSavedStateRegistryOwner: void set(android.view.View,androidx.savedstate.SavedStateRegistryOwner)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>") in <androidx.lifecycle.ViewTreeViewModelStoreOwner: void set(android.view.View,androidx.lifecycle.ViewModelStoreOwner)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
VIRTUAL edge: virtualinvoke $r1.<androidx.appcompat.app.AppCompatDelegate: void setContentView(int)>($i0) in <androidx.appcompat.app.AppCompatActivity: void setContentView(int)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: void setContentView(int)>
SPECIAL edge: specialinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: void ensureSubDecor()>() in <androidx.appcompat.app.AppCompatDelegateImpl: void setContentView(int)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: void ensureSubDecor()>
VIRTUAL edge: virtualinvoke $r5.<androidx.appcompat.app.AppCompatDelegateImpl$AppCompatWindowCallback: void bypassOnContentChanged(android.view.Window$Callback)>($r7) in <androidx.appcompat.app.AppCompatDelegateImpl: void setContentView(int)> ==> <androidx.appcompat.app.AppCompatDelegateImpl$AppCompatWindowCallback: void bypassOnContentChanged(android.view.Window$Callback)>
SPECIAL edge: specialinvoke r0.<androidx.activity.ComponentActivity: void onCreate(android.os.Bundle)>($r2) in <androidx.fragment.app.FragmentActivity: void onCreate(android.os.Bundle)> ==> <androidx.activity.ComponentActivity: void onCreate(android.os.Bundle)>
CLINIT edge: staticinvoke <androidx.lifecycle.ReportFragment: void injectIfNeededIn(android.app.Activity)>(r0) in <androidx.activity.ComponentActivity: void onCreate(android.os.Bundle)> ==> <androidx.lifecycle.ReportFragment: void <clinit>()>
STATIC edge: staticinvoke <androidx.lifecycle.ReportFragment: void injectIfNeededIn(android.app.Activity)>(r0) in <androidx.activity.ComponentActivity: void onCreate(android.os.Bundle)> ==> <androidx.lifecycle.ReportFragment: void injectIfNeededIn(android.app.Activity)>
CLINIT edge: $r1 = <androidx.lifecycle.ReportFragment: androidx.lifecycle.ReportFragment$Companion Companion> in <androidx.lifecycle.ReportFragment: void injectIfNeededIn(android.app.Activity)> ==> <androidx.lifecycle.ReportFragment: void <clinit>()>
VIRTUAL edge: virtualinvoke $r1.<androidx.lifecycle.ReportFragment$Companion: void injectIfNeededIn(android.app.Activity)>($r0) in <androidx.lifecycle.ReportFragment: void injectIfNeededIn(android.app.Activity)> ==> <androidx.lifecycle.ReportFragment$Companion: void injectIfNeededIn(android.app.Activity)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "activity") in <androidx.lifecycle.ReportFragment$Companion: void injectIfNeededIn(android.app.Activity)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
CLINIT edge: $r6 = new androidx.lifecycle.ReportFragment in <androidx.lifecycle.ReportFragment$Companion: void injectIfNeededIn(android.app.Activity)> ==> <androidx.lifecycle.ReportFragment: void <clinit>()>
CLINIT edge: $r2 = <androidx.lifecycle.ReportFragment$LifecycleCallbacks: androidx.lifecycle.ReportFragment$LifecycleCallbacks$Companion Companion> in <androidx.lifecycle.ReportFragment$Companion: void injectIfNeededIn(android.app.Activity)> ==> <androidx.lifecycle.ReportFragment$LifecycleCallbacks: void <clinit>()>
SPECIAL edge: specialinvoke $r6.<androidx.lifecycle.ReportFragment: void <init>()>() in <androidx.lifecycle.ReportFragment$Companion: void injectIfNeededIn(android.app.Activity)> ==> <androidx.lifecycle.ReportFragment: void <init>()>
VIRTUAL edge: virtualinvoke $r2.<androidx.lifecycle.ReportFragment$LifecycleCallbacks$Companion: void registerIn(android.app.Activity)>($r1) in <androidx.lifecycle.ReportFragment$Companion: void injectIfNeededIn(android.app.Activity)> ==> <androidx.lifecycle.ReportFragment$LifecycleCallbacks$Companion: void registerIn(android.app.Activity)>
CLINIT edge: $r2 = new androidx.lifecycle.ReportFragment$LifecycleCallbacks in <androidx.lifecycle.ReportFragment$LifecycleCallbacks$Companion: void registerIn(android.app.Activity)> ==> <androidx.lifecycle.ReportFragment$LifecycleCallbacks: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "activity") in <androidx.lifecycle.ReportFragment$LifecycleCallbacks$Companion: void registerIn(android.app.Activity)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke $r2.<androidx.lifecycle.ReportFragment$LifecycleCallbacks: void <init>()>() in <androidx.lifecycle.ReportFragment$LifecycleCallbacks$Companion: void registerIn(android.app.Activity)> ==> <androidx.lifecycle.ReportFragment$LifecycleCallbacks: void <init>()>
SPECIAL edge: specialinvoke r0.<androidx.core.app.ComponentActivity: void onCreate(android.os.Bundle)>($r1) in <androidx.activity.ComponentActivity: void onCreate(android.os.Bundle)> ==> <androidx.core.app.ComponentActivity: void onCreate(android.os.Bundle)>
VIRTUAL edge: virtualinvoke r0.<androidx.activity.ComponentActivity: void setContentView(int)>($i0) in <androidx.activity.ComponentActivity: void onCreate(android.os.Bundle)> ==> <androidx.appcompat.app.AppCompatActivity: void setContentView(int)>
CLINIT edge: staticinvoke <androidx.lifecycle.ReportFragment: void injectIfNeededIn(android.app.Activity)>(r0) in <androidx.core.app.ComponentActivity: void onCreate(android.os.Bundle)> ==> <androidx.lifecycle.ReportFragment: void <clinit>()>
STATIC edge: staticinvoke <androidx.lifecycle.ReportFragment: void injectIfNeededIn(android.app.Activity)>(r0) in <androidx.core.app.ComponentActivity: void onCreate(android.os.Bundle)> ==> <androidx.lifecycle.ReportFragment: void injectIfNeededIn(android.app.Activity)>
VIRTUAL edge: $r3 = virtualinvoke $r1.<android.app.Activity: android.app.FragmentManager getFragmentManager()>() in <androidx.lifecycle.ReportFragment$Companion: void injectIfNeededIn(android.app.Activity)> ==> <android.app.Activity: android.app.FragmentManager getFragmentManager()>
SPECIAL edge: specialinvoke r0.<androidx.appcompat.app.AppCompatActivity: void <init>()>() in <com.example.notificationtest.MainActivity: void <init>()> ==> <androidx.appcompat.app.AppCompatActivity: void <init>()>
SPECIAL edge: specialinvoke r0.<androidx.fragment.app.FragmentActivity: void <init>()>() in <androidx.appcompat.app.AppCompatActivity: void <init>()> ==> <androidx.fragment.app.FragmentActivity: void <init>()>
SPECIAL edge: specialinvoke r0.<androidx.appcompat.app.AppCompatActivity: void initDelegate()>() in <androidx.appcompat.app.AppCompatActivity: void <init>()> ==> <androidx.appcompat.app.AppCompatActivity: void initDelegate()>
CLINIT edge: $r3 = new androidx.lifecycle.LifecycleRegistry in <androidx.fragment.app.FragmentActivity: void <init>()> ==> <androidx.lifecycle.LifecycleRegistry: void <clinit>()>
STATIC edge: $r1 = staticinvoke <androidx.fragment.app.FragmentController: androidx.fragment.app.FragmentController createController(androidx.fragment.app.FragmentHostCallback)>($r2) in <androidx.fragment.app.FragmentActivity: void <init>()> ==> <androidx.fragment.app.FragmentController: androidx.fragment.app.FragmentController createController(androidx.fragment.app.FragmentHostCallback)>
STATIC edge: $r1 = staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r2, "callbacks == null") in <androidx.fragment.app.FragmentController: androidx.fragment.app.FragmentController createController(androidx.fragment.app.FragmentHostCallback)> ==> <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>
CLINIT edge: $r0 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r2) in <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)> ==> <java.lang.String: void <clinit>()>
STATIC edge: $r0 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r2) in <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>($r0) in <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<androidx.fragment.app.FragmentController: void <init>(androidx.fragment.app.FragmentHostCallback)>($r2) in <androidx.fragment.app.FragmentController: androidx.fragment.app.FragmentController createController(androidx.fragment.app.FragmentHostCallback)> ==> <androidx.fragment.app.FragmentController: void <init>(androidx.fragment.app.FragmentHostCallback)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.fragment.app.FragmentController: void <init>(androidx.fragment.app.FragmentHostCallback)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r3.<androidx.appcompat.app.AppCompatActivity$2: void <init>(androidx.appcompat.app.AppCompatActivity)>(r0) in <androidx.appcompat.app.AppCompatActivity: void initDelegate()> ==> <androidx.appcompat.app.AppCompatActivity$2: void <init>(androidx.appcompat.app.AppCompatActivity)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.appcompat.app.AppCompatActivity$2: void <init>(androidx.appcompat.app.AppCompatActivity)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<androidx.appcompat.app.AppCompatActivity$1: void <init>(androidx.appcompat.app.AppCompatActivity)>(r0) in <androidx.appcompat.app.AppCompatActivity: void initDelegate()> ==> <androidx.appcompat.app.AppCompatActivity$1: void <init>(androidx.appcompat.app.AppCompatActivity)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.appcompat.app.AppCompatActivity$1: void <init>(androidx.appcompat.app.AppCompatActivity)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke r0.<androidx.appcompat.app.AppCompatActivity: androidx.savedstate.SavedStateRegistry getSavedStateRegistry()>() in <androidx.appcompat.app.AppCompatActivity: void initDelegate()> ==> <androidx.activity.ComponentActivity: androidx.savedstate.SavedStateRegistry getSavedStateRegistry()>
VIRTUAL edge: virtualinvoke r0.<androidx.appcompat.app.AppCompatActivity: void addOnContextAvailableListener(androidx.activity.contextaware.OnContextAvailableListener)>($r3) in <androidx.appcompat.app.AppCompatActivity: void initDelegate()> ==> <androidx.activity.ComponentActivity: void addOnContextAvailableListener(androidx.activity.contextaware.OnContextAvailableListener)>
SPECIAL edge: specialinvoke $r3.<androidx.lifecycle.LifecycleRegistry: void <init>(androidx.lifecycle.LifecycleOwner)>(r0) in <androidx.fragment.app.FragmentActivity: void <init>()> ==> <androidx.lifecycle.LifecycleRegistry: void <init>(androidx.lifecycle.LifecycleOwner)>
SPECIAL edge: specialinvoke $r2.<androidx.fragment.app.FragmentActivity$HostCallbacks: void <init>(androidx.fragment.app.FragmentActivity)>(r0) in <androidx.fragment.app.FragmentActivity: void <init>()> ==> <androidx.fragment.app.FragmentActivity$HostCallbacks: void <init>(androidx.fragment.app.FragmentActivity)>
SPECIAL edge: specialinvoke r0.<androidx.fragment.app.FragmentHostCallback: void <init>(androidx.fragment.app.FragmentActivity)>($r1) in <androidx.fragment.app.FragmentActivity$HostCallbacks: void <init>(androidx.fragment.app.FragmentActivity)> ==> <androidx.fragment.app.FragmentHostCallback: void <init>(androidx.fragment.app.FragmentActivity)>
SPECIAL edge: specialinvoke r0.<androidx.fragment.app.FragmentHostCallback: void <init>(android.app.Activity,android.content.Context,android.os.Handler,int)>($r1, $r1, $r2, 0) in <androidx.fragment.app.FragmentHostCallback: void <init>(androidx.fragment.app.FragmentActivity)> ==> <androidx.fragment.app.FragmentHostCallback: void <init>(android.app.Activity,android.content.Context,android.os.Handler,int)>
CLINIT edge: $r3 = new androidx.fragment.app.FragmentManagerImpl in <androidx.fragment.app.FragmentHostCallback: void <init>(android.app.Activity,android.content.Context,android.os.Handler,int)> ==> <androidx.fragment.app.FragmentManager: void <clinit>()>
STATIC edge: $r5 = staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r2, "handler == null") in <androidx.fragment.app.FragmentHostCallback: void <init>(android.app.Activity,android.content.Context,android.os.Handler,int)> ==> <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>
STATIC edge: $r5 = staticinvoke <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r1, "context == null") in <androidx.fragment.app.FragmentHostCallback: void <init>(android.app.Activity,android.content.Context,android.os.Handler,int)> ==> <androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<androidx.fragment.app.FragmentManagerImpl: void <init>()>() in <androidx.fragment.app.FragmentHostCallback: void <init>(android.app.Activity,android.content.Context,android.os.Handler,int)> ==> <androidx.fragment.app.FragmentManagerImpl: void <init>()>
SPECIAL edge: specialinvoke r0.<androidx.fragment.app.FragmentContainer: void <init>()>() in <androidx.fragment.app.FragmentHostCallback: void <init>(android.app.Activity,android.content.Context,android.os.Handler,int)> ==> <androidx.fragment.app.FragmentContainer: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.fragment.app.FragmentContainer: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<androidx.activity.ComponentActivity: void <init>()>() in <androidx.fragment.app.FragmentActivity: void <init>()> ==> <androidx.activity.ComponentActivity: void <init>()>
SPECIAL edge: specialinvoke r0.<androidx.fragment.app.FragmentActivity: void init()>() in <androidx.fragment.app.FragmentActivity: void <init>()> ==> <androidx.fragment.app.FragmentActivity: void init()>
CLINIT edge: $r5 = new androidx.lifecycle.LifecycleRegistry in <androidx.activity.ComponentActivity: void <init>()> ==> <androidx.lifecycle.LifecycleRegistry: void <clinit>()>
STATIC edge: staticinvoke <androidx.lifecycle.SavedStateHandleSupport: void enableSavedStateHandles(androidx.savedstate.SavedStateRegistryOwner)>(r0) in <androidx.activity.ComponentActivity: void <init>()> ==> <androidx.lifecycle.SavedStateHandleSupport: void enableSavedStateHandles(androidx.savedstate.SavedStateRegistryOwner)>
STATIC edge: $r6 = staticinvoke <androidx.savedstate.SavedStateRegistryController: androidx.savedstate.SavedStateRegistryController create(androidx.savedstate.SavedStateRegistryOwner)>(r0) in <androidx.activity.ComponentActivity: void <init>()> ==> <androidx.savedstate.SavedStateRegistryController: androidx.savedstate.SavedStateRegistryController create(androidx.savedstate.SavedStateRegistryOwner)>
CLINIT edge: staticinvoke <androidx.lifecycle.SavedStateHandleSupport: void enableSavedStateHandles(androidx.savedstate.SavedStateRegistryOwner)>(r0) in <androidx.activity.ComponentActivity: void <init>()> ==> <androidx.lifecycle.SavedStateHandleSupport: void <clinit>()>
CLINIT edge: $r6 = staticinvoke <androidx.savedstate.SavedStateRegistryController: androidx.savedstate.SavedStateRegistryController create(androidx.savedstate.SavedStateRegistryOwner)>(r0) in <androidx.activity.ComponentActivity: void <init>()> ==> <androidx.savedstate.SavedStateRegistryController: void <clinit>()>
CLINIT edge: $r3 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State INITIALIZED> in <androidx.lifecycle.SavedStateHandleSupport: void enableSavedStateHandles(androidx.savedstate.SavedStateRegistryOwner)> ==> <androidx.lifecycle.Lifecycle$State: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>") in <androidx.lifecycle.SavedStateHandleSupport: void enableSavedStateHandles(androidx.savedstate.SavedStateRegistryOwner)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke $r3.<androidx.lifecycle.SavedStateHandleSupport$DEFAULT_ARGS_KEY$1: void <init>()>() in <androidx.lifecycle.SavedStateHandleSupport: void <clinit>()> ==> <androidx.lifecycle.SavedStateHandleSupport$DEFAULT_ARGS_KEY$1: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.lifecycle.SavedStateHandleSupport$DEFAULT_ARGS_KEY$1: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r2.<androidx.lifecycle.SavedStateHandleSupport$VIEW_MODEL_STORE_OWNER_KEY$1: void <init>()>() in <androidx.lifecycle.SavedStateHandleSupport: void <clinit>()> ==> <androidx.lifecycle.SavedStateHandleSupport$VIEW_MODEL_STORE_OWNER_KEY$1: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.lifecycle.SavedStateHandleSupport$VIEW_MODEL_STORE_OWNER_KEY$1: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<androidx.lifecycle.SavedStateHandleSupport$SAVED_STATE_REGISTRY_OWNER_KEY$1: void <init>()>() in <androidx.lifecycle.SavedStateHandleSupport: void <clinit>()> ==> <androidx.lifecycle.SavedStateHandleSupport$SAVED_STATE_REGISTRY_OWNER_KEY$1: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.lifecycle.SavedStateHandleSupport$SAVED_STATE_REGISTRY_OWNER_KEY$1: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r11 = virtualinvoke $r11.<java.lang.Object: java.lang.String toString()>() in <androidx.lifecycle.SavedStateHandleSupport: void enableSavedStateHandles(androidx.savedstate.SavedStateRegistryOwner)> ==> <java.lang.String: java.lang.String toString()>
SPECIAL edge: specialinvoke $r8.<androidx.lifecycle.SavedStateHandleAttacher: void <init>(androidx.lifecycle.SavedStateHandlesProvider)>($r6) in <androidx.lifecycle.SavedStateHandleSupport: void enableSavedStateHandles(androidx.savedstate.SavedStateRegistryOwner)> ==> <androidx.lifecycle.SavedStateHandleAttacher: void <init>(androidx.lifecycle.SavedStateHandlesProvider)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "provider") in <androidx.lifecycle.SavedStateHandleAttacher: void <init>(androidx.lifecycle.SavedStateHandlesProvider)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.lifecycle.SavedStateHandleAttacher: void <init>(androidx.lifecycle.SavedStateHandlesProvider)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r6.<androidx.lifecycle.SavedStateHandlesProvider: void <init>(androidx.savedstate.SavedStateRegistry,androidx.lifecycle.ViewModelStoreOwner)>($r4, $r7) in <androidx.lifecycle.SavedStateHandleSupport: void enableSavedStateHandles(androidx.savedstate.SavedStateRegistryOwner)> ==> <androidx.lifecycle.SavedStateHandlesProvider: void <init>(androidx.savedstate.SavedStateRegistry,androidx.lifecycle.ViewModelStoreOwner)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r3, "savedStateRegistry") in <androidx.lifecycle.SavedStateHandlesProvider: void <init>(androidx.savedstate.SavedStateRegistry,androidx.lifecycle.ViewModelStoreOwner)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: $r2 = staticinvoke <kotlin.LazyKt: kotlin.Lazy lazy(kotlin.jvm.functions.Function0)>($r5) in <androidx.lifecycle.SavedStateHandlesProvider: void <init>(androidx.savedstate.SavedStateRegistry,androidx.lifecycle.ViewModelStoreOwner)> ==> <kotlin.LazyKt__LazyJVMKt: kotlin.Lazy lazy(kotlin.jvm.functions.Function0)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "initializer") in <kotlin.LazyKt__LazyJVMKt: kotlin.Lazy lazy(kotlin.jvm.functions.Function0)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke $r1.<kotlin.SynchronizedLazyImpl: void <init>(kotlin.jvm.functions.Function0,java.lang.Object,int,kotlin.jvm.internal.DefaultConstructorMarker)>($r0, null, 2, null) in <kotlin.LazyKt__LazyJVMKt: kotlin.Lazy lazy(kotlin.jvm.functions.Function0)> ==> <kotlin.SynchronizedLazyImpl: void <init>(kotlin.jvm.functions.Function0,java.lang.Object,int,kotlin.jvm.internal.DefaultConstructorMarker)>
SPECIAL edge: specialinvoke r0.<kotlin.SynchronizedLazyImpl: void <init>(kotlin.jvm.functions.Function0,java.lang.Object)>($r1, $r3) in <kotlin.SynchronizedLazyImpl: void <init>(kotlin.jvm.functions.Function0,java.lang.Object,int,kotlin.jvm.internal.DefaultConstructorMarker)> ==> <kotlin.SynchronizedLazyImpl: void <init>(kotlin.jvm.functions.Function0,java.lang.Object)>
CLINIT edge: $r3 = <kotlin.UNINITIALIZED_VALUE: kotlin.UNINITIALIZED_VALUE INSTANCE> in <kotlin.SynchronizedLazyImpl: void <init>(kotlin.jvm.functions.Function0,java.lang.Object)> ==> <kotlin.UNINITIALIZED_VALUE: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "initializer") in <kotlin.SynchronizedLazyImpl: void <init>(kotlin.jvm.functions.Function0,java.lang.Object)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke $r0.<kotlin.UNINITIALIZED_VALUE: void <init>()>() in <kotlin.UNINITIALIZED_VALUE: void <clinit>()> ==> <kotlin.UNINITIALIZED_VALUE: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <kotlin.UNINITIALIZED_VALUE: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <kotlin.SynchronizedLazyImpl: void <init>(kotlin.jvm.functions.Function0,java.lang.Object)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r4.<androidx.lifecycle.SavedStateHandlesProvider$viewModel$2: void <init>(androidx.lifecycle.ViewModelStoreOwner)>($r1) in <androidx.lifecycle.SavedStateHandlesProvider: void <init>(androidx.savedstate.SavedStateRegistry,androidx.lifecycle.ViewModelStoreOwner)> ==> <androidx.lifecycle.SavedStateHandlesProvider$viewModel$2: void <init>(androidx.lifecycle.ViewModelStoreOwner)>
SPECIAL edge: specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0) in <androidx.lifecycle.SavedStateHandlesProvider$viewModel$2: void <init>(androidx.lifecycle.ViewModelStoreOwner)> ==> <kotlin.jvm.internal.Lambda: void <init>(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <kotlin.jvm.internal.Lambda: void <init>(int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.lifecycle.SavedStateHandlesProvider: void <init>(androidx.savedstate.SavedStateRegistry,androidx.lifecycle.ViewModelStoreOwner)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r3.<androidx.fragment.app.FragmentActivity$2: void <init>(androidx.fragment.app.FragmentActivity)>(r0) in <androidx.fragment.app.FragmentActivity: void init()> ==> <androidx.fragment.app.FragmentActivity$2: void <init>(androidx.fragment.app.FragmentActivity)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.fragment.app.FragmentActivity$2: void <init>(androidx.fragment.app.FragmentActivity)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<androidx.fragment.app.FragmentActivity$1: void <init>(androidx.fragment.app.FragmentActivity)>(r0) in <androidx.fragment.app.FragmentActivity: void init()> ==> <androidx.fragment.app.FragmentActivity$1: void <init>(androidx.fragment.app.FragmentActivity)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.fragment.app.FragmentActivity$1: void <init>(androidx.fragment.app.FragmentActivity)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke r0.<androidx.fragment.app.FragmentActivity: androidx.savedstate.SavedStateRegistry getSavedStateRegistry()>() in <androidx.fragment.app.FragmentActivity: void init()> ==> <androidx.activity.ComponentActivity: androidx.savedstate.SavedStateRegistry getSavedStateRegistry()>
VIRTUAL edge: virtualinvoke r0.<androidx.fragment.app.FragmentActivity: void addOnContextAvailableListener(androidx.activity.contextaware.OnContextAvailableListener)>($r3) in <androidx.fragment.app.FragmentActivity: void init()> ==> <androidx.activity.ComponentActivity: void addOnContextAvailableListener(androidx.activity.contextaware.OnContextAvailableListener)>
SPECIAL edge: specialinvoke $r18.<androidx.activity.ComponentActivity$$ExternalSyntheticLambda3: void <init>(androidx.activity.ComponentActivity)>(r0) in <androidx.activity.ComponentActivity: void <init>()> ==> <androidx.activity.ComponentActivity$$ExternalSyntheticLambda3: void <init>(androidx.activity.ComponentActivity)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.activity.ComponentActivity$$ExternalSyntheticLambda3: void <init>(androidx.activity.ComponentActivity)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r17.<androidx.activity.ComponentActivity$$ExternalSyntheticLambda2: void <init>(androidx.activity.ComponentActivity)>(r0) in <androidx.activity.ComponentActivity: void <init>()> ==> <androidx.activity.ComponentActivity$$ExternalSyntheticLambda2: void <init>(androidx.activity.ComponentActivity)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.activity.ComponentActivity$$ExternalSyntheticLambda2: void <init>(androidx.activity.ComponentActivity)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r15.<androidx.activity.ComponentActivity$4: void <init>(androidx.activity.ComponentActivity)>(r0) in <androidx.activity.ComponentActivity: void <init>()> ==> <androidx.activity.ComponentActivity$4: void <init>(androidx.activity.ComponentActivity)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.activity.ComponentActivity$4: void <init>(androidx.activity.ComponentActivity)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r14.<androidx.activity.ComponentActivity$3: void <init>(androidx.activity.ComponentActivity)>(r0) in <androidx.activity.ComponentActivity: void <init>()> ==> <androidx.activity.ComponentActivity$3: void <init>(androidx.activity.ComponentActivity)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.activity.ComponentActivity$3: void <init>(androidx.activity.ComponentActivity)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r13.<androidx.activity.ComponentActivity$2: void <init>(androidx.activity.ComponentActivity)>(r0) in <androidx.activity.ComponentActivity: void <init>()> ==> <androidx.activity.ComponentActivity$2: void <init>(androidx.activity.ComponentActivity)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.activity.ComponentActivity$2: void <init>(androidx.activity.ComponentActivity)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r10.<androidx.activity.ComponentActivity$1: void <init>(androidx.activity.ComponentActivity)>(r0) in <androidx.activity.ComponentActivity: void <init>()> ==> <androidx.activity.ComponentActivity$1: void <init>(androidx.activity.ComponentActivity)>
SPECIAL edge: specialinvoke r0.<androidx.activity.result.ActivityResultRegistry: void <init>()>() in <androidx.activity.ComponentActivity$1: void <init>(androidx.activity.ComponentActivity)> ==> <androidx.activity.result.ActivityResultRegistry: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.activity.result.ActivityResultRegistry: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<androidx.activity.ComponentActivity$$ExternalSyntheticLambda1: void <init>(androidx.activity.ComponentActivity)>(r0) in <androidx.activity.ComponentActivity: void <init>()> ==> <androidx.activity.ComponentActivity$$ExternalSyntheticLambda1: void <init>(androidx.activity.ComponentActivity)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.activity.ComponentActivity$$ExternalSyntheticLambda1: void <init>(androidx.activity.ComponentActivity)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r8.<androidx.activity.FullyDrawnReporter: void <init>(java.util.concurrent.Executor,kotlin.jvm.functions.Function0)>($r7, $r1) in <androidx.activity.ComponentActivity: void <init>()> ==> <androidx.activity.FullyDrawnReporter: void <init>(java.util.concurrent.Executor,kotlin.jvm.functions.Function0)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "executor") in <androidx.activity.FullyDrawnReporter: void <init>(java.util.concurrent.Executor,kotlin.jvm.functions.Function0)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke $r6.<androidx.activity.FullyDrawnReporter$$ExternalSyntheticLambda0: void <init>(androidx.activity.FullyDrawnReporter)>(r0) in <androidx.activity.FullyDrawnReporter: void <init>(java.util.concurrent.Executor,kotlin.jvm.functions.Function0)> ==> <androidx.activity.FullyDrawnReporter$$ExternalSyntheticLambda0: void <init>(androidx.activity.FullyDrawnReporter)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.activity.FullyDrawnReporter$$ExternalSyntheticLambda0: void <init>(androidx.activity.FullyDrawnReporter)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r3.<java.lang.Object: void <init>()>() in <androidx.activity.FullyDrawnReporter: void <init>(java.util.concurrent.Executor,kotlin.jvm.functions.Function0)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r6.<androidx.savedstate.SavedStateRegistryController: void performAttach()>() in <androidx.activity.ComponentActivity: void <init>()> ==> <androidx.savedstate.SavedStateRegistryController: void performAttach()>
CLINIT edge: $r4 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State INITIALIZED> in <androidx.savedstate.SavedStateRegistryController: void performAttach()> ==> <androidx.lifecycle.Lifecycle$State: void <clinit>()>
CLINIT edge: $r5 = new androidx.savedstate.Recreator in <androidx.savedstate.SavedStateRegistryController: void performAttach()> ==> <androidx.savedstate.Recreator: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<androidx.savedstate.Recreator$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null) in <androidx.savedstate.Recreator: void <clinit>()> ==> <androidx.savedstate.Recreator$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>
SPECIAL edge: specialinvoke r0.<androidx.savedstate.Recreator$Companion: void <init>()>() in <androidx.savedstate.Recreator$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)> ==> <androidx.savedstate.Recreator$Companion: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.savedstate.Recreator$Companion: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r9 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>() in <androidx.savedstate.SavedStateRegistryController: void performAttach()> ==> <java.lang.String: java.lang.String toString()>
SPECIAL edge: specialinvoke $r5.<androidx.savedstate.Recreator: void <init>(androidx.savedstate.SavedStateRegistryOwner)>($r1) in <androidx.savedstate.SavedStateRegistryController: void performAttach()> ==> <androidx.savedstate.Recreator: void <init>(androidx.savedstate.SavedStateRegistryOwner)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "owner") in <androidx.savedstate.Recreator: void <init>(androidx.savedstate.SavedStateRegistryOwner)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.savedstate.Recreator: void <init>(androidx.savedstate.SavedStateRegistryOwner)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r7.<androidx.savedstate.SavedStateRegistry: void performAttach$savedstate_release(androidx.lifecycle.Lifecycle)>($r2) in <androidx.savedstate.SavedStateRegistryController: void performAttach()> ==> <androidx.savedstate.SavedStateRegistry: void performAttach$savedstate_release(androidx.lifecycle.Lifecycle)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "lifecycle") in <androidx.savedstate.SavedStateRegistry: void performAttach$savedstate_release(androidx.lifecycle.Lifecycle)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>() in <androidx.savedstate.SavedStateRegistry: void performAttach$savedstate_release(androidx.lifecycle.Lifecycle)> ==> <java.lang.String: java.lang.String toString()>
SPECIAL edge: specialinvoke $r3.<androidx.savedstate.SavedStateRegistry$$ExternalSyntheticLambda0: void <init>(androidx.savedstate.SavedStateRegistry)>(r0) in <androidx.savedstate.SavedStateRegistry: void performAttach$savedstate_release(androidx.lifecycle.Lifecycle)> ==> <androidx.savedstate.SavedStateRegistry$$ExternalSyntheticLambda0: void <init>(androidx.savedstate.SavedStateRegistry)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.savedstate.SavedStateRegistry$$ExternalSyntheticLambda0: void <init>(androidx.savedstate.SavedStateRegistry)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<androidx.savedstate.SavedStateRegistryOwner: androidx.lifecycle.Lifecycle getLifecycle()>() in <androidx.savedstate.SavedStateRegistryController: void performAttach()> ==> <androidx.fragment.app.Fragment: androidx.lifecycle.Lifecycle getLifecycle()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<androidx.lifecycle.Lifecycle: androidx.lifecycle.Lifecycle$State getCurrentState()>() in <androidx.savedstate.SavedStateRegistryController: void performAttach()> ==> <androidx.lifecycle.LifecycleRegistry: androidx.lifecycle.Lifecycle$State getCurrentState()>
VIRTUAL edge: virtualinvoke $r2.<androidx.lifecycle.Lifecycle: void addObserver(androidx.lifecycle.LifecycleObserver)>($r6) in <androidx.savedstate.SavedStateRegistryController: void performAttach()> ==> <androidx.lifecycle.LifecycleRegistry: void addObserver(androidx.lifecycle.LifecycleObserver)>
CLINIT edge: $r3 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State DESTROYED> in <androidx.lifecycle.LifecycleRegistry: void addObserver(androidx.lifecycle.LifecycleObserver)> ==> <androidx.lifecycle.Lifecycle$State: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "observer") in <androidx.lifecycle.LifecycleRegistry: void addObserver(androidx.lifecycle.LifecycleObserver)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
CLINIT edge: $r11 = <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event$Companion Companion> in <androidx.lifecycle.LifecycleRegistry: void addObserver(androidx.lifecycle.LifecycleObserver)> ==> <androidx.lifecycle.Lifecycle$Event: void <clinit>()>
VIRTUAL edge: $r12 = virtualinvoke $r11.<androidx.lifecycle.Lifecycle$Event$Companion: androidx.lifecycle.Lifecycle$Event upFrom(androidx.lifecycle.Lifecycle$State)>($r2) in <androidx.lifecycle.LifecycleRegistry: void addObserver(androidx.lifecycle.LifecycleObserver)> ==> <androidx.lifecycle.Lifecycle$Event$Companion: androidx.lifecycle.Lifecycle$Event upFrom(androidx.lifecycle.Lifecycle$State)>
CLINIT edge: $r2 = <androidx.lifecycle.Lifecycle$Event$Companion$WhenMappings: int[] $EnumSwitchMapping$0> in <androidx.lifecycle.Lifecycle$Event$Companion: androidx.lifecycle.Lifecycle$Event upFrom(androidx.lifecycle.Lifecycle$State)> ==> <androidx.lifecycle.Lifecycle$Event$Companion$WhenMappings: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "state") in <androidx.lifecycle.Lifecycle$Event$Companion: androidx.lifecycle.Lifecycle$Event upFrom(androidx.lifecycle.Lifecycle$State)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
CLINIT edge: r3 = <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_START> in <androidx.lifecycle.Lifecycle$Event$Companion: androidx.lifecycle.Lifecycle$Event upFrom(androidx.lifecycle.Lifecycle$State)> ==> <androidx.lifecycle.Lifecycle$Event: void <clinit>()>
CLINIT edge: r3 = <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_RESUME> in <androidx.lifecycle.Lifecycle$Event$Companion: androidx.lifecycle.Lifecycle$Event upFrom(androidx.lifecycle.Lifecycle$State)> ==> <androidx.lifecycle.Lifecycle$Event: void <clinit>()>
CLINIT edge: r3 = <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_CREATE> in <androidx.lifecycle.Lifecycle$Event$Companion: androidx.lifecycle.Lifecycle$Event upFrom(androidx.lifecycle.Lifecycle$State)> ==> <androidx.lifecycle.Lifecycle$Event: void <clinit>()>
CLINIT edge: $r5 = staticinvoke <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State[] values()>() in <androidx.lifecycle.Lifecycle$Event$Companion$WhenMappings: void <clinit>()> ==> <androidx.lifecycle.Lifecycle$State: void <clinit>()>
STATIC edge: $r5 = staticinvoke <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State[] values()>() in <androidx.lifecycle.Lifecycle$Event$Companion$WhenMappings: void <clinit>()> ==> <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State[] values()>
CLINIT edge: $r7 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State INITIALIZED> in <androidx.lifecycle.Lifecycle$Event$Companion$WhenMappings: void <clinit>()> ==> <androidx.lifecycle.Lifecycle$State: void <clinit>()>
CLINIT edge: $r7 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State DESTROYED> in <androidx.lifecycle.Lifecycle$Event$Companion$WhenMappings: void <clinit>()> ==> <androidx.lifecycle.Lifecycle$State: void <clinit>()>
CLINIT edge: $r7 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State RESUMED> in <androidx.lifecycle.Lifecycle$Event$Companion$WhenMappings: void <clinit>()> ==> <androidx.lifecycle.Lifecycle$State: void <clinit>()>
CLINIT edge: $r1 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State[] $VALUES> in <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State[] values()> ==> <androidx.lifecycle.Lifecycle$State: void <clinit>()>
VIRTUAL edge: $r0 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>() in <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State[] values()> ==> <java.lang.Object: java.lang.Object clone()>
VIRTUAL edge: $i0 = virtualinvoke $r7.<androidx.lifecycle.Lifecycle$State: int ordinal()>() in <androidx.lifecycle.Lifecycle$Event$Companion$WhenMappings: void <clinit>()> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: $i0 = virtualinvoke $r7.<androidx.lifecycle.Lifecycle$State: int ordinal()>() in <androidx.lifecycle.Lifecycle$Event$Companion$WhenMappings: void <clinit>()> ==> <java.lang.Enum: int ordinal()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: int ordinal()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<androidx.lifecycle.Lifecycle$State: int ordinal()>() in <androidx.lifecycle.Lifecycle$Event$Companion: androidx.lifecycle.Lifecycle$Event upFrom(androidx.lifecycle.Lifecycle$State)> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: $r3 = virtualinvoke $r4.<androidx.lifecycle.LifecycleRegistry$ObserverWithState: androidx.lifecycle.Lifecycle$State getState()>() in <androidx.lifecycle.LifecycleRegistry: void addObserver(androidx.lifecycle.LifecycleObserver)> ==> <androidx.lifecycle.LifecycleRegistry$ObserverWithState: androidx.lifecycle.Lifecycle$State getState()>
VIRTUAL edge: virtualinvoke $r4.<androidx.lifecycle.LifecycleRegistry$ObserverWithState: void dispatchEvent(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)>($r9, $r12) in <androidx.lifecycle.LifecycleRegistry: void addObserver(androidx.lifecycle.LifecycleObserver)> ==> <androidx.lifecycle.LifecycleRegistry$ObserverWithState: void dispatchEvent(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)>
CLINIT edge: $r5 = <androidx.lifecycle.LifecycleRegistry: androidx.lifecycle.LifecycleRegistry$Companion Companion> in <androidx.lifecycle.LifecycleRegistry$ObserverWithState: void dispatchEvent(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)> ==> <androidx.lifecycle.LifecycleRegistry: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r1) in <androidx.lifecycle.LifecycleRegistry$ObserverWithState: void dispatchEvent(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "event") in <androidx.lifecycle.LifecycleRegistry$ObserverWithState: void dispatchEvent(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r5.<androidx.lifecycle.LifecycleRegistry$Companion: androidx.lifecycle.Lifecycle$State min$lifecycle_runtime_release(androidx.lifecycle.Lifecycle$State,androidx.lifecycle.Lifecycle$State)>($r3, $r4) in <androidx.lifecycle.LifecycleRegistry$ObserverWithState: void dispatchEvent(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)> ==> <androidx.lifecycle.LifecycleRegistry$Companion: androidx.lifecycle.Lifecycle$State min$lifecycle_runtime_release(androidx.lifecycle.Lifecycle$State,androidx.lifecycle.Lifecycle$State)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "state1") in <androidx.lifecycle.LifecycleRegistry$Companion: androidx.lifecycle.Lifecycle$State min$lifecycle_runtime_release(androidx.lifecycle.Lifecycle$State,androidx.lifecycle.Lifecycle$State)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r2.<androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$State getTargetState()>() in <androidx.lifecycle.LifecycleRegistry$ObserverWithState: void dispatchEvent(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)> ==> <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$State getTargetState()>
CLINIT edge: $r1 = <androidx.lifecycle.Lifecycle$Event$WhenMappings: int[] $EnumSwitchMapping$0> in <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$State getTargetState()> ==> <androidx.lifecycle.Lifecycle$Event$WhenMappings: void <clinit>()>
CLINIT edge: r5 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State CREATED> in <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$State getTargetState()> ==> <androidx.lifecycle.Lifecycle$State: void <clinit>()>
CLINIT edge: $r7 = staticinvoke <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event[] values()>() in <androidx.lifecycle.Lifecycle$Event$WhenMappings: void <clinit>()> ==> <androidx.lifecycle.Lifecycle$Event: void <clinit>()>
STATIC edge: $r7 = staticinvoke <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event[] values()>() in <androidx.lifecycle.Lifecycle$Event$WhenMappings: void <clinit>()> ==> <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event[] values()>
CLINIT edge: $r9 = <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_RESUME> in <androidx.lifecycle.Lifecycle$Event$WhenMappings: void <clinit>()> ==> <androidx.lifecycle.Lifecycle$Event: void <clinit>()>
CLINIT edge: $r1 = <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event[] $VALUES> in <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event[] values()> ==> <androidx.lifecycle.Lifecycle$Event: void <clinit>()>
VIRTUAL edge: $r0 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>() in <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event[] values()> ==> <java.lang.Object: java.lang.Object clone()>
VIRTUAL edge: $i0 = virtualinvoke $r9.<androidx.lifecycle.Lifecycle$Event: int ordinal()>() in <androidx.lifecycle.Lifecycle$Event$WhenMappings: void <clinit>()> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: $i0 = virtualinvoke $r9.<androidx.lifecycle.Lifecycle$Event: int ordinal()>() in <androidx.lifecycle.Lifecycle$Event$WhenMappings: void <clinit>()> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: $i0 = virtualinvoke $r9.<androidx.lifecycle.Lifecycle$Event: int ordinal()>() in <androidx.lifecycle.Lifecycle$Event$WhenMappings: void <clinit>()> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: $i0 = virtualinvoke r0.<androidx.lifecycle.Lifecycle$Event: int ordinal()>() in <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$State getTargetState()> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<androidx.lifecycle.Lifecycle$State: int compareTo(java.lang.Enum)>($r3) in <androidx.lifecycle.LifecycleRegistry$Companion: androidx.lifecycle.Lifecycle$State min$lifecycle_runtime_release(androidx.lifecycle.Lifecycle$State,androidx.lifecycle.Lifecycle$State)> ==> <java.lang.Enum: int compareTo(java.lang.Enum)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: int compareTo(java.lang.Enum)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r7.<androidx.lifecycle.LifecycleRegistry$ObserverWithState: void <init>(androidx.lifecycle.LifecycleObserver,androidx.lifecycle.Lifecycle$State)>($r1, $r2) in <androidx.lifecycle.LifecycleRegistry: void addObserver(androidx.lifecycle.LifecycleObserver)> ==> <androidx.lifecycle.LifecycleRegistry$ObserverWithState: void <init>(androidx.lifecycle.LifecycleObserver,androidx.lifecycle.Lifecycle$State)>
CLINIT edge: $r2 = staticinvoke <androidx.lifecycle.Lifecycling: androidx.lifecycle.LifecycleEventObserver lifecycleEventObserver(java.lang.Object)>($r3) in <androidx.lifecycle.LifecycleRegistry$ObserverWithState: void <init>(androidx.lifecycle.LifecycleObserver,androidx.lifecycle.Lifecycle$State)> ==> <androidx.lifecycle.Lifecycling: void <clinit>()>
STATIC edge: $r2 = staticinvoke <androidx.lifecycle.Lifecycling: androidx.lifecycle.LifecycleEventObserver lifecycleEventObserver(java.lang.Object)>($r3) in <androidx.lifecycle.LifecycleRegistry$ObserverWithState: void <init>(androidx.lifecycle.LifecycleObserver,androidx.lifecycle.Lifecycle$State)> ==> <androidx.lifecycle.Lifecycling: androidx.lifecycle.LifecycleEventObserver lifecycleEventObserver(java.lang.Object)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r3) in <androidx.lifecycle.LifecycleRegistry$ObserverWithState: void <init>(androidx.lifecycle.LifecycleObserver,androidx.lifecycle.Lifecycle$State)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "initialState") in <androidx.lifecycle.LifecycleRegistry$ObserverWithState: void <init>(androidx.lifecycle.LifecycleObserver,androidx.lifecycle.Lifecycle$State)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
CLINIT edge: $r5 = <androidx.lifecycle.Lifecycling: androidx.lifecycle.Lifecycling INSTANCE> in <androidx.lifecycle.Lifecycling: androidx.lifecycle.LifecycleEventObserver lifecycleEventObserver(java.lang.Object)> ==> <androidx.lifecycle.Lifecycling: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r7) in <androidx.lifecycle.Lifecycling: androidx.lifecycle.LifecycleEventObserver lifecycleEventObserver(java.lang.Object)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "object") in <androidx.lifecycle.Lifecycling: androidx.lifecycle.LifecycleEventObserver lifecycleEventObserver(java.lang.Object)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke $r14.<androidx.lifecycle.ReflectiveGenericLifecycleObserver: void <init>(java.lang.Object)>($r0) in <androidx.lifecycle.Lifecycling: androidx.lifecycle.LifecycleEventObserver lifecycleEventObserver(java.lang.Object)> ==> <androidx.lifecycle.ReflectiveGenericLifecycleObserver: void <init>(java.lang.Object)>
CLINIT edge: $r1 = <androidx.lifecycle.ClassesInfoCache: androidx.lifecycle.ClassesInfoCache sInstance> in <androidx.lifecycle.ReflectiveGenericLifecycleObserver: void <init>(java.lang.Object)> ==> <androidx.lifecycle.ClassesInfoCache: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<androidx.lifecycle.ClassesInfoCache: void <init>()>() in <androidx.lifecycle.ClassesInfoCache: void <clinit>()> ==> <androidx.lifecycle.ClassesInfoCache: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.lifecycle.ClassesInfoCache: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r1.<androidx.lifecycle.ClassesInfoCache: androidx.lifecycle.ClassesInfoCache$CallbackInfo getInfo(java.lang.Class)>($r3) in <androidx.lifecycle.ReflectiveGenericLifecycleObserver: void <init>(java.lang.Object)> ==> <androidx.lifecycle.ClassesInfoCache: androidx.lifecycle.ClassesInfoCache$CallbackInfo getInfo(java.lang.Class)>
SPECIAL edge: $r4 = specialinvoke r0.<androidx.lifecycle.ClassesInfoCache: androidx.lifecycle.ClassesInfoCache$CallbackInfo createInfo(java.lang.Class,java.lang.reflect.Method[])>($r1, null) in <androidx.lifecycle.ClassesInfoCache: androidx.lifecycle.ClassesInfoCache$CallbackInfo getInfo(java.lang.Class)> ==> <androidx.lifecycle.ClassesInfoCache: androidx.lifecycle.ClassesInfoCache$CallbackInfo createInfo(java.lang.Class,java.lang.reflect.Method[])>
CLINIT edge: $r19 = <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_ANY> in <androidx.lifecycle.ClassesInfoCache: androidx.lifecycle.ClassesInfoCache$CallbackInfo createInfo(java.lang.Class,java.lang.reflect.Method[])> ==> <androidx.lifecycle.Lifecycle$Event: void <clinit>()>
STATIC edge: $r20 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0) in <androidx.lifecycle.ClassesInfoCache: androidx.lifecycle.ClassesInfoCache$CallbackInfo createInfo(java.lang.Class,java.lang.reflect.Method[])> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
CLINIT edge: $r20 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0) in <androidx.lifecycle.ClassesInfoCache: androidx.lifecycle.ClassesInfoCache$CallbackInfo createInfo(java.lang.Class,java.lang.reflect.Method[])> ==> <java.lang.Boolean: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: java.lang.Boolean valueOf(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r12.<androidx.lifecycle.ClassesInfoCache$MethodReference: void <init>(int,java.lang.reflect.Method)>($b3, $r14) in <androidx.lifecycle.ClassesInfoCache: androidx.lifecycle.ClassesInfoCache$CallbackInfo createInfo(java.lang.Class,java.lang.reflect.Method[])> ==> <androidx.lifecycle.ClassesInfoCache$MethodReference: void <init>(int,java.lang.reflect.Method)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.lifecycle.ClassesInfoCache$MethodReference: void <init>(int,java.lang.reflect.Method)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r17) in <androidx.lifecycle.ClassesInfoCache: androidx.lifecycle.ClassesInfoCache$CallbackInfo createInfo(java.lang.Class,java.lang.reflect.Method[])> ==> <java.lang.Class: boolean isAssignableFrom(java.lang.Class)>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r17) in <androidx.lifecycle.ClassesInfoCache: androidx.lifecycle.ClassesInfoCache$CallbackInfo createInfo(java.lang.Class,java.lang.reflect.Method[])> ==> <java.lang.Class: boolean isAssignableFrom(java.lang.Class)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isAssignableFrom(java.lang.Class)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r5.<androidx.lifecycle.ClassesInfoCache$CallbackInfo: void <init>(java.util.Map)>($r4) in <androidx.lifecycle.ClassesInfoCache: androidx.lifecycle.ClassesInfoCache$CallbackInfo createInfo(java.lang.Class,java.lang.reflect.Method[])> ==> <androidx.lifecycle.ClassesInfoCache$CallbackInfo: void <init>(java.util.Map)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.lifecycle.ClassesInfoCache$CallbackInfo: void <init>(java.util.Map)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r5 = virtualinvoke r0.<androidx.lifecycle.ClassesInfoCache: androidx.lifecycle.ClassesInfoCache$CallbackInfo getInfo(java.lang.Class)>($r3) in <androidx.lifecycle.ClassesInfoCache: androidx.lifecycle.ClassesInfoCache$CallbackInfo createInfo(java.lang.Class,java.lang.reflect.Method[])> ==> <androidx.lifecycle.ClassesInfoCache: androidx.lifecycle.ClassesInfoCache$CallbackInfo getInfo(java.lang.Class)>
VIRTUAL edge: $r5 = virtualinvoke r0.<androidx.lifecycle.ClassesInfoCache: androidx.lifecycle.ClassesInfoCache$CallbackInfo getInfo(java.lang.Class)>($r3) in <androidx.lifecycle.ClassesInfoCache: androidx.lifecycle.ClassesInfoCache$CallbackInfo createInfo(java.lang.Class,java.lang.reflect.Method[])> ==> <androidx.lifecycle.ClassesInfoCache: androidx.lifecycle.ClassesInfoCache$CallbackInfo getInfo(java.lang.Class)>
SPECIAL edge: specialinvoke r0.<androidx.lifecycle.ClassesInfoCache: void verifyAndPutHandler(java.util.Map,androidx.lifecycle.ClassesInfoCache$MethodReference,androidx.lifecycle.Lifecycle$Event,java.lang.Class)>($r4, $r12, $r13, $r1) in <androidx.lifecycle.ClassesInfoCache: androidx.lifecycle.ClassesInfoCache$CallbackInfo createInfo(java.lang.Class,java.lang.reflect.Method[])> ==> <androidx.lifecycle.ClassesInfoCache: void verifyAndPutHandler(java.util.Map,androidx.lifecycle.ClassesInfoCache$MethodReference,androidx.lifecycle.Lifecycle$Event,java.lang.Class)>
SPECIAL edge: $r2 = specialinvoke r0.<androidx.lifecycle.ClassesInfoCache: java.lang.reflect.Method[] getDeclaredMethods(java.lang.Class)>($r1) in <androidx.lifecycle.ClassesInfoCache: androidx.lifecycle.ClassesInfoCache$CallbackInfo createInfo(java.lang.Class,java.lang.reflect.Method[])> ==> <androidx.lifecycle.ClassesInfoCache: java.lang.reflect.Method[] getDeclaredMethods(java.lang.Class)>
VIRTUAL edge: $r3 = virtualinvoke $r1.<java.lang.Class: java.lang.Class getSuperclass()>() in <androidx.lifecycle.ClassesInfoCache: androidx.lifecycle.ClassesInfoCache$CallbackInfo createInfo(java.lang.Class,java.lang.reflect.Method[])> ==> <java.lang.Class: java.lang.Class getSuperclass()>
VIRTUAL edge: $r7 = virtualinvoke $r1.<java.lang.Class: java.lang.Class[] getInterfaces()>() in <androidx.lifecycle.ClassesInfoCache: androidx.lifecycle.ClassesInfoCache$CallbackInfo createInfo(java.lang.Class,java.lang.reflect.Method[])> ==> <java.lang.Class: java.lang.Class[] getInterfaces()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Class[] getInterfaces()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Class getSuperclass()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>() in <androidx.lifecycle.ClassesInfoCache: java.lang.reflect.Method[] getDeclaredMethods(java.lang.Class)> ==> <java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>() in <androidx.lifecycle.ClassesInfoCache: void verifyAndPutHandler(java.util.Map,androidx.lifecycle.ClassesInfoCache$MethodReference,androidx.lifecycle.Lifecycle$Event,java.lang.Class)> ==> <java.lang.Class: java.lang.String getName()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.lifecycle.ReflectiveGenericLifecycleObserver: void <init>(java.lang.Object)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r13.<androidx.lifecycle.CompositeGeneratedAdaptersObserver: void <init>(androidx.lifecycle.GeneratedAdapter[])>($r12) in <androidx.lifecycle.Lifecycling: androidx.lifecycle.LifecycleEventObserver lifecycleEventObserver(java.lang.Object)> ==> <androidx.lifecycle.CompositeGeneratedAdaptersObserver: void <init>(androidx.lifecycle.GeneratedAdapter[])>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "generatedAdapters") in <androidx.lifecycle.CompositeGeneratedAdaptersObserver: void <init>(androidx.lifecycle.GeneratedAdapter[])> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.lifecycle.CompositeGeneratedAdaptersObserver: void <init>(androidx.lifecycle.GeneratedAdapter[])> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r11.<androidx.lifecycle.SingleGeneratedAdapterObserver: void <init>(androidx.lifecycle.GeneratedAdapter)>($r10) in <androidx.lifecycle.Lifecycling: androidx.lifecycle.LifecycleEventObserver lifecycleEventObserver(java.lang.Object)> ==> <androidx.lifecycle.SingleGeneratedAdapterObserver: void <init>(androidx.lifecycle.GeneratedAdapter)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "generatedAdapter") in <androidx.lifecycle.SingleGeneratedAdapterObserver: void <init>(androidx.lifecycle.GeneratedAdapter)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.lifecycle.SingleGeneratedAdapterObserver: void <init>(androidx.lifecycle.GeneratedAdapter)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: $i0 = specialinvoke $r5.<androidx.lifecycle.Lifecycling: int getObserverConstructorType(java.lang.Class)>($r4) in <androidx.lifecycle.Lifecycling: androidx.lifecycle.LifecycleEventObserver lifecycleEventObserver(java.lang.Object)> ==> <androidx.lifecycle.Lifecycling: int getObserverConstructorType(java.lang.Class)>
SPECIAL edge: $r10 = specialinvoke $r5.<androidx.lifecycle.Lifecycling: androidx.lifecycle.GeneratedAdapter createGeneratedAdapter(java.lang.reflect.Constructor,java.lang.Object)>($r9, $r0) in <androidx.lifecycle.Lifecycling: androidx.lifecycle.LifecycleEventObserver lifecycleEventObserver(java.lang.Object)> ==> <androidx.lifecycle.Lifecycling: androidx.lifecycle.GeneratedAdapter createGeneratedAdapter(java.lang.reflect.Constructor,java.lang.Object)>
SPECIAL edge: $r10 = specialinvoke $r5.<androidx.lifecycle.Lifecycling: androidx.lifecycle.GeneratedAdapter createGeneratedAdapter(java.lang.reflect.Constructor,java.lang.Object)>($r9, $r0) in <androidx.lifecycle.Lifecycling: androidx.lifecycle.LifecycleEventObserver lifecycleEventObserver(java.lang.Object)> ==> <androidx.lifecycle.Lifecycling: androidx.lifecycle.GeneratedAdapter createGeneratedAdapter(java.lang.reflect.Constructor,java.lang.Object)>
CLINIT edge: $r1 = <androidx.lifecycle.Lifecycling: java.util.Map callbackCache> in <androidx.lifecycle.Lifecycling: int getObserverConstructorType(java.lang.Class)> ==> <androidx.lifecycle.Lifecycling: void <clinit>()>
STATIC edge: $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <androidx.lifecycle.Lifecycling: int getObserverConstructorType(java.lang.Class)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
CLINIT edge: $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <androidx.lifecycle.Lifecycling: int getObserverConstructorType(java.lang.Class)> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r1, "{\n            constructo\u2026tance(`object`)\n        }") in <androidx.lifecycle.Lifecycling: androidx.lifecycle.GeneratedAdapter createGeneratedAdapter(java.lang.reflect.Constructor,java.lang.Object)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r5) in <androidx.lifecycle.Lifecycling: androidx.lifecycle.GeneratedAdapter createGeneratedAdapter(java.lang.reflect.Constructor,java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.Throwable)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.RuntimeException: void <init>(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.RuntimeException: void <init>(java.lang.Throwable)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: $i0 = specialinvoke r0.<androidx.lifecycle.Lifecycling: int resolveObserverCallbackType(java.lang.Class)>($r2) in <androidx.lifecycle.Lifecycling: int getObserverConstructorType(java.lang.Class)> ==> <androidx.lifecycle.Lifecycling: int resolveObserverCallbackType(java.lang.Class)>
CLINIT edge: $r4 = <androidx.lifecycle.Lifecycling: java.util.Map classToAdapters> in <androidx.lifecycle.Lifecycling: int resolveObserverCallbackType(java.lang.Class)> ==> <androidx.lifecycle.Lifecycling: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r9) in <androidx.lifecycle.Lifecycling: int resolveObserverCallbackType(java.lang.Class)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r7, "intrface") in <androidx.lifecycle.Lifecycling: int resolveObserverCallbackType(java.lang.Class)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r7, "superclass") in <androidx.lifecycle.Lifecycling: int resolveObserverCallbackType(java.lang.Class)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
STATIC edge: $r5 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object)>($r3) in <androidx.lifecycle.Lifecycling: int resolveObserverCallbackType(java.lang.Class)> ==> <kotlin.collections.CollectionsKt__CollectionsJVMKt: java.util.List listOf(java.lang.Object)>
CLINIT edge: $r4 = <androidx.lifecycle.Lifecycling: java.util.Map classToAdapters> in <androidx.lifecycle.Lifecycling: int resolveObserverCallbackType(java.lang.Class)> ==> <androidx.lifecycle.Lifecycling: void <clinit>()>
CLINIT edge: $r4 = <androidx.lifecycle.Lifecycling: java.util.Map classToAdapters> in <androidx.lifecycle.Lifecycling: int resolveObserverCallbackType(java.lang.Class)> ==> <androidx.lifecycle.Lifecycling: void <clinit>()>
CLINIT edge: $r6 = <androidx.lifecycle.ClassesInfoCache: androidx.lifecycle.ClassesInfoCache sInstance> in <androidx.lifecycle.Lifecycling: int resolveObserverCallbackType(java.lang.Class)> ==> <androidx.lifecycle.ClassesInfoCache: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "singletonList(element)") in <kotlin.collections.CollectionsKt__CollectionsJVMKt: java.util.List listOf(java.lang.Object)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r6.<androidx.lifecycle.ClassesInfoCache: boolean hasLifecycleMethods(java.lang.Class)>($r1) in <androidx.lifecycle.Lifecycling: int resolveObserverCallbackType(java.lang.Class)> ==> <androidx.lifecycle.ClassesInfoCache: boolean hasLifecycleMethods(java.lang.Class)>
CLINIT edge: $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0) in <androidx.lifecycle.ClassesInfoCache: boolean hasLifecycleMethods(java.lang.Class)> ==> <java.lang.Boolean: void <clinit>()>
STATIC edge: $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0) in <androidx.lifecycle.ClassesInfoCache: boolean hasLifecycleMethods(java.lang.Class)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
SPECIAL edge: $r5 = specialinvoke r0.<androidx.lifecycle.ClassesInfoCache: java.lang.reflect.Method[] getDeclaredMethods(java.lang.Class)>($r1) in <androidx.lifecycle.ClassesInfoCache: boolean hasLifecycleMethods(java.lang.Class)> ==> <androidx.lifecycle.ClassesInfoCache: java.lang.reflect.Method[] getDeclaredMethods(java.lang.Class)>
SPECIAL edge: specialinvoke r0.<androidx.lifecycle.ClassesInfoCache: androidx.lifecycle.ClassesInfoCache$CallbackInfo createInfo(java.lang.Class,java.lang.reflect.Method[])>($r1, $r5) in <androidx.lifecycle.ClassesInfoCache: boolean hasLifecycleMethods(java.lang.Class)> ==> <androidx.lifecycle.ClassesInfoCache: androidx.lifecycle.ClassesInfoCache$CallbackInfo createInfo(java.lang.Class,java.lang.reflect.Method[])>
SPECIAL edge: $r3 = specialinvoke r0.<androidx.lifecycle.Lifecycling: java.lang.reflect.Constructor generatedConstructor(java.lang.Class)>($r1) in <androidx.lifecycle.Lifecycling: int resolveObserverCallbackType(java.lang.Class)> ==> <androidx.lifecycle.Lifecycling: java.lang.reflect.Constructor generatedConstructor(java.lang.Class)>
SPECIAL edge: $z0 = specialinvoke r0.<androidx.lifecycle.Lifecycling: boolean isLifecycleParent(java.lang.Class)>($r7) in <androidx.lifecycle.Lifecycling: int resolveObserverCallbackType(java.lang.Class)> ==> <androidx.lifecycle.Lifecycling: boolean isLifecycleParent(java.lang.Class)>
SPECIAL edge: $i0 = specialinvoke r0.<androidx.lifecycle.Lifecycling: int getObserverConstructorType(java.lang.Class)>($r7) in <androidx.lifecycle.Lifecycling: int resolveObserverCallbackType(java.lang.Class)> ==> <androidx.lifecycle.Lifecycling: int getObserverConstructorType(java.lang.Class)>
SPECIAL edge: $i2 = specialinvoke r0.<androidx.lifecycle.Lifecycling: int getObserverConstructorType(java.lang.Class)>($r7) in <androidx.lifecycle.Lifecycling: int resolveObserverCallbackType(java.lang.Class)> ==> <androidx.lifecycle.Lifecycling: int getObserverConstructorType(java.lang.Class)>
CLINIT edge: $r5 = staticinvoke <androidx.lifecycle.Lifecycling: java.lang.String getAdapterName(java.lang.String)>($r5) in <androidx.lifecycle.Lifecycling: java.lang.reflect.Constructor generatedConstructor(java.lang.Class)> ==> <androidx.lifecycle.Lifecycling: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r9, "null cannot be cast to non-null type java.lang.Class<out androidx.lifecycle.GeneratedAdapter>") in <androidx.lifecycle.Lifecycling: java.lang.reflect.Constructor generatedConstructor(java.lang.Class)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>
STATIC edge: $r9 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r4) in <androidx.lifecycle.Lifecycling: java.lang.reflect.Constructor generatedConstructor(java.lang.Class)> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
STATIC edge: $r5 = staticinvoke <androidx.lifecycle.Lifecycling: java.lang.String getAdapterName(java.lang.String)>($r5) in <androidx.lifecycle.Lifecycling: java.lang.reflect.Constructor generatedConstructor(java.lang.Class)> ==> <androidx.lifecycle.Lifecycling: java.lang.String getAdapterName(java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r5, "if (fullPackage.isEmpty(\u2026g(fullPackage.length + 1)") in <androidx.lifecycle.Lifecycling: java.lang.reflect.Constructor generatedConstructor(java.lang.Class)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r6, "fullPackage") in <androidx.lifecycle.Lifecycling: java.lang.reflect.Constructor generatedConstructor(java.lang.Class)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "className") in <androidx.lifecycle.Lifecycling: java.lang.String getAdapterName(java.lang.String)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: $r0 = staticinvoke <kotlin.text.StringsKt: java.lang.String replace$default(java.lang.String,java.lang.String,java.lang.String,boolean,int,java.lang.Object)>($r0, ".", "_", 0, 4, null) in <androidx.lifecycle.Lifecycling: java.lang.String getAdapterName(java.lang.String)> ==> <kotlin.text.StringsKt__StringsJVMKt: java.lang.String replace$default(java.lang.String,java.lang.String,java.lang.String,boolean,int,java.lang.Object)>
STATIC edge: $r3 = staticinvoke <kotlin.text.StringsKt: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String,boolean)>($r3, $r0, $r1, $z0) in <kotlin.text.StringsKt__StringsJVMKt: java.lang.String replace$default(java.lang.String,java.lang.String,java.lang.String,boolean,int,java.lang.Object)> ==> <kotlin.text.StringsKt__StringsJVMKt: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String,boolean)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>") in <kotlin.text.StringsKt__StringsJVMKt: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String,boolean)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r1, "stringBuilder.append(this, i, length).toString()") in <kotlin.text.StringsKt__StringsJVMKt: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String,boolean)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
STATIC edge: $i4 = staticinvoke <kotlin.text.StringsKt: int indexOf(java.lang.CharSequence,java.lang.String,int,boolean)>($r3, $r2, $i2, $z0) in <kotlin.text.StringsKt__StringsJVMKt: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String,boolean)> ==> <kotlin.text.StringsKt__StringsKt: int indexOf(java.lang.CharSequence,java.lang.String,int,boolean)>
STATIC edge: $i3 = staticinvoke <kotlin.ranges.RangesKt: int coerceAtLeast(int,int)>($i1, 1) in <kotlin.text.StringsKt__StringsJVMKt: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String,boolean)> ==> <kotlin.ranges.RangesKt___RangesKt: int coerceAtLeast(int,int)>
STATIC edge: $i1 = staticinvoke <kotlin.text.StringsKt: int indexOf(java.lang.CharSequence,java.lang.String,int,boolean)>($r3, $r2, 0, $z0) in <kotlin.text.StringsKt__StringsJVMKt: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String,boolean)> ==> <kotlin.text.StringsKt__StringsKt: int indexOf(java.lang.CharSequence,java.lang.String,int,boolean)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "oldValue") in <kotlin.text.StringsKt__StringsJVMKt: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String,boolean)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke $r6.<java.lang.OutOfMemoryError: void <init>()>() in <kotlin.text.StringsKt__StringsJVMKt: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String,boolean)> ==> <java.lang.OutOfMemoryError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.OutOfMemoryError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i5 = virtualinvoke $r0.<java.lang.String: int length()>() in <kotlin.text.StringsKt__StringsJVMKt: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String,boolean)> ==> <java.lang.String: int length()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r2) in <androidx.lifecycle.Lifecycling: boolean isLifecycleParent(java.lang.Class)> ==> <java.lang.Class: boolean isAssignableFrom(java.lang.Class)>
SPECIAL edge: specialinvoke $r13.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r12) in <androidx.lifecycle.Lifecycling: java.lang.reflect.Constructor generatedConstructor(java.lang.Class)> ==> <java.lang.RuntimeException: void <init>(java.lang.Throwable)>
INTERFACE edge: $i0 = interfaceinvoke $r7.<java.lang.CharSequence: int length()>() in <androidx.lifecycle.Lifecycling: java.lang.reflect.Constructor generatedConstructor(java.lang.Class)> ==> <java.lang.String: int length()>
VIRTUAL edge: $r4 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int)>($i0) in <androidx.lifecycle.Lifecycling: java.lang.reflect.Constructor generatedConstructor(java.lang.Class)> ==> <java.lang.String: java.lang.String substring(int)>
VIRTUAL edge: $i4 = virtualinvoke $r1.<java.lang.String: int length()>() in <kotlin.text.StringsKt__StringsJVMKt: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String,boolean)> ==> <java.lang.String: int length()>
SPECIAL edge: specialinvoke $r1.<androidx.lifecycle.DefaultLifecycleObserverAdapter: void <init>(androidx.lifecycle.DefaultLifecycleObserver,androidx.lifecycle.LifecycleEventObserver)>($r2, $r3) in <androidx.lifecycle.Lifecycling: androidx.lifecycle.LifecycleEventObserver lifecycleEventObserver(java.lang.Object)> ==> <androidx.lifecycle.DefaultLifecycleObserverAdapter: void <init>(androidx.lifecycle.DefaultLifecycleObserver,androidx.lifecycle.LifecycleEventObserver)>
SPECIAL edge: specialinvoke $r1.<androidx.lifecycle.DefaultLifecycleObserverAdapter: void <init>(androidx.lifecycle.DefaultLifecycleObserver,androidx.lifecycle.LifecycleEventObserver)>($r2, null) in <androidx.lifecycle.Lifecycling: androidx.lifecycle.LifecycleEventObserver lifecycleEventObserver(java.lang.Object)> ==> <androidx.lifecycle.DefaultLifecycleObserverAdapter: void <init>(androidx.lifecycle.DefaultLifecycleObserver,androidx.lifecycle.LifecycleEventObserver)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "defaultLifecycleObserver") in <androidx.lifecycle.DefaultLifecycleObserverAdapter: void <init>(androidx.lifecycle.DefaultLifecycleObserver,androidx.lifecycle.LifecycleEventObserver)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.lifecycle.DefaultLifecycleObserverAdapter: void <init>(androidx.lifecycle.DefaultLifecycleObserver,androidx.lifecycle.LifecycleEventObserver)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<androidx.lifecycle.Lifecycling: void <init>()>() in <androidx.lifecycle.Lifecycling: void <clinit>()> ==> <androidx.lifecycle.Lifecycling: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.lifecycle.Lifecycling: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.lifecycle.LifecycleRegistry$ObserverWithState: void <init>(androidx.lifecycle.LifecycleObserver,androidx.lifecycle.Lifecycle$State)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke $r3.<androidx.lifecycle.Lifecycle$State: int compareTo(java.lang.Enum)>($r10) in <androidx.lifecycle.LifecycleRegistry: void addObserver(androidx.lifecycle.LifecycleObserver)> ==> <java.lang.Enum: int compareTo(java.lang.Enum)>
VIRTUAL edge: $r4 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>() in <androidx.lifecycle.Lifecycling: androidx.lifecycle.LifecycleEventObserver lifecycleEventObserver(java.lang.Object)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>() in <androidx.lifecycle.ReflectiveGenericLifecycleObserver: void <init>(java.lang.Object)> ==> <java.lang.Object: java.lang.Class getClass()>
SPECIAL edge: specialinvoke r0.<androidx.lifecycle.LifecycleRegistry: void enforceMainThreadIfNeeded(java.lang.String)>("addObserver") in <androidx.lifecycle.LifecycleRegistry: void addObserver(androidx.lifecycle.LifecycleObserver)> ==> <androidx.lifecycle.LifecycleRegistry: void enforceMainThreadIfNeeded(java.lang.String)>
SPECIAL edge: $r2 = specialinvoke r0.<androidx.lifecycle.LifecycleRegistry: androidx.lifecycle.Lifecycle$State calculateTargetState(androidx.lifecycle.LifecycleObserver)>($r1) in <androidx.lifecycle.LifecycleRegistry: void addObserver(androidx.lifecycle.LifecycleObserver)> ==> <androidx.lifecycle.LifecycleRegistry: androidx.lifecycle.Lifecycle$State calculateTargetState(androidx.lifecycle.LifecycleObserver)>
SPECIAL edge: specialinvoke r0.<androidx.lifecycle.LifecycleRegistry: void pushParentState(androidx.lifecycle.Lifecycle$State)>($r2) in <androidx.lifecycle.LifecycleRegistry: void addObserver(androidx.lifecycle.LifecycleObserver)> ==> <androidx.lifecycle.LifecycleRegistry: void pushParentState(androidx.lifecycle.Lifecycle$State)>
SPECIAL edge: specialinvoke r0.<androidx.lifecycle.LifecycleRegistry: void popParentState()>() in <androidx.lifecycle.LifecycleRegistry: void addObserver(androidx.lifecycle.LifecycleObserver)> ==> <androidx.lifecycle.LifecycleRegistry: void popParentState()>
SPECIAL edge: specialinvoke r0.<androidx.lifecycle.LifecycleRegistry: void sync()>() in <androidx.lifecycle.LifecycleRegistry: void addObserver(androidx.lifecycle.LifecycleObserver)> ==> <androidx.lifecycle.LifecycleRegistry: void sync()>
CLINIT edge: $r2 = staticinvoke <androidx.arch.core.executor.ArchTaskExecutor: androidx.arch.core.executor.ArchTaskExecutor getInstance()>() in <androidx.lifecycle.LifecycleRegistry: void enforceMainThreadIfNeeded(java.lang.String)> ==> <androidx.arch.core.executor.ArchTaskExecutor: void <clinit>()>
STATIC edge: $r2 = staticinvoke <androidx.arch.core.executor.ArchTaskExecutor: androidx.arch.core.executor.ArchTaskExecutor getInstance()>() in <androidx.lifecycle.LifecycleRegistry: void enforceMainThreadIfNeeded(java.lang.String)> ==> <androidx.arch.core.executor.ArchTaskExecutor: androidx.arch.core.executor.ArchTaskExecutor getInstance()>
CLINIT edge: $r11 = <androidx.lifecycle.LifecycleRegistry: androidx.lifecycle.LifecycleRegistry$Companion Companion> in <androidx.lifecycle.LifecycleRegistry: androidx.lifecycle.Lifecycle$State calculateTargetState(androidx.lifecycle.LifecycleObserver)> ==> <androidx.lifecycle.LifecycleRegistry: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r6) in <androidx.lifecycle.LifecycleRegistry: void sync()> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>
CLINIT edge: $r0 = <androidx.arch.core.executor.ArchTaskExecutor: androidx.arch.core.executor.ArchTaskExecutor sInstance> in <androidx.arch.core.executor.ArchTaskExecutor: androidx.arch.core.executor.ArchTaskExecutor getInstance()> ==> <androidx.arch.core.executor.ArchTaskExecutor: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<androidx.arch.core.executor.ArchTaskExecutor: void <init>()>() in <androidx.arch.core.executor.ArchTaskExecutor: androidx.arch.core.executor.ArchTaskExecutor getInstance()> ==> <androidx.arch.core.executor.ArchTaskExecutor: void <init>()>
SPECIAL edge: specialinvoke $r1.<androidx.arch.core.executor.DefaultTaskExecutor: void <init>()>() in <androidx.arch.core.executor.ArchTaskExecutor: void <init>()> ==> <androidx.arch.core.executor.DefaultTaskExecutor: void <init>()>
SPECIAL edge: specialinvoke $r3.<androidx.arch.core.executor.DefaultTaskExecutor$1: void <init>(androidx.arch.core.executor.DefaultTaskExecutor)>(r0) in <androidx.arch.core.executor.DefaultTaskExecutor: void <init>()> ==> <androidx.arch.core.executor.DefaultTaskExecutor$1: void <init>(androidx.arch.core.executor.DefaultTaskExecutor)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.arch.core.executor.DefaultTaskExecutor$1: void <init>(androidx.arch.core.executor.DefaultTaskExecutor)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r2.<java.lang.Object: void <init>()>() in <androidx.arch.core.executor.DefaultTaskExecutor: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<androidx.arch.core.executor.TaskExecutor: void <init>()>() in <androidx.arch.core.executor.DefaultTaskExecutor: void <init>()> ==> <androidx.arch.core.executor.TaskExecutor: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.arch.core.executor.TaskExecutor: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<androidx.arch.core.executor.TaskExecutor: void <init>()>() in <androidx.arch.core.executor.ArchTaskExecutor: void <init>()> ==> <androidx.arch.core.executor.TaskExecutor: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<androidx.arch.core.executor.ArchTaskExecutor: boolean isMainThread()>() in <androidx.lifecycle.LifecycleRegistry: void enforceMainThreadIfNeeded(java.lang.String)> ==> <androidx.arch.core.executor.ArchTaskExecutor: boolean isMainThread()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<androidx.arch.core.executor.TaskExecutor: boolean isMainThread()>() in <androidx.arch.core.executor.ArchTaskExecutor: boolean isMainThread()> ==> <androidx.arch.core.executor.DefaultTaskExecutor: boolean isMainThread()>
SPECIAL edge: specialinvoke $r1.<androidx.arch.core.executor.ArchTaskExecutor$$ExternalSyntheticLambda1: void <init>()>() in <androidx.arch.core.executor.ArchTaskExecutor: void <clinit>()> ==> <androidx.arch.core.executor.ArchTaskExecutor$$ExternalSyntheticLambda1: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.arch.core.executor.ArchTaskExecutor$$ExternalSyntheticLambda1: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<androidx.arch.core.executor.ArchTaskExecutor$$ExternalSyntheticLambda0: void <init>()>() in <androidx.arch.core.executor.ArchTaskExecutor: void <clinit>()> ==> <androidx.arch.core.executor.ArchTaskExecutor$$ExternalSyntheticLambda0: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.arch.core.executor.ArchTaskExecutor$$ExternalSyntheticLambda0: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: $z0 = specialinvoke r0.<androidx.lifecycle.LifecycleRegistry: boolean isSynced()>() in <androidx.lifecycle.LifecycleRegistry: void sync()> ==> <androidx.lifecycle.LifecycleRegistry: boolean isSynced()>
SPECIAL edge: specialinvoke r0.<androidx.lifecycle.LifecycleRegistry: void backwardPass(androidx.lifecycle.LifecycleOwner)>($r3) in <androidx.lifecycle.LifecycleRegistry: void sync()> ==> <androidx.lifecycle.LifecycleRegistry: void backwardPass(androidx.lifecycle.LifecycleOwner)>
SPECIAL edge: specialinvoke r0.<androidx.lifecycle.LifecycleRegistry: void forwardPass(androidx.lifecycle.LifecycleOwner)>($r3) in <androidx.lifecycle.LifecycleRegistry: void sync()> ==> <androidx.lifecycle.LifecycleRegistry: void forwardPass(androidx.lifecycle.LifecycleOwner)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r2) in <androidx.lifecycle.LifecycleRegistry: boolean isSynced()> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r2) in <androidx.lifecycle.LifecycleRegistry: boolean isSynced()> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>
CLINIT edge: $r11 = <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event$Companion Companion> in <androidx.lifecycle.LifecycleRegistry: void backwardPass(androidx.lifecycle.LifecycleOwner)> ==> <androidx.lifecycle.Lifecycle$Event: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r5, "next()") in <androidx.lifecycle.LifecycleRegistry: void backwardPass(androidx.lifecycle.LifecycleOwner)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
CLINIT edge: $r12 = <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event$Companion Companion> in <androidx.lifecycle.LifecycleRegistry: void forwardPass(androidx.lifecycle.LifecycleOwner)> ==> <androidx.lifecycle.Lifecycle$Event: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r3, "observerMap.iteratorWithAdditions()") in <androidx.lifecycle.LifecycleRegistry: void forwardPass(androidx.lifecycle.LifecycleOwner)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<androidx.lifecycle.Lifecycle$Event$Companion: androidx.lifecycle.Lifecycle$Event upFrom(androidx.lifecycle.Lifecycle$State)>($r9) in <androidx.lifecycle.LifecycleRegistry: void forwardPass(androidx.lifecycle.LifecycleOwner)> ==> <androidx.lifecycle.Lifecycle$Event$Companion: androidx.lifecycle.Lifecycle$Event upFrom(androidx.lifecycle.Lifecycle$State)>
SPECIAL edge: specialinvoke r0.<androidx.lifecycle.LifecycleRegistry: void pushParentState(androidx.lifecycle.Lifecycle$State)>($r9) in <androidx.lifecycle.LifecycleRegistry: void forwardPass(androidx.lifecycle.LifecycleOwner)> ==> <androidx.lifecycle.LifecycleRegistry: void pushParentState(androidx.lifecycle.Lifecycle$State)>
SPECIAL edge: specialinvoke r0.<androidx.lifecycle.LifecycleRegistry: void popParentState()>() in <androidx.lifecycle.LifecycleRegistry: void forwardPass(androidx.lifecycle.LifecycleOwner)> ==> <androidx.lifecycle.LifecycleRegistry: void popParentState()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<androidx.arch.core.internal.FastSafeIterableMap: androidx.arch.core.internal.SafeIterableMap$IteratorWithAdditions iteratorWithAdditions()>() in <androidx.lifecycle.LifecycleRegistry: void forwardPass(androidx.lifecycle.LifecycleOwner)> ==> <androidx.arch.core.internal.SafeIterableMap: androidx.arch.core.internal.SafeIterableMap$IteratorWithAdditions iteratorWithAdditions()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<androidx.arch.core.internal.FastSafeIterableMap: boolean contains(java.lang.Object)>($r7) in <androidx.lifecycle.LifecycleRegistry: void forwardPass(androidx.lifecycle.LifecycleOwner)> ==> <androidx.arch.core.internal.FastSafeIterableMap: boolean contains(java.lang.Object)>
CLINIT edge: $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0) in <androidx.arch.core.internal.SafeIterableMap: androidx.arch.core.internal.SafeIterableMap$IteratorWithAdditions iteratorWithAdditions()> ==> <java.lang.Boolean: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0) in <androidx.arch.core.internal.SafeIterableMap: androidx.arch.core.internal.SafeIterableMap$IteratorWithAdditions iteratorWithAdditions()> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
SPECIAL edge: specialinvoke $r1.<androidx.arch.core.internal.SafeIterableMap$IteratorWithAdditions: void <init>(androidx.arch.core.internal.SafeIterableMap)>(r0) in <androidx.arch.core.internal.SafeIterableMap: androidx.arch.core.internal.SafeIterableMap$IteratorWithAdditions iteratorWithAdditions()> ==> <androidx.arch.core.internal.SafeIterableMap$IteratorWithAdditions: void <init>(androidx.arch.core.internal.SafeIterableMap)>
SPECIAL edge: specialinvoke r0.<androidx.arch.core.internal.SafeIterableMap$SupportRemove: void <init>()>() in <androidx.arch.core.internal.SafeIterableMap$IteratorWithAdditions: void <init>(androidx.arch.core.internal.SafeIterableMap)> ==> <androidx.arch.core.internal.SafeIterableMap$SupportRemove: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.arch.core.internal.SafeIterableMap$SupportRemove: void <init>()> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>() in <androidx.lifecycle.LifecycleRegistry: void forwardPass(androidx.lifecycle.LifecycleOwner)> ==> <androidx.arch.core.internal.SafeIterableMap$IteratorWithAdditions: boolean hasNext()>
INTERFACE edge: $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>() in <androidx.lifecycle.LifecycleRegistry: void forwardPass(androidx.lifecycle.LifecycleOwner)> ==> <androidx.arch.core.internal.SafeIterableMap$IteratorWithAdditions: java.util.Map$Entry next()>
VIRTUAL edge: $r12 = virtualinvoke $r11.<androidx.lifecycle.Lifecycle$Event$Companion: androidx.lifecycle.Lifecycle$Event downFrom(androidx.lifecycle.Lifecycle$State)>($r8) in <androidx.lifecycle.LifecycleRegistry: void backwardPass(androidx.lifecycle.LifecycleOwner)> ==> <androidx.lifecycle.Lifecycle$Event$Companion: androidx.lifecycle.Lifecycle$Event downFrom(androidx.lifecycle.Lifecycle$State)>
CLINIT edge: $r2 = <androidx.lifecycle.Lifecycle$Event$Companion$WhenMappings: int[] $EnumSwitchMapping$0> in <androidx.lifecycle.Lifecycle$Event$Companion: androidx.lifecycle.Lifecycle$Event downFrom(androidx.lifecycle.Lifecycle$State)> ==> <androidx.lifecycle.Lifecycle$Event$Companion$WhenMappings: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "state") in <androidx.lifecycle.Lifecycle$Event$Companion: androidx.lifecycle.Lifecycle$Event downFrom(androidx.lifecycle.Lifecycle$State)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
CLINIT edge: r3 = <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_DESTROY> in <androidx.lifecycle.Lifecycle$Event$Companion: androidx.lifecycle.Lifecycle$Event downFrom(androidx.lifecycle.Lifecycle$State)> ==> <androidx.lifecycle.Lifecycle$Event: void <clinit>()>
VIRTUAL edge: $r8 = virtualinvoke $r12.<androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$State getTargetState()>() in <androidx.lifecycle.LifecycleRegistry: void backwardPass(androidx.lifecycle.LifecycleOwner)> ==> <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$State getTargetState()>
VIRTUAL edge: $i0 = virtualinvoke $r8.<androidx.lifecycle.Lifecycle$State: int compareTo(java.lang.Enum)>($r10) in <androidx.lifecycle.LifecycleRegistry: void backwardPass(androidx.lifecycle.LifecycleOwner)> ==> <java.lang.Enum: int compareTo(java.lang.Enum)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<androidx.lifecycle.Lifecycle$State: int ordinal()>() in <androidx.lifecycle.Lifecycle$Event$Companion: androidx.lifecycle.Lifecycle$Event downFrom(androidx.lifecycle.Lifecycle$State)> ==> <java.lang.Enum: int ordinal()>
SPECIAL edge: specialinvoke r0.<androidx.lifecycle.LifecycleRegistry: void pushParentState(androidx.lifecycle.Lifecycle$State)>($r8) in <androidx.lifecycle.LifecycleRegistry: void backwardPass(androidx.lifecycle.LifecycleOwner)> ==> <androidx.lifecycle.LifecycleRegistry: void pushParentState(androidx.lifecycle.Lifecycle$State)>
SPECIAL edge: specialinvoke r0.<androidx.lifecycle.LifecycleRegistry: void popParentState()>() in <androidx.lifecycle.LifecycleRegistry: void backwardPass(androidx.lifecycle.LifecycleOwner)> ==> <androidx.lifecycle.LifecycleRegistry: void popParentState()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<androidx.arch.core.internal.FastSafeIterableMap: java.util.Iterator descendingIterator()>() in <androidx.lifecycle.LifecycleRegistry: void backwardPass(androidx.lifecycle.LifecycleOwner)> ==> <androidx.arch.core.internal.SafeIterableMap: java.util.Iterator descendingIterator()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<androidx.arch.core.internal.FastSafeIterableMap: boolean contains(java.lang.Object)>($r6) in <androidx.lifecycle.LifecycleRegistry: void backwardPass(androidx.lifecycle.LifecycleOwner)> ==> <androidx.arch.core.internal.FastSafeIterableMap: boolean contains(java.lang.Object)>
CLINIT edge: $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0) in <androidx.arch.core.internal.SafeIterableMap: java.util.Iterator descendingIterator()> ==> <java.lang.Boolean: void <clinit>()>
STATIC edge: $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0) in <androidx.arch.core.internal.SafeIterableMap: java.util.Iterator descendingIterator()> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
SPECIAL edge: specialinvoke $r1.<androidx.arch.core.internal.SafeIterableMap$DescendingIterator: void <init>(androidx.arch.core.internal.SafeIterableMap$Entry,androidx.arch.core.internal.SafeIterableMap$Entry)>($r3, $r4) in <androidx.arch.core.internal.SafeIterableMap: java.util.Iterator descendingIterator()> ==> <androidx.arch.core.internal.SafeIterableMap$DescendingIterator: void <init>(androidx.arch.core.internal.SafeIterableMap$Entry,androidx.arch.core.internal.SafeIterableMap$Entry)>
SPECIAL edge: specialinvoke r0.<androidx.arch.core.internal.SafeIterableMap$ListIterator: void <init>(androidx.arch.core.internal.SafeIterableMap$Entry,androidx.arch.core.internal.SafeIterableMap$Entry)>($r1, $r2) in <androidx.arch.core.internal.SafeIterableMap$DescendingIterator: void <init>(androidx.arch.core.internal.SafeIterableMap$Entry,androidx.arch.core.internal.SafeIterableMap$Entry)> ==> <androidx.arch.core.internal.SafeIterableMap$ListIterator: void <init>(androidx.arch.core.internal.SafeIterableMap$Entry,androidx.arch.core.internal.SafeIterableMap$Entry)>
SPECIAL edge: specialinvoke r0.<androidx.arch.core.internal.SafeIterableMap$SupportRemove: void <init>()>() in <androidx.arch.core.internal.SafeIterableMap$ListIterator: void <init>(androidx.arch.core.internal.SafeIterableMap$Entry,androidx.arch.core.internal.SafeIterableMap$Entry)> ==> <androidx.arch.core.internal.SafeIterableMap$SupportRemove: void <init>()>
INTERFACE edge: $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>() in <androidx.lifecycle.LifecycleRegistry: void backwardPass(androidx.lifecycle.LifecycleOwner)> ==> <androidx.arch.core.internal.SafeIterableMap$ListIterator: boolean hasNext()>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>() in <androidx.lifecycle.LifecycleRegistry: void backwardPass(androidx.lifecycle.LifecycleOwner)> ==> <androidx.arch.core.internal.SafeIterableMap$ListIterator: java.util.Map$Entry next()>
SPECIAL edge: $r1 = specialinvoke r0.<androidx.arch.core.internal.SafeIterableMap$ListIterator: androidx.arch.core.internal.SafeIterableMap$Entry nextNode()>() in <androidx.arch.core.internal.SafeIterableMap$ListIterator: java.util.Map$Entry next()> ==> <androidx.arch.core.internal.SafeIterableMap$ListIterator: androidx.arch.core.internal.SafeIterableMap$Entry nextNode()>
VIRTUAL edge: $r1 = virtualinvoke r0.<androidx.arch.core.internal.SafeIterableMap$ListIterator: androidx.arch.core.internal.SafeIterableMap$Entry forward(androidx.arch.core.internal.SafeIterableMap$Entry)>($r2) in <androidx.arch.core.internal.SafeIterableMap$ListIterator: androidx.arch.core.internal.SafeIterableMap$Entry nextNode()> ==> <androidx.arch.core.internal.SafeIterableMap$DescendingIterator: androidx.arch.core.internal.SafeIterableMap$Entry forward(androidx.arch.core.internal.SafeIterableMap$Entry)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<androidx.arch.core.internal.FastSafeIterableMap: int size()>() in <androidx.lifecycle.LifecycleRegistry: boolean isSynced()> ==> <androidx.arch.core.internal.SafeIterableMap: int size()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<androidx.arch.core.internal.FastSafeIterableMap: java.util.Map$Entry eldest()>() in <androidx.lifecycle.LifecycleRegistry: boolean isSynced()> ==> <androidx.arch.core.internal.SafeIterableMap: java.util.Map$Entry eldest()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<androidx.arch.core.internal.FastSafeIterableMap: java.util.Map$Entry newest()>() in <androidx.lifecycle.LifecycleRegistry: boolean isSynced()> ==> <androidx.arch.core.internal.SafeIterableMap: java.util.Map$Entry newest()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<androidx.arch.core.internal.FastSafeIterableMap: java.util.Map$Entry eldest()>() in <androidx.lifecycle.LifecycleRegistry: void sync()> ==> <androidx.arch.core.internal.SafeIterableMap: java.util.Map$Entry eldest()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<androidx.arch.core.internal.FastSafeIterableMap: java.util.Map$Entry newest()>() in <androidx.lifecycle.LifecycleRegistry: void sync()> ==> <androidx.arch.core.internal.SafeIterableMap: java.util.Map$Entry newest()>
VIRTUAL edge: $i0 = virtualinvoke $r4.<androidx.lifecycle.Lifecycle$State: int compareTo(java.lang.Enum)>($r9) in <androidx.lifecycle.LifecycleRegistry: void sync()> ==> <java.lang.Enum: int compareTo(java.lang.Enum)>
VIRTUAL edge: $r1 = virtualinvoke $r11.<androidx.lifecycle.LifecycleRegistry$Companion: androidx.lifecycle.Lifecycle$State min$lifecycle_runtime_release(androidx.lifecycle.Lifecycle$State,androidx.lifecycle.Lifecycle$State)>($r1, $r8) in <androidx.lifecycle.LifecycleRegistry: androidx.lifecycle.Lifecycle$State calculateTargetState(androidx.lifecycle.LifecycleObserver)> ==> <androidx.lifecycle.LifecycleRegistry$Companion: androidx.lifecycle.Lifecycle$State min$lifecycle_runtime_release(androidx.lifecycle.Lifecycle$State,androidx.lifecycle.Lifecycle$State)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<androidx.arch.core.internal.FastSafeIterableMap: java.util.Map$Entry ceil(java.lang.Object)>($r2) in <androidx.lifecycle.LifecycleRegistry: androidx.lifecycle.Lifecycle$State calculateTargetState(androidx.lifecycle.LifecycleObserver)> ==> <androidx.arch.core.internal.FastSafeIterableMap: java.util.Map$Entry ceil(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<androidx.arch.core.internal.FastSafeIterableMap: boolean contains(java.lang.Object)>($r1) in <androidx.arch.core.internal.FastSafeIterableMap: java.util.Map$Entry ceil(java.lang.Object)> ==> <androidx.arch.core.internal.FastSafeIterableMap: boolean contains(java.lang.Object)>
VIRTUAL edge: $r1 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>() in <androidx.lifecycle.LifecycleRegistry: void enforceMainThreadIfNeeded(java.lang.String)> ==> <java.lang.String: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<androidx.arch.core.internal.FastSafeIterableMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>($r1, $r7) in <androidx.lifecycle.LifecycleRegistry: void addObserver(androidx.lifecycle.LifecycleObserver)> ==> <androidx.arch.core.internal.FastSafeIterableMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r5.<androidx.arch.core.internal.FastSafeIterableMap: boolean contains(java.lang.Object)>($r1) in <androidx.lifecycle.LifecycleRegistry: void addObserver(androidx.lifecycle.LifecycleObserver)> ==> <androidx.arch.core.internal.FastSafeIterableMap: boolean contains(java.lang.Object)>
VIRTUAL edge: $r3 = virtualinvoke r0.<androidx.arch.core.internal.FastSafeIterableMap: androidx.arch.core.internal.SafeIterableMap$Entry get(java.lang.Object)>($r1) in <androidx.arch.core.internal.FastSafeIterableMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)> ==> <androidx.arch.core.internal.FastSafeIterableMap: androidx.arch.core.internal.SafeIterableMap$Entry get(java.lang.Object)>
VIRTUAL edge: $r3 = virtualinvoke r0.<androidx.arch.core.internal.FastSafeIterableMap: androidx.arch.core.internal.SafeIterableMap$Entry put(java.lang.Object,java.lang.Object)>($r1, $r2) in <androidx.arch.core.internal.FastSafeIterableMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)> ==> <androidx.arch.core.internal.SafeIterableMap: androidx.arch.core.internal.SafeIterableMap$Entry put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r2.<androidx.arch.core.internal.SafeIterableMap$Entry: void <init>(java.lang.Object,java.lang.Object)>($r3, $r1) in <androidx.arch.core.internal.SafeIterableMap: androidx.arch.core.internal.SafeIterableMap$Entry put(java.lang.Object,java.lang.Object)> ==> <androidx.arch.core.internal.SafeIterableMap$Entry: void <init>(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.arch.core.internal.SafeIterableMap$Entry: void <init>(java.lang.Object,java.lang.Object)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r2.<androidx.lifecycle.Lifecycle: void addObserver(androidx.lifecycle.LifecycleObserver)>($r4) in <androidx.savedstate.SavedStateRegistry: void performAttach$savedstate_release(androidx.lifecycle.Lifecycle)> ==> <androidx.lifecycle.LifecycleRegistry: void addObserver(androidx.lifecycle.LifecycleObserver)>
SPECIAL edge: specialinvoke $r5.<androidx.lifecycle.LifecycleRegistry: void <init>(androidx.lifecycle.LifecycleOwner)>(r0) in <androidx.activity.ComponentActivity: void <init>()> ==> <androidx.lifecycle.LifecycleRegistry: void <init>(androidx.lifecycle.LifecycleOwner)>
SPECIAL edge: specialinvoke $r4.<androidx.activity.ComponentActivity$$ExternalSyntheticLambda0: void <init>(androidx.activity.ComponentActivity)>(r0) in <androidx.activity.ComponentActivity: void <init>()> ==> <androidx.activity.ComponentActivity$$ExternalSyntheticLambda0: void <init>(androidx.activity.ComponentActivity)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.activity.ComponentActivity$$ExternalSyntheticLambda0: void <init>(androidx.activity.ComponentActivity)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r3.<androidx.core.view.MenuHostHelper: void <init>(java.lang.Runnable)>($r4) in <androidx.activity.ComponentActivity: void <init>()> ==> <androidx.core.view.MenuHostHelper: void <init>(java.lang.Runnable)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.core.view.MenuHostHelper: void <init>(java.lang.Runnable)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r2.<androidx.activity.contextaware.ContextAwareHelper: void <init>()>() in <androidx.activity.ComponentActivity: void <init>()> ==> <androidx.activity.contextaware.ContextAwareHelper: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.activity.contextaware.ContextAwareHelper: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<androidx.core.app.ComponentActivity: void <init>()>() in <androidx.activity.ComponentActivity: void <init>()> ==> <androidx.core.app.ComponentActivity: void <init>()>
SPECIAL edge: $r7 = specialinvoke r0.<androidx.activity.ComponentActivity: androidx.activity.ComponentActivity$ReportFullyDrawnExecutor createFullyDrawnExecutor()>() in <androidx.activity.ComponentActivity: void <init>()> ==> <androidx.activity.ComponentActivity: androidx.activity.ComponentActivity$ReportFullyDrawnExecutor createFullyDrawnExecutor()>
VIRTUAL edge: $r12 = virtualinvoke r0.<androidx.activity.ComponentActivity: androidx.lifecycle.Lifecycle getLifecycle()>() in <androidx.activity.ComponentActivity: void <init>()> ==> <androidx.activity.ComponentActivity: androidx.lifecycle.Lifecycle getLifecycle()>
VIRTUAL edge: $r12 = virtualinvoke r0.<androidx.activity.ComponentActivity: androidx.lifecycle.Lifecycle getLifecycle()>() in <androidx.activity.ComponentActivity: void <init>()> ==> <androidx.activity.ComponentActivity: androidx.lifecycle.Lifecycle getLifecycle()>
VIRTUAL edge: $r12 = virtualinvoke r0.<androidx.activity.ComponentActivity: androidx.lifecycle.Lifecycle getLifecycle()>() in <androidx.activity.ComponentActivity: void <init>()> ==> <androidx.activity.ComponentActivity: androidx.lifecycle.Lifecycle getLifecycle()>
VIRTUAL edge: $r12 = virtualinvoke r0.<androidx.activity.ComponentActivity: androidx.lifecycle.Lifecycle getLifecycle()>() in <androidx.activity.ComponentActivity: void <init>()> ==> <androidx.activity.ComponentActivity: androidx.lifecycle.Lifecycle getLifecycle()>
VIRTUAL edge: $r16 = virtualinvoke r0.<androidx.activity.ComponentActivity: androidx.savedstate.SavedStateRegistry getSavedStateRegistry()>() in <androidx.activity.ComponentActivity: void <init>()> ==> <androidx.activity.ComponentActivity: androidx.savedstate.SavedStateRegistry getSavedStateRegistry()>
VIRTUAL edge: virtualinvoke r0.<androidx.activity.ComponentActivity: void addOnContextAvailableListener(androidx.activity.contextaware.OnContextAvailableListener)>($r18) in <androidx.activity.ComponentActivity: void <init>()> ==> <androidx.activity.ComponentActivity: void addOnContextAvailableListener(androidx.activity.contextaware.OnContextAvailableListener)>
CLINIT edge: $r2 = new androidx.lifecycle.LifecycleRegistry in <androidx.core.app.ComponentActivity: void <init>()> ==> <androidx.lifecycle.LifecycleRegistry: void <clinit>()>
SPECIAL edge: specialinvoke $r1.<androidx.activity.ComponentActivity$ReportFullyDrawnExecutorApi16Impl: void <init>(androidx.activity.ComponentActivity)>(r0) in <androidx.activity.ComponentActivity: androidx.activity.ComponentActivity$ReportFullyDrawnExecutor createFullyDrawnExecutor()> ==> <androidx.activity.ComponentActivity$ReportFullyDrawnExecutorApi16Impl: void <init>(androidx.activity.ComponentActivity)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.activity.ComponentActivity$ReportFullyDrawnExecutorApi16Impl: void <init>(androidx.activity.ComponentActivity)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r2.<androidx.lifecycle.LifecycleRegistry: void <init>(androidx.lifecycle.LifecycleOwner)>(r0) in <androidx.core.app.ComponentActivity: void <init>()> ==> <androidx.lifecycle.LifecycleRegistry: void <init>(androidx.lifecycle.LifecycleOwner)>
SPECIAL edge: specialinvoke $r1.<androidx.collection.SimpleArrayMap: void <init>()>() in <androidx.core.app.ComponentActivity: void <init>()> ==> <androidx.collection.SimpleArrayMap: void <init>()>
INTERFACE edge: $r1 = interfaceinvoke $r0.<androidx.savedstate.SavedStateRegistryOwner: androidx.lifecycle.Lifecycle getLifecycle()>() in <androidx.lifecycle.SavedStateHandleSupport: void enableSavedStateHandles(androidx.savedstate.SavedStateRegistryOwner)> ==> <androidx.activity.ComponentActivity: androidx.lifecycle.Lifecycle getLifecycle()>
INTERFACE edge: $r4 = interfaceinvoke $r0.<androidx.savedstate.SavedStateRegistryOwner: androidx.savedstate.SavedStateRegistry getSavedStateRegistry()>() in <androidx.lifecycle.SavedStateHandleSupport: void enableSavedStateHandles(androidx.savedstate.SavedStateRegistryOwner)> ==> <androidx.activity.ComponentActivity: androidx.savedstate.SavedStateRegistry getSavedStateRegistry()>
INTERFACE edge: $r4 = interfaceinvoke $r0.<androidx.savedstate.SavedStateRegistryOwner: androidx.savedstate.SavedStateRegistry getSavedStateRegistry()>() in <androidx.lifecycle.SavedStateHandleSupport: void enableSavedStateHandles(androidx.savedstate.SavedStateRegistryOwner)> ==> <androidx.activity.ComponentActivity: androidx.savedstate.SavedStateRegistry getSavedStateRegistry()>
INTERFACE edge: $r1 = interfaceinvoke $r0.<androidx.savedstate.SavedStateRegistryOwner: androidx.lifecycle.Lifecycle getLifecycle()>() in <androidx.lifecycle.SavedStateHandleSupport: void enableSavedStateHandles(androidx.savedstate.SavedStateRegistryOwner)> ==> <androidx.activity.ComponentActivity: androidx.lifecycle.Lifecycle getLifecycle()>
VIRTUAL edge: virtualinvoke $r11.<java.io.IOException: void printStackTrace()>() in <com.example.notificationtest.InfoRead$1: void run()> ==> <java.lang.Throwable: void printStackTrace()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void printStackTrace()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r5.<java.io.IOException: void printStackTrace()>() in <com.example.notificationtest.InfoRead: java.lang.String readFromFile()> ==> <java.lang.Throwable: void printStackTrace()>
SPECIAL edge: specialinvoke $r0.<androidx.profileinstaller.ProfileInstallReceiver: void <init>()>() in <dummyMainClass: androidx.profileinstaller.ProfileInstallReceiver dummyMainMethod_androidx_profileinstaller_ProfileInstallReceiver(android.content.Intent)> ==> <androidx.profileinstaller.ProfileInstallReceiver: void <init>()>
VIRTUAL edge: virtualinvoke $r0.<androidx.profileinstaller.ProfileInstallReceiver: void onReceive(android.content.Context,android.content.Intent)>(null, null) in <dummyMainClass: androidx.profileinstaller.ProfileInstallReceiver dummyMainMethod_androidx_profileinstaller_ProfileInstallReceiver(android.content.Intent)> ==> <androidx.profileinstaller.ProfileInstallReceiver: void onReceive(android.content.Context,android.content.Intent)>
CLINIT edge: staticinvoke <androidx.profileinstaller.ProfileInstaller: void writeProfile(android.content.Context,java.util.concurrent.Executor,androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback,boolean)>($r1, $r5, $r6, 1) in <androidx.profileinstaller.ProfileInstallReceiver: void onReceive(android.content.Context,android.content.Intent)> ==> <androidx.profileinstaller.ProfileInstaller: void <clinit>()>
STATIC edge: staticinvoke <androidx.profileinstaller.BenchmarkOperation: void dropShaderCache(android.content.Context,androidx.profileinstaller.ProfileInstallReceiver$ResultDiagnostics)>($r1, $r6) in <androidx.profileinstaller.ProfileInstallReceiver: void onReceive(android.content.Context,android.content.Intent)> ==> <androidx.profileinstaller.BenchmarkOperation: void dropShaderCache(android.content.Context,androidx.profileinstaller.ProfileInstallReceiver$ResultDiagnostics)>
STATIC edge: staticinvoke <androidx.profileinstaller.ProfileInstallReceiver: void saveProfile(androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback)>($r6) in <androidx.profileinstaller.ProfileInstallReceiver: void onReceive(android.content.Context,android.content.Intent)> ==> <androidx.profileinstaller.ProfileInstallReceiver: void saveProfile(androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback)>
STATIC edge: staticinvoke <androidx.profileinstaller.ProfileInstaller: void deleteSkipFile(android.content.Context,java.util.concurrent.Executor,androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback)>($r1, $r5, $r6) in <androidx.profileinstaller.ProfileInstallReceiver: void onReceive(android.content.Context,android.content.Intent)> ==> <androidx.profileinstaller.ProfileInstaller: void deleteSkipFile(android.content.Context,java.util.concurrent.Executor,androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback)>
STATIC edge: staticinvoke <androidx.profileinstaller.ProfileInstaller: void writeSkipFile(android.content.Context,java.util.concurrent.Executor,androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback)>($r1, $r5, $r6) in <androidx.profileinstaller.ProfileInstallReceiver: void onReceive(android.content.Context,android.content.Intent)> ==> <androidx.profileinstaller.ProfileInstaller: void writeSkipFile(android.content.Context,java.util.concurrent.Executor,androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback)>
STATIC edge: staticinvoke <androidx.profileinstaller.ProfileInstaller: void writeProfile(android.content.Context,java.util.concurrent.Executor,androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback,boolean)>($r1, $r5, $r6, 1) in <androidx.profileinstaller.ProfileInstallReceiver: void onReceive(android.content.Context,android.content.Intent)> ==> <androidx.profileinstaller.ProfileInstaller: void writeProfile(android.content.Context,java.util.concurrent.Executor,androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback,boolean)>
CLINIT edge: staticinvoke <androidx.profileinstaller.ProfileInstaller: void writeSkipFile(android.content.Context,java.util.concurrent.Executor,androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback)>($r1, $r5, $r6) in <androidx.profileinstaller.ProfileInstallReceiver: void onReceive(android.content.Context,android.content.Intent)> ==> <androidx.profileinstaller.ProfileInstaller: void <clinit>()>
STATIC edge: $r2 = staticinvoke <androidx.profileinstaller.BenchmarkOperation$Api24ContextHelper: java.io.File getDeviceProtectedCodeCacheDir(android.content.Context)>($r1) in <androidx.profileinstaller.BenchmarkOperation: void dropShaderCache(android.content.Context,androidx.profileinstaller.ProfileInstallReceiver$ResultDiagnostics)> ==> <androidx.profileinstaller.BenchmarkOperation$Api24ContextHelper: java.io.File getDeviceProtectedCodeCacheDir(android.content.Context)>
STATIC edge: $z0 = staticinvoke <androidx.profileinstaller.BenchmarkOperation: boolean deleteFilesRecursively(java.io.File)>($r2) in <androidx.profileinstaller.BenchmarkOperation: void dropShaderCache(android.content.Context,androidx.profileinstaller.ProfileInstallReceiver$ResultDiagnostics)> ==> <androidx.profileinstaller.BenchmarkOperation: boolean deleteFilesRecursively(java.io.File)>
CLINIT edge: staticinvoke <androidx.profileinstaller.ProfileInstaller: boolean deleteProfileWrittenFor(java.io.File)>($r2) in <androidx.profileinstaller.ProfileInstaller: void deleteSkipFile(android.content.Context,java.util.concurrent.Executor,androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback)> ==> <androidx.profileinstaller.ProfileInstaller: void <clinit>()>
STATIC edge: staticinvoke <androidx.profileinstaller.ProfileInstaller: void result(java.util.concurrent.Executor,androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback,int,java.lang.Object)>($r0, $r1, 11, null) in <androidx.profileinstaller.ProfileInstaller: void deleteSkipFile(android.content.Context,java.util.concurrent.Executor,androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback)> ==> <androidx.profileinstaller.ProfileInstaller: void result(java.util.concurrent.Executor,androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback,int,java.lang.Object)>
STATIC edge: staticinvoke <androidx.profileinstaller.ProfileInstaller: boolean deleteProfileWrittenFor(java.io.File)>($r2) in <androidx.profileinstaller.ProfileInstaller: void deleteSkipFile(android.content.Context,java.util.concurrent.Executor,androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback)> ==> <androidx.profileinstaller.ProfileInstaller: boolean deleteProfileWrittenFor(java.io.File)>
CLINIT edge: staticinvoke <androidx.profileinstaller.ProfileInstaller: void noteProfileWrittenFor(android.content.pm.PackageInfo,java.io.File)>($r6, $r7) in <androidx.profileinstaller.ProfileInstaller: void writeSkipFile(android.content.Context,java.util.concurrent.Executor,androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback)> ==> <androidx.profileinstaller.ProfileInstaller: void <clinit>()>
STATIC edge: staticinvoke <androidx.profileinstaller.ProfileInstaller: void result(java.util.concurrent.Executor,androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback,int,java.lang.Object)>($r0, $r1, 7, $r8) in <androidx.profileinstaller.ProfileInstaller: void writeSkipFile(android.content.Context,java.util.concurrent.Executor,androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback)> ==> <androidx.profileinstaller.ProfileInstaller: void result(java.util.concurrent.Executor,androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback,int,java.lang.Object)>
STATIC edge: staticinvoke <androidx.profileinstaller.ProfileInstaller: void noteProfileWrittenFor(android.content.pm.PackageInfo,java.io.File)>($r6, $r7) in <androidx.profileinstaller.ProfileInstaller: void writeSkipFile(android.content.Context,java.util.concurrent.Executor,androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback)> ==> <androidx.profileinstaller.ProfileInstaller: void noteProfileWrittenFor(android.content.pm.PackageInfo,java.io.File)>
STATIC edge: staticinvoke <androidx.profileinstaller.ProfileVerifier: androidx.profileinstaller.ProfileVerifier$CompilationStatus writeProfileVerification(android.content.Context,boolean)>($r0, 0) in <androidx.profileinstaller.ProfileInstaller: void writeProfile(android.content.Context,java.util.concurrent.Executor,androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback,boolean)> ==> <androidx.profileinstaller.ProfileVerifier: androidx.profileinstaller.ProfileVerifier$CompilationStatus writeProfileVerification(android.content.Context,boolean)>
STATIC edge: $z2 = staticinvoke <androidx.profileinstaller.ProfileInstaller: boolean transcodeAndWrite(android.content.res.AssetManager,java.lang.String,android.content.pm.PackageInfo,java.io.File,java.lang.String,java.util.concurrent.Executor,androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback)>($r6, $r4, $r10, $r7, $r8, $r1, $r2) in <androidx.profileinstaller.ProfileInstaller: void writeProfile(android.content.Context,java.util.concurrent.Executor,androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback,boolean)> ==> <androidx.profileinstaller.ProfileInstaller: boolean transcodeAndWrite(android.content.res.AssetManager,java.lang.String,android.content.pm.PackageInfo,java.io.File,java.lang.String,java.util.concurrent.Executor,androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback)>
STATIC edge: $z2 = staticinvoke <androidx.profileinstaller.ProfileInstaller: boolean hasAlreadyWrittenProfileForThisInstall(android.content.pm.PackageInfo,java.io.File,androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback)>($r10, $r7, $r2) in <androidx.profileinstaller.ProfileInstaller: void writeProfile(android.content.Context,java.util.concurrent.Executor,androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback,boolean)> ==> <androidx.profileinstaller.ProfileInstaller: boolean hasAlreadyWrittenProfileForThisInstall(android.content.pm.PackageInfo,java.io.File,androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback)>
CLINIT edge: staticinvoke <androidx.profileinstaller.ProfileVerifier: androidx.profileinstaller.ProfileVerifier$CompilationStatus writeProfileVerification(android.content.Context,boolean)>($r0, 0) in <androidx.profileinstaller.ProfileInstaller: void writeProfile(android.content.Context,java.util.concurrent.Executor,androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback,boolean)> ==> <androidx.profileinstaller.ProfileVerifier: void <clinit>()>
CLINIT edge: $z2 = staticinvoke <androidx.profileinstaller.ProfileInstaller: boolean transcodeAndWrite(android.content.res.AssetManager,java.lang.String,android.content.pm.PackageInfo,java.io.File,java.lang.String,java.util.concurrent.Executor,androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback)>($r6, $r4, $r10, $r7, $r8, $r1, $r2) in <androidx.profileinstaller.ProfileInstaller: void writeProfile(android.content.Context,java.util.concurrent.Executor,androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback,boolean)> ==> <androidx.profileinstaller.ProfileInstaller: void <clinit>()>
STATIC edge: $z1 = staticinvoke <androidx.profileinstaller.BenchmarkOperation: boolean deleteFilesRecursively(java.io.File)>($r0) in <androidx.profileinstaller.BenchmarkOperation: boolean deleteFilesRecursively(java.io.File)> ==> <androidx.profileinstaller.BenchmarkOperation: boolean deleteFilesRecursively(java.io.File)>
CLINIT edge: $r6 = <androidx.profileinstaller.ProfileVerifier: androidx.profileinstaller.ProfileVerifier$CompilationStatus sCompilationStatus> in <androidx.profileinstaller.ProfileVerifier: androidx.profileinstaller.ProfileVerifier$CompilationStatus writeProfileVerification(android.content.Context,boolean)> ==> <androidx.profileinstaller.ProfileVerifier: void <clinit>()>
STATIC edge: $r6 = staticinvoke <androidx.profileinstaller.ProfileVerifier: androidx.profileinstaller.ProfileVerifier$CompilationStatus setCompilationStatus(int,boolean,boolean)>(262144, 0, 0) in <androidx.profileinstaller.ProfileVerifier: androidx.profileinstaller.ProfileVerifier$CompilationStatus writeProfileVerification(android.content.Context,boolean)> ==> <androidx.profileinstaller.ProfileVerifier: androidx.profileinstaller.ProfileVerifier$CompilationStatus setCompilationStatus(int,boolean,boolean)>
STATIC edge: $r6 = staticinvoke <androidx.profileinstaller.ProfileVerifier: androidx.profileinstaller.ProfileVerifier$CompilationStatus setCompilationStatus(int,boolean,boolean)>(131072, $z1, $z2) in <androidx.profileinstaller.ProfileVerifier: androidx.profileinstaller.ProfileVerifier$CompilationStatus writeProfileVerification(android.content.Context,boolean)> ==> <androidx.profileinstaller.ProfileVerifier: androidx.profileinstaller.ProfileVerifier$CompilationStatus setCompilationStatus(int,boolean,boolean)>
STATIC edge: $r9 = staticinvoke <androidx.profileinstaller.ProfileVerifier$Cache: androidx.profileinstaller.ProfileVerifier$Cache readFromFile(java.io.File)>($r11) in <androidx.profileinstaller.ProfileVerifier: androidx.profileinstaller.ProfileVerifier$CompilationStatus writeProfileVerification(android.content.Context,boolean)> ==> <androidx.profileinstaller.ProfileVerifier$Cache: androidx.profileinstaller.ProfileVerifier$Cache readFromFile(java.io.File)>
STATIC edge: $l5 = staticinvoke <androidx.profileinstaller.ProfileVerifier: long getPackageLastUpdateTime(android.content.Context)>($r0) in <androidx.profileinstaller.ProfileVerifier: androidx.profileinstaller.ProfileVerifier$CompilationStatus writeProfileVerification(android.content.Context,boolean)> ==> <androidx.profileinstaller.ProfileVerifier: long getPackageLastUpdateTime(android.content.Context)>
CLINIT edge: $r6 = staticinvoke <androidx.profileinstaller.ProfileVerifier: androidx.profileinstaller.ProfileVerifier$CompilationStatus setCompilationStatus(int,boolean,boolean)>(65536, $z1, $z2) in <androidx.profileinstaller.ProfileVerifier: androidx.profileinstaller.ProfileVerifier$CompilationStatus writeProfileVerification(android.content.Context,boolean)> ==> <androidx.profileinstaller.ProfileVerifier: void <clinit>()>
CLINIT edge: $r6 = staticinvoke <androidx.profileinstaller.ProfileVerifier: androidx.profileinstaller.ProfileVerifier$CompilationStatus setCompilationStatus(int,boolean,boolean)>($i1, $z1, $z2) in <androidx.profileinstaller.ProfileVerifier: androidx.profileinstaller.ProfileVerifier$CompilationStatus writeProfileVerification(android.content.Context,boolean)> ==> <androidx.profileinstaller.ProfileVerifier: void <clinit>()>
STATIC edge: staticinvoke <androidx.profileinstaller.ProfileInstaller: void noteProfileWrittenFor(android.content.pm.PackageInfo,java.io.File)>($r0, $r1) in <androidx.profileinstaller.ProfileInstaller: boolean transcodeAndWrite(android.content.res.AssetManager,java.lang.String,android.content.pm.PackageInfo,java.io.File,java.lang.String,java.util.concurrent.Executor,androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback)> ==> <androidx.profileinstaller.ProfileInstaller: void noteProfileWrittenFor(android.content.pm.PackageInfo,java.io.File)>
CLINIT edge: staticinvoke <androidx.profileinstaller.ProfileInstaller: void noteProfileWrittenFor(android.content.pm.PackageInfo,java.io.File)>($r0, $r1) in <androidx.profileinstaller.ProfileInstaller: boolean transcodeAndWrite(android.content.res.AssetManager,java.lang.String,android.content.pm.PackageInfo,java.io.File,java.lang.String,java.util.concurrent.Executor,androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback)> ==> <androidx.profileinstaller.ProfileInstaller: void <clinit>()>
CLINIT edge: $r0 = staticinvoke <androidx.concurrent.futures.ResolvableFuture: androidx.concurrent.futures.ResolvableFuture create()>() in <androidx.profileinstaller.ProfileVerifier: void <clinit>()> ==> <androidx.concurrent.futures.AbstractResolvableFuture: void <clinit>()>
STATIC edge: $r0 = staticinvoke <androidx.concurrent.futures.ResolvableFuture: androidx.concurrent.futures.ResolvableFuture create()>() in <androidx.profileinstaller.ProfileVerifier: void <clinit>()> ==> <androidx.concurrent.futures.ResolvableFuture: androidx.concurrent.futures.ResolvableFuture create()>
CLINIT edge: <androidx.profileinstaller.ProfileVerifier: androidx.profileinstaller.ProfileVerifier$CompilationStatus sCompilationStatus> = $r0 in <androidx.profileinstaller.ProfileVerifier: androidx.profileinstaller.ProfileVerifier$CompilationStatus setCompilationStatus(int,boolean,boolean)> ==> <androidx.profileinstaller.ProfileVerifier: void <clinit>()>
STATIC edge: $r3 = staticinvoke <androidx.profileinstaller.ProfileVerifier$Api33Impl: android.content.pm.PackageInfo getPackageInfo(android.content.pm.PackageManager,android.content.Context)>($r2, $r0) in <androidx.profileinstaller.ProfileVerifier: long getPackageLastUpdateTime(android.content.Context)> ==> <androidx.profileinstaller.ProfileVerifier$Api33Impl: android.content.pm.PackageInfo getPackageInfo(android.content.pm.PackageManager,android.content.Context)>
STATIC edge: $z0 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r0) in <androidx.concurrent.futures.AbstractResolvableFuture: void <clinit>()> ==> <java.lang.Boolean: boolean parseBoolean(java.lang.String)>
CLINIT edge: $z0 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r0) in <androidx.concurrent.futures.AbstractResolvableFuture: void <clinit>()> ==> <java.lang.Boolean: void <clinit>()>
CLINIT edge: $r0 = new androidx.concurrent.futures.ResolvableFuture in <androidx.concurrent.futures.ResolvableFuture: androidx.concurrent.futures.ResolvableFuture create()> ==> <androidx.concurrent.futures.AbstractResolvableFuture: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: boolean parseBoolean(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<androidx.concurrent.futures.ResolvableFuture: void <init>()>() in <androidx.concurrent.futures.ResolvableFuture: androidx.concurrent.futures.ResolvableFuture create()> ==> <androidx.concurrent.futures.ResolvableFuture: void <init>()>
SPECIAL edge: specialinvoke r0.<androidx.concurrent.futures.AbstractResolvableFuture: void <init>()>() in <androidx.concurrent.futures.ResolvableFuture: void <init>()> ==> <androidx.concurrent.futures.AbstractResolvableFuture: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.concurrent.futures.AbstractResolvableFuture: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r13.<java.lang.Object: void <init>()>() in <androidx.concurrent.futures.AbstractResolvableFuture: void <clinit>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r12.<androidx.concurrent.futures.AbstractResolvableFuture$SynchronizedHelper: void <init>()>() in <androidx.concurrent.futures.AbstractResolvableFuture: void <clinit>()> ==> <androidx.concurrent.futures.AbstractResolvableFuture$SynchronizedHelper: void <init>()>
SPECIAL edge: specialinvoke r0.<androidx.concurrent.futures.AbstractResolvableFuture$AtomicHelper: void <init>(androidx.concurrent.futures.AbstractResolvableFuture$1)>(null) in <androidx.concurrent.futures.AbstractResolvableFuture$SynchronizedHelper: void <init>()> ==> <androidx.concurrent.futures.AbstractResolvableFuture$AtomicHelper: void <init>(androidx.concurrent.futures.AbstractResolvableFuture$1)>
SPECIAL edge: specialinvoke r0.<androidx.concurrent.futures.AbstractResolvableFuture$AtomicHelper: void <init>()>() in <androidx.concurrent.futures.AbstractResolvableFuture$AtomicHelper: void <init>(androidx.concurrent.futures.AbstractResolvableFuture$1)> ==> <androidx.concurrent.futures.AbstractResolvableFuture$AtomicHelper: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.concurrent.futures.AbstractResolvableFuture$AtomicHelper: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r11.<androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper: void <init>(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.util.concurrent.atomic.AtomicReferenceFieldUpdater)>($r4, $r5, $r6, $r7, $r8) in <androidx.concurrent.futures.AbstractResolvableFuture: void <clinit>()> ==> <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper: void <init>(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.util.concurrent.atomic.AtomicReferenceFieldUpdater)>
SPECIAL edge: specialinvoke r0.<androidx.concurrent.futures.AbstractResolvableFuture$AtomicHelper: void <init>(androidx.concurrent.futures.AbstractResolvableFuture$1)>(null) in <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper: void <init>(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.util.concurrent.atomic.AtomicReferenceFieldUpdater)> ==> <androidx.concurrent.futures.AbstractResolvableFuture$AtomicHelper: void <init>(androidx.concurrent.futures.AbstractResolvableFuture$1)>
VIRTUAL edge: $r0 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>() in <androidx.concurrent.futures.AbstractResolvableFuture: void <clinit>()> ==> <java.lang.Class: java.lang.String getName()>
VIRTUAL edge: virtualinvoke $r4.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r5) in <androidx.profileinstaller.ProfileVerifier$Cache: androidx.profileinstaller.ProfileVerifier$Cache readFromFile(java.io.File)> ==> <java.lang.Throwable: void addSuppressed(java.lang.Throwable)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void addSuppressed(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r3.<androidx.profileinstaller.ProfileVerifier$Cache: void <init>(int,int,long,long)>($i0, $i1, $l2, $l3) in <androidx.profileinstaller.ProfileVerifier$Cache: androidx.profileinstaller.ProfileVerifier$Cache readFromFile(java.io.File)> ==> <androidx.profileinstaller.ProfileVerifier$Cache: void <init>(int,int,long,long)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.profileinstaller.ProfileVerifier$Cache: void <init>(int,int,long,long)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<androidx.profileinstaller.ProfileVerifier$CompilationStatus: void <init>(int,boolean,boolean)>($i0, $z0, $z1) in <androidx.profileinstaller.ProfileVerifier: androidx.profileinstaller.ProfileVerifier$CompilationStatus setCompilationStatus(int,boolean,boolean)> ==> <androidx.profileinstaller.ProfileVerifier$CompilationStatus: void <init>(int,boolean,boolean)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.profileinstaller.ProfileVerifier$CompilationStatus: void <init>(int,boolean,boolean)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.Object: void <init>()>() in <androidx.profileinstaller.ProfileVerifier: void <clinit>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r1.<androidx.concurrent.futures.ResolvableFuture: boolean set(java.lang.Object)>($r0) in <androidx.profileinstaller.ProfileVerifier: androidx.profileinstaller.ProfileVerifier$CompilationStatus setCompilationStatus(int,boolean,boolean)> ==> <androidx.concurrent.futures.ResolvableFuture: boolean set(java.lang.Object)>
SPECIAL edge: $z0 = specialinvoke r0.<androidx.concurrent.futures.AbstractResolvableFuture: boolean set(java.lang.Object)>($r1) in <androidx.concurrent.futures.ResolvableFuture: boolean set(java.lang.Object)> ==> <androidx.concurrent.futures.AbstractResolvableFuture: boolean set(java.lang.Object)>
CLINIT edge: $r2 = <androidx.concurrent.futures.AbstractResolvableFuture: java.lang.Object NULL> in <androidx.concurrent.futures.AbstractResolvableFuture: boolean set(java.lang.Object)> ==> <androidx.concurrent.futures.AbstractResolvableFuture: void <clinit>()>
STATIC edge: staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture: void complete(androidx.concurrent.futures.AbstractResolvableFuture)>(r0) in <androidx.concurrent.futures.AbstractResolvableFuture: boolean set(java.lang.Object)> ==> <androidx.concurrent.futures.AbstractResolvableFuture: void complete(androidx.concurrent.futures.AbstractResolvableFuture)>
CLINIT edge: $r6 = staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture: java.lang.Object getFutureValue(com.google.common.util.concurrent.ListenableFuture)>($r7) in <androidx.concurrent.futures.AbstractResolvableFuture: void complete(androidx.concurrent.futures.AbstractResolvableFuture)> ==> <androidx.concurrent.futures.AbstractResolvableFuture: void <clinit>()>
STATIC edge: staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture: void executeListener(java.lang.Runnable,java.util.concurrent.Executor)>($r4, $r8) in <androidx.concurrent.futures.AbstractResolvableFuture: void complete(androidx.concurrent.futures.AbstractResolvableFuture)> ==> <androidx.concurrent.futures.AbstractResolvableFuture: void executeListener(java.lang.Runnable,java.util.concurrent.Executor)>
STATIC edge: $r6 = staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture: java.lang.Object getFutureValue(com.google.common.util.concurrent.ListenableFuture)>($r7) in <androidx.concurrent.futures.AbstractResolvableFuture: void complete(androidx.concurrent.futures.AbstractResolvableFuture)> ==> <androidx.concurrent.futures.AbstractResolvableFuture: java.lang.Object getFutureValue(com.google.common.util.concurrent.ListenableFuture)>
CLINIT edge: $r2 = <androidx.concurrent.futures.AbstractResolvableFuture: java.util.logging.Logger log> in <androidx.concurrent.futures.AbstractResolvableFuture: void executeListener(java.lang.Runnable,java.util.concurrent.Executor)> ==> <androidx.concurrent.futures.AbstractResolvableFuture: void <clinit>()>
CLINIT edge: $r10 = new androidx.concurrent.futures.AbstractResolvableFuture$Cancellation in <androidx.concurrent.futures.AbstractResolvableFuture: java.lang.Object getFutureValue(com.google.common.util.concurrent.ListenableFuture)> ==> <androidx.concurrent.futures.AbstractResolvableFuture$Cancellation: void <clinit>()>
STATIC edge: $r3 = staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture: java.lang.Object getUninterruptibly(java.util.concurrent.Future)>($r1) in <androidx.concurrent.futures.AbstractResolvableFuture: java.lang.Object getFutureValue(com.google.common.util.concurrent.ListenableFuture)> ==> <androidx.concurrent.futures.AbstractResolvableFuture: java.lang.Object getUninterruptibly(java.util.concurrent.Future)>
CLINIT edge: $r11 = new androidx.concurrent.futures.AbstractResolvableFuture$Failure in <androidx.concurrent.futures.AbstractResolvableFuture: java.lang.Object getFutureValue(com.google.common.util.concurrent.ListenableFuture)> ==> <androidx.concurrent.futures.AbstractResolvableFuture$Failure: void <clinit>()>
CLINIT edge: $r6 = new androidx.concurrent.futures.AbstractResolvableFuture$Cancellation in <androidx.concurrent.futures.AbstractResolvableFuture: java.lang.Object getFutureValue(com.google.common.util.concurrent.ListenableFuture)> ==> <androidx.concurrent.futures.AbstractResolvableFuture$Cancellation: void <clinit>()>
CLINIT edge: $r11 = new androidx.concurrent.futures.AbstractResolvableFuture$Failure in <androidx.concurrent.futures.AbstractResolvableFuture: java.lang.Object getFutureValue(com.google.common.util.concurrent.ListenableFuture)> ==> <androidx.concurrent.futures.AbstractResolvableFuture$Failure: void <clinit>()>
CLINIT edge: $r11 = new androidx.concurrent.futures.AbstractResolvableFuture$Failure in <androidx.concurrent.futures.AbstractResolvableFuture: java.lang.Object getFutureValue(com.google.common.util.concurrent.ListenableFuture)> ==> <androidx.concurrent.futures.AbstractResolvableFuture$Failure: void <clinit>()>
CLINIT edge: $z1 = <androidx.concurrent.futures.AbstractResolvableFuture: boolean GENERATE_CANCELLATION_CAUSES> in <androidx.concurrent.futures.AbstractResolvableFuture: java.lang.Object getFutureValue(com.google.common.util.concurrent.ListenableFuture)> ==> <androidx.concurrent.futures.AbstractResolvableFuture: void <clinit>()>
CLINIT edge: $z0 = <androidx.concurrent.futures.AbstractResolvableFuture: boolean GENERATE_CANCELLATION_CAUSES> in <androidx.concurrent.futures.AbstractResolvableFuture$Cancellation: void <clinit>()> ==> <androidx.concurrent.futures.AbstractResolvableFuture: void <clinit>()>
VIRTUAL edge: virtualinvoke $r3.<java.lang.Thread: void interrupt()>() in <androidx.concurrent.futures.AbstractResolvableFuture: java.lang.Object getUninterruptibly(java.util.concurrent.Future)> ==> <java.lang.Thread: void interrupt()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void interrupt()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<androidx.concurrent.futures.AbstractResolvableFuture$Failure$1: void <init>(java.lang.String)>("Failure occurred while trying to finish a future.") in <androidx.concurrent.futures.AbstractResolvableFuture$Failure: void <clinit>()> ==> <androidx.concurrent.futures.AbstractResolvableFuture$Failure$1: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>(java.lang.String)>($r1) in <androidx.concurrent.futures.AbstractResolvableFuture$Failure$1: void <init>(java.lang.String)> ==> <java.lang.Throwable: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<androidx.concurrent.futures.AbstractResolvableFuture$Failure: void <init>(java.lang.Throwable)>($r1) in <androidx.concurrent.futures.AbstractResolvableFuture$Failure: void <clinit>()> ==> <androidx.concurrent.futures.AbstractResolvableFuture$Failure: void <init>(java.lang.Throwable)>
CLINIT edge: $r1 = staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture: java.lang.Object checkNotNull(java.lang.Object)>($r2) in <androidx.concurrent.futures.AbstractResolvableFuture$Failure: void <init>(java.lang.Throwable)> ==> <androidx.concurrent.futures.AbstractResolvableFuture: void <clinit>()>
STATIC edge: $r1 = staticinvoke <androidx.concurrent.futures.AbstractResolvableFuture: java.lang.Object checkNotNull(java.lang.Object)>($r2) in <androidx.concurrent.futures.AbstractResolvableFuture$Failure: void <init>(java.lang.Throwable)> ==> <androidx.concurrent.futures.AbstractResolvableFuture: java.lang.Object checkNotNull(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>() in <androidx.concurrent.futures.AbstractResolvableFuture: java.lang.Object checkNotNull(java.lang.Object)> ==> <java.lang.Object: java.lang.Class getClass()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.concurrent.futures.AbstractResolvableFuture$Failure: void <init>(java.lang.Throwable)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<androidx.concurrent.futures.AbstractResolvableFuture$Cancellation: void <init>(boolean,java.lang.Throwable)>(0, null) in <androidx.concurrent.futures.AbstractResolvableFuture$Cancellation: void <clinit>()> ==> <androidx.concurrent.futures.AbstractResolvableFuture$Cancellation: void <init>(boolean,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r0.<androidx.concurrent.futures.AbstractResolvableFuture$Cancellation: void <init>(boolean,java.lang.Throwable)>(1, null) in <androidx.concurrent.futures.AbstractResolvableFuture$Cancellation: void <clinit>()> ==> <androidx.concurrent.futures.AbstractResolvableFuture$Cancellation: void <init>(boolean,java.lang.Throwable)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.concurrent.futures.AbstractResolvableFuture$Cancellation: void <init>(boolean,java.lang.Throwable)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r6.<androidx.concurrent.futures.AbstractResolvableFuture$Cancellation: void <init>(boolean,java.lang.Throwable)>(0, $r7) in <androidx.concurrent.futures.AbstractResolvableFuture: java.lang.Object getFutureValue(com.google.common.util.concurrent.ListenableFuture)> ==> <androidx.concurrent.futures.AbstractResolvableFuture$Cancellation: void <init>(boolean,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r11.<androidx.concurrent.futures.AbstractResolvableFuture$Failure: void <init>(java.lang.Throwable)>($r5) in <androidx.concurrent.futures.AbstractResolvableFuture: java.lang.Object getFutureValue(com.google.common.util.concurrent.ListenableFuture)> ==> <androidx.concurrent.futures.AbstractResolvableFuture$Failure: void <init>(java.lang.Throwable)>
SPECIAL edge: specialinvoke $r11.<androidx.concurrent.futures.AbstractResolvableFuture$Failure: void <init>(java.lang.Throwable)>($r5) in <androidx.concurrent.futures.AbstractResolvableFuture: java.lang.Object getFutureValue(com.google.common.util.concurrent.ListenableFuture)> ==> <androidx.concurrent.futures.AbstractResolvableFuture$Failure: void <init>(java.lang.Throwable)>
VIRTUAL edge: $z0 = virtualinvoke $r0.<androidx.concurrent.futures.AbstractResolvableFuture$AtomicHelper: boolean casValue(androidx.concurrent.futures.AbstractResolvableFuture,java.lang.Object,java.lang.Object)>($r1, $r5, $r6) in <androidx.concurrent.futures.AbstractResolvableFuture: void complete(androidx.concurrent.futures.AbstractResolvableFuture)> ==> <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper: boolean casValue(androidx.concurrent.futures.AbstractResolvableFuture,java.lang.Object,java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r0.<androidx.concurrent.futures.AbstractResolvableFuture$AtomicHelper: boolean casValue(androidx.concurrent.futures.AbstractResolvableFuture,java.lang.Object,java.lang.Object)>($r1, $r5, $r6) in <androidx.concurrent.futures.AbstractResolvableFuture: void complete(androidx.concurrent.futures.AbstractResolvableFuture)> ==> <androidx.concurrent.futures.AbstractResolvableFuture$SynchronizedHelper: boolean casValue(androidx.concurrent.futures.AbstractResolvableFuture,java.lang.Object,java.lang.Object)>
STATIC edge: $z0 = staticinvoke <kotlin.UByte$$ExternalSyntheticBackport0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>($r3, $r4, $r1, $r2) in <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper: boolean casValue(androidx.concurrent.futures.AbstractResolvableFuture,java.lang.Object,java.lang.Object)> ==> <kotlin.UByte$$ExternalSyntheticBackport0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<androidx.concurrent.futures.AbstractResolvableFuture$AtomicHelper: boolean casValue(androidx.concurrent.futures.AbstractResolvableFuture,java.lang.Object,java.lang.Object)>(r0, null, $r2) in <androidx.concurrent.futures.AbstractResolvableFuture: boolean set(java.lang.Object)> ==> <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper: boolean casValue(androidx.concurrent.futures.AbstractResolvableFuture,java.lang.Object,java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<androidx.concurrent.futures.AbstractResolvableFuture$AtomicHelper: boolean casValue(androidx.concurrent.futures.AbstractResolvableFuture,java.lang.Object,java.lang.Object)>(r0, null, $r2) in <androidx.concurrent.futures.AbstractResolvableFuture: boolean set(java.lang.Object)> ==> <androidx.concurrent.futures.AbstractResolvableFuture$SynchronizedHelper: boolean casValue(androidx.concurrent.futures.AbstractResolvableFuture,java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r1.<androidx.concurrent.futures.AbstractResolvableFuture: void releaseWaiters()>() in <androidx.concurrent.futures.AbstractResolvableFuture: void complete(androidx.concurrent.futures.AbstractResolvableFuture)> ==> <androidx.concurrent.futures.AbstractResolvableFuture: void releaseWaiters()>
VIRTUAL edge: virtualinvoke $r1.<androidx.concurrent.futures.AbstractResolvableFuture: void afterDone()>() in <androidx.concurrent.futures.AbstractResolvableFuture: void complete(androidx.concurrent.futures.AbstractResolvableFuture)> ==> <androidx.concurrent.futures.AbstractResolvableFuture: void afterDone()>
SPECIAL edge: $r3 = specialinvoke $r1.<androidx.concurrent.futures.AbstractResolvableFuture: androidx.concurrent.futures.AbstractResolvableFuture$Listener clearListeners(androidx.concurrent.futures.AbstractResolvableFuture$Listener)>($r2) in <androidx.concurrent.futures.AbstractResolvableFuture: void complete(androidx.concurrent.futures.AbstractResolvableFuture)> ==> <androidx.concurrent.futures.AbstractResolvableFuture: androidx.concurrent.futures.AbstractResolvableFuture$Listener clearListeners(androidx.concurrent.futures.AbstractResolvableFuture$Listener)>
CLINIT edge: $r3 = <androidx.concurrent.futures.AbstractResolvableFuture: androidx.concurrent.futures.AbstractResolvableFuture$AtomicHelper ATOMIC_HELPER> in <androidx.concurrent.futures.AbstractResolvableFuture: void releaseWaiters()> ==> <androidx.concurrent.futures.AbstractResolvableFuture: void <clinit>()>
CLINIT edge: $r1 = <androidx.concurrent.futures.AbstractResolvableFuture$Waiter: androidx.concurrent.futures.AbstractResolvableFuture$Waiter TOMBSTONE> in <androidx.concurrent.futures.AbstractResolvableFuture: void releaseWaiters()> ==> <androidx.concurrent.futures.AbstractResolvableFuture$Waiter: void <clinit>()>
CLINIT edge: $r4 = <androidx.concurrent.futures.AbstractResolvableFuture: androidx.concurrent.futures.AbstractResolvableFuture$AtomicHelper ATOMIC_HELPER> in <androidx.concurrent.futures.AbstractResolvableFuture: androidx.concurrent.futures.AbstractResolvableFuture$Listener clearListeners(androidx.concurrent.futures.AbstractResolvableFuture$Listener)> ==> <androidx.concurrent.futures.AbstractResolvableFuture: void <clinit>()>
CLINIT edge: $r1 = <androidx.concurrent.futures.AbstractResolvableFuture$Listener: androidx.concurrent.futures.AbstractResolvableFuture$Listener TOMBSTONE> in <androidx.concurrent.futures.AbstractResolvableFuture: androidx.concurrent.futures.AbstractResolvableFuture$Listener clearListeners(androidx.concurrent.futures.AbstractResolvableFuture$Listener)> ==> <androidx.concurrent.futures.AbstractResolvableFuture$Listener: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<androidx.concurrent.futures.AbstractResolvableFuture$Listener: void <init>(java.lang.Runnable,java.util.concurrent.Executor)>(null, null) in <androidx.concurrent.futures.AbstractResolvableFuture$Listener: void <clinit>()> ==> <androidx.concurrent.futures.AbstractResolvableFuture$Listener: void <init>(java.lang.Runnable,java.util.concurrent.Executor)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.concurrent.futures.AbstractResolvableFuture$Listener: void <init>(java.lang.Runnable,java.util.concurrent.Executor)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<androidx.concurrent.futures.AbstractResolvableFuture$Waiter: void <init>(boolean)>(0) in <androidx.concurrent.futures.AbstractResolvableFuture$Waiter: void <clinit>()> ==> <androidx.concurrent.futures.AbstractResolvableFuture$Waiter: void <init>(boolean)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.concurrent.futures.AbstractResolvableFuture$Waiter: void <init>(boolean)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r4.<androidx.concurrent.futures.AbstractResolvableFuture$AtomicHelper: boolean casListeners(androidx.concurrent.futures.AbstractResolvableFuture,androidx.concurrent.futures.AbstractResolvableFuture$Listener,androidx.concurrent.futures.AbstractResolvableFuture$Listener)>(r0, $r3, $r1) in <androidx.concurrent.futures.AbstractResolvableFuture: androidx.concurrent.futures.AbstractResolvableFuture$Listener clearListeners(androidx.concurrent.futures.AbstractResolvableFuture$Listener)> ==> <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper: boolean casListeners(androidx.concurrent.futures.AbstractResolvableFuture,androidx.concurrent.futures.AbstractResolvableFuture$Listener,androidx.concurrent.futures.AbstractResolvableFuture$Listener)>
VIRTUAL edge: $z0 = virtualinvoke $r4.<androidx.concurrent.futures.AbstractResolvableFuture$AtomicHelper: boolean casListeners(androidx.concurrent.futures.AbstractResolvableFuture,androidx.concurrent.futures.AbstractResolvableFuture$Listener,androidx.concurrent.futures.AbstractResolvableFuture$Listener)>(r0, $r3, $r1) in <androidx.concurrent.futures.AbstractResolvableFuture: androidx.concurrent.futures.AbstractResolvableFuture$Listener clearListeners(androidx.concurrent.futures.AbstractResolvableFuture$Listener)> ==> <androidx.concurrent.futures.AbstractResolvableFuture$SynchronizedHelper: boolean casListeners(androidx.concurrent.futures.AbstractResolvableFuture,androidx.concurrent.futures.AbstractResolvableFuture$Listener,androidx.concurrent.futures.AbstractResolvableFuture$Listener)>
STATIC edge: $z0 = staticinvoke <kotlin.UByte$$ExternalSyntheticBackport0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>($r3, $r4, $r1, $r2) in <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper: boolean casListeners(androidx.concurrent.futures.AbstractResolvableFuture,androidx.concurrent.futures.AbstractResolvableFuture$Listener,androidx.concurrent.futures.AbstractResolvableFuture$Listener)> ==> <kotlin.UByte$$ExternalSyntheticBackport0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r3.<androidx.concurrent.futures.AbstractResolvableFuture$AtomicHelper: boolean casWaiters(androidx.concurrent.futures.AbstractResolvableFuture,androidx.concurrent.futures.AbstractResolvableFuture$Waiter,androidx.concurrent.futures.AbstractResolvableFuture$Waiter)>(r0, $r2, $r1) in <androidx.concurrent.futures.AbstractResolvableFuture: void releaseWaiters()> ==> <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper: boolean casWaiters(androidx.concurrent.futures.AbstractResolvableFuture,androidx.concurrent.futures.AbstractResolvableFuture$Waiter,androidx.concurrent.futures.AbstractResolvableFuture$Waiter)>
VIRTUAL edge: $z0 = virtualinvoke $r3.<androidx.concurrent.futures.AbstractResolvableFuture$AtomicHelper: boolean casWaiters(androidx.concurrent.futures.AbstractResolvableFuture,androidx.concurrent.futures.AbstractResolvableFuture$Waiter,androidx.concurrent.futures.AbstractResolvableFuture$Waiter)>(r0, $r2, $r1) in <androidx.concurrent.futures.AbstractResolvableFuture: void releaseWaiters()> ==> <androidx.concurrent.futures.AbstractResolvableFuture$SynchronizedHelper: boolean casWaiters(androidx.concurrent.futures.AbstractResolvableFuture,androidx.concurrent.futures.AbstractResolvableFuture$Waiter,androidx.concurrent.futures.AbstractResolvableFuture$Waiter)>
STATIC edge: $z0 = staticinvoke <kotlin.UByte$$ExternalSyntheticBackport0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>($r3, $r4, $r1, $r2) in <androidx.concurrent.futures.AbstractResolvableFuture$SafeAtomicHelper: boolean casWaiters(androidx.concurrent.futures.AbstractResolvableFuture,androidx.concurrent.futures.AbstractResolvableFuture$Waiter,androidx.concurrent.futures.AbstractResolvableFuture$Waiter)> ==> <kotlin.UByte$$ExternalSyntheticBackport0: boolean m(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r10) in <androidx.profileinstaller.ProfileInstaller: boolean hasAlreadyWrittenProfileForThisInstall(android.content.pm.PackageInfo,java.io.File,androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback)> ==> <java.lang.Throwable: void addSuppressed(java.lang.Throwable)>
SPECIAL edge: specialinvoke $r9.<androidx.profileinstaller.DeviceProfileWriter: void <init>(android.content.res.AssetManager,java.util.concurrent.Executor,androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback,java.lang.String,java.lang.String,java.lang.String,java.io.File)>($r6, $r3, $r4, $r2, "dexopt/baseline.prof", "dexopt/baseline.profm", $r5) in <androidx.profileinstaller.ProfileInstaller: boolean transcodeAndWrite(android.content.res.AssetManager,java.lang.String,android.content.pm.PackageInfo,java.io.File,java.lang.String,java.util.concurrent.Executor,androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback)> ==> <androidx.profileinstaller.DeviceProfileWriter: void <init>(android.content.res.AssetManager,java.util.concurrent.Executor,androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback,java.lang.String,java.lang.String,java.lang.String,java.io.File)>
VIRTUAL edge: $z0 = virtualinvoke $r9.<androidx.profileinstaller.DeviceProfileWriter: boolean deviceAllowsProfileInstallerAotWrites()>() in <androidx.profileinstaller.ProfileInstaller: boolean transcodeAndWrite(android.content.res.AssetManager,java.lang.String,android.content.pm.PackageInfo,java.io.File,java.lang.String,java.util.concurrent.Executor,androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback)> ==> <androidx.profileinstaller.DeviceProfileWriter: boolean deviceAllowsProfileInstallerAotWrites()>
VIRTUAL edge: $r9 = virtualinvoke $r9.<androidx.profileinstaller.DeviceProfileWriter: androidx.profileinstaller.DeviceProfileWriter read()>() in <androidx.profileinstaller.ProfileInstaller: boolean transcodeAndWrite(android.content.res.AssetManager,java.lang.String,android.content.pm.PackageInfo,java.io.File,java.lang.String,java.util.concurrent.Executor,androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback)> ==> <androidx.profileinstaller.DeviceProfileWriter: androidx.profileinstaller.DeviceProfileWriter read()>
VIRTUAL edge: $r9 = virtualinvoke $r9.<androidx.profileinstaller.DeviceProfileWriter: androidx.profileinstaller.DeviceProfileWriter transcodeIfNeeded()>() in <androidx.profileinstaller.ProfileInstaller: boolean transcodeAndWrite(android.content.res.AssetManager,java.lang.String,android.content.pm.PackageInfo,java.io.File,java.lang.String,java.util.concurrent.Executor,androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback)> ==> <androidx.profileinstaller.DeviceProfileWriter: androidx.profileinstaller.DeviceProfileWriter transcodeIfNeeded()>
VIRTUAL edge: $z0 = virtualinvoke $r9.<androidx.profileinstaller.DeviceProfileWriter: boolean write()>() in <androidx.profileinstaller.ProfileInstaller: boolean transcodeAndWrite(android.content.res.AssetManager,java.lang.String,android.content.pm.PackageInfo,java.io.File,java.lang.String,java.util.concurrent.Executor,androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback)> ==> <androidx.profileinstaller.DeviceProfileWriter: boolean write()>
STATIC edge: $r7 = staticinvoke <androidx.profileinstaller.DeviceProfileWriter: byte[] desiredVersion()>() in <androidx.profileinstaller.DeviceProfileWriter: void <init>(android.content.res.AssetManager,java.util.concurrent.Executor,androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback,java.lang.String,java.lang.String,java.lang.String,java.io.File)> ==> <androidx.profileinstaller.DeviceProfileWriter: byte[] desiredVersion()>
STATIC edge: $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <androidx.profileinstaller.DeviceProfileWriter: boolean deviceAllowsProfileInstallerAotWrites()> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
CLINIT edge: $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <androidx.profileinstaller.DeviceProfileWriter: boolean deviceAllowsProfileInstallerAotWrites()> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: $z0 = staticinvoke <androidx.profileinstaller.DeviceProfileWriter: boolean requiresMetadata()>() in <androidx.profileinstaller.DeviceProfileWriter: androidx.profileinstaller.DeviceProfileWriter read()> ==> <androidx.profileinstaller.DeviceProfileWriter: boolean requiresMetadata()>
CLINIT edge: staticinvoke <androidx.profileinstaller.ProfileTranscoder: void writeHeader(java.io.OutputStream,byte[])>($r3, $r2) in <androidx.profileinstaller.DeviceProfileWriter: androidx.profileinstaller.DeviceProfileWriter transcodeIfNeeded()> ==> <androidx.profileinstaller.ProfileTranscoder: void <clinit>()>
STATIC edge: $z0 = staticinvoke <androidx.profileinstaller.ProfileTranscoder: boolean transcodeAndWriteBody(java.io.OutputStream,byte[],androidx.profileinstaller.DexProfileData[])>($r3, $r2, $r1) in <androidx.profileinstaller.DeviceProfileWriter: androidx.profileinstaller.DeviceProfileWriter transcodeIfNeeded()> ==> <androidx.profileinstaller.ProfileTranscoder: boolean transcodeAndWriteBody(java.io.OutputStream,byte[],androidx.profileinstaller.DexProfileData[])>
STATIC edge: staticinvoke <androidx.profileinstaller.ProfileTranscoder: void writeHeader(java.io.OutputStream,byte[])>($r3, $r2) in <androidx.profileinstaller.DeviceProfileWriter: androidx.profileinstaller.DeviceProfileWriter transcodeIfNeeded()> ==> <androidx.profileinstaller.ProfileTranscoder: void writeHeader(java.io.OutputStream,byte[])>
STATIC edge: staticinvoke <androidx.profileinstaller.Encoding: void writeAll(java.io.InputStream,java.io.OutputStream)>($r2, $r3) in <androidx.profileinstaller.DeviceProfileWriter: boolean write()> ==> <androidx.profileinstaller.Encoding: void writeAll(java.io.InputStream,java.io.OutputStream)>
CLINIT edge: r0 = <androidx.profileinstaller.ProfileVersion: byte[] V001_N> in <androidx.profileinstaller.DeviceProfileWriter: byte[] desiredVersion()> ==> <androidx.profileinstaller.ProfileVersion: void <clinit>()>
CLINIT edge: r0 = <androidx.profileinstaller.ProfileVersion: byte[] V005_O> in <androidx.profileinstaller.DeviceProfileWriter: byte[] desiredVersion()> ==> <androidx.profileinstaller.ProfileVersion: void <clinit>()>
CLINIT edge: r0 = <androidx.profileinstaller.ProfileVersion: byte[] V015_S> in <androidx.profileinstaller.DeviceProfileWriter: byte[] desiredVersion()> ==> <androidx.profileinstaller.ProfileVersion: void <clinit>()>
CLINIT edge: $r3 = <androidx.profileinstaller.ProfileVersion: byte[] V015_S> in <androidx.profileinstaller.ProfileTranscoder: boolean transcodeAndWriteBody(java.io.OutputStream,byte[],androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.ProfileVersion: void <clinit>()>
STATIC edge: staticinvoke <androidx.profileinstaller.ProfileTranscoder: void writeProfileForN(java.io.OutputStream,androidx.profileinstaller.DexProfileData[])>($r1, $r0) in <androidx.profileinstaller.ProfileTranscoder: boolean transcodeAndWriteBody(java.io.OutputStream,byte[],androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.ProfileTranscoder: void writeProfileForN(java.io.OutputStream,androidx.profileinstaller.DexProfileData[])>
STATIC edge: staticinvoke <androidx.profileinstaller.ProfileTranscoder: void writeProfileForO_MR1(java.io.OutputStream,androidx.profileinstaller.DexProfileData[])>($r1, $r0) in <androidx.profileinstaller.ProfileTranscoder: boolean transcodeAndWriteBody(java.io.OutputStream,byte[],androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.ProfileTranscoder: void writeProfileForO_MR1(java.io.OutputStream,androidx.profileinstaller.DexProfileData[])>
STATIC edge: staticinvoke <androidx.profileinstaller.ProfileTranscoder: void writeProfileForO(java.io.OutputStream,androidx.profileinstaller.DexProfileData[])>($r1, $r0) in <androidx.profileinstaller.ProfileTranscoder: boolean transcodeAndWriteBody(java.io.OutputStream,byte[],androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.ProfileTranscoder: void writeProfileForO(java.io.OutputStream,androidx.profileinstaller.DexProfileData[])>
STATIC edge: staticinvoke <androidx.profileinstaller.ProfileTranscoder: void writeProfileForP(java.io.OutputStream,androidx.profileinstaller.DexProfileData[])>($r1, $r0) in <androidx.profileinstaller.ProfileTranscoder: boolean transcodeAndWriteBody(java.io.OutputStream,byte[],androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.ProfileTranscoder: void writeProfileForP(java.io.OutputStream,androidx.profileinstaller.DexProfileData[])>
STATIC edge: staticinvoke <androidx.profileinstaller.ProfileTranscoder: void writeProfileForS(java.io.OutputStream,androidx.profileinstaller.DexProfileData[])>($r1, $r0) in <androidx.profileinstaller.ProfileTranscoder: boolean transcodeAndWriteBody(java.io.OutputStream,byte[],androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.ProfileTranscoder: void writeProfileForS(java.io.OutputStream,androidx.profileinstaller.DexProfileData[])>
CLINIT edge: staticinvoke <androidx.profileinstaller.ProfileTranscoder: void writeProfileForN(java.io.OutputStream,androidx.profileinstaller.DexProfileData[])>($r1, $r0) in <androidx.profileinstaller.ProfileTranscoder: boolean transcodeAndWriteBody(java.io.OutputStream,byte[],androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.ProfileTranscoder: void <clinit>()>
CLINIT edge: staticinvoke <androidx.profileinstaller.ProfileTranscoder: void writeProfileForO(java.io.OutputStream,androidx.profileinstaller.DexProfileData[])>($r1, $r0) in <androidx.profileinstaller.ProfileTranscoder: boolean transcodeAndWriteBody(java.io.OutputStream,byte[],androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.ProfileTranscoder: void <clinit>()>
CLINIT edge: staticinvoke <androidx.profileinstaller.ProfileTranscoder: void writeProfileForS(java.io.OutputStream,androidx.profileinstaller.DexProfileData[])>($r1, $r0) in <androidx.profileinstaller.ProfileTranscoder: boolean transcodeAndWriteBody(java.io.OutputStream,byte[],androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.ProfileTranscoder: void <clinit>()>
CLINIT edge: $r2 = <androidx.profileinstaller.ProfileTranscoder: byte[] MAGIC_PROF> in <androidx.profileinstaller.ProfileTranscoder: void writeHeader(java.io.OutputStream,byte[])> ==> <androidx.profileinstaller.ProfileTranscoder: void <clinit>()>
CLINIT edge: $r5 = <androidx.profileinstaller.ProfileVersion: byte[] V001_N> in <androidx.profileinstaller.ProfileTranscoder: void writeProfileForN(java.io.OutputStream,androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.ProfileVersion: void <clinit>()>
STATIC edge: staticinvoke <androidx.profileinstaller.Encoding: void writeUInt16(java.io.OutputStream,int)>($r0, $i5) in <androidx.profileinstaller.ProfileTranscoder: void writeProfileForN(java.io.OutputStream,androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.Encoding: void writeUInt16(java.io.OutputStream,int)>
STATIC edge: staticinvoke <androidx.profileinstaller.Encoding: void writeUInt16(java.io.OutputStream,int)>($r0, $i2) in <androidx.profileinstaller.ProfileTranscoder: void writeProfileForN(java.io.OutputStream,androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.Encoding: void writeUInt16(java.io.OutputStream,int)>
STATIC edge: staticinvoke <androidx.profileinstaller.Encoding: void writeString(java.io.OutputStream,java.lang.String)>($r0, $r3) in <androidx.profileinstaller.ProfileTranscoder: void writeProfileForN(java.io.OutputStream,androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.Encoding: void writeString(java.io.OutputStream,java.lang.String)>
STATIC edge: staticinvoke <androidx.profileinstaller.Encoding: void writeUInt32(java.io.OutputStream,long)>($r0, $l3) in <androidx.profileinstaller.ProfileTranscoder: void writeProfileForN(java.io.OutputStream,androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.Encoding: void writeUInt32(java.io.OutputStream,long)>
STATIC edge: $i2 = staticinvoke <androidx.profileinstaller.Encoding: int utf8Length(java.lang.String)>($r3) in <androidx.profileinstaller.ProfileTranscoder: void writeProfileForN(java.io.OutputStream,androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.Encoding: int utf8Length(java.lang.String)>
STATIC edge: $r3 = staticinvoke <androidx.profileinstaller.ProfileTranscoder: java.lang.String generateDexKey(java.lang.String,java.lang.String,byte[])>($r3, $r4, $r5) in <androidx.profileinstaller.ProfileTranscoder: void writeProfileForN(java.io.OutputStream,androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.ProfileTranscoder: java.lang.String generateDexKey(java.lang.String,java.lang.String,byte[])>
CLINIT edge: $r3 = staticinvoke <androidx.profileinstaller.ProfileTranscoder: java.lang.String generateDexKey(java.lang.String,java.lang.String,byte[])>($r3, $r4, $r5) in <androidx.profileinstaller.ProfileTranscoder: void writeProfileForN(java.io.OutputStream,androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.ProfileTranscoder: void <clinit>()>
CLINIT edge: $r1 = <androidx.profileinstaller.ProfileVersion: byte[] V009_O_MR1> in <androidx.profileinstaller.ProfileTranscoder: void writeProfileForO_MR1(java.io.OutputStream,androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.ProfileVersion: void <clinit>()>
STATIC edge: staticinvoke <androidx.profileinstaller.Encoding: void writeCompressed(java.io.OutputStream,byte[])>($r0, $r1) in <androidx.profileinstaller.ProfileTranscoder: void writeProfileForO_MR1(java.io.OutputStream,androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.Encoding: void writeCompressed(java.io.OutputStream,byte[])>
STATIC edge: staticinvoke <androidx.profileinstaller.Encoding: void writeUInt8(java.io.OutputStream,int)>($r0, $i0) in <androidx.profileinstaller.ProfileTranscoder: void writeProfileForO_MR1(java.io.OutputStream,androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.Encoding: void writeUInt8(java.io.OutputStream,int)>
STATIC edge: $r1 = staticinvoke <androidx.profileinstaller.ProfileTranscoder: byte[] createCompressibleBody(androidx.profileinstaller.DexProfileData[],byte[])>($r2, $r1) in <androidx.profileinstaller.ProfileTranscoder: void writeProfileForO_MR1(java.io.OutputStream,androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.ProfileTranscoder: byte[] createCompressibleBody(androidx.profileinstaller.DexProfileData[],byte[])>
CLINIT edge: $r1 = staticinvoke <androidx.profileinstaller.ProfileTranscoder: byte[] createCompressibleBody(androidx.profileinstaller.DexProfileData[],byte[])>($r2, $r1) in <androidx.profileinstaller.ProfileTranscoder: void writeProfileForO_MR1(java.io.OutputStream,androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.ProfileTranscoder: void <clinit>()>
CLINIT edge: $r2 = <androidx.profileinstaller.ProfileVersion: byte[] V005_O> in <androidx.profileinstaller.ProfileTranscoder: void writeProfileForO(java.io.OutputStream,androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.ProfileVersion: void <clinit>()>
STATIC edge: staticinvoke <androidx.profileinstaller.Encoding: void writeUInt16(java.io.OutputStream,int)>($r0, $i5) in <androidx.profileinstaller.ProfileTranscoder: void writeProfileForO(java.io.OutputStream,androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.Encoding: void writeUInt16(java.io.OutputStream,int)>
STATIC edge: staticinvoke <androidx.profileinstaller.Encoding: void writeUInt16(java.io.OutputStream,int)>($r0, 0) in <androidx.profileinstaller.ProfileTranscoder: void writeProfileForO(java.io.OutputStream,androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.Encoding: void writeUInt16(java.io.OutputStream,int)>
STATIC edge: staticinvoke <androidx.profileinstaller.Encoding: void writeUInt16(java.io.OutputStream,int)>($r0, $i2) in <androidx.profileinstaller.ProfileTranscoder: void writeProfileForO(java.io.OutputStream,androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.Encoding: void writeUInt16(java.io.OutputStream,int)>
STATIC edge: staticinvoke <androidx.profileinstaller.Encoding: void writeString(java.io.OutputStream,java.lang.String)>($r0, $r5) in <androidx.profileinstaller.ProfileTranscoder: void writeProfileForO(java.io.OutputStream,androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.Encoding: void writeString(java.io.OutputStream,java.lang.String)>
STATIC edge: staticinvoke <androidx.profileinstaller.Encoding: void writeUInt32(java.io.OutputStream,long)>($r0, $l4) in <androidx.profileinstaller.ProfileTranscoder: void writeProfileForO(java.io.OutputStream,androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.Encoding: void writeUInt32(java.io.OutputStream,long)>
STATIC edge: staticinvoke <androidx.profileinstaller.Encoding: void writeUInt16(java.io.OutputStream,int)>($r0, $i3) in <androidx.profileinstaller.ProfileTranscoder: void writeProfileForO(java.io.OutputStream,androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.Encoding: void writeUInt16(java.io.OutputStream,int)>
STATIC edge: staticinvoke <androidx.profileinstaller.Encoding: void writeUInt16(java.io.OutputStream,int)>($r0, $i3) in <androidx.profileinstaller.ProfileTranscoder: void writeProfileForO(java.io.OutputStream,androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.Encoding: void writeUInt16(java.io.OutputStream,int)>
STATIC edge: $i3 = staticinvoke <androidx.profileinstaller.Encoding: int utf8Length(java.lang.String)>($r5) in <androidx.profileinstaller.ProfileTranscoder: void writeProfileForO(java.io.OutputStream,androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.Encoding: int utf8Length(java.lang.String)>
STATIC edge: $r5 = staticinvoke <androidx.profileinstaller.ProfileTranscoder: java.lang.String generateDexKey(java.lang.String,java.lang.String,byte[])>($r5, $r6, $r2) in <androidx.profileinstaller.ProfileTranscoder: void writeProfileForO(java.io.OutputStream,androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.ProfileTranscoder: java.lang.String generateDexKey(java.lang.String,java.lang.String,byte[])>
STATIC edge: staticinvoke <androidx.profileinstaller.Encoding: void writeUInt8(java.io.OutputStream,int)>($r0, $i0) in <androidx.profileinstaller.ProfileTranscoder: void writeProfileForO(java.io.OutputStream,androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.Encoding: void writeUInt8(java.io.OutputStream,int)>
CLINIT edge: $r5 = staticinvoke <androidx.profileinstaller.ProfileTranscoder: java.lang.String generateDexKey(java.lang.String,java.lang.String,byte[])>($r5, $r6, $r2) in <androidx.profileinstaller.ProfileTranscoder: void writeProfileForO(java.io.OutputStream,androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.ProfileTranscoder: void <clinit>()>
CLINIT edge: $r1 = <androidx.profileinstaller.ProfileVersion: byte[] V010_P> in <androidx.profileinstaller.ProfileTranscoder: void writeProfileForP(java.io.OutputStream,androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.ProfileVersion: void <clinit>()>
STATIC edge: staticinvoke <androidx.profileinstaller.Encoding: void writeCompressed(java.io.OutputStream,byte[])>($r0, $r1) in <androidx.profileinstaller.ProfileTranscoder: void writeProfileForP(java.io.OutputStream,androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.Encoding: void writeCompressed(java.io.OutputStream,byte[])>
STATIC edge: staticinvoke <androidx.profileinstaller.Encoding: void writeUInt8(java.io.OutputStream,int)>($r0, $i0) in <androidx.profileinstaller.ProfileTranscoder: void writeProfileForP(java.io.OutputStream,androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.Encoding: void writeUInt8(java.io.OutputStream,int)>
STATIC edge: $r1 = staticinvoke <androidx.profileinstaller.ProfileTranscoder: byte[] createCompressibleBody(androidx.profileinstaller.DexProfileData[],byte[])>($r2, $r1) in <androidx.profileinstaller.ProfileTranscoder: void writeProfileForP(java.io.OutputStream,androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.ProfileTranscoder: byte[] createCompressibleBody(androidx.profileinstaller.DexProfileData[],byte[])>
CLINIT edge: $r1 = staticinvoke <androidx.profileinstaller.ProfileTranscoder: byte[] createCompressibleBody(androidx.profileinstaller.DexProfileData[],byte[])>($r2, $r1) in <androidx.profileinstaller.ProfileTranscoder: void writeProfileForP(java.io.OutputStream,androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.ProfileTranscoder: void <clinit>()>
CLINIT edge: staticinvoke <androidx.profileinstaller.ProfileTranscoder: void writeProfileSections(java.io.OutputStream,androidx.profileinstaller.DexProfileData[])>($r0, $r1) in <androidx.profileinstaller.ProfileTranscoder: void writeProfileForS(java.io.OutputStream,androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.ProfileTranscoder: void <clinit>()>
STATIC edge: staticinvoke <androidx.profileinstaller.ProfileTranscoder: void writeProfileSections(java.io.OutputStream,androidx.profileinstaller.DexProfileData[])>($r0, $r1) in <androidx.profileinstaller.ProfileTranscoder: void writeProfileForS(java.io.OutputStream,androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.ProfileTranscoder: void writeProfileSections(java.io.OutputStream,androidx.profileinstaller.DexProfileData[])>
STATIC edge: staticinvoke <androidx.profileinstaller.Encoding: void writeUInt(java.io.OutputStream,long,int)>($r0, $l0, 2) in <androidx.profileinstaller.Encoding: void writeUInt16(java.io.OutputStream,int)> ==> <androidx.profileinstaller.Encoding: void writeUInt(java.io.OutputStream,long,int)>
STATIC edge: staticinvoke <androidx.profileinstaller.Encoding: void writeUInt(java.io.OutputStream,long,int)>($r0, $l0, 4) in <androidx.profileinstaller.Encoding: void writeUInt32(java.io.OutputStream,long)> ==> <androidx.profileinstaller.Encoding: void writeUInt(java.io.OutputStream,long,int)>
CLINIT edge: $r3 = staticinvoke <androidx.profileinstaller.ProfileVersion: java.lang.String dexKeySeparator(byte[])>($r2) in <androidx.profileinstaller.ProfileTranscoder: java.lang.String generateDexKey(java.lang.String,java.lang.String,byte[])> ==> <androidx.profileinstaller.ProfileVersion: void <clinit>()>
STATIC edge: $r1 = staticinvoke <androidx.profileinstaller.ProfileTranscoder: java.lang.String enforceSeparator(java.lang.String,java.lang.String)>($r0, $r3) in <androidx.profileinstaller.ProfileTranscoder: java.lang.String generateDexKey(java.lang.String,java.lang.String,byte[])> ==> <androidx.profileinstaller.ProfileTranscoder: java.lang.String enforceSeparator(java.lang.String,java.lang.String)>
STATIC edge: $r1 = staticinvoke <androidx.profileinstaller.ProfileVersion: java.lang.String dexKeySeparator(byte[])>($r2) in <androidx.profileinstaller.ProfileTranscoder: java.lang.String generateDexKey(java.lang.String,java.lang.String,byte[])> ==> <androidx.profileinstaller.ProfileVersion: java.lang.String dexKeySeparator(byte[])>
CLINIT edge: $r1 = staticinvoke <androidx.profileinstaller.ProfileTranscoder: java.lang.String enforceSeparator(java.lang.String,java.lang.String)>($r0, $r3) in <androidx.profileinstaller.ProfileTranscoder: java.lang.String generateDexKey(java.lang.String,java.lang.String,byte[])> ==> <androidx.profileinstaller.ProfileTranscoder: void <clinit>()>
STATIC edge: staticinvoke <androidx.profileinstaller.Encoding: void writeUInt32(java.io.OutputStream,long)>($r0, $l1) in <androidx.profileinstaller.Encoding: void writeCompressed(java.io.OutputStream,byte[])> ==> <androidx.profileinstaller.Encoding: void writeUInt32(java.io.OutputStream,long)>
STATIC edge: $r1 = staticinvoke <androidx.profileinstaller.Encoding: byte[] compress(byte[])>($r1) in <androidx.profileinstaller.Encoding: void writeCompressed(java.io.OutputStream,byte[])> ==> <androidx.profileinstaller.Encoding: byte[] compress(byte[])>
STATIC edge: staticinvoke <androidx.profileinstaller.Encoding: void writeUInt(java.io.OutputStream,long,int)>($r0, $l0, 1) in <androidx.profileinstaller.Encoding: void writeUInt8(java.io.OutputStream,int)> ==> <androidx.profileinstaller.Encoding: void writeUInt(java.io.OutputStream,long,int)>
CLINIT edge: $r0 = staticinvoke <androidx.profileinstaller.ProfileTranscoder: java.lang.String generateDexKey(java.lang.String,java.lang.String,byte[])>($r0, $r4, $r2) in <androidx.profileinstaller.ProfileTranscoder: byte[] createCompressibleBody(androidx.profileinstaller.DexProfileData[],byte[])> ==> <androidx.profileinstaller.ProfileTranscoder: void <clinit>()>
STATIC edge: $r8 = staticinvoke <androidx.profileinstaller.Encoding: java.lang.RuntimeException error(java.lang.String)>($r0) in <androidx.profileinstaller.ProfileTranscoder: byte[] createCompressibleBody(androidx.profileinstaller.DexProfileData[],byte[])> ==> <androidx.profileinstaller.Encoding: java.lang.RuntimeException error(java.lang.String)>
STATIC edge: staticinvoke <androidx.profileinstaller.ProfileTranscoder: void writeLineData(java.io.OutputStream,androidx.profileinstaller.DexProfileData)>($r5, $r3) in <androidx.profileinstaller.ProfileTranscoder: byte[] createCompressibleBody(androidx.profileinstaller.DexProfileData[],byte[])> ==> <androidx.profileinstaller.ProfileTranscoder: void writeLineData(java.io.OutputStream,androidx.profileinstaller.DexProfileData)>
STATIC edge: staticinvoke <androidx.profileinstaller.ProfileTranscoder: void writeLineHeader(java.io.OutputStream,androidx.profileinstaller.DexProfileData,java.lang.String)>($r5, $r3, $r0) in <androidx.profileinstaller.ProfileTranscoder: byte[] createCompressibleBody(androidx.profileinstaller.DexProfileData[],byte[])> ==> <androidx.profileinstaller.ProfileTranscoder: void writeLineHeader(java.io.OutputStream,androidx.profileinstaller.DexProfileData,java.lang.String)>
STATIC edge: $r0 = staticinvoke <androidx.profileinstaller.ProfileTranscoder: java.lang.String generateDexKey(java.lang.String,java.lang.String,byte[])>($r4, $r0, $r2) in <androidx.profileinstaller.ProfileTranscoder: byte[] createCompressibleBody(androidx.profileinstaller.DexProfileData[],byte[])> ==> <androidx.profileinstaller.ProfileTranscoder: java.lang.String generateDexKey(java.lang.String,java.lang.String,byte[])>
STATIC edge: staticinvoke <androidx.profileinstaller.ProfileTranscoder: void writeLineData(java.io.OutputStream,androidx.profileinstaller.DexProfileData)>($r5, $r3) in <androidx.profileinstaller.ProfileTranscoder: byte[] createCompressibleBody(androidx.profileinstaller.DexProfileData[],byte[])> ==> <androidx.profileinstaller.ProfileTranscoder: void writeLineData(java.io.OutputStream,androidx.profileinstaller.DexProfileData)>
STATIC edge: staticinvoke <androidx.profileinstaller.ProfileTranscoder: void writeLineHeader(java.io.OutputStream,androidx.profileinstaller.DexProfileData,java.lang.String)>($r5, $r3, $r0) in <androidx.profileinstaller.ProfileTranscoder: byte[] createCompressibleBody(androidx.profileinstaller.DexProfileData[],byte[])> ==> <androidx.profileinstaller.ProfileTranscoder: void writeLineHeader(java.io.OutputStream,androidx.profileinstaller.DexProfileData,java.lang.String)>
STATIC edge: $i5 = staticinvoke <androidx.profileinstaller.ProfileTranscoder: int getMethodBitmapStorageSize(int)>($i5) in <androidx.profileinstaller.ProfileTranscoder: byte[] createCompressibleBody(androidx.profileinstaller.DexProfileData[],byte[])> ==> <androidx.profileinstaller.ProfileTranscoder: int getMethodBitmapStorageSize(int)>
STATIC edge: $i4 = staticinvoke <androidx.profileinstaller.Encoding: int utf8Length(java.lang.String)>($r0) in <androidx.profileinstaller.ProfileTranscoder: byte[] createCompressibleBody(androidx.profileinstaller.DexProfileData[],byte[])> ==> <androidx.profileinstaller.Encoding: int utf8Length(java.lang.String)>
CLINIT edge: $r6 = <androidx.profileinstaller.ProfileVersion: byte[] V009_O_MR1> in <androidx.profileinstaller.ProfileTranscoder: byte[] createCompressibleBody(androidx.profileinstaller.DexProfileData[],byte[])> ==> <androidx.profileinstaller.ProfileVersion: void <clinit>()>
CLINIT edge: $r4 = staticinvoke <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.WritableFileSection writeDexFileSection(androidx.profileinstaller.DexProfileData[])>($r2) in <androidx.profileinstaller.ProfileTranscoder: void writeProfileSections(java.io.OutputStream,androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.ProfileTranscoder: void <clinit>()>
STATIC edge: staticinvoke <androidx.profileinstaller.Encoding: void writeUInt32(java.io.OutputStream,long)>($r0, 0L) in <androidx.profileinstaller.ProfileTranscoder: void writeProfileSections(java.io.OutputStream,androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.Encoding: void writeUInt32(java.io.OutputStream,long)>
STATIC edge: staticinvoke <androidx.profileinstaller.Encoding: void writeUInt32(java.io.OutputStream,long)>($r0, $l2) in <androidx.profileinstaller.ProfileTranscoder: void writeProfileSections(java.io.OutputStream,androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.Encoding: void writeUInt32(java.io.OutputStream,long)>
STATIC edge: staticinvoke <androidx.profileinstaller.Encoding: void writeUInt32(java.io.OutputStream,long)>($r0, $l5) in <androidx.profileinstaller.ProfileTranscoder: void writeProfileSections(java.io.OutputStream,androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.Encoding: void writeUInt32(java.io.OutputStream,long)>
STATIC edge: $r5 = staticinvoke <androidx.profileinstaller.Encoding: byte[] compress(byte[])>($r5) in <androidx.profileinstaller.ProfileTranscoder: void writeProfileSections(java.io.OutputStream,androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.Encoding: byte[] compress(byte[])>
STATIC edge: $r4 = staticinvoke <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.WritableFileSection createCompressibleMethodsSection(androidx.profileinstaller.DexProfileData[])>($r2) in <androidx.profileinstaller.ProfileTranscoder: void writeProfileSections(java.io.OutputStream,androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.WritableFileSection createCompressibleMethodsSection(androidx.profileinstaller.DexProfileData[])>
STATIC edge: $r4 = staticinvoke <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.WritableFileSection createCompressibleClassSection(androidx.profileinstaller.DexProfileData[])>($r2) in <androidx.profileinstaller.ProfileTranscoder: void writeProfileSections(java.io.OutputStream,androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.WritableFileSection createCompressibleClassSection(androidx.profileinstaller.DexProfileData[])>
STATIC edge: $r4 = staticinvoke <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.WritableFileSection writeDexFileSection(androidx.profileinstaller.DexProfileData[])>($r2) in <androidx.profileinstaller.ProfileTranscoder: void writeProfileSections(java.io.OutputStream,androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.WritableFileSection writeDexFileSection(androidx.profileinstaller.DexProfileData[])>
CLINIT edge: $r5 = <androidx.profileinstaller.ProfileVersion: byte[] V015_S> in <androidx.profileinstaller.ProfileTranscoder: void writeProfileSections(java.io.OutputStream,androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.ProfileVersion: void <clinit>()>
CLINIT edge: $r1 = <androidx.profileinstaller.ProfileVersion: byte[] V001_N> in <androidx.profileinstaller.ProfileVersion: java.lang.String dexKeySeparator(byte[])> ==> <androidx.profileinstaller.ProfileVersion: void <clinit>()>
CLINIT edge: staticinvoke <androidx.profileinstaller.ProfileTranscoder: void writeMethodsWithInlineCaches(java.io.OutputStream,androidx.profileinstaller.DexProfileData)>($r0, $r1) in <androidx.profileinstaller.ProfileTranscoder: void writeLineData(java.io.OutputStream,androidx.profileinstaller.DexProfileData)> ==> <androidx.profileinstaller.ProfileTranscoder: void <clinit>()>
STATIC edge: staticinvoke <androidx.profileinstaller.ProfileTranscoder: void writeMethodBitmap(java.io.OutputStream,androidx.profileinstaller.DexProfileData)>($r0, $r1) in <androidx.profileinstaller.ProfileTranscoder: void writeLineData(java.io.OutputStream,androidx.profileinstaller.DexProfileData)> ==> <androidx.profileinstaller.ProfileTranscoder: void writeMethodBitmap(java.io.OutputStream,androidx.profileinstaller.DexProfileData)>
STATIC edge: staticinvoke <androidx.profileinstaller.ProfileTranscoder: void writeClasses(java.io.OutputStream,androidx.profileinstaller.DexProfileData)>($r0, $r1) in <androidx.profileinstaller.ProfileTranscoder: void writeLineData(java.io.OutputStream,androidx.profileinstaller.DexProfileData)> ==> <androidx.profileinstaller.ProfileTranscoder: void writeClasses(java.io.OutputStream,androidx.profileinstaller.DexProfileData)>
STATIC edge: staticinvoke <androidx.profileinstaller.ProfileTranscoder: void writeMethodsWithInlineCaches(java.io.OutputStream,androidx.profileinstaller.DexProfileData)>($r0, $r1) in <androidx.profileinstaller.ProfileTranscoder: void writeLineData(java.io.OutputStream,androidx.profileinstaller.DexProfileData)> ==> <androidx.profileinstaller.ProfileTranscoder: void writeMethodsWithInlineCaches(java.io.OutputStream,androidx.profileinstaller.DexProfileData)>
STATIC edge: $i0 = staticinvoke <androidx.profileinstaller.Encoding: int utf8Length(java.lang.String)>($r1) in <androidx.profileinstaller.ProfileTranscoder: void writeLineHeader(java.io.OutputStream,androidx.profileinstaller.DexProfileData,java.lang.String)> ==> <androidx.profileinstaller.Encoding: int utf8Length(java.lang.String)>
STATIC edge: staticinvoke <androidx.profileinstaller.Encoding: void writeString(java.io.OutputStream,java.lang.String)>($r0, $r1) in <androidx.profileinstaller.ProfileTranscoder: void writeLineHeader(java.io.OutputStream,androidx.profileinstaller.DexProfileData,java.lang.String)> ==> <androidx.profileinstaller.Encoding: void writeString(java.io.OutputStream,java.lang.String)>
STATIC edge: staticinvoke <androidx.profileinstaller.Encoding: void writeUInt32(java.io.OutputStream,long)>($r0, $l1) in <androidx.profileinstaller.ProfileTranscoder: void writeLineHeader(java.io.OutputStream,androidx.profileinstaller.DexProfileData,java.lang.String)> ==> <androidx.profileinstaller.Encoding: void writeUInt32(java.io.OutputStream,long)>
STATIC edge: staticinvoke <androidx.profileinstaller.Encoding: void writeUInt32(java.io.OutputStream,long)>($r0, $l1) in <androidx.profileinstaller.ProfileTranscoder: void writeLineHeader(java.io.OutputStream,androidx.profileinstaller.DexProfileData,java.lang.String)> ==> <androidx.profileinstaller.Encoding: void writeUInt32(java.io.OutputStream,long)>
STATIC edge: staticinvoke <androidx.profileinstaller.Encoding: void writeUInt16(java.io.OutputStream,int)>($r0, $i0) in <androidx.profileinstaller.ProfileTranscoder: void writeLineHeader(java.io.OutputStream,androidx.profileinstaller.DexProfileData,java.lang.String)> ==> <androidx.profileinstaller.Encoding: void writeUInt16(java.io.OutputStream,int)>
CLINIT edge: $i0 = staticinvoke <androidx.profileinstaller.ProfileTranscoder: int roundUpToByte(int)>($i0) in <androidx.profileinstaller.ProfileTranscoder: int getMethodBitmapStorageSize(int)> ==> <androidx.profileinstaller.ProfileTranscoder: void <clinit>()>
STATIC edge: $i0 = staticinvoke <androidx.profileinstaller.ProfileTranscoder: int roundUpToByte(int)>($i0) in <androidx.profileinstaller.ProfileTranscoder: int getMethodBitmapStorageSize(int)> ==> <androidx.profileinstaller.ProfileTranscoder: int roundUpToByte(int)>
CLINIT edge: $i2 = staticinvoke <androidx.profileinstaller.ProfileTranscoder: int computeMethodFlags(androidx.profileinstaller.DexProfileData)>($r2) in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.WritableFileSection createCompressibleMethodsSection(androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.ProfileTranscoder: void <clinit>()>
STATIC edge: $r9 = staticinvoke <androidx.profileinstaller.Encoding: java.lang.RuntimeException error(java.lang.String)>($r8) in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.WritableFileSection createCompressibleMethodsSection(androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.Encoding: java.lang.RuntimeException error(java.lang.String)>
STATIC edge: staticinvoke <androidx.profileinstaller.Encoding: void writeUInt16(java.io.OutputStream,int)>($r1, $i2) in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.WritableFileSection createCompressibleMethodsSection(androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.Encoding: void writeUInt16(java.io.OutputStream,int)>
STATIC edge: staticinvoke <androidx.profileinstaller.Encoding: void writeUInt32(java.io.OutputStream,long)>($r1, $l5) in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.WritableFileSection createCompressibleMethodsSection(androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.Encoding: void writeUInt32(java.io.OutputStream,long)>
STATIC edge: staticinvoke <androidx.profileinstaller.Encoding: void writeUInt16(java.io.OutputStream,int)>($r1, $i0) in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.WritableFileSection createCompressibleMethodsSection(androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.Encoding: void writeUInt16(java.io.OutputStream,int)>
STATIC edge: $r4 = staticinvoke <androidx.profileinstaller.ProfileTranscoder: byte[] createMethodsWithInlineCaches(androidx.profileinstaller.DexProfileData)>($r2) in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.WritableFileSection createCompressibleMethodsSection(androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.ProfileTranscoder: byte[] createMethodsWithInlineCaches(androidx.profileinstaller.DexProfileData)>
STATIC edge: $r3 = staticinvoke <androidx.profileinstaller.ProfileTranscoder: byte[] createMethodBitmapRegion(androidx.profileinstaller.DexProfileData)>($r2) in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.WritableFileSection createCompressibleMethodsSection(androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.ProfileTranscoder: byte[] createMethodBitmapRegion(androidx.profileinstaller.DexProfileData)>
STATIC edge: $i2 = staticinvoke <androidx.profileinstaller.ProfileTranscoder: int computeMethodFlags(androidx.profileinstaller.DexProfileData)>($r2) in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.WritableFileSection createCompressibleMethodsSection(androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.ProfileTranscoder: int computeMethodFlags(androidx.profileinstaller.DexProfileData)>
CLINIT edge: $r6 = <androidx.profileinstaller.FileSectionType: androidx.profileinstaller.FileSectionType METHODS> in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.WritableFileSection createCompressibleMethodsSection(androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.FileSectionType: void <clinit>()>
CLINIT edge: staticinvoke <androidx.profileinstaller.ProfileTranscoder: void writeClasses(java.io.OutputStream,androidx.profileinstaller.DexProfileData)>($r1, $r2) in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.WritableFileSection createCompressibleClassSection(androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.ProfileTranscoder: void <clinit>()>
STATIC edge: $r8 = staticinvoke <androidx.profileinstaller.Encoding: java.lang.RuntimeException error(java.lang.String)>($r7) in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.WritableFileSection createCompressibleClassSection(androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.Encoding: java.lang.RuntimeException error(java.lang.String)>
STATIC edge: staticinvoke <androidx.profileinstaller.ProfileTranscoder: void writeClasses(java.io.OutputStream,androidx.profileinstaller.DexProfileData)>($r1, $r2) in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.WritableFileSection createCompressibleClassSection(androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.ProfileTranscoder: void writeClasses(java.io.OutputStream,androidx.profileinstaller.DexProfileData)>
STATIC edge: staticinvoke <androidx.profileinstaller.Encoding: void writeUInt16(java.io.OutputStream,int)>($r1, $i2) in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.WritableFileSection createCompressibleClassSection(androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.Encoding: void writeUInt16(java.io.OutputStream,int)>
CLINIT edge: $r5 = <androidx.profileinstaller.FileSectionType: androidx.profileinstaller.FileSectionType CLASSES> in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.WritableFileSection createCompressibleClassSection(androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.FileSectionType: void <clinit>()>
CLINIT edge: $r0 = <androidx.profileinstaller.ProfileVersion: byte[] V015_S> in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.WritableFileSection writeDexFileSection(androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.ProfileVersion: void <clinit>()>
STATIC edge: $r9 = staticinvoke <androidx.profileinstaller.Encoding: java.lang.RuntimeException error(java.lang.String)>($r4) in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.WritableFileSection writeDexFileSection(androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.Encoding: java.lang.RuntimeException error(java.lang.String)>
STATIC edge: staticinvoke <androidx.profileinstaller.Encoding: void writeString(java.io.OutputStream,java.lang.String)>($r2, $r4) in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.WritableFileSection writeDexFileSection(androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.Encoding: void writeString(java.io.OutputStream,java.lang.String)>
STATIC edge: staticinvoke <androidx.profileinstaller.Encoding: void writeUInt16(java.io.OutputStream,int)>($r2, $i2) in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.WritableFileSection writeDexFileSection(androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.Encoding: void writeUInt16(java.io.OutputStream,int)>
STATIC edge: $i2 = staticinvoke <androidx.profileinstaller.Encoding: int utf8Length(java.lang.String)>($r4) in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.WritableFileSection writeDexFileSection(androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.Encoding: int utf8Length(java.lang.String)>
STATIC edge: $r4 = staticinvoke <androidx.profileinstaller.ProfileTranscoder: java.lang.String generateDexKey(java.lang.String,java.lang.String,byte[])>($r4, $r5, $r0) in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.WritableFileSection writeDexFileSection(androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.ProfileTranscoder: java.lang.String generateDexKey(java.lang.String,java.lang.String,byte[])>
STATIC edge: staticinvoke <androidx.profileinstaller.Encoding: void writeUInt32(java.io.OutputStream,long)>($r2, $l3) in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.WritableFileSection writeDexFileSection(androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.Encoding: void writeUInt32(java.io.OutputStream,long)>
STATIC edge: staticinvoke <androidx.profileinstaller.Encoding: void writeUInt32(java.io.OutputStream,long)>($r2, $l3) in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.WritableFileSection writeDexFileSection(androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.Encoding: void writeUInt32(java.io.OutputStream,long)>
CLINIT edge: $r7 = <androidx.profileinstaller.FileSectionType: androidx.profileinstaller.FileSectionType DEX_FILES> in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.WritableFileSection writeDexFileSection(androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.FileSectionType: void <clinit>()>
CLINIT edge: $r4 = staticinvoke <androidx.profileinstaller.ProfileTranscoder: java.lang.String generateDexKey(java.lang.String,java.lang.String,byte[])>($r4, $r5, $r0) in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.WritableFileSection writeDexFileSection(androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.ProfileTranscoder: void <clinit>()>
CLINIT edge: $i0 = staticinvoke <androidx.profileinstaller.ProfileTranscoder: int getMethodBitmapStorageSize(int)>($i0) in <androidx.profileinstaller.ProfileTranscoder: void writeMethodBitmap(java.io.OutputStream,androidx.profileinstaller.DexProfileData)> ==> <androidx.profileinstaller.ProfileTranscoder: void <clinit>()>
STATIC edge: staticinvoke <androidx.profileinstaller.ProfileTranscoder: void setMethodBitmapBit(byte[],int,int,androidx.profileinstaller.DexProfileData)>($r2, 4, $i0, $r1) in <androidx.profileinstaller.ProfileTranscoder: void writeMethodBitmap(java.io.OutputStream,androidx.profileinstaller.DexProfileData)> ==> <androidx.profileinstaller.ProfileTranscoder: void setMethodBitmapBit(byte[],int,int,androidx.profileinstaller.DexProfileData)>
STATIC edge: staticinvoke <androidx.profileinstaller.ProfileTranscoder: void setMethodBitmapBit(byte[],int,int,androidx.profileinstaller.DexProfileData)>($r2, 2, $i0, $r1) in <androidx.profileinstaller.ProfileTranscoder: void writeMethodBitmap(java.io.OutputStream,androidx.profileinstaller.DexProfileData)> ==> <androidx.profileinstaller.ProfileTranscoder: void setMethodBitmapBit(byte[],int,int,androidx.profileinstaller.DexProfileData)>
STATIC edge: $i0 = staticinvoke <androidx.profileinstaller.ProfileTranscoder: int getMethodBitmapStorageSize(int)>($i0) in <androidx.profileinstaller.ProfileTranscoder: void writeMethodBitmap(java.io.OutputStream,androidx.profileinstaller.DexProfileData)> ==> <androidx.profileinstaller.ProfileTranscoder: int getMethodBitmapStorageSize(int)>
CLINIT edge: $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3) in <androidx.profileinstaller.ProfileTranscoder: void writeClasses(java.io.OutputStream,androidx.profileinstaller.DexProfileData)> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: staticinvoke <androidx.profileinstaller.Encoding: void writeUInt16(java.io.OutputStream,int)>($r0, $i2) in <androidx.profileinstaller.ProfileTranscoder: void writeClasses(java.io.OutputStream,androidx.profileinstaller.DexProfileData)> ==> <androidx.profileinstaller.Encoding: void writeUInt16(java.io.OutputStream,int)>
STATIC edge: $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3) in <androidx.profileinstaller.ProfileTranscoder: void writeClasses(java.io.OutputStream,androidx.profileinstaller.DexProfileData)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: staticinvoke <androidx.profileinstaller.Encoding: void writeUInt16(java.io.OutputStream,int)>($r0, $i0) in <androidx.profileinstaller.ProfileTranscoder: void writeMethodsWithInlineCaches(java.io.OutputStream,androidx.profileinstaller.DexProfileData)> ==> <androidx.profileinstaller.Encoding: void writeUInt16(java.io.OutputStream,int)>
STATIC edge: staticinvoke <androidx.profileinstaller.Encoding: void writeUInt16(java.io.OutputStream,int)>($r0, 0) in <androidx.profileinstaller.ProfileTranscoder: void writeMethodsWithInlineCaches(java.io.OutputStream,androidx.profileinstaller.DexProfileData)> ==> <androidx.profileinstaller.Encoding: void writeUInt16(java.io.OutputStream,int)>
CLINIT edge: staticinvoke <androidx.profileinstaller.ProfileTranscoder: void writeMethodsWithInlineCaches(java.io.OutputStream,androidx.profileinstaller.DexProfileData)>($r2, $r1) in <androidx.profileinstaller.ProfileTranscoder: byte[] createMethodsWithInlineCaches(androidx.profileinstaller.DexProfileData)> ==> <androidx.profileinstaller.ProfileTranscoder: void <clinit>()>
STATIC edge: staticinvoke <androidx.profileinstaller.ProfileTranscoder: void writeMethodsWithInlineCaches(java.io.OutputStream,androidx.profileinstaller.DexProfileData)>($r2, $r1) in <androidx.profileinstaller.ProfileTranscoder: byte[] createMethodsWithInlineCaches(androidx.profileinstaller.DexProfileData)> ==> <androidx.profileinstaller.ProfileTranscoder: void writeMethodsWithInlineCaches(java.io.OutputStream,androidx.profileinstaller.DexProfileData)>
CLINIT edge: staticinvoke <androidx.profileinstaller.ProfileTranscoder: void writeMethodBitmap(java.io.OutputStream,androidx.profileinstaller.DexProfileData)>($r2, $r1) in <androidx.profileinstaller.ProfileTranscoder: byte[] createMethodBitmapRegion(androidx.profileinstaller.DexProfileData)> ==> <androidx.profileinstaller.ProfileTranscoder: void <clinit>()>
STATIC edge: staticinvoke <androidx.profileinstaller.ProfileTranscoder: void writeMethodBitmap(java.io.OutputStream,androidx.profileinstaller.DexProfileData)>($r2, $r1) in <androidx.profileinstaller.ProfileTranscoder: byte[] createMethodBitmapRegion(androidx.profileinstaller.DexProfileData)> ==> <androidx.profileinstaller.ProfileTranscoder: void writeMethodBitmap(java.io.OutputStream,androidx.profileinstaller.DexProfileData)>
STATIC edge: $r0 = staticinvoke <androidx.profileinstaller.FileSectionType: androidx.profileinstaller.FileSectionType[] $values()>() in <androidx.profileinstaller.FileSectionType: void <clinit>()> ==> <androidx.profileinstaller.FileSectionType: androidx.profileinstaller.FileSectionType[] $values()>
CLINIT edge: $i0 = staticinvoke <androidx.profileinstaller.ProfileTranscoder: int methodFlagBitmapIndex(int,int,int)>($i1, $i0, $i2) in <androidx.profileinstaller.ProfileTranscoder: void setMethodBitmapBit(byte[],int,int,androidx.profileinstaller.DexProfileData)> ==> <androidx.profileinstaller.ProfileTranscoder: void <clinit>()>
STATIC edge: $i0 = staticinvoke <androidx.profileinstaller.ProfileTranscoder: int methodFlagBitmapIndex(int,int,int)>($i1, $i0, $i2) in <androidx.profileinstaller.ProfileTranscoder: void setMethodBitmapBit(byte[],int,int,androidx.profileinstaller.DexProfileData)> ==> <androidx.profileinstaller.ProfileTranscoder: int methodFlagBitmapIndex(int,int,int)>
STATIC edge: $r2 = staticinvoke <androidx.profileinstaller.Encoding: java.lang.RuntimeException error(java.lang.String)>($r1) in <androidx.profileinstaller.ProfileTranscoder: int methodFlagBitmapIndex(int,int,int)> ==> <androidx.profileinstaller.Encoding: java.lang.RuntimeException error(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<androidx.profileinstaller.FileSectionType: void <init>(java.lang.String,int,long)>("DEX_FILES", 0, 0L) in <androidx.profileinstaller.FileSectionType: void <clinit>()> ==> <androidx.profileinstaller.FileSectionType: void <init>(java.lang.String,int,long)>
SPECIAL edge: specialinvoke $r1.<androidx.profileinstaller.FileSectionType: void <init>(java.lang.String,int,long)>("CLASSES", 2, 2L) in <androidx.profileinstaller.FileSectionType: void <clinit>()> ==> <androidx.profileinstaller.FileSectionType: void <init>(java.lang.String,int,long)>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>($r1, $i0) in <androidx.profileinstaller.FileSectionType: void <init>(java.lang.String,int,long)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
VIRTUAL edge: virtualinvoke $r3.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r4) in <androidx.profileinstaller.ProfileTranscoder: byte[] createMethodBitmapRegion(androidx.profileinstaller.DexProfileData)> ==> <java.lang.Throwable: void addSuppressed(java.lang.Throwable)>
VIRTUAL edge: virtualinvoke $r3.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r4) in <androidx.profileinstaller.ProfileTranscoder: byte[] createMethodsWithInlineCaches(androidx.profileinstaller.DexProfileData)> ==> <java.lang.Throwable: void addSuppressed(java.lang.Throwable)>
VIRTUAL edge: virtualinvoke $r10.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r11) in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.WritableFileSection writeDexFileSection(androidx.profileinstaller.DexProfileData[])> ==> <java.lang.Throwable: void addSuppressed(java.lang.Throwable)>
SPECIAL edge: specialinvoke $r6.<androidx.profileinstaller.WritableFileSection: void <init>(androidx.profileinstaller.FileSectionType,int,byte[],boolean)>($r7, $i1, $r0, 0) in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.WritableFileSection writeDexFileSection(androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.WritableFileSection: void <init>(androidx.profileinstaller.FileSectionType,int,byte[],boolean)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.profileinstaller.WritableFileSection: void <init>(androidx.profileinstaller.FileSectionType,int,byte[],boolean)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r9.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r10) in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.WritableFileSection createCompressibleClassSection(androidx.profileinstaller.DexProfileData[])> ==> <java.lang.Throwable: void addSuppressed(java.lang.Throwable)>
SPECIAL edge: specialinvoke $r4.<androidx.profileinstaller.WritableFileSection: void <init>(androidx.profileinstaller.FileSectionType,int,byte[],boolean)>($r5, $i1, $r3, 1) in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.WritableFileSection createCompressibleClassSection(androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.WritableFileSection: void <init>(androidx.profileinstaller.FileSectionType,int,byte[],boolean)>
VIRTUAL edge: virtualinvoke $r10.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r11) in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.WritableFileSection createCompressibleMethodsSection(androidx.profileinstaller.DexProfileData[])> ==> <java.lang.Throwable: void addSuppressed(java.lang.Throwable)>
SPECIAL edge: specialinvoke $r5.<androidx.profileinstaller.WritableFileSection: void <init>(androidx.profileinstaller.FileSectionType,int,byte[],boolean)>($r6, $i1, $r3, 1) in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.WritableFileSection createCompressibleMethodsSection(androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.WritableFileSection: void <init>(androidx.profileinstaller.FileSectionType,int,byte[],boolean)>
VIRTUAL edge: virtualinvoke $r4.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r5) in <androidx.profileinstaller.Encoding: byte[] compress(byte[])> ==> <java.lang.Throwable: void addSuppressed(java.lang.Throwable)>
VIRTUAL edge: $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>($r2) in <androidx.profileinstaller.ProfileTranscoder: java.lang.String enforceSeparator(java.lang.String,java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>($r2) in <androidx.profileinstaller.ProfileTranscoder: java.lang.String enforceSeparator(java.lang.String,java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $l2 = virtualinvoke $r7.<androidx.profileinstaller.FileSectionType: long getValue()>() in <androidx.profileinstaller.ProfileTranscoder: void writeProfileSections(java.io.OutputStream,androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.FileSectionType: long getValue()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.String: int length()>() in <androidx.profileinstaller.ProfileTranscoder: java.lang.String generateDexKey(java.lang.String,java.lang.String,byte[])> ==> <java.lang.String: int length()>
VIRTUAL edge: $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>("classes.dex") in <androidx.profileinstaller.ProfileTranscoder: java.lang.String generateDexKey(java.lang.String,java.lang.String,byte[])> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r0.<java.lang.String: boolean contains(java.lang.CharSequence)>("!") in <androidx.profileinstaller.ProfileTranscoder: java.lang.String generateDexKey(java.lang.String,java.lang.String,byte[])> ==> <java.lang.String: boolean contains(java.lang.CharSequence)>
VIRTUAL edge: $z0 = virtualinvoke $r0.<java.lang.String: boolean endsWith(java.lang.String)>(".apk") in <androidx.profileinstaller.ProfileTranscoder: java.lang.String generateDexKey(java.lang.String,java.lang.String,byte[])> ==> <java.lang.String: boolean endsWith(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean contains(java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "!") in <androidx.profileinstaller.ProfileTranscoder: java.lang.String enforceSeparator(java.lang.String,java.lang.String)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
VIRTUAL edge: $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("!", ":") in <androidx.profileinstaller.ProfileTranscoder: java.lang.String enforceSeparator(java.lang.String,java.lang.String)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke $r2.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r0) in <androidx.profileinstaller.Encoding: int utf8Length(java.lang.String)> ==> <java.lang.String: byte[] getBytes(java.nio.charset.Charset)>
VIRTUAL edge: $r2 = virtualinvoke $r3.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r1) in <androidx.profileinstaller.Encoding: void writeString(java.io.OutputStream,java.lang.String)> ==> <java.lang.String: byte[] getBytes(java.nio.charset.Charset)>
VIRTUAL edge: virtualinvoke $r7.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r8) in <androidx.profileinstaller.DeviceProfileWriter: boolean write()> ==> <java.lang.Throwable: void addSuppressed(java.lang.Throwable)>
SPECIAL edge: specialinvoke r0.<androidx.profileinstaller.DeviceProfileWriter: void assertDeviceAllowsProfileInstallerAotWritesCalled()>() in <androidx.profileinstaller.DeviceProfileWriter: boolean write()> ==> <androidx.profileinstaller.DeviceProfileWriter: void assertDeviceAllowsProfileInstallerAotWritesCalled()>
SPECIAL edge: specialinvoke r0.<androidx.profileinstaller.DeviceProfileWriter: void result(int,java.lang.Object)>(1, null) in <androidx.profileinstaller.DeviceProfileWriter: boolean write()> ==> <androidx.profileinstaller.DeviceProfileWriter: void result(int,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<androidx.profileinstaller.DeviceProfileWriter: void result(int,java.lang.Object)>(7, $r10) in <androidx.profileinstaller.DeviceProfileWriter: boolean write()> ==> <androidx.profileinstaller.DeviceProfileWriter: void result(int,java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<androidx.profileinstaller.DeviceProfileWriter$$ExternalSyntheticLambda0: void <init>(androidx.profileinstaller.DeviceProfileWriter,int,java.lang.Object)>(r0, $i0, $r1) in <androidx.profileinstaller.DeviceProfileWriter: void result(int,java.lang.Object)> ==> <androidx.profileinstaller.DeviceProfileWriter$$ExternalSyntheticLambda0: void <init>(androidx.profileinstaller.DeviceProfileWriter,int,java.lang.Object)>
EXECUTOR edge: interfaceinvoke $r2.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r3) in <androidx.profileinstaller.DeviceProfileWriter: void result(int,java.lang.Object)> ==> <androidx.profileinstaller.DeviceProfileWriter$$ExternalSyntheticLambda0: void run()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.profileinstaller.DeviceProfileWriter$$ExternalSyntheticLambda0: void <init>(androidx.profileinstaller.DeviceProfileWriter,int,java.lang.Object)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r5.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r6) in <androidx.profileinstaller.DeviceProfileWriter: androidx.profileinstaller.DeviceProfileWriter transcodeIfNeeded()> ==> <java.lang.Throwable: void addSuppressed(java.lang.Throwable)>
SPECIAL edge: specialinvoke r0.<androidx.profileinstaller.DeviceProfileWriter: void assertDeviceAllowsProfileInstallerAotWritesCalled()>() in <androidx.profileinstaller.DeviceProfileWriter: androidx.profileinstaller.DeviceProfileWriter transcodeIfNeeded()> ==> <androidx.profileinstaller.DeviceProfileWriter: void assertDeviceAllowsProfileInstallerAotWritesCalled()>
SPECIAL edge: specialinvoke r0.<androidx.profileinstaller.DeviceProfileWriter: void assertDeviceAllowsProfileInstallerAotWritesCalled()>() in <androidx.profileinstaller.DeviceProfileWriter: androidx.profileinstaller.DeviceProfileWriter read()> ==> <androidx.profileinstaller.DeviceProfileWriter: void assertDeviceAllowsProfileInstallerAotWritesCalled()>
SPECIAL edge: $r3 = specialinvoke r0.<androidx.profileinstaller.DeviceProfileWriter: java.io.InputStream getProfileInputStream(android.content.res.AssetManager)>($r2) in <androidx.profileinstaller.DeviceProfileWriter: androidx.profileinstaller.DeviceProfileWriter read()> ==> <androidx.profileinstaller.DeviceProfileWriter: java.io.InputStream getProfileInputStream(android.content.res.AssetManager)>
SPECIAL edge: $r4 = specialinvoke r0.<androidx.profileinstaller.DeviceProfileWriter: androidx.profileinstaller.DexProfileData[] readProfileInternal(java.io.InputStream)>($r3) in <androidx.profileinstaller.DeviceProfileWriter: androidx.profileinstaller.DeviceProfileWriter read()> ==> <androidx.profileinstaller.DeviceProfileWriter: androidx.profileinstaller.DexProfileData[] readProfileInternal(java.io.InputStream)>
SPECIAL edge: $r5 = specialinvoke r0.<androidx.profileinstaller.DeviceProfileWriter: androidx.profileinstaller.DeviceProfileWriter addMetadata(androidx.profileinstaller.DexProfileData[],byte[])>($r4, $r1) in <androidx.profileinstaller.DeviceProfileWriter: androidx.profileinstaller.DeviceProfileWriter read()> ==> <androidx.profileinstaller.DeviceProfileWriter: androidx.profileinstaller.DeviceProfileWriter addMetadata(androidx.profileinstaller.DexProfileData[],byte[])>
CLINIT edge: $r2 = <androidx.profileinstaller.ProfileTranscoder: byte[] MAGIC_PROF> in <androidx.profileinstaller.DeviceProfileWriter: androidx.profileinstaller.DexProfileData[] readProfileInternal(java.io.InputStream)> ==> <androidx.profileinstaller.ProfileTranscoder: void <clinit>()>
STATIC edge: $r4 = staticinvoke <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData[] readProfile(java.io.InputStream,byte[],java.lang.String)>($r1, $r2, $r3) in <androidx.profileinstaller.DeviceProfileWriter: androidx.profileinstaller.DexProfileData[] readProfileInternal(java.io.InputStream)> ==> <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData[] readProfile(java.io.InputStream,byte[],java.lang.String)>
STATIC edge: $r2 = staticinvoke <androidx.profileinstaller.ProfileTranscoder: byte[] readHeader(java.io.InputStream,byte[])>($r1, $r2) in <androidx.profileinstaller.DeviceProfileWriter: androidx.profileinstaller.DexProfileData[] readProfileInternal(java.io.InputStream)> ==> <androidx.profileinstaller.ProfileTranscoder: byte[] readHeader(java.io.InputStream,byte[])>
CLINIT edge: $r6 = <androidx.profileinstaller.ProfileTranscoder: byte[] MAGIC_PROFM> in <androidx.profileinstaller.DeviceProfileWriter: androidx.profileinstaller.DeviceProfileWriter addMetadata(androidx.profileinstaller.DexProfileData[],byte[])> ==> <androidx.profileinstaller.ProfileTranscoder: void <clinit>()>
STATIC edge: $r1 = staticinvoke <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData[] readMeta(java.io.InputStream,byte[],byte[],androidx.profileinstaller.DexProfileData[])>($r5, $r6, $r2, $r1) in <androidx.profileinstaller.DeviceProfileWriter: androidx.profileinstaller.DeviceProfileWriter addMetadata(androidx.profileinstaller.DexProfileData[],byte[])> ==> <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData[] readMeta(java.io.InputStream,byte[],byte[],androidx.profileinstaller.DexProfileData[])>
STATIC edge: $r6 = staticinvoke <androidx.profileinstaller.ProfileTranscoder: byte[] readHeader(java.io.InputStream,byte[])>($r5, $r6) in <androidx.profileinstaller.DeviceProfileWriter: androidx.profileinstaller.DeviceProfileWriter addMetadata(androidx.profileinstaller.DexProfileData[],byte[])> ==> <androidx.profileinstaller.ProfileTranscoder: byte[] readHeader(java.io.InputStream,byte[])>
CLINIT edge: $r3 = <androidx.profileinstaller.ProfileVersion: byte[] V010_P> in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData[] readProfile(java.io.InputStream,byte[],java.lang.String)> ==> <androidx.profileinstaller.ProfileVersion: void <clinit>()>
STATIC edge: $r8 = staticinvoke <androidx.profileinstaller.Encoding: java.lang.RuntimeException error(java.lang.String)>("Unsupported version") in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData[] readProfile(java.io.InputStream,byte[],java.lang.String)> ==> <androidx.profileinstaller.Encoding: java.lang.RuntimeException error(java.lang.String)>
STATIC edge: $r8 = staticinvoke <androidx.profileinstaller.Encoding: java.lang.RuntimeException error(java.lang.String)>("Content found after the end of file") in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData[] readProfile(java.io.InputStream,byte[],java.lang.String)> ==> <androidx.profileinstaller.Encoding: java.lang.RuntimeException error(java.lang.String)>
STATIC edge: $r5 = staticinvoke <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData[] readUncompressedBody(java.io.InputStream,java.lang.String,int)>($r4, $r0, $i0) in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData[] readProfile(java.io.InputStream,byte[],java.lang.String)> ==> <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData[] readUncompressedBody(java.io.InputStream,java.lang.String,int)>
STATIC edge: $r2 = staticinvoke <androidx.profileinstaller.Encoding: byte[] readCompressed(java.io.InputStream,int,int)>($r1, $i3, $i4) in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData[] readProfile(java.io.InputStream,byte[],java.lang.String)> ==> <androidx.profileinstaller.Encoding: byte[] readCompressed(java.io.InputStream,int,int)>
STATIC edge: $l2 = staticinvoke <androidx.profileinstaller.Encoding: long readUInt32(java.io.InputStream)>($r1) in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData[] readProfile(java.io.InputStream,byte[],java.lang.String)> ==> <androidx.profileinstaller.Encoding: long readUInt32(java.io.InputStream)>
STATIC edge: $i0 = staticinvoke <androidx.profileinstaller.Encoding: int readUInt8(java.io.InputStream)>($r1) in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData[] readProfile(java.io.InputStream,byte[],java.lang.String)> ==> <androidx.profileinstaller.Encoding: int readUInt8(java.io.InputStream)>
CLINIT edge: $r5 = staticinvoke <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData[] readUncompressedBody(java.io.InputStream,java.lang.String,int)>($r4, $r0, $i0) in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData[] readProfile(java.io.InputStream,byte[],java.lang.String)> ==> <androidx.profileinstaller.ProfileTranscoder: void <clinit>()>
CLINIT edge: $r1 = <androidx.profileinstaller.ProfileVersion: byte[] V010_P> in <androidx.profileinstaller.ProfileTranscoder: byte[] readHeader(java.io.InputStream,byte[])> ==> <androidx.profileinstaller.ProfileVersion: void <clinit>()>
STATIC edge: $r3 = staticinvoke <androidx.profileinstaller.Encoding: java.lang.RuntimeException error(java.lang.String)>("Invalid magic") in <androidx.profileinstaller.ProfileTranscoder: byte[] readHeader(java.io.InputStream,byte[])> ==> <androidx.profileinstaller.Encoding: java.lang.RuntimeException error(java.lang.String)>
STATIC edge: $r1 = staticinvoke <androidx.profileinstaller.Encoding: byte[] read(java.io.InputStream,int)>($r0, $i0) in <androidx.profileinstaller.ProfileTranscoder: byte[] readHeader(java.io.InputStream,byte[])> ==> <androidx.profileinstaller.Encoding: byte[] read(java.io.InputStream,int)>
STATIC edge: $r2 = staticinvoke <androidx.profileinstaller.Encoding: byte[] read(java.io.InputStream,int)>($r0, $i0) in <androidx.profileinstaller.ProfileTranscoder: byte[] readHeader(java.io.InputStream,byte[])> ==> <androidx.profileinstaller.Encoding: byte[] read(java.io.InputStream,int)>
CLINIT edge: $r4 = <androidx.profileinstaller.ProfileVersion: byte[] METADATA_V001_N> in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData[] readMeta(java.io.InputStream,byte[],byte[],androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.ProfileVersion: void <clinit>()>
STATIC edge: $r5 = staticinvoke <androidx.profileinstaller.Encoding: java.lang.RuntimeException error(java.lang.String)>("Unsupported meta version") in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData[] readMeta(java.io.InputStream,byte[],byte[],androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.Encoding: java.lang.RuntimeException error(java.lang.String)>
STATIC edge: $r0 = staticinvoke <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData[] readMetadataV002(java.io.InputStream,byte[],androidx.profileinstaller.DexProfileData[])>($r1, $r3, $r0) in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData[] readMeta(java.io.InputStream,byte[],byte[],androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData[] readMetadataV002(java.io.InputStream,byte[],androidx.profileinstaller.DexProfileData[])>
STATIC edge: $r0 = staticinvoke <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData[] readMetadata001(java.io.InputStream,byte[],androidx.profileinstaller.DexProfileData[])>($r1, $r2, $r0) in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData[] readMeta(java.io.InputStream,byte[],byte[],androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData[] readMetadata001(java.io.InputStream,byte[],androidx.profileinstaller.DexProfileData[])>
CLINIT edge: $r0 = staticinvoke <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData[] readMetadataV002(java.io.InputStream,byte[],androidx.profileinstaller.DexProfileData[])>($r1, $r3, $r0) in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData[] readMeta(java.io.InputStream,byte[],byte[],androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.ProfileTranscoder: void <clinit>()>
CLINIT edge: $r0 = staticinvoke <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData[] readMetadata001(java.io.InputStream,byte[],androidx.profileinstaller.DexProfileData[])>($r1, $r2, $r0) in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData[] readMeta(java.io.InputStream,byte[],byte[],androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.ProfileTranscoder: void <clinit>()>
CLINIT edge: staticinvoke <androidx.profileinstaller.ProfileTranscoder: void readHotMethodRegion(java.io.InputStream,androidx.profileinstaller.DexProfileData)>($r0, $r4) in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData[] readUncompressedBody(java.io.InputStream,java.lang.String,int)> ==> <androidx.profileinstaller.ProfileTranscoder: void <clinit>()>
STATIC edge: staticinvoke <androidx.profileinstaller.ProfileTranscoder: void readMethodBitmap(java.io.InputStream,androidx.profileinstaller.DexProfileData)>($r0, $r4) in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData[] readUncompressedBody(java.io.InputStream,java.lang.String,int)> ==> <androidx.profileinstaller.ProfileTranscoder: void readMethodBitmap(java.io.InputStream,androidx.profileinstaller.DexProfileData)>
STATIC edge: $r2 = staticinvoke <androidx.profileinstaller.ProfileTranscoder: int[] readClasses(java.io.InputStream,int)>($r0, $i1) in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData[] readUncompressedBody(java.io.InputStream,java.lang.String,int)> ==> <androidx.profileinstaller.ProfileTranscoder: int[] readClasses(java.io.InputStream,int)>
STATIC edge: staticinvoke <androidx.profileinstaller.ProfileTranscoder: void readHotMethodRegion(java.io.InputStream,androidx.profileinstaller.DexProfileData)>($r0, $r4) in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData[] readUncompressedBody(java.io.InputStream,java.lang.String,int)> ==> <androidx.profileinstaller.ProfileTranscoder: void readHotMethodRegion(java.io.InputStream,androidx.profileinstaller.DexProfileData)>
STATIC edge: $r6 = staticinvoke <androidx.profileinstaller.Encoding: java.lang.String readString(java.io.InputStream,int)>($r0, $i3) in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData[] readUncompressedBody(java.io.InputStream,java.lang.String,int)> ==> <androidx.profileinstaller.Encoding: java.lang.String readString(java.io.InputStream,int)>
STATIC edge: $l7 = staticinvoke <androidx.profileinstaller.Encoding: long readUInt32(java.io.InputStream)>($r0) in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData[] readUncompressedBody(java.io.InputStream,java.lang.String,int)> ==> <androidx.profileinstaller.Encoding: long readUInt32(java.io.InputStream)>
STATIC edge: $i4 = staticinvoke <androidx.profileinstaller.Encoding: int readUInt16(java.io.InputStream)>($r0) in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData[] readUncompressedBody(java.io.InputStream,java.lang.String,int)> ==> <androidx.profileinstaller.Encoding: int readUInt16(java.io.InputStream)>
STATIC edge: $r5 = staticinvoke <androidx.profileinstaller.Encoding: java.lang.RuntimeException error(java.lang.String)>($r4) in <androidx.profileinstaller.Encoding: byte[] readCompressed(java.io.InputStream,int,int)> ==> <androidx.profileinstaller.Encoding: java.lang.RuntimeException error(java.lang.String)>
STATIC edge: $l0 = staticinvoke <androidx.profileinstaller.Encoding: long readUInt(java.io.InputStream,int)>($r0, 4) in <androidx.profileinstaller.Encoding: long readUInt32(java.io.InputStream)> ==> <androidx.profileinstaller.Encoding: long readUInt(java.io.InputStream,int)>
STATIC edge: $l0 = staticinvoke <androidx.profileinstaller.Encoding: long readUInt(java.io.InputStream,int)>($r0, 1) in <androidx.profileinstaller.Encoding: int readUInt8(java.io.InputStream)> ==> <androidx.profileinstaller.Encoding: long readUInt(java.io.InputStream,int)>
STATIC edge: $r4 = staticinvoke <androidx.profileinstaller.Encoding: java.lang.RuntimeException error(java.lang.String)>($r3) in <androidx.profileinstaller.Encoding: byte[] read(java.io.InputStream,int)> ==> <androidx.profileinstaller.Encoding: java.lang.RuntimeException error(java.lang.String)>
CLINIT edge: $r0 = staticinvoke <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData[] readMetadataV002Body(java.io.InputStream,byte[],int,androidx.profileinstaller.DexProfileData[])>($r4, $r2, $i0, $r0) in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData[] readMetadataV002(java.io.InputStream,byte[],androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.ProfileTranscoder: void <clinit>()>
STATIC edge: $r7 = staticinvoke <androidx.profileinstaller.Encoding: java.lang.RuntimeException error(java.lang.String)>("Content found after the end of file") in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData[] readMetadataV002(java.io.InputStream,byte[],androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.Encoding: java.lang.RuntimeException error(java.lang.String)>
STATIC edge: $r0 = staticinvoke <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData[] readMetadataV002Body(java.io.InputStream,byte[],int,androidx.profileinstaller.DexProfileData[])>($r4, $r2, $i0, $r0) in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData[] readMetadataV002(java.io.InputStream,byte[],androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData[] readMetadataV002Body(java.io.InputStream,byte[],int,androidx.profileinstaller.DexProfileData[])>
STATIC edge: $r3 = staticinvoke <androidx.profileinstaller.Encoding: byte[] readCompressed(java.io.InputStream,int,int)>($r1, $i3, $i4) in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData[] readMetadataV002(java.io.InputStream,byte[],androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.Encoding: byte[] readCompressed(java.io.InputStream,int,int)>
STATIC edge: $l2 = staticinvoke <androidx.profileinstaller.Encoding: long readUInt32(java.io.InputStream)>($r1) in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData[] readMetadataV002(java.io.InputStream,byte[],androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.Encoding: long readUInt32(java.io.InputStream)>
STATIC edge: $l1 = staticinvoke <androidx.profileinstaller.Encoding: long readUInt32(java.io.InputStream)>($r1) in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData[] readMetadataV002(java.io.InputStream,byte[],androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.Encoding: long readUInt32(java.io.InputStream)>
STATIC edge: $i0 = staticinvoke <androidx.profileinstaller.Encoding: int readUInt16(java.io.InputStream)>($r1) in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData[] readMetadataV002(java.io.InputStream,byte[],androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.Encoding: int readUInt16(java.io.InputStream)>
CLINIT edge: $r3 = <androidx.profileinstaller.ProfileVersion: byte[] METADATA_V001_N> in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData[] readMetadata001(java.io.InputStream,byte[],androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.ProfileVersion: void <clinit>()>
STATIC edge: $r7 = staticinvoke <androidx.profileinstaller.Encoding: java.lang.RuntimeException error(java.lang.String)>("Unsupported meta version") in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData[] readMetadata001(java.io.InputStream,byte[],androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.Encoding: java.lang.RuntimeException error(java.lang.String)>
STATIC edge: $r7 = staticinvoke <androidx.profileinstaller.Encoding: java.lang.RuntimeException error(java.lang.String)>("Content found after the end of file") in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData[] readMetadata001(java.io.InputStream,byte[],androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.Encoding: java.lang.RuntimeException error(java.lang.String)>
STATIC edge: $r0 = staticinvoke <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData[] readMetadataForNBody(java.io.InputStream,int,androidx.profileinstaller.DexProfileData[])>($r4, $i0, $r0) in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData[] readMetadata001(java.io.InputStream,byte[],androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData[] readMetadataForNBody(java.io.InputStream,int,androidx.profileinstaller.DexProfileData[])>
STATIC edge: $r2 = staticinvoke <androidx.profileinstaller.Encoding: byte[] readCompressed(java.io.InputStream,int,int)>($r1, $i3, $i4) in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData[] readMetadata001(java.io.InputStream,byte[],androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.Encoding: byte[] readCompressed(java.io.InputStream,int,int)>
STATIC edge: $l2 = staticinvoke <androidx.profileinstaller.Encoding: long readUInt32(java.io.InputStream)>($r1) in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData[] readMetadata001(java.io.InputStream,byte[],androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.Encoding: long readUInt32(java.io.InputStream)>
STATIC edge: $l1 = staticinvoke <androidx.profileinstaller.Encoding: long readUInt32(java.io.InputStream)>($r1) in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData[] readMetadata001(java.io.InputStream,byte[],androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.Encoding: long readUInt32(java.io.InputStream)>
STATIC edge: $i0 = staticinvoke <androidx.profileinstaller.Encoding: int readUInt8(java.io.InputStream)>($r1) in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData[] readMetadata001(java.io.InputStream,byte[],androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.Encoding: int readUInt8(java.io.InputStream)>
CLINIT edge: $r0 = staticinvoke <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData[] readMetadataForNBody(java.io.InputStream,int,androidx.profileinstaller.DexProfileData[])>($r4, $i0, $r0) in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData[] readMetadata001(java.io.InputStream,byte[],androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.ProfileTranscoder: void <clinit>()>
CLINIT edge: $i1 = staticinvoke <androidx.profileinstaller.ProfileTranscoder: int readFlagsFromBitmap(java.util.BitSet,int,int)>($r3, $i0, $i1) in <androidx.profileinstaller.ProfileTranscoder: void readMethodBitmap(java.io.InputStream,androidx.profileinstaller.DexProfileData)> ==> <androidx.profileinstaller.ProfileTranscoder: void <clinit>()>
STATIC edge: $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1) in <androidx.profileinstaller.ProfileTranscoder: void readMethodBitmap(java.io.InputStream,androidx.profileinstaller.DexProfileData)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <androidx.profileinstaller.ProfileTranscoder: void readMethodBitmap(java.io.InputStream,androidx.profileinstaller.DexProfileData)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $i1 = staticinvoke <androidx.profileinstaller.ProfileTranscoder: int readFlagsFromBitmap(java.util.BitSet,int,int)>($r3, $i0, $i1) in <androidx.profileinstaller.ProfileTranscoder: void readMethodBitmap(java.io.InputStream,androidx.profileinstaller.DexProfileData)> ==> <androidx.profileinstaller.ProfileTranscoder: int readFlagsFromBitmap(java.util.BitSet,int,int)>
STATIC edge: $r2 = staticinvoke <androidx.profileinstaller.Encoding: byte[] read(java.io.InputStream,int)>($r1, $i0) in <androidx.profileinstaller.ProfileTranscoder: void readMethodBitmap(java.io.InputStream,androidx.profileinstaller.DexProfileData)> ==> <androidx.profileinstaller.Encoding: byte[] read(java.io.InputStream,int)>
STATIC edge: $i0 = staticinvoke <androidx.profileinstaller.Encoding: int bitsToBytes(int)>($i0) in <androidx.profileinstaller.ProfileTranscoder: void readMethodBitmap(java.io.InputStream,androidx.profileinstaller.DexProfileData)> ==> <androidx.profileinstaller.Encoding: int bitsToBytes(int)>
CLINIT edge: $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <androidx.profileinstaller.ProfileTranscoder: void readMethodBitmap(java.io.InputStream,androidx.profileinstaller.DexProfileData)> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: $i1 = staticinvoke <androidx.profileinstaller.Encoding: int readUInt16(java.io.InputStream)>($r0) in <androidx.profileinstaller.ProfileTranscoder: int[] readClasses(java.io.InputStream,int)> ==> <androidx.profileinstaller.Encoding: int readUInt16(java.io.InputStream)>
CLINIT edge: $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1) in <androidx.profileinstaller.ProfileTranscoder: void readHotMethodRegion(java.io.InputStream,androidx.profileinstaller.DexProfileData)> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: $r5 = staticinvoke <androidx.profileinstaller.Encoding: java.lang.RuntimeException error(java.lang.String)>("Read too much data during profile line parse") in <androidx.profileinstaller.ProfileTranscoder: void readHotMethodRegion(java.io.InputStream,androidx.profileinstaller.DexProfileData)> ==> <androidx.profileinstaller.Encoding: java.lang.RuntimeException error(java.lang.String)>
STATIC edge: staticinvoke <androidx.profileinstaller.ProfileTranscoder: void skipInlineCache(java.io.InputStream)>($r1) in <androidx.profileinstaller.ProfileTranscoder: void readHotMethodRegion(java.io.InputStream,androidx.profileinstaller.DexProfileData)> ==> <androidx.profileinstaller.ProfileTranscoder: void skipInlineCache(java.io.InputStream)>
STATIC edge: $i2 = staticinvoke <androidx.profileinstaller.Encoding: int readUInt16(java.io.InputStream)>($r1) in <androidx.profileinstaller.ProfileTranscoder: void readHotMethodRegion(java.io.InputStream,androidx.profileinstaller.DexProfileData)> ==> <androidx.profileinstaller.Encoding: int readUInt16(java.io.InputStream)>
STATIC edge: $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1) in <androidx.profileinstaller.ProfileTranscoder: void readHotMethodRegion(java.io.InputStream,androidx.profileinstaller.DexProfileData)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
CLINIT edge: staticinvoke <androidx.profileinstaller.ProfileTranscoder: void skipInlineCache(java.io.InputStream)>($r1) in <androidx.profileinstaller.ProfileTranscoder: void readHotMethodRegion(java.io.InputStream,androidx.profileinstaller.DexProfileData)> ==> <androidx.profileinstaller.ProfileTranscoder: void <clinit>()>
CLINIT edge: $r0 = new java.lang.String in <androidx.profileinstaller.Encoding: java.lang.String readString(java.io.InputStream,int)> ==> <java.lang.String: void <clinit>()>
STATIC edge: $r1 = staticinvoke <androidx.profileinstaller.Encoding: byte[] read(java.io.InputStream,int)>($r2, $i0) in <androidx.profileinstaller.Encoding: java.lang.String readString(java.io.InputStream,int)> ==> <androidx.profileinstaller.Encoding: byte[] read(java.io.InputStream,int)>
STATIC edge: $l0 = staticinvoke <androidx.profileinstaller.Encoding: long readUInt(java.io.InputStream,int)>($r0, 2) in <androidx.profileinstaller.Encoding: int readUInt16(java.io.InputStream)> ==> <androidx.profileinstaller.Encoding: long readUInt(java.io.InputStream,int)>
STATIC edge: $r0 = staticinvoke <androidx.profileinstaller.Encoding: byte[] read(java.io.InputStream,int)>($r1, $i0) in <androidx.profileinstaller.Encoding: long readUInt(java.io.InputStream,int)> ==> <androidx.profileinstaller.Encoding: byte[] read(java.io.InputStream,int)>
CLINIT edge: $r4 = staticinvoke <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData findByDexName(androidx.profileinstaller.DexProfileData[],java.lang.String)>($r0, $r3) in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData[] readMetadataV002Body(java.io.InputStream,byte[],int,androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.ProfileTranscoder: void <clinit>()>
STATIC edge: $r8 = staticinvoke <androidx.profileinstaller.Encoding: java.lang.RuntimeException error(java.lang.String)>("Mismatched number of dex files found in metadata") in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData[] readMetadataV002Body(java.io.InputStream,byte[],int,androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.Encoding: java.lang.RuntimeException error(java.lang.String)>
STATIC edge: $r5 = staticinvoke <androidx.profileinstaller.ProfileTranscoder: int[] readClasses(java.io.InputStream,int)>($r1, $i1) in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData[] readMetadataV002Body(java.io.InputStream,byte[],int,androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.ProfileTranscoder: int[] readClasses(java.io.InputStream,int)>
STATIC edge: $r4 = staticinvoke <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData findByDexName(androidx.profileinstaller.DexProfileData[],java.lang.String)>($r0, $r3) in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData[] readMetadataV002Body(java.io.InputStream,byte[],int,androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData findByDexName(androidx.profileinstaller.DexProfileData[],java.lang.String)>
STATIC edge: $i1 = staticinvoke <androidx.profileinstaller.Encoding: int readUInt16(java.io.InputStream)>($r1) in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData[] readMetadataV002Body(java.io.InputStream,byte[],int,androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.Encoding: int readUInt16(java.io.InputStream)>
STATIC edge: $l3 = staticinvoke <androidx.profileinstaller.Encoding: long readUInt32(java.io.InputStream)>($r1) in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData[] readMetadataV002Body(java.io.InputStream,byte[],int,androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.Encoding: long readUInt32(java.io.InputStream)>
STATIC edge: $r3 = staticinvoke <androidx.profileinstaller.Encoding: java.lang.String readString(java.io.InputStream,int)>($r1, $i1) in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData[] readMetadataV002Body(java.io.InputStream,byte[],int,androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.Encoding: java.lang.String readString(java.io.InputStream,int)>
STATIC edge: $i1 = staticinvoke <androidx.profileinstaller.Encoding: int readUInt16(java.io.InputStream)>($r1) in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData[] readMetadataV002Body(java.io.InputStream,byte[],int,androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.Encoding: int readUInt16(java.io.InputStream)>
CLINIT edge: $r6 = <androidx.profileinstaller.ProfileVersion: byte[] V001_N> in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData[] readMetadataV002Body(java.io.InputStream,byte[],int,androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.ProfileVersion: void <clinit>()>
CLINIT edge: $r3 = newarray (java.lang.String)[$i0] in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData[] readMetadataForNBody(java.io.InputStream,int,androidx.profileinstaller.DexProfileData[])> ==> <java.lang.String: void <clinit>()>
STATIC edge: $r8 = staticinvoke <androidx.profileinstaller.Encoding: java.lang.RuntimeException error(java.lang.String)>("Mismatched number of dex files found in metadata") in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData[] readMetadataForNBody(java.io.InputStream,int,androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.Encoding: java.lang.RuntimeException error(java.lang.String)>
STATIC edge: $r7 = staticinvoke <androidx.profileinstaller.ProfileTranscoder: int[] readClasses(java.io.InputStream,int)>($r2, $i1) in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData[] readMetadataForNBody(java.io.InputStream,int,androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.ProfileTranscoder: int[] readClasses(java.io.InputStream,int)>
STATIC edge: $r4 = staticinvoke <androidx.profileinstaller.Encoding: java.lang.String readString(java.io.InputStream,int)>($r2, $i3) in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData[] readMetadataForNBody(java.io.InputStream,int,androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.Encoding: java.lang.String readString(java.io.InputStream,int)>
STATIC edge: $i4 = staticinvoke <androidx.profileinstaller.Encoding: int readUInt16(java.io.InputStream)>($r2) in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData[] readMetadataForNBody(java.io.InputStream,int,androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.Encoding: int readUInt16(java.io.InputStream)>
CLINIT edge: $r7 = staticinvoke <androidx.profileinstaller.ProfileTranscoder: int[] readClasses(java.io.InputStream,int)>($r2, $i1) in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData[] readMetadataForNBody(java.io.InputStream,int,androidx.profileinstaller.DexProfileData[])> ==> <androidx.profileinstaller.ProfileTranscoder: void <clinit>()>
CLINIT edge: $i3 = staticinvoke <androidx.profileinstaller.ProfileTranscoder: int methodFlagBitmapIndex(int,int,int)>(2, $i1, $i0) in <androidx.profileinstaller.ProfileTranscoder: int readFlagsFromBitmap(java.util.BitSet,int,int)> ==> <androidx.profileinstaller.ProfileTranscoder: void <clinit>()>
STATIC edge: $i1 = staticinvoke <androidx.profileinstaller.ProfileTranscoder: int methodFlagBitmapIndex(int,int,int)>(4, $i1, $i0) in <androidx.profileinstaller.ProfileTranscoder: int readFlagsFromBitmap(java.util.BitSet,int,int)> ==> <androidx.profileinstaller.ProfileTranscoder: int methodFlagBitmapIndex(int,int,int)>
STATIC edge: staticinvoke <androidx.profileinstaller.Encoding: int readUInt16(java.io.InputStream)>($r0) in <androidx.profileinstaller.ProfileTranscoder: void skipInlineCache(java.io.InputStream)> ==> <androidx.profileinstaller.Encoding: int readUInt16(java.io.InputStream)>
STATIC edge: $i0 = staticinvoke <androidx.profileinstaller.Encoding: int readUInt8(java.io.InputStream)>($r0) in <androidx.profileinstaller.ProfileTranscoder: void skipInlineCache(java.io.InputStream)> ==> <androidx.profileinstaller.Encoding: int readUInt8(java.io.InputStream)>
CLINIT edge: $r1 = staticinvoke <androidx.profileinstaller.ProfileTranscoder: java.lang.String extractKey(java.lang.String)>($r1) in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData findByDexName(androidx.profileinstaller.DexProfileData[],java.lang.String)> ==> <androidx.profileinstaller.ProfileTranscoder: void <clinit>()>
STATIC edge: $r1 = staticinvoke <androidx.profileinstaller.ProfileTranscoder: java.lang.String extractKey(java.lang.String)>($r1) in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData findByDexName(androidx.profileinstaller.DexProfileData[],java.lang.String)> ==> <androidx.profileinstaller.ProfileTranscoder: java.lang.String extractKey(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(java.lang.String)>("!") in <androidx.profileinstaller.ProfileTranscoder: java.lang.String extractKey(java.lang.String)> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke $r0.<java.lang.String: int indexOf(java.lang.String)>(":") in <androidx.profileinstaller.ProfileTranscoder: java.lang.String extractKey(java.lang.String)> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int)>($i0) in <androidx.profileinstaller.ProfileTranscoder: java.lang.String extractKey(java.lang.String)> ==> <java.lang.String: java.lang.String substring(int)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int indexOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r6) in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData[] readMetadataForNBody(java.io.InputStream,int,androidx.profileinstaller.DexProfileData[])> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>($r1, $r3) in <androidx.profileinstaller.Encoding: java.lang.String readString(java.io.InputStream,int)> ==> <java.lang.String: void <init>(byte[],java.nio.charset.Charset)>
VIRTUAL edge: virtualinvoke $r5.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r6) in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData[] readMetadata001(java.io.InputStream,byte[],androidx.profileinstaller.DexProfileData[])> ==> <java.lang.Throwable: void addSuppressed(java.lang.Throwable)>
VIRTUAL edge: virtualinvoke $r5.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r6) in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData[] readMetadataV002(java.io.InputStream,byte[],androidx.profileinstaller.DexProfileData[])> ==> <java.lang.Throwable: void addSuppressed(java.lang.Throwable)>
SPECIAL edge: specialinvoke $r4.<androidx.profileinstaller.DexProfileData: void <init>(java.lang.String,java.lang.String,long,long,int,int,int,int[],java.util.TreeMap)>($r1, $r6, $l6, 0L, $i4, $i3, $i8, $r2, $r3) in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData[] readUncompressedBody(java.io.InputStream,java.lang.String,int)> ==> <androidx.profileinstaller.DexProfileData: void <init>(java.lang.String,java.lang.String,long,long,int,int,int,int[],java.util.TreeMap)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.profileinstaller.DexProfileData: void <init>(java.lang.String,java.lang.String,long,long,int,int,int,int[],java.util.TreeMap)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r6.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r7) in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData[] readProfile(java.io.InputStream,byte[],java.lang.String)> ==> <java.lang.Throwable: void addSuppressed(java.lang.Throwable)>
VIRTUAL edge: virtualinvoke $r7.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r8) in <androidx.profileinstaller.DeviceProfileWriter: androidx.profileinstaller.DeviceProfileWriter addMetadata(androidx.profileinstaller.DexProfileData[],byte[])> ==> <java.lang.Throwable: void addSuppressed(java.lang.Throwable)>
SPECIAL edge: $r5 = specialinvoke r0.<androidx.profileinstaller.DeviceProfileWriter: java.io.InputStream openStreamFromAssets(android.content.res.AssetManager,java.lang.String)>($r3, $r4) in <androidx.profileinstaller.DeviceProfileWriter: androidx.profileinstaller.DeviceProfileWriter addMetadata(androidx.profileinstaller.DexProfileData[],byte[])> ==> <androidx.profileinstaller.DeviceProfileWriter: java.io.InputStream openStreamFromAssets(android.content.res.AssetManager,java.lang.String)>
SPECIAL edge: $r1 = specialinvoke r0.<androidx.profileinstaller.DeviceProfileWriter: java.io.InputStream openStreamFromAssets(android.content.res.AssetManager,java.lang.String)>($r2, $r3) in <androidx.profileinstaller.DeviceProfileWriter: java.io.InputStream getProfileInputStream(android.content.res.AssetManager)> ==> <androidx.profileinstaller.DeviceProfileWriter: java.io.InputStream openStreamFromAssets(android.content.res.AssetManager,java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r1) in <androidx.profileinstaller.ProfileTranscoder: androidx.profileinstaller.DexProfileData findByDexName(androidx.profileinstaller.DexProfileData[],java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<androidx.profileinstaller.DeviceProfileWriter: void result(int,java.lang.Object)>(3, $r2) in <androidx.profileinstaller.DeviceProfileWriter: boolean deviceAllowsProfileInstallerAotWrites()> ==> <androidx.profileinstaller.DeviceProfileWriter: void result(int,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.profileinstaller.DeviceProfileWriter: void <init>(android.content.res.AssetManager,java.util.concurrent.Executor,androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback,java.lang.String,java.lang.String,java.lang.String,java.io.File)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r13.<androidx.profileinstaller.ProfileVerifier$Cache: void <init>(int,int,long,long)>(1, $i1, $l5, $l4) in <androidx.profileinstaller.ProfileVerifier: androidx.profileinstaller.ProfileVerifier$CompilationStatus writeProfileVerification(android.content.Context,boolean)> ==> <androidx.profileinstaller.ProfileVerifier$Cache: void <init>(int,int,long,long)>
VIRTUAL edge: virtualinvoke $r13.<androidx.profileinstaller.ProfileVerifier$Cache: void writeOnFile(java.io.File)>($r2) in <androidx.profileinstaller.ProfileVerifier: androidx.profileinstaller.ProfileVerifier$CompilationStatus writeProfileVerification(android.content.Context,boolean)> ==> <androidx.profileinstaller.ProfileVerifier$Cache: void writeOnFile(java.io.File)>
VIRTUAL edge: virtualinvoke $r4.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r5) in <androidx.profileinstaller.ProfileVerifier$Cache: void writeOnFile(java.io.File)> ==> <java.lang.Throwable: void addSuppressed(java.lang.Throwable)>
VIRTUAL edge: $z0 = virtualinvoke $r9.<androidx.profileinstaller.ProfileVerifier$Cache: boolean equals(java.lang.Object)>($r13) in <androidx.profileinstaller.ProfileVerifier: androidx.profileinstaller.ProfileVerifier$CompilationStatus writeProfileVerification(android.content.Context,boolean)> ==> <androidx.profileinstaller.ProfileVerifier$Cache: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r8.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r9) in <androidx.profileinstaller.ProfileInstaller: void noteProfileWrittenFor(android.content.pm.PackageInfo,java.io.File)> ==> <java.lang.Throwable: void addSuppressed(java.lang.Throwable)>
SPECIAL edge: specialinvoke $r3.<androidx.profileinstaller.ProfileInstaller$$ExternalSyntheticLambda0: void <init>(androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback,int,java.lang.Object)>($r1, $i0, $r2) in <androidx.profileinstaller.ProfileInstaller: void result(java.util.concurrent.Executor,androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback,int,java.lang.Object)> ==> <androidx.profileinstaller.ProfileInstaller$$ExternalSyntheticLambda0: void <init>(androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback,int,java.lang.Object)>
EXECUTOR edge: interfaceinvoke $r0.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r3) in <androidx.profileinstaller.ProfileInstaller: void result(java.util.concurrent.Executor,androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback,int,java.lang.Object)> ==> <androidx.profileinstaller.ProfileInstaller$$ExternalSyntheticLambda0: void run()>
CLINIT edge: staticinvoke <androidx.profileinstaller.ProfileInstaller: void lambda$result$0(androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback,int,java.lang.Object)>($r1, $i0, $r2) in <androidx.profileinstaller.ProfileInstaller$$ExternalSyntheticLambda0: void run()> ==> <androidx.profileinstaller.ProfileInstaller: void <clinit>()>
STATIC edge: staticinvoke <androidx.profileinstaller.ProfileInstaller: void lambda$result$0(androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback,int,java.lang.Object)>($r1, $i0, $r2) in <androidx.profileinstaller.ProfileInstaller$$ExternalSyntheticLambda0: void run()> ==> <androidx.profileinstaller.ProfileInstaller: void lambda$result$0(androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback,int,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.profileinstaller.ProfileInstaller$$ExternalSyntheticLambda0: void <init>(androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback,int,java.lang.Object)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: interfaceinvoke $r2.<androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback: void onResultReceived(int,java.lang.Object)>(7, $r13) in <androidx.profileinstaller.ProfileInstaller: void writeProfile(android.content.Context,java.util.concurrent.Executor,androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback,boolean)> ==> <androidx.profileinstaller.ProfileInstallReceiver$ResultDiagnostics: void onResultReceived(int,java.lang.Object)>
CLINIT edge: $r1 = <androidx.profileinstaller.ProfileInstaller: androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback LOG_DIAGNOSTICS> in <androidx.profileinstaller.ProfileInstallReceiver$ResultDiagnostics: void onResultReceived(int,java.lang.Object)> ==> <androidx.profileinstaller.ProfileInstaller: void <clinit>()>
INTERFACE edge: interfaceinvoke $r1.<androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback: void onResultReceived(int,java.lang.Object)>($i0, $r2) in <androidx.profileinstaller.ProfileInstallReceiver$ResultDiagnostics: void onResultReceived(int,java.lang.Object)> ==> <androidx.profileinstaller.ProfileInstaller$2: void onResultReceived(int,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r0.<androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback: void onResultReceived(int,java.lang.Object)>(2, null) in <androidx.profileinstaller.ProfileInstaller: boolean hasAlreadyWrittenProfileForThisInstall(android.content.pm.PackageInfo,java.io.File,androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback)> ==> <androidx.profileinstaller.ProfileInstallReceiver$ResultDiagnostics: void onResultReceived(int,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r0.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r3) in <androidx.profileinstaller.ProfileInstaller: void result(java.util.concurrent.Executor,androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback,int,java.lang.Object)> ==> <androidx.profileinstaller.ProfileInstallReceiver$$ExternalSyntheticLambda0: void execute(java.lang.Runnable)>
INTERFACE edge: interfaceinvoke $r1.<java.lang.Runnable: void run()>() in <androidx.profileinstaller.ProfileInstallReceiver$$ExternalSyntheticLambda0: void execute(java.lang.Runnable)> ==> <androidx.profileinstaller.ProfileInstaller$$ExternalSyntheticLambda0: void run()>
INTERFACE edge: interfaceinvoke $r0.<androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback: void onResultReceived(int,java.lang.Object)>(12, null) in <androidx.profileinstaller.ProfileInstallReceiver: void saveProfile(androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback)> ==> <androidx.profileinstaller.ProfileInstallReceiver$ResultDiagnostics: void onResultReceived(int,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r0.<androidx.profileinstaller.ProfileInstallReceiver$ResultDiagnostics: void onResultReceived(int,java.lang.Object)>(14, null) in <androidx.profileinstaller.BenchmarkOperation: void dropShaderCache(android.content.Context,androidx.profileinstaller.ProfileInstallReceiver$ResultDiagnostics)> ==> <androidx.profileinstaller.ProfileInstallReceiver$ResultDiagnostics: void onResultReceived(int,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r0.<androidx.profileinstaller.ProfileInstallReceiver$ResultDiagnostics: void onResultReceived(int,java.lang.Object)>(15, null) in <androidx.profileinstaller.BenchmarkOperation: void dropShaderCache(android.content.Context,androidx.profileinstaller.ProfileInstallReceiver$ResultDiagnostics)> ==> <androidx.profileinstaller.ProfileInstallReceiver$ResultDiagnostics: void onResultReceived(int,java.lang.Object)>
SPECIAL edge: specialinvoke $r1.<androidx.profileinstaller.ProfileInstaller$2: void <init>()>() in <androidx.profileinstaller.ProfileInstaller: void <clinit>()> ==> <androidx.profileinstaller.ProfileInstaller$2: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.profileinstaller.ProfileInstaller$2: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<androidx.profileinstaller.ProfileInstaller$1: void <init>()>() in <androidx.profileinstaller.ProfileInstaller: void <clinit>()> ==> <androidx.profileinstaller.ProfileInstaller$1: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.profileinstaller.ProfileInstaller$1: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r6.<androidx.profileinstaller.ProfileInstallReceiver$ResultDiagnostics: void <init>(androidx.profileinstaller.ProfileInstallReceiver)>(r0) in <androidx.profileinstaller.ProfileInstallReceiver: void onReceive(android.content.Context,android.content.Intent)> ==> <androidx.profileinstaller.ProfileInstallReceiver$ResultDiagnostics: void <init>(androidx.profileinstaller.ProfileInstallReceiver)>
SPECIAL edge: specialinvoke $r6.<androidx.profileinstaller.ProfileInstallReceiver$ResultDiagnostics: void <init>(androidx.profileinstaller.ProfileInstallReceiver)>(r0) in <androidx.profileinstaller.ProfileInstallReceiver: void onReceive(android.content.Context,android.content.Intent)> ==> <androidx.profileinstaller.ProfileInstallReceiver$ResultDiagnostics: void <init>(androidx.profileinstaller.ProfileInstallReceiver)>
SPECIAL edge: specialinvoke $r6.<androidx.profileinstaller.ProfileInstallReceiver$ResultDiagnostics: void <init>(androidx.profileinstaller.ProfileInstallReceiver)>(r0) in <androidx.profileinstaller.ProfileInstallReceiver: void onReceive(android.content.Context,android.content.Intent)> ==> <androidx.profileinstaller.ProfileInstallReceiver$ResultDiagnostics: void <init>(androidx.profileinstaller.ProfileInstallReceiver)>
VIRTUAL edge: virtualinvoke $r6.<androidx.profileinstaller.ProfileInstallReceiver$ResultDiagnostics: void onResultReceived(int,java.lang.Object)>(16, null) in <androidx.profileinstaller.ProfileInstallReceiver: void onReceive(android.content.Context,android.content.Intent)> ==> <androidx.profileinstaller.ProfileInstallReceiver$ResultDiagnostics: void onResultReceived(int,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.profileinstaller.ProfileInstallReceiver$ResultDiagnostics: void <init>(androidx.profileinstaller.ProfileInstallReceiver)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r5.<androidx.profileinstaller.ProfileInstallReceiver$$ExternalSyntheticLambda0: void <init>()>() in <androidx.profileinstaller.ProfileInstallReceiver: void onReceive(android.content.Context,android.content.Intent)> ==> <androidx.profileinstaller.ProfileInstallReceiver$$ExternalSyntheticLambda0: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.profileinstaller.ProfileInstallReceiver$$ExternalSyntheticLambda0: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r3) in <androidx.profileinstaller.ProfileInstallReceiver: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r3) in <androidx.profileinstaller.ProfileInstallReceiver: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke r0.<androidx.profileinstaller.ProfileInstallReceiver: android.content.Intent getIntent()>() in <androidx.profileinstaller.ProfileInstallReceiver: void onReceive(android.content.Context,android.content.Intent)> ==> <androidx.profileinstaller.ProfileInstallReceiver: android.content.Intent getIntent()>
SPECIAL edge: specialinvoke $r0.<com.example.notificationtest.MyBroadcastReceiver: void <init>()>() in <dummyMainClass: com.example.notificationtest.MyBroadcastReceiver dummyMainMethod_com_example_notificationtest_MyBroadcastReceiver(android.content.Intent)> ==> <com.example.notificationtest.MyBroadcastReceiver: void <init>()>
VIRTUAL edge: virtualinvoke $r0.<com.example.notificationtest.MyBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)>(null, null) in <dummyMainClass: com.example.notificationtest.MyBroadcastReceiver dummyMainMethod_com_example_notificationtest_MyBroadcastReceiver(android.content.Intent)> ==> <com.example.notificationtest.MyBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)>
VIRTUAL edge: virtualinvoke $r12.<java.io.IOException: void printStackTrace()>() in <com.example.notificationtest.MyBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.Throwable: void printStackTrace()>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.example.notificationtest.MyBroadcastReceiver: android.content.Intent getIntent()>() in <com.example.notificationtest.MyBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> ==> <com.example.notificationtest.MyBroadcastReceiver: android.content.Intent getIntent()>
SPECIAL edge: specialinvoke $r0.<com.example.notificationtest.MyNotification: void <init>()>() in <dummyMainClass: com.example.notificationtest.MyNotification dummyMainMethod_com_example_notificationtest_MyNotification(android.content.Intent)> ==> <com.example.notificationtest.MyNotification: void <init>()>
VIRTUAL edge: virtualinvoke $r0.<com.example.notificationtest.MyNotification: void onNotificationRemoved(android.service.notification.StatusBarNotification)>(null) in <dummyMainClass: com.example.notificationtest.MyNotification dummyMainMethod_com_example_notificationtest_MyNotification(android.content.Intent)> ==> <com.example.notificationtest.MyNotification: void onNotificationRemoved(android.service.notification.StatusBarNotification)>
VIRTUAL edge: virtualinvoke $r0.<com.example.notificationtest.MyNotification: void onNotificationPosted(android.service.notification.StatusBarNotification)>(null) in <dummyMainClass: com.example.notificationtest.MyNotification dummyMainMethod_com_example_notificationtest_MyNotification(android.content.Intent)> ==> <com.example.notificationtest.MyNotification: void onNotificationPosted(android.service.notification.StatusBarNotification)>
VIRTUAL edge: $r1 = virtualinvoke $r0.<com.example.notificationtest.MyNotification: android.os.IBinder onBind(android.content.Intent)>(null) in <dummyMainClass: com.example.notificationtest.MyNotification dummyMainMethod_com_example_notificationtest_MyNotification(android.content.Intent)> ==> <com.example.notificationtest.MyNotification: android.os.IBinder onBind(android.content.Intent)>
STATIC edge: staticinvoke <com.example.notificationtest.MyNotification: void writeToBufferedWriter(java.lang.String)>($r3) in <com.example.notificationtest.MyNotification: void onNotificationPosted(android.service.notification.StatusBarNotification)> ==> <com.example.notificationtest.MyNotification: void writeToBufferedWriter(java.lang.String)>
STATIC edge: staticinvoke <com.example.notificationtest.MyNotification: void writeToPrintWriter(java.lang.String)>($r3) in <com.example.notificationtest.MyNotification: void onNotificationPosted(android.service.notification.StatusBarNotification)> ==> <com.example.notificationtest.MyNotification: void writeToPrintWriter(java.lang.String)>
STATIC edge: staticinvoke <com.example.notificationtest.MyNotification: void writeToFileOutputStream(java.lang.String)>($r3) in <com.example.notificationtest.MyNotification: void onNotificationPosted(android.service.notification.StatusBarNotification)> ==> <com.example.notificationtest.MyNotification: void writeToFileOutputStream(java.lang.String)>
STATIC edge: staticinvoke <com.example.notificationtest.MyNotification: void writeToFile(java.lang.String)>($r3) in <com.example.notificationtest.MyNotification: void onNotificationPosted(android.service.notification.StatusBarNotification)> ==> <com.example.notificationtest.MyNotification: void writeToFile(java.lang.String)>
VIRTUAL edge: virtualinvoke $r4.<java.io.IOException: void printStackTrace()>() in <com.example.notificationtest.MyNotification: void writeToFile(java.lang.String)> ==> <java.lang.Throwable: void printStackTrace()>
VIRTUAL edge: virtualinvoke $r5.<java.io.IOException: void printStackTrace()>() in <com.example.notificationtest.MyNotification: void writeToFileOutputStream(java.lang.String)> ==> <java.lang.Throwable: void printStackTrace()>
VIRTUAL edge: virtualinvoke $r5.<java.io.IOException: void printStackTrace()>() in <com.example.notificationtest.MyNotification: void writeToPrintWriter(java.lang.String)> ==> <java.lang.Throwable: void printStackTrace()>
VIRTUAL edge: virtualinvoke $r5.<java.io.IOException: void printStackTrace()>() in <com.example.notificationtest.MyNotification: void writeToBufferedWriter(java.lang.String)> ==> <java.lang.Throwable: void printStackTrace()>
VIRTUAL edge: parameter0 = virtualinvoke this.<com.example.notificationtest.MyNotification: android.content.Intent getIntent()>() in <com.example.notificationtest.MyNotification: android.os.IBinder onBind(android.content.Intent)> ==> <com.example.notificationtest.MyNotification: android.content.Intent getIntent()>
SPECIAL edge: specialinvoke $r2.<com.example.notificationtest.intenttest: void <init>()>() in <com.example.notificationtest.MyNotification: void onNotificationPosted(android.service.notification.StatusBarNotification)> ==> <com.example.notificationtest.intenttest: void <init>()>
VIRTUAL edge: virtualinvoke $r2.<com.example.notificationtest.intenttest: void receivetest(android.content.Intent)>($r10) in <com.example.notificationtest.MyNotification: void onNotificationPosted(android.service.notification.StatusBarNotification)> ==> <com.example.notificationtest.intenttest: void receivetest(android.content.Intent)>
VIRTUAL edge: virtualinvoke $r11.<java.io.IOException: void printStackTrace()>() in <com.example.notificationtest.intenttest: void receivetest(android.content.Intent)> ==> <java.lang.Throwable: void printStackTrace()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.example.notificationtest.intenttest: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<androidx.startup.InitializationProvider: void <init>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <androidx.startup.InitializationProvider: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<androidx.startup.InitializationProvider: boolean onCreate()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <androidx.startup.InitializationProvider: boolean onCreate()>
CLINIT edge: $r3 = staticinvoke <androidx.startup.AppInitializer: androidx.startup.AppInitializer getInstance(android.content.Context)>($r1) in <androidx.startup.InitializationProvider: boolean onCreate()> ==> <androidx.startup.AppInitializer: void <clinit>()>
STATIC edge: staticinvoke <androidx.startup.StartupLogger: void w(java.lang.String)>("Deferring initialization because `applicationContext` is null.") in <androidx.startup.InitializationProvider: boolean onCreate()> ==> <androidx.startup.StartupLogger: void w(java.lang.String)>
STATIC edge: $r3 = staticinvoke <androidx.startup.AppInitializer: androidx.startup.AppInitializer getInstance(android.content.Context)>($r1) in <androidx.startup.InitializationProvider: boolean onCreate()> ==> <androidx.startup.AppInitializer: androidx.startup.AppInitializer getInstance(android.content.Context)>
CLINIT edge: $r1 = <androidx.startup.AppInitializer: androidx.startup.AppInitializer sInstance> in <androidx.startup.AppInitializer: androidx.startup.AppInitializer getInstance(android.content.Context)> ==> <androidx.startup.AppInitializer: void <clinit>()>
VIRTUAL edge: virtualinvoke $r3.<androidx.startup.AppInitializer: void discoverAndInitialize()>() in <androidx.startup.InitializationProvider: boolean onCreate()> ==> <androidx.startup.AppInitializer: void discoverAndInitialize()>
STATIC edge: staticinvoke <androidx.tracing.Trace: void endSection()>() in <androidx.startup.AppInitializer: void discoverAndInitialize()> ==> <androidx.tracing.Trace: void endSection()>
STATIC edge: staticinvoke <androidx.tracing.Trace: void beginSection(java.lang.String)>("Startup") in <androidx.startup.AppInitializer: void discoverAndInitialize()> ==> <androidx.tracing.Trace: void beginSection(java.lang.String)>
STATIC edge: staticinvoke <androidx.tracing.TraceApi18Impl: void endSection()>() in <androidx.tracing.Trace: void endSection()> ==> <androidx.tracing.TraceApi18Impl: void endSection()>
STATIC edge: staticinvoke <androidx.tracing.TraceApi18Impl: void beginSection(java.lang.String)>($r0) in <androidx.tracing.Trace: void beginSection(java.lang.String)> ==> <androidx.tracing.TraceApi18Impl: void beginSection(java.lang.String)>
SPECIAL edge: specialinvoke $r11.<androidx.startup.StartupException: void <init>(java.lang.Throwable)>($r10) in <androidx.startup.AppInitializer: void discoverAndInitialize()> ==> <androidx.startup.StartupException: void <init>(java.lang.Throwable)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r1) in <androidx.startup.StartupException: void <init>(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.Throwable)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>() in <androidx.startup.AppInitializer: void discoverAndInitialize()> ==> <java.lang.Class: java.lang.String getName()>
VIRTUAL edge: virtualinvoke r0.<androidx.startup.AppInitializer: void discoverAndInitialize(android.os.Bundle)>($r8) in <androidx.startup.AppInitializer: void discoverAndInitialize()> ==> <androidx.startup.AppInitializer: void discoverAndInitialize(android.os.Bundle)>
STATIC edge: $r10 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r8) in <androidx.startup.AppInitializer: void discoverAndInitialize(android.os.Bundle)> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
SPECIAL edge: specialinvoke $r13.<androidx.startup.StartupException: void <init>(java.lang.Throwable)>($r12) in <androidx.startup.AppInitializer: void discoverAndInitialize(android.os.Bundle)> ==> <androidx.startup.StartupException: void <init>(java.lang.Throwable)>
VIRTUAL edge: $z0 = virtualinvoke $r11.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r10) in <androidx.startup.AppInitializer: void discoverAndInitialize(android.os.Bundle)> ==> <java.lang.Class: boolean isAssignableFrom(java.lang.Class)>
SPECIAL edge: specialinvoke r0.<androidx.startup.AppInitializer: java.lang.Object doInitialize(java.lang.Class,java.util.Set)>($r10, $r4) in <androidx.startup.AppInitializer: void discoverAndInitialize(android.os.Bundle)> ==> <androidx.startup.AppInitializer: java.lang.Object doInitialize(java.lang.Class,java.util.Set)>
CLINIT edge: $r3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Cannot initialize %s. Cycle detected.", $r7) in <androidx.startup.AppInitializer: java.lang.Object doInitialize(java.lang.Class,java.util.Set)> ==> <java.lang.String: void <clinit>()>
STATIC edge: staticinvoke <androidx.tracing.Trace: void endSection()>() in <androidx.startup.AppInitializer: java.lang.Object doInitialize(java.lang.Class,java.util.Set)> ==> <androidx.tracing.Trace: void endSection()>
STATIC edge: $r3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Cannot initialize %s. Cycle detected.", $r7) in <androidx.startup.AppInitializer: java.lang.Object doInitialize(java.lang.Class,java.util.Set)> ==> <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
STATIC edge: staticinvoke <androidx.tracing.Trace: void endSection()>() in <androidx.startup.AppInitializer: java.lang.Object doInitialize(java.lang.Class,java.util.Set)> ==> <androidx.tracing.Trace: void endSection()>
STATIC edge: staticinvoke <androidx.tracing.Trace: void beginSection(java.lang.String)>($r3) in <androidx.startup.AppInitializer: java.lang.Object doInitialize(java.lang.Class,java.util.Set)> ==> <androidx.tracing.Trace: void beginSection(java.lang.String)>
STATIC edge: $z0 = staticinvoke <androidx.tracing.Trace: boolean isEnabled()>() in <androidx.startup.AppInitializer: java.lang.Object doInitialize(java.lang.Class,java.util.Set)> ==> <androidx.tracing.Trace: boolean isEnabled()>
STATIC edge: $z0 = staticinvoke <androidx.tracing.Trace: boolean isEnabledFallback()>() in <androidx.tracing.Trace: boolean isEnabled()> ==> <androidx.tracing.Trace: boolean isEnabledFallback()>
CLINIT edge: $r0 = <java.lang.Long: java.lang.Class TYPE> in <androidx.tracing.Trace: boolean isEnabledFallback()> ==> <java.lang.Long: void <clinit>()>
STATIC edge: staticinvoke <androidx.tracing.Trace: void handleException(java.lang.String,java.lang.Exception)>("isTagEnabled", $r9) in <androidx.tracing.Trace: boolean isEnabledFallback()> ==> <androidx.tracing.Trace: void handleException(java.lang.String,java.lang.Exception)>
STATIC edge: $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0) in <androidx.tracing.Trace: boolean isEnabledFallback()> ==> <java.lang.Long: java.lang.Long valueOf(long)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long valueOf(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r2) in <androidx.tracing.Trace: void handleException(java.lang.String,java.lang.Exception)> ==> <java.lang.RuntimeException: void <init>(java.lang.Throwable)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.Exception: java.lang.Throwable getCause()>() in <androidx.tracing.Trace: void handleException(java.lang.String,java.lang.Exception)> ==> <java.lang.Throwable: java.lang.Throwable getCause()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.Throwable getCause()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("isTagEnabled", $r4) in <androidx.tracing.Trace: boolean isEnabledFallback()> ==> <java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>
VIRTUAL edge: $r2 = virtualinvoke $r0.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>("TRACE_TAG_APP") in <androidx.tracing.Trace: boolean isEnabledFallback()> ==> <java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Field getField(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r16.<androidx.startup.StartupException: void <init>(java.lang.Throwable)>($r15) in <androidx.startup.AppInitializer: java.lang.Object doInitialize(java.lang.Class,java.util.Set)> ==> <androidx.startup.StartupException: void <init>(java.lang.Throwable)>
SPECIAL edge: specialinvoke $r1.<androidx.startup.AppInitializer: void <init>(android.content.Context)>($r0) in <androidx.startup.AppInitializer: androidx.startup.AppInitializer getInstance(android.content.Context)> ==> <androidx.startup.AppInitializer: void <init>(android.content.Context)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.startup.AppInitializer: void <init>(android.content.Context)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <androidx.startup.AppInitializer: void <clinit>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r4.<androidx.startup.StartupException: void <init>(java.lang.String)>("Context cannot be null") in <androidx.startup.InitializationProvider: boolean onCreate()> ==> <androidx.startup.StartupException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>(java.lang.String)>($r1) in <androidx.startup.StartupException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
INTERFACE edge: interfaceinvoke $r0.<androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback: void onResultReceived(int,java.lang.Object)>($i0, $r1) in <androidx.profileinstaller.ProfileInstaller: void lambda$result$0(androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback,int,java.lang.Object)> ==> <androidx.profileinstaller.ProfileInstallReceiver$ResultDiagnostics: void onResultReceived(int,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback: void onDiagnosticReceived(int,java.lang.Object)>(5, null) in <androidx.profileinstaller.DeviceProfileWriter: java.io.InputStream openStreamFromAssets(android.content.res.AssetManager,java.lang.String)> ==> <androidx.profileinstaller.ProfileInstallReceiver$ResultDiagnostics: void onDiagnosticReceived(int,java.lang.Object)>
CLINIT edge: $r2 = <androidx.profileinstaller.ProfileInstaller: androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback LOG_DIAGNOSTICS> in <androidx.profileinstaller.ProfileInstallReceiver$ResultDiagnostics: void onDiagnosticReceived(int,java.lang.Object)> ==> <androidx.profileinstaller.ProfileInstaller: void <clinit>()>
INTERFACE edge: interfaceinvoke $r2.<androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback: void onDiagnosticReceived(int,java.lang.Object)>($i0, $r1) in <androidx.profileinstaller.ProfileInstallReceiver$ResultDiagnostics: void onDiagnosticReceived(int,java.lang.Object)> ==> <androidx.profileinstaller.ProfileInstaller$2: void onDiagnosticReceived(int,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback: void onResultReceived(int,java.lang.Object)>(8, $r9) in <androidx.profileinstaller.DeviceProfileWriter: androidx.profileinstaller.DeviceProfileWriter addMetadata(androidx.profileinstaller.DexProfileData[],byte[])> ==> <androidx.profileinstaller.ProfileInstallReceiver$ResultDiagnostics: void onResultReceived(int,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback: void onResultReceived(int,java.lang.Object)>(7, $r11) in <androidx.profileinstaller.DeviceProfileWriter: androidx.profileinstaller.DeviceProfileWriter addMetadata(androidx.profileinstaller.DexProfileData[],byte[])> ==> <androidx.profileinstaller.ProfileInstallReceiver$ResultDiagnostics: void onResultReceived(int,java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.String: boolean contains(java.lang.CharSequence)>("compressed") in <androidx.profileinstaller.DeviceProfileWriter: java.io.InputStream openStreamFromAssets(android.content.res.AssetManager,java.lang.String)> ==> <java.lang.String: boolean contains(java.lang.CharSequence)>
INTERFACE edge: interfaceinvoke $r6.<androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback: void onResultReceived(int,java.lang.Object)>(7, $r5) in <androidx.profileinstaller.DeviceProfileWriter: androidx.profileinstaller.DexProfileData[] readProfileInternal(java.io.InputStream)> ==> <androidx.profileinstaller.ProfileInstallReceiver$ResultDiagnostics: void onResultReceived(int,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback: void onResultReceived(int,java.lang.Object)>(8, $r8) in <androidx.profileinstaller.DeviceProfileWriter: androidx.profileinstaller.DexProfileData[] readProfileInternal(java.io.InputStream)> ==> <androidx.profileinstaller.ProfileInstallReceiver$ResultDiagnostics: void onResultReceived(int,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback: void onResultReceived(int,java.lang.Object)>(7, $r4) in <androidx.profileinstaller.DeviceProfileWriter: java.io.InputStream getProfileInputStream(android.content.res.AssetManager)> ==> <androidx.profileinstaller.ProfileInstallReceiver$ResultDiagnostics: void onResultReceived(int,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback: void onResultReceived(int,java.lang.Object)>(6, $r6) in <androidx.profileinstaller.DeviceProfileWriter: java.io.InputStream getProfileInputStream(android.content.res.AssetManager)> ==> <androidx.profileinstaller.ProfileInstallReceiver$ResultDiagnostics: void onResultReceived(int,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r1.<androidx.profileinstaller.DeviceProfileWriter: void lambda$result$0$androidx-profileinstaller-DeviceProfileWriter(int,java.lang.Object)>($i0, $r2) in <androidx.profileinstaller.DeviceProfileWriter$$ExternalSyntheticLambda0: void run()> ==> <androidx.profileinstaller.DeviceProfileWriter: void lambda$result$0$androidx-profileinstaller-DeviceProfileWriter(int,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback: void onResultReceived(int,java.lang.Object)>($i0, $r1) in <androidx.profileinstaller.DeviceProfileWriter: void lambda$result$0$androidx-profileinstaller-DeviceProfileWriter(int,java.lang.Object)> ==> <androidx.profileinstaller.ProfileInstallReceiver$ResultDiagnostics: void onResultReceived(int,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r3) in <androidx.profileinstaller.DeviceProfileWriter: void result(int,java.lang.Object)> ==> <androidx.profileinstaller.ProfileInstallReceiver$$ExternalSyntheticLambda0: void execute(java.lang.Runnable)>
INTERFACE edge: interfaceinvoke $r1.<java.lang.Runnable: void run()>() in <androidx.profileinstaller.ProfileInstallReceiver$$ExternalSyntheticLambda0: void execute(java.lang.Runnable)> ==> <androidx.profileinstaller.DeviceProfileWriter$$ExternalSyntheticLambda0: void run()>
INTERFACE edge: interfaceinvoke $r4.<androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback: void onResultReceived(int,java.lang.Object)>(5, null) in <androidx.profileinstaller.DeviceProfileWriter: androidx.profileinstaller.DeviceProfileWriter transcodeIfNeeded()> ==> <androidx.profileinstaller.ProfileInstallReceiver$ResultDiagnostics: void onResultReceived(int,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback: void onResultReceived(int,java.lang.Object)>(8, $r7) in <androidx.profileinstaller.DeviceProfileWriter: androidx.profileinstaller.DeviceProfileWriter transcodeIfNeeded()> ==> <androidx.profileinstaller.ProfileInstallReceiver$ResultDiagnostics: void onResultReceived(int,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback: void onResultReceived(int,java.lang.Object)>(7, $r8) in <androidx.profileinstaller.DeviceProfileWriter: androidx.profileinstaller.DeviceProfileWriter transcodeIfNeeded()> ==> <androidx.profileinstaller.ProfileInstallReceiver$ResultDiagnostics: void onResultReceived(int,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r2.<androidx.concurrent.futures.AbstractResolvableFuture$Waiter: void unpark()>() in <androidx.concurrent.futures.AbstractResolvableFuture: void releaseWaiters()> ==> <androidx.concurrent.futures.AbstractResolvableFuture$Waiter: void unpark()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map$Entry: java.lang.Object getValue()>() in <androidx.lifecycle.LifecycleRegistry: boolean isSynced()> ==> <androidx.arch.core.internal.SafeIterableMap$Entry: java.lang.Object getValue()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map$Entry: java.lang.Object getValue()>() in <androidx.lifecycle.LifecycleRegistry: boolean isSynced()> ==> <androidx.arch.core.internal.SafeIterableMap$Entry: java.lang.Object getValue()>
INTERFACE edge: $r5 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getKey()>() in <androidx.lifecycle.LifecycleRegistry: void forwardPass(androidx.lifecycle.LifecycleOwner)> ==> <androidx.arch.core.internal.SafeIterableMap$Entry: java.lang.Object getKey()>
INTERFACE edge: $r5 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getValue()>() in <androidx.lifecycle.LifecycleRegistry: void forwardPass(androidx.lifecycle.LifecycleOwner)> ==> <androidx.arch.core.internal.SafeIterableMap$Entry: java.lang.Object getValue()>
VIRTUAL edge: $r9 = virtualinvoke $r8.<androidx.lifecycle.LifecycleRegistry$ObserverWithState: androidx.lifecycle.Lifecycle$State getState()>() in <androidx.lifecycle.LifecycleRegistry: void forwardPass(androidx.lifecycle.LifecycleOwner)> ==> <androidx.lifecycle.LifecycleRegistry$ObserverWithState: androidx.lifecycle.Lifecycle$State getState()>
VIRTUAL edge: virtualinvoke $r8.<androidx.lifecycle.LifecycleRegistry$ObserverWithState: void dispatchEvent(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)>($r1, $r13) in <androidx.lifecycle.LifecycleRegistry: void forwardPass(androidx.lifecycle.LifecycleOwner)> ==> <androidx.lifecycle.LifecycleRegistry$ObserverWithState: void dispatchEvent(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<androidx.lifecycle.LifecycleRegistry$ObserverWithState: androidx.lifecycle.Lifecycle$State getState()>() in <androidx.lifecycle.LifecycleRegistry: void forwardPass(androidx.lifecycle.LifecycleOwner)> ==> <androidx.lifecycle.LifecycleRegistry$ObserverWithState: androidx.lifecycle.Lifecycle$State getState()>
VIRTUAL edge: $i0 = virtualinvoke $r9.<androidx.lifecycle.Lifecycle$State: int compareTo(java.lang.Enum)>($r11) in <androidx.lifecycle.LifecycleRegistry: void forwardPass(androidx.lifecycle.LifecycleOwner)> ==> <java.lang.Enum: int compareTo(java.lang.Enum)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<androidx.lifecycle.LifecycleRegistry$ObserverWithState: androidx.lifecycle.Lifecycle$State getState()>() in <androidx.lifecycle.LifecycleRegistry: boolean isSynced()> ==> <androidx.lifecycle.LifecycleRegistry$ObserverWithState: androidx.lifecycle.Lifecycle$State getState()>
INTERFACE edge: $r2 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getValue()>() in <androidx.lifecycle.LifecycleRegistry: void sync()> ==> <androidx.arch.core.internal.SafeIterableMap$Entry: java.lang.Object getValue()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<androidx.lifecycle.LifecycleRegistry$ObserverWithState: androidx.lifecycle.Lifecycle$State getState()>() in <androidx.lifecycle.LifecycleRegistry: void sync()> ==> <androidx.lifecycle.LifecycleRegistry$ObserverWithState: androidx.lifecycle.Lifecycle$State getState()>
INTERFACE edge: interfaceinvoke $r6.<androidx.lifecycle.LifecycleEventObserver: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)>($r1, $r2) in <androidx.lifecycle.LifecycleRegistry$ObserverWithState: void dispatchEvent(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)> ==> <androidx.lifecycle.DefaultLifecycleObserverAdapter: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)>
INTERFACE edge: interfaceinvoke $r6.<androidx.lifecycle.LifecycleEventObserver: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)>($r1, $r2) in <androidx.lifecycle.LifecycleRegistry$ObserverWithState: void dispatchEvent(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)> ==> <androidx.lifecycle.SingleGeneratedAdapterObserver: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)>
INTERFACE edge: interfaceinvoke $r6.<androidx.lifecycle.LifecycleEventObserver: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)>($r1, $r2) in <androidx.lifecycle.LifecycleRegistry$ObserverWithState: void dispatchEvent(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)> ==> <androidx.lifecycle.CompositeGeneratedAdaptersObserver: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)>
INTERFACE edge: interfaceinvoke $r6.<androidx.lifecycle.LifecycleEventObserver: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)>($r1, $r2) in <androidx.lifecycle.LifecycleRegistry$ObserverWithState: void dispatchEvent(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)> ==> <androidx.lifecycle.ReflectiveGenericLifecycleObserver: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)>
INTERFACE edge: interfaceinvoke $r6.<androidx.lifecycle.LifecycleEventObserver: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)>($r1, $r2) in <androidx.lifecycle.LifecycleRegistry$ObserverWithState: void dispatchEvent(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)> ==> <androidx.savedstate.Recreator: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)>
INTERFACE edge: interfaceinvoke $r6.<androidx.lifecycle.LifecycleEventObserver: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)>($r1, $r2) in <androidx.lifecycle.LifecycleRegistry$ObserverWithState: void dispatchEvent(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)> ==> <androidx.savedstate.SavedStateRegistry$$ExternalSyntheticLambda0: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)>
CLINIT edge: $r3 = <androidx.lifecycle.DefaultLifecycleObserverAdapter$WhenMappings: int[] $EnumSwitchMapping$0> in <androidx.lifecycle.DefaultLifecycleObserverAdapter: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)> ==> <androidx.lifecycle.DefaultLifecycleObserverAdapter$WhenMappings: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "event") in <androidx.lifecycle.DefaultLifecycleObserverAdapter: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "source") in <androidx.lifecycle.SingleGeneratedAdapterObserver: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "source") in <androidx.lifecycle.CompositeGeneratedAdaptersObserver: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
CLINIT edge: $r3 = <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_CREATE> in <androidx.savedstate.Recreator: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)> ==> <androidx.lifecycle.Lifecycle$Event: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "event") in <androidx.savedstate.Recreator: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
CLINIT edge: staticinvoke <androidx.savedstate.SavedStateRegistry: void $r8$lambda$AUDDdpkzZrJMhBj0r-_9pI-j6hA(androidx.savedstate.SavedStateRegistry,androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)>($r3, $r1, $r2) in <androidx.savedstate.SavedStateRegistry$$ExternalSyntheticLambda0: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)> ==> <androidx.savedstate.SavedStateRegistry: void <clinit>()>
STATIC edge: staticinvoke <androidx.savedstate.SavedStateRegistry: void $r8$lambda$AUDDdpkzZrJMhBj0r-_9pI-j6hA(androidx.savedstate.SavedStateRegistry,androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)>($r3, $r1, $r2) in <androidx.savedstate.SavedStateRegistry$$ExternalSyntheticLambda0: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)> ==> <androidx.savedstate.SavedStateRegistry: void $r8$lambda$AUDDdpkzZrJMhBj0r-_9pI-j6hA(androidx.savedstate.SavedStateRegistry,androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)>
CLINIT edge: $r7 = staticinvoke <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event[] values()>() in <androidx.lifecycle.DefaultLifecycleObserverAdapter$WhenMappings: void <clinit>()> ==> <androidx.lifecycle.Lifecycle$Event: void <clinit>()>
STATIC edge: $r7 = staticinvoke <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event[] values()>() in <androidx.lifecycle.DefaultLifecycleObserverAdapter$WhenMappings: void <clinit>()> ==> <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event[] values()>
CLINIT edge: $r9 = <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_ANY> in <androidx.lifecycle.DefaultLifecycleObserverAdapter$WhenMappings: void <clinit>()> ==> <androidx.lifecycle.Lifecycle$Event: void <clinit>()>
CLINIT edge: $r9 = <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_DESTROY> in <androidx.lifecycle.DefaultLifecycleObserverAdapter$WhenMappings: void <clinit>()> ==> <androidx.lifecycle.Lifecycle$Event: void <clinit>()>
CLINIT edge: $r9 = <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_PAUSE> in <androidx.lifecycle.DefaultLifecycleObserverAdapter$WhenMappings: void <clinit>()> ==> <androidx.lifecycle.Lifecycle$Event: void <clinit>()>
CLINIT edge: $r9 = <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_RESUME> in <androidx.lifecycle.DefaultLifecycleObserverAdapter$WhenMappings: void <clinit>()> ==> <androidx.lifecycle.Lifecycle$Event: void <clinit>()>
CLINIT edge: $r9 = <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_START> in <androidx.lifecycle.DefaultLifecycleObserverAdapter$WhenMappings: void <clinit>()> ==> <androidx.lifecycle.Lifecycle$Event: void <clinit>()>
CLINIT edge: staticinvoke <androidx.savedstate.SavedStateRegistry: void performAttach$lambda$4(androidx.savedstate.SavedStateRegistry,androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)>($r0, $r1, $r2) in <androidx.savedstate.SavedStateRegistry: void $r8$lambda$AUDDdpkzZrJMhBj0r-_9pI-j6hA(androidx.savedstate.SavedStateRegistry,androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)> ==> <androidx.savedstate.SavedStateRegistry: void <clinit>()>
STATIC edge: staticinvoke <androidx.savedstate.SavedStateRegistry: void performAttach$lambda$4(androidx.savedstate.SavedStateRegistry,androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)>($r0, $r1, $r2) in <androidx.savedstate.SavedStateRegistry: void $r8$lambda$AUDDdpkzZrJMhBj0r-_9pI-j6hA(androidx.savedstate.SavedStateRegistry,androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)> ==> <androidx.savedstate.SavedStateRegistry: void performAttach$lambda$4(androidx.savedstate.SavedStateRegistry,androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)>
CLINIT edge: $r3 = <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_START> in <androidx.savedstate.SavedStateRegistry: void performAttach$lambda$4(androidx.savedstate.SavedStateRegistry,androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)> ==> <androidx.lifecycle.Lifecycle$Event: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "event") in <androidx.savedstate.SavedStateRegistry: void performAttach$lambda$4(androidx.savedstate.SavedStateRegistry,androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "this$0") in <androidx.savedstate.SavedStateRegistry: void performAttach$lambda$4(androidx.savedstate.SavedStateRegistry,androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r9.<androidx.lifecycle.Lifecycle$Event: int ordinal()>() in <androidx.lifecycle.DefaultLifecycleObserverAdapter$WhenMappings: void <clinit>()> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: $i0 = virtualinvoke $r9.<androidx.lifecycle.Lifecycle$Event: int ordinal()>() in <androidx.lifecycle.DefaultLifecycleObserverAdapter$WhenMappings: void <clinit>()> ==> <java.lang.Enum: int ordinal()>
SPECIAL edge: specialinvoke $r15.<java.lang.AssertionError: void <init>(java.lang.Object)>("Next event must be ON_CREATE") in <androidx.savedstate.Recreator: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)> ==> <java.lang.AssertionError: void <init>(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<androidx.savedstate.Recreator: void reflectiveNew(java.lang.String)>($r13) in <androidx.savedstate.Recreator: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)> ==> <androidx.savedstate.Recreator: void reflectiveNew(java.lang.String)>
STATIC edge: $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>($r1, 0, $r3) in <androidx.savedstate.Recreator: void reflectiveNew(java.lang.String)> ==> <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r7, "{\n                constr\u2026wInstance()\n            }") in <androidx.savedstate.Recreator: void reflectiveNew(java.lang.String)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r1, $r13) in <androidx.savedstate.Recreator: void reflectiveNew(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.Exception: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.ClassLoader getClassLoader()>() in <androidx.savedstate.Recreator: void reflectiveNew(java.lang.String)> ==> <java.lang.Class: java.lang.ClassLoader getClassLoader()>
VIRTUAL edge: $r2 = virtualinvoke $r2.<java.lang.Class: java.lang.Class asSubclass(java.lang.Class)>(class "Landroidx/savedstate/SavedStateRegistry$AutoRecreated;") in <androidx.savedstate.Recreator: void reflectiveNew(java.lang.String)> ==> <java.lang.Class: java.lang.Class asSubclass(java.lang.Class)>
VIRTUAL edge: $r5 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>($r4) in <androidx.savedstate.Recreator: void reflectiveNew(java.lang.String)> ==> <java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>
VIRTUAL edge: $r1 = virtualinvoke $r2.<java.lang.Class: java.lang.String getSimpleName()>() in <androidx.savedstate.Recreator: void reflectiveNew(java.lang.String)> ==> <java.lang.Class: java.lang.String getSimpleName()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.String getSimpleName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Class asSubclass(java.lang.Class)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.ClassLoader getClassLoader()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
INTERFACE edge: $r7 = interfaceinvoke $r6.<androidx.savedstate.SavedStateRegistryOwner: androidx.savedstate.SavedStateRegistry getSavedStateRegistry()>() in <androidx.savedstate.Recreator: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)> ==> <androidx.fragment.app.Fragment: androidx.savedstate.SavedStateRegistry getSavedStateRegistry()>
VIRTUAL edge: $r1 = virtualinvoke $r2.<androidx.savedstate.SavedStateRegistryController: androidx.savedstate.SavedStateRegistry getSavedStateRegistry()>() in <androidx.fragment.app.Fragment: androidx.savedstate.SavedStateRegistry getSavedStateRegistry()> ==> <androidx.savedstate.SavedStateRegistryController: androidx.savedstate.SavedStateRegistry getSavedStateRegistry()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<androidx.savedstate.SavedStateRegistry: android.os.Bundle consumeRestoredStateForKey(java.lang.String)>("androidx.savedstate.Restarter") in <androidx.savedstate.Recreator: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)> ==> <androidx.savedstate.SavedStateRegistry: android.os.Bundle consumeRestoredStateForKey(java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "key") in <androidx.savedstate.SavedStateRegistry: android.os.Bundle consumeRestoredStateForKey(java.lang.String)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>() in <androidx.savedstate.SavedStateRegistry: android.os.Bundle consumeRestoredStateForKey(java.lang.String)> ==> <java.lang.String: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r3.<androidx.lifecycle.ClassesInfoCache$CallbackInfo: void invokeCallbacks(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event,java.lang.Object)>($r1, $r2, $r4) in <androidx.lifecycle.ReflectiveGenericLifecycleObserver: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)> ==> <androidx.lifecycle.ClassesInfoCache$CallbackInfo: void invokeCallbacks(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event,java.lang.Object)>
CLINIT edge: $r4 = <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_ANY> in <androidx.lifecycle.ClassesInfoCache$CallbackInfo: void invokeCallbacks(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event,java.lang.Object)> ==> <androidx.lifecycle.Lifecycle$Event: void <clinit>()>
STATIC edge: staticinvoke <androidx.lifecycle.ClassesInfoCache$CallbackInfo: void invokeMethodsForEvent(java.util.List,androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event,java.lang.Object)>($r7, $r1, $r2, $r3) in <androidx.lifecycle.ClassesInfoCache$CallbackInfo: void invokeCallbacks(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event,java.lang.Object)> ==> <androidx.lifecycle.ClassesInfoCache$CallbackInfo: void invokeMethodsForEvent(java.util.List,androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event,java.lang.Object)>
STATIC edge: staticinvoke <androidx.lifecycle.ClassesInfoCache$CallbackInfo: void invokeMethodsForEvent(java.util.List,androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event,java.lang.Object)>($r7, $r1, $r2, $r3) in <androidx.lifecycle.ClassesInfoCache$CallbackInfo: void invokeCallbacks(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event,java.lang.Object)> ==> <androidx.lifecycle.ClassesInfoCache$CallbackInfo: void invokeMethodsForEvent(java.util.List,androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event,java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<androidx.lifecycle.MethodCallsLogger: void <init>()>() in <androidx.lifecycle.CompositeGeneratedAdaptersObserver: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)> ==> <androidx.lifecycle.MethodCallsLogger: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.lifecycle.MethodCallsLogger: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke $r2.<androidx.lifecycle.Lifecycle$Event: int ordinal()>() in <androidx.lifecycle.DefaultLifecycleObserverAdapter: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)> ==> <java.lang.Enum: int ordinal()>
INTERFACE edge: interfaceinvoke $r6.<androidx.lifecycle.LifecycleEventObserver: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)>($r1, $r2) in <androidx.lifecycle.DefaultLifecycleObserverAdapter: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)> ==> <androidx.lifecycle.SingleGeneratedAdapterObserver: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)>
INTERFACE edge: interfaceinvoke $r6.<androidx.lifecycle.LifecycleEventObserver: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)>($r1, $r2) in <androidx.lifecycle.DefaultLifecycleObserverAdapter: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)> ==> <androidx.lifecycle.CompositeGeneratedAdaptersObserver: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)>
INTERFACE edge: interfaceinvoke $r6.<androidx.lifecycle.LifecycleEventObserver: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)>($r1, $r2) in <androidx.lifecycle.DefaultLifecycleObserverAdapter: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)> ==> <androidx.lifecycle.ReflectiveGenericLifecycleObserver: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)>
INTERFACE edge: interfaceinvoke $r6.<androidx.lifecycle.LifecycleEventObserver: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)>($r1, $r2) in <androidx.lifecycle.DefaultLifecycleObserverAdapter: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)> ==> <androidx.savedstate.Recreator: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)>
INTERFACE edge: interfaceinvoke $r6.<androidx.lifecycle.LifecycleEventObserver: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)>($r1, $r2) in <androidx.lifecycle.DefaultLifecycleObserverAdapter: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)> ==> <androidx.savedstate.SavedStateRegistry$$ExternalSyntheticLambda0: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<androidx.savedstate.SavedStateRegistryOwner: androidx.lifecycle.Lifecycle getLifecycle()>() in <androidx.savedstate.SavedStateRegistryController: void performAttach()> ==> <androidx.activity.ComponentActivity: androidx.lifecycle.Lifecycle getLifecycle()>
VIRTUAL edge: virtualinvoke $r2.<androidx.activity.contextaware.ContextAwareHelper: void addOnContextAvailableListener(androidx.activity.contextaware.OnContextAvailableListener)>($r1) in <androidx.activity.ComponentActivity: void addOnContextAvailableListener(androidx.activity.contextaware.OnContextAvailableListener)> ==> <androidx.activity.contextaware.ContextAwareHelper: void addOnContextAvailableListener(androidx.activity.contextaware.OnContextAvailableListener)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "listener") in <androidx.activity.contextaware.ContextAwareHelper: void addOnContextAvailableListener(androidx.activity.contextaware.OnContextAvailableListener)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
INTERFACE edge: interfaceinvoke $r1.<androidx.activity.contextaware.OnContextAvailableListener: void onContextAvailable(android.content.Context)>($r2) in <androidx.activity.contextaware.ContextAwareHelper: void addOnContextAvailableListener(androidx.activity.contextaware.OnContextAvailableListener)> ==> <androidx.appcompat.app.AppCompatActivity$2: void onContextAvailable(android.content.Context)>
INTERFACE edge: interfaceinvoke $r1.<androidx.activity.contextaware.OnContextAvailableListener: void onContextAvailable(android.content.Context)>($r2) in <androidx.activity.contextaware.ContextAwareHelper: void addOnContextAvailableListener(androidx.activity.contextaware.OnContextAvailableListener)> ==> <androidx.fragment.app.FragmentActivity$2: void onContextAvailable(android.content.Context)>
INTERFACE edge: interfaceinvoke $r1.<androidx.activity.contextaware.OnContextAvailableListener: void onContextAvailable(android.content.Context)>($r2) in <androidx.activity.contextaware.ContextAwareHelper: void addOnContextAvailableListener(androidx.activity.contextaware.OnContextAvailableListener)> ==> <androidx.activity.ComponentActivity$$ExternalSyntheticLambda3: void onContextAvailable(android.content.Context)>
VIRTUAL edge: virtualinvoke $r2.<androidx.activity.ComponentActivity: void lambda$new$2$androidx-activity-ComponentActivity(android.content.Context)>($r1) in <androidx.activity.ComponentActivity$$ExternalSyntheticLambda3: void onContextAvailable(android.content.Context)> ==> <androidx.activity.ComponentActivity: void lambda$new$2$androidx-activity-ComponentActivity(android.content.Context)>
VIRTUAL edge: $r2 = virtualinvoke r0.<androidx.activity.ComponentActivity: androidx.savedstate.SavedStateRegistry getSavedStateRegistry()>() in <androidx.activity.ComponentActivity: void lambda$new$2$androidx-activity-ComponentActivity(android.content.Context)> ==> <androidx.activity.ComponentActivity: androidx.savedstate.SavedStateRegistry getSavedStateRegistry()>
VIRTUAL edge: virtualinvoke $r4.<androidx.activity.result.ActivityResultRegistry: void onRestoreInstanceState(android.os.Bundle)>($r3) in <androidx.activity.ComponentActivity: void lambda$new$2$androidx-activity-ComponentActivity(android.content.Context)> ==> <androidx.activity.result.ActivityResultRegistry: void onRestoreInstanceState(android.os.Bundle)>
SPECIAL edge: specialinvoke r0.<androidx.activity.result.ActivityResultRegistry: void bindRcKey(int,java.lang.String)>($i1, $r7) in <androidx.activity.result.ActivityResultRegistry: void onRestoreInstanceState(android.os.Bundle)> ==> <androidx.activity.result.ActivityResultRegistry: void bindRcKey(int,java.lang.String)>
CLINIT edge: $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <androidx.activity.result.ActivityResultRegistry: void bindRcKey(int,java.lang.String)> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <androidx.activity.result.ActivityResultRegistry: void bindRcKey(int,java.lang.String)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <androidx.activity.result.ActivityResultRegistry: void bindRcKey(int,java.lang.String)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
VIRTUAL edge: $r4 = virtualinvoke $r2.<androidx.fragment.app.FragmentActivity: androidx.savedstate.SavedStateRegistry getSavedStateRegistry()>() in <androidx.fragment.app.FragmentActivity$2: void onContextAvailable(android.content.Context)> ==> <androidx.activity.ComponentActivity: androidx.savedstate.SavedStateRegistry getSavedStateRegistry()>
VIRTUAL edge: virtualinvoke $r3.<androidx.fragment.app.FragmentController: void attachHost(androidx.fragment.app.Fragment)>(null) in <androidx.fragment.app.FragmentActivity$2: void onContextAvailable(android.content.Context)> ==> <androidx.fragment.app.FragmentController: void attachHost(androidx.fragment.app.Fragment)>
VIRTUAL edge: virtualinvoke $r3.<androidx.fragment.app.FragmentController: void restoreSaveState(android.os.Parcelable)>($r6) in <androidx.fragment.app.FragmentActivity$2: void onContextAvailable(android.content.Context)> ==> <androidx.fragment.app.FragmentController: void restoreSaveState(android.os.Parcelable)>
VIRTUAL edge: virtualinvoke $r3.<androidx.fragment.app.FragmentManager: void restoreSaveState(android.os.Parcelable)>($r1) in <androidx.fragment.app.FragmentController: void restoreSaveState(android.os.Parcelable)> ==> <androidx.fragment.app.FragmentManager: void restoreSaveState(android.os.Parcelable)>
CLINIT edge: $z0 = staticinvoke <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>(2) in <androidx.fragment.app.FragmentManager: void restoreSaveState(android.os.Parcelable)> ==> <androidx.fragment.app.FragmentManager: void <clinit>()>
STATIC edge: $z0 = staticinvoke <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>(2) in <androidx.fragment.app.FragmentManager: void restoreSaveState(android.os.Parcelable)> ==> <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>
STATIC edge: $z0 = staticinvoke <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>(2) in <androidx.fragment.app.FragmentManager: void restoreSaveState(android.os.Parcelable)> ==> <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>
CLINIT edge: $z0 = staticinvoke <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>(2) in <androidx.fragment.app.FragmentManager: void restoreSaveState(android.os.Parcelable)> ==> <androidx.fragment.app.FragmentManager: void <clinit>()>
CLINIT edge: $z0 = <androidx.fragment.app.FragmentManager: boolean DEBUG> in <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)> ==> <androidx.fragment.app.FragmentManager: void <clinit>()>
SPECIAL edge: specialinvoke $r23.<androidx.fragment.app.LogWriter: void <init>(java.lang.String)>("FragmentManager") in <androidx.fragment.app.FragmentManager: void restoreSaveState(android.os.Parcelable)> ==> <androidx.fragment.app.LogWriter: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r14.<androidx.fragment.app.FragmentStateManager: void <init>(androidx.fragment.app.FragmentLifecycleCallbacksDispatcher,androidx.fragment.app.FragmentStore,java.lang.ClassLoader,androidx.fragment.app.FragmentFactory,androidx.fragment.app.FragmentState)>($r13, $r4, $r17, $r18, $r7) in <androidx.fragment.app.FragmentManager: void restoreSaveState(android.os.Parcelable)> ==> <androidx.fragment.app.FragmentStateManager: void <init>(androidx.fragment.app.FragmentLifecycleCallbacksDispatcher,androidx.fragment.app.FragmentStore,java.lang.ClassLoader,androidx.fragment.app.FragmentFactory,androidx.fragment.app.FragmentState)>
CLINIT edge: $r9 = staticinvoke <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State[] values()>() in <androidx.fragment.app.FragmentStateManager: void <init>(androidx.fragment.app.FragmentLifecycleCallbacksDispatcher,androidx.fragment.app.FragmentStore,java.lang.ClassLoader,androidx.fragment.app.FragmentFactory,androidx.fragment.app.FragmentState)> ==> <androidx.lifecycle.Lifecycle$State: void <clinit>()>
STATIC edge: $z0 = staticinvoke <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>(2) in <androidx.fragment.app.FragmentStateManager: void <init>(androidx.fragment.app.FragmentLifecycleCallbacksDispatcher,androidx.fragment.app.FragmentStore,java.lang.ClassLoader,androidx.fragment.app.FragmentFactory,androidx.fragment.app.FragmentState)> ==> <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>
STATIC edge: $r9 = staticinvoke <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State[] values()>() in <androidx.fragment.app.FragmentStateManager: void <init>(androidx.fragment.app.FragmentLifecycleCallbacksDispatcher,androidx.fragment.app.FragmentStore,java.lang.ClassLoader,androidx.fragment.app.FragmentFactory,androidx.fragment.app.FragmentState)> ==> <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State[] values()>
CLINIT edge: $z0 = staticinvoke <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>(2) in <androidx.fragment.app.FragmentStateManager: void <init>(androidx.fragment.app.FragmentLifecycleCallbacksDispatcher,androidx.fragment.app.FragmentStore,java.lang.ClassLoader,androidx.fragment.app.FragmentFactory,androidx.fragment.app.FragmentState)> ==> <androidx.fragment.app.FragmentManager: void <clinit>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.fragment.app.FragmentStateManager: void <init>(androidx.fragment.app.FragmentLifecycleCallbacksDispatcher,androidx.fragment.app.FragmentStore,java.lang.ClassLoader,androidx.fragment.app.FragmentFactory,androidx.fragment.app.FragmentState)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r12.<androidx.fragment.app.FragmentStateManager: void <init>(androidx.fragment.app.FragmentLifecycleCallbacksDispatcher,androidx.fragment.app.FragmentStore,androidx.fragment.app.Fragment,androidx.fragment.app.FragmentState)>($r13, $r4, $r10, $r7) in <androidx.fragment.app.FragmentManager: void restoreSaveState(android.os.Parcelable)> ==> <androidx.fragment.app.FragmentStateManager: void <init>(androidx.fragment.app.FragmentLifecycleCallbacksDispatcher,androidx.fragment.app.FragmentStore,androidx.fragment.app.Fragment,androidx.fragment.app.FragmentState)>
VIRTUAL edge: $r10 = virtualinvoke $r12.<androidx.fragment.app.FragmentStateManager: androidx.fragment.app.Fragment getFragment()>() in <androidx.fragment.app.FragmentManager: void restoreSaveState(android.os.Parcelable)> ==> <androidx.fragment.app.FragmentStateManager: androidx.fragment.app.Fragment getFragment()>
VIRTUAL edge: virtualinvoke $r12.<androidx.fragment.app.FragmentStateManager: void restoreState(java.lang.ClassLoader)>($r17) in <androidx.fragment.app.FragmentManager: void restoreSaveState(android.os.Parcelable)> ==> <androidx.fragment.app.FragmentStateManager: void restoreState(java.lang.ClassLoader)>
VIRTUAL edge: virtualinvoke $r12.<androidx.fragment.app.FragmentStateManager: void setFragmentManagerState(int)>($i0) in <androidx.fragment.app.FragmentManager: void restoreSaveState(android.os.Parcelable)> ==> <androidx.fragment.app.FragmentStateManager: void setFragmentManagerState(int)>
SPECIAL edge: specialinvoke $r12.<androidx.fragment.app.FragmentStateManager: void <init>(androidx.fragment.app.FragmentLifecycleCallbacksDispatcher,androidx.fragment.app.FragmentStore,androidx.fragment.app.Fragment)>($r13, $r4, $r10) in <androidx.fragment.app.FragmentManager: void restoreSaveState(android.os.Parcelable)> ==> <androidx.fragment.app.FragmentStateManager: void <init>(androidx.fragment.app.FragmentLifecycleCallbacksDispatcher,androidx.fragment.app.FragmentStore,androidx.fragment.app.Fragment)>
VIRTUAL edge: virtualinvoke $r12.<androidx.fragment.app.FragmentStateManager: void setFragmentManagerState(int)>(1) in <androidx.fragment.app.FragmentManager: void restoreSaveState(android.os.Parcelable)> ==> <androidx.fragment.app.FragmentStateManager: void setFragmentManagerState(int)>
VIRTUAL edge: virtualinvoke $r12.<androidx.fragment.app.FragmentStateManager: void moveToExpectedState()>() in <androidx.fragment.app.FragmentManager: void restoreSaveState(android.os.Parcelable)> ==> <androidx.fragment.app.FragmentStateManager: void moveToExpectedState()>
VIRTUAL edge: virtualinvoke $r12.<androidx.fragment.app.FragmentStateManager: void moveToExpectedState()>() in <androidx.fragment.app.FragmentManager: void restoreSaveState(android.os.Parcelable)> ==> <androidx.fragment.app.FragmentStateManager: void moveToExpectedState()>
CLINIT edge: $z0 = staticinvoke <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>(2) in <androidx.fragment.app.FragmentStateManager: void moveToExpectedState()> ==> <androidx.fragment.app.FragmentManager: void <clinit>()>
STATIC edge: $r7 = staticinvoke <androidx.fragment.app.SpecialEffectsController: androidx.fragment.app.SpecialEffectsController getOrCreateController(android.view.ViewGroup,androidx.fragment.app.FragmentManager)>($r5, $r6) in <androidx.fragment.app.FragmentStateManager: void moveToExpectedState()> ==> <androidx.fragment.app.SpecialEffectsController: androidx.fragment.app.SpecialEffectsController getOrCreateController(android.view.ViewGroup,androidx.fragment.app.FragmentManager)>
STATIC edge: $z0 = staticinvoke <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>(3) in <androidx.fragment.app.FragmentStateManager: void moveToExpectedState()> ==> <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>
STATIC edge: $r8 = staticinvoke <androidx.fragment.app.SpecialEffectsController$Operation$State: androidx.fragment.app.SpecialEffectsController$Operation$State 'from'(int)>($i0) in <androidx.fragment.app.FragmentStateManager: void moveToExpectedState()> ==> <androidx.fragment.app.SpecialEffectsController$Operation$State: androidx.fragment.app.SpecialEffectsController$Operation$State 'from'(int)>
STATIC edge: $z0 = staticinvoke <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>(2) in <androidx.fragment.app.FragmentStateManager: void moveToExpectedState()> ==> <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>
CLINIT edge: $z0 = staticinvoke <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>(3) in <androidx.fragment.app.FragmentStateManager: void moveToExpectedState()> ==> <androidx.fragment.app.FragmentManager: void <clinit>()>
CLINIT edge: $r8 = staticinvoke <androidx.fragment.app.SpecialEffectsController$Operation$State: androidx.fragment.app.SpecialEffectsController$Operation$State 'from'(int)>($i0) in <androidx.fragment.app.FragmentStateManager: void moveToExpectedState()> ==> <androidx.fragment.app.SpecialEffectsController$Operation$State: void <clinit>()>
STATIC edge: $r3 = staticinvoke <androidx.fragment.app.SpecialEffectsController: androidx.fragment.app.SpecialEffectsController getOrCreateController(android.view.ViewGroup,androidx.fragment.app.SpecialEffectsControllerFactory)>($r0, $r2) in <androidx.fragment.app.SpecialEffectsController: androidx.fragment.app.SpecialEffectsController getOrCreateController(android.view.ViewGroup,androidx.fragment.app.FragmentManager)> ==> <androidx.fragment.app.SpecialEffectsController: androidx.fragment.app.SpecialEffectsController getOrCreateController(android.view.ViewGroup,androidx.fragment.app.SpecialEffectsControllerFactory)>
CLINIT edge: r3 = <androidx.fragment.app.SpecialEffectsController$Operation$State: androidx.fragment.app.SpecialEffectsController$Operation$State GONE> in <androidx.fragment.app.SpecialEffectsController$Operation$State: androidx.fragment.app.SpecialEffectsController$Operation$State 'from'(int)> ==> <androidx.fragment.app.SpecialEffectsController$Operation$State: void <clinit>()>
SPECIAL edge: specialinvoke $r3.<androidx.fragment.app.SpecialEffectsController$Operation$State: void <init>(java.lang.String,int)>("INVISIBLE", 3) in <androidx.fragment.app.SpecialEffectsController$Operation$State: void <clinit>()> ==> <androidx.fragment.app.SpecialEffectsController$Operation$State: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>($r1, $i0) in <androidx.fragment.app.SpecialEffectsController$Operation$State: void <init>(java.lang.String,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r0.<androidx.fragment.app.SpecialEffectsController$Operation$State: void <init>(java.lang.String,int)>("REMOVED", 0) in <androidx.fragment.app.SpecialEffectsController$Operation$State: void <clinit>()> ==> <androidx.fragment.app.SpecialEffectsController$Operation$State: void <init>(java.lang.String,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<androidx.fragment.app.FragmentStateManager: androidx.fragment.app.Fragment getFragment()>() in <androidx.fragment.app.FragmentStateManager: void moveToExpectedState()> ==> <androidx.fragment.app.FragmentStateManager: androidx.fragment.app.Fragment getFragment()>
VIRTUAL edge: $i0 = virtualinvoke r0.<androidx.fragment.app.FragmentStateManager: int computeExpectedState()>() in <androidx.fragment.app.FragmentStateManager: void moveToExpectedState()> ==> <androidx.fragment.app.FragmentStateManager: int computeExpectedState()>
VIRTUAL edge: virtualinvoke r0.<androidx.fragment.app.FragmentStateManager: void resume()>() in <androidx.fragment.app.FragmentStateManager: void moveToExpectedState()> ==> <androidx.fragment.app.FragmentStateManager: void resume()>
VIRTUAL edge: virtualinvoke r0.<androidx.fragment.app.FragmentStateManager: void start()>() in <androidx.fragment.app.FragmentStateManager: void moveToExpectedState()> ==> <androidx.fragment.app.FragmentStateManager: void start()>
VIRTUAL edge: virtualinvoke r0.<androidx.fragment.app.FragmentStateManager: void activityCreated()>() in <androidx.fragment.app.FragmentStateManager: void moveToExpectedState()> ==> <androidx.fragment.app.FragmentStateManager: void activityCreated()>
VIRTUAL edge: virtualinvoke r0.<androidx.fragment.app.FragmentStateManager: void ensureInflatedView()>() in <androidx.fragment.app.FragmentStateManager: void moveToExpectedState()> ==> <androidx.fragment.app.FragmentStateManager: void ensureInflatedView()>
VIRTUAL edge: virtualinvoke r0.<androidx.fragment.app.FragmentStateManager: void createView()>() in <androidx.fragment.app.FragmentStateManager: void moveToExpectedState()> ==> <androidx.fragment.app.FragmentStateManager: void createView()>
VIRTUAL edge: virtualinvoke r0.<androidx.fragment.app.FragmentStateManager: void create()>() in <androidx.fragment.app.FragmentStateManager: void moveToExpectedState()> ==> <androidx.fragment.app.FragmentStateManager: void create()>
VIRTUAL edge: virtualinvoke r0.<androidx.fragment.app.FragmentStateManager: void attach()>() in <androidx.fragment.app.FragmentStateManager: void moveToExpectedState()> ==> <androidx.fragment.app.FragmentStateManager: void attach()>
VIRTUAL edge: virtualinvoke r0.<androidx.fragment.app.FragmentStateManager: void pause()>() in <androidx.fragment.app.FragmentStateManager: void moveToExpectedState()> ==> <androidx.fragment.app.FragmentStateManager: void pause()>
VIRTUAL edge: virtualinvoke r0.<androidx.fragment.app.FragmentStateManager: void stop()>() in <androidx.fragment.app.FragmentStateManager: void moveToExpectedState()> ==> <androidx.fragment.app.FragmentStateManager: void stop()>
VIRTUAL edge: virtualinvoke r0.<androidx.fragment.app.FragmentStateManager: void saveViewState()>() in <androidx.fragment.app.FragmentStateManager: void moveToExpectedState()> ==> <androidx.fragment.app.FragmentStateManager: void saveViewState()>
VIRTUAL edge: virtualinvoke r0.<androidx.fragment.app.FragmentStateManager: void destroyFragmentView()>() in <androidx.fragment.app.FragmentStateManager: void moveToExpectedState()> ==> <androidx.fragment.app.FragmentStateManager: void destroyFragmentView()>
VIRTUAL edge: virtualinvoke r0.<androidx.fragment.app.FragmentStateManager: void destroy()>() in <androidx.fragment.app.FragmentStateManager: void moveToExpectedState()> ==> <androidx.fragment.app.FragmentStateManager: void destroy()>
VIRTUAL edge: virtualinvoke r0.<androidx.fragment.app.FragmentStateManager: void detach()>() in <androidx.fragment.app.FragmentStateManager: void moveToExpectedState()> ==> <androidx.fragment.app.FragmentStateManager: void detach()>
CLINIT edge: $r3 = <androidx.fragment.app.FragmentStateManager$2: int[] $SwitchMap$androidx$lifecycle$Lifecycle$State> in <androidx.fragment.app.FragmentStateManager: int computeExpectedState()> ==> <androidx.fragment.app.FragmentStateManager$2: void <clinit>()>
STATIC edge: $z0 = staticinvoke <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>(2) in <androidx.fragment.app.FragmentStateManager: int computeExpectedState()> ==> <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>
STATIC edge: $r8 = staticinvoke <androidx.fragment.app.SpecialEffectsController: androidx.fragment.app.SpecialEffectsController getOrCreateController(android.view.ViewGroup,androidx.fragment.app.FragmentManager)>($r7, $r2) in <androidx.fragment.app.FragmentStateManager: int computeExpectedState()> ==> <androidx.fragment.app.SpecialEffectsController: androidx.fragment.app.SpecialEffectsController getOrCreateController(android.view.ViewGroup,androidx.fragment.app.FragmentManager)>
CLINIT edge: $r10 = <androidx.fragment.app.SpecialEffectsController$Operation$LifecycleImpact: androidx.fragment.app.SpecialEffectsController$Operation$LifecycleImpact ADDING> in <androidx.fragment.app.FragmentStateManager: int computeExpectedState()> ==> <androidx.fragment.app.SpecialEffectsController$Operation$LifecycleImpact: void <clinit>()>
CLINIT edge: $z0 = <androidx.fragment.app.FragmentManager: boolean USE_STATE_MANAGER> in <androidx.fragment.app.FragmentStateManager: int computeExpectedState()> ==> <androidx.fragment.app.FragmentManager: void <clinit>()>
CLINIT edge: $z0 = staticinvoke <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>(3) in <androidx.fragment.app.FragmentStateManager: void resume()> ==> <androidx.fragment.app.FragmentManager: void <clinit>()>
STATIC edge: $z1 = staticinvoke <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>(2) in <androidx.fragment.app.FragmentStateManager: void resume()> ==> <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>
STATIC edge: $z0 = staticinvoke <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>(3) in <androidx.fragment.app.FragmentStateManager: void resume()> ==> <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>
CLINIT edge: $z0 = staticinvoke <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>(3) in <androidx.fragment.app.FragmentStateManager: void start()> ==> <androidx.fragment.app.FragmentManager: void <clinit>()>
STATIC edge: $z0 = staticinvoke <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>(3) in <androidx.fragment.app.FragmentStateManager: void start()> ==> <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>
CLINIT edge: $z0 = staticinvoke <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>(3) in <androidx.fragment.app.FragmentStateManager: void activityCreated()> ==> <androidx.fragment.app.FragmentManager: void <clinit>()>
STATIC edge: $z0 = staticinvoke <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>(3) in <androidx.fragment.app.FragmentStateManager: void activityCreated()> ==> <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>
CLINIT edge: $z0 = staticinvoke <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>(3) in <androidx.fragment.app.FragmentStateManager: void ensureInflatedView()> ==> <androidx.fragment.app.FragmentManager: void <clinit>()>
STATIC edge: $z0 = staticinvoke <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>(3) in <androidx.fragment.app.FragmentStateManager: void ensureInflatedView()> ==> <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>
CLINIT edge: $z0 = staticinvoke <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>(3) in <androidx.fragment.app.FragmentStateManager: void createView()> ==> <androidx.fragment.app.FragmentManager: void <clinit>()>
STATIC edge: $z0 = staticinvoke <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>(2) in <androidx.fragment.app.FragmentStateManager: void createView()> ==> <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>
STATIC edge: staticinvoke <androidx.core.view.ViewCompat: void requestApplyInsets(android.view.View)>($r10) in <androidx.fragment.app.FragmentStateManager: void createView()> ==> <androidx.core.view.ViewCompat: void requestApplyInsets(android.view.View)>
STATIC edge: $z1 = staticinvoke <androidx.core.view.ViewCompat: boolean isAttachedToWindow(android.view.View)>($r10) in <androidx.fragment.app.FragmentStateManager: void createView()> ==> <androidx.core.view.ViewCompat: boolean isAttachedToWindow(android.view.View)>
STATIC edge: $r12 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0) in <androidx.fragment.app.FragmentStateManager: void createView()> ==> <java.lang.Integer: java.lang.String toHexString(int)>
STATIC edge: $z0 = staticinvoke <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>(3) in <androidx.fragment.app.FragmentStateManager: void createView()> ==> <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>
CLINIT edge: $z1 = staticinvoke <androidx.core.view.ViewCompat: boolean isAttachedToWindow(android.view.View)>($r10) in <androidx.fragment.app.FragmentStateManager: void createView()> ==> <androidx.core.view.ViewCompat: void <clinit>()>
CLINIT edge: $r12 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0) in <androidx.fragment.app.FragmentStateManager: void createView()> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: $z0 = staticinvoke <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>(3) in <androidx.fragment.app.FragmentStateManager: void create()> ==> <androidx.fragment.app.FragmentManager: void <clinit>()>
STATIC edge: $z0 = staticinvoke <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>(3) in <androidx.fragment.app.FragmentStateManager: void create()> ==> <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>
CLINIT edge: $z0 = staticinvoke <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>(3) in <androidx.fragment.app.FragmentStateManager: void attach()> ==> <androidx.fragment.app.FragmentManager: void <clinit>()>
STATIC edge: $z0 = staticinvoke <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>(3) in <androidx.fragment.app.FragmentStateManager: void attach()> ==> <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>
CLINIT edge: $z0 = staticinvoke <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>(3) in <androidx.fragment.app.FragmentStateManager: void pause()> ==> <androidx.fragment.app.FragmentManager: void <clinit>()>
STATIC edge: $z0 = staticinvoke <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>(3) in <androidx.fragment.app.FragmentStateManager: void pause()> ==> <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>
CLINIT edge: $z0 = staticinvoke <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>(3) in <androidx.fragment.app.FragmentStateManager: void stop()> ==> <androidx.fragment.app.FragmentManager: void <clinit>()>
STATIC edge: $z0 = staticinvoke <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>(3) in <androidx.fragment.app.FragmentStateManager: void stop()> ==> <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>
CLINIT edge: $z0 = staticinvoke <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>(3) in <androidx.fragment.app.FragmentStateManager: void destroyFragmentView()> ==> <androidx.fragment.app.FragmentManager: void <clinit>()>
STATIC edge: $z0 = staticinvoke <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>(3) in <androidx.fragment.app.FragmentStateManager: void destroyFragmentView()> ==> <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>
CLINIT edge: $z0 = staticinvoke <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>(3) in <androidx.fragment.app.FragmentStateManager: void destroy()> ==> <androidx.fragment.app.FragmentManager: void <clinit>()>
STATIC edge: $z0 = staticinvoke <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>(3) in <androidx.fragment.app.FragmentStateManager: void destroy()> ==> <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>
CLINIT edge: $z0 = staticinvoke <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>(3) in <androidx.fragment.app.FragmentStateManager: void detach()> ==> <androidx.fragment.app.FragmentManager: void <clinit>()>
STATIC edge: $z0 = staticinvoke <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>(3) in <androidx.fragment.app.FragmentStateManager: void detach()> ==> <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>
CLINIT edge: $r4 = staticinvoke <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State[] values()>() in <androidx.fragment.app.FragmentStateManager$2: void <clinit>()> ==> <androidx.lifecycle.Lifecycle$State: void <clinit>()>
STATIC edge: $r4 = staticinvoke <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State[] values()>() in <androidx.fragment.app.FragmentStateManager$2: void <clinit>()> ==> <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State[] values()>
CLINIT edge: $r6 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State CREATED> in <androidx.fragment.app.FragmentStateManager$2: void <clinit>()> ==> <androidx.lifecycle.Lifecycle$State: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toHexString(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r2.<androidx.fragment.app.SpecialEffectsController$Operation$LifecycleImpact: void <init>(java.lang.String,int)>("REMOVING", 2) in <androidx.fragment.app.SpecialEffectsController$Operation$LifecycleImpact: void <clinit>()> ==> <androidx.fragment.app.SpecialEffectsController$Operation$LifecycleImpact: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>($r1, $i0) in <androidx.fragment.app.SpecialEffectsController$Operation$LifecycleImpact: void <init>(java.lang.String,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
VIRTUAL edge: $i0 = virtualinvoke $r6.<androidx.lifecycle.Lifecycle$State: int ordinal()>() in <androidx.fragment.app.FragmentStateManager$2: void <clinit>()> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: $i0 = virtualinvoke $r6.<androidx.lifecycle.Lifecycle$State: int ordinal()>() in <androidx.fragment.app.FragmentStateManager$2: void <clinit>()> ==> <java.lang.Enum: int ordinal()>
SPECIAL edge: specialinvoke $r17.<androidx.fragment.app.FragmentStateManager$1: void <init>(androidx.fragment.app.FragmentStateManager,android.view.View)>(r0, $r10) in <androidx.fragment.app.FragmentStateManager: void createView()> ==> <androidx.fragment.app.FragmentStateManager$1: void <init>(androidx.fragment.app.FragmentStateManager,android.view.View)>
VIRTUAL edge: virtualinvoke r0.<androidx.fragment.app.FragmentStateManager: void addViewToContainer()>() in <androidx.fragment.app.FragmentStateManager: void createView()> ==> <androidx.fragment.app.FragmentStateManager: void addViewToContainer()>
SPECIAL edge: $z0 = specialinvoke r0.<androidx.fragment.app.FragmentStateManager: boolean isFragmentViewChild(android.view.View)>($r4) in <androidx.fragment.app.FragmentStateManager: void resume()> ==> <androidx.fragment.app.FragmentStateManager: boolean isFragmentViewChild(android.view.View)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.fragment.app.FragmentStateManager: void <init>(androidx.fragment.app.FragmentLifecycleCallbacksDispatcher,androidx.fragment.app.FragmentStore,androidx.fragment.app.Fragment,androidx.fragment.app.FragmentState)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r18 = virtualinvoke r0.<androidx.fragment.app.FragmentManager: androidx.fragment.app.FragmentFactory getFragmentFactory()>() in <androidx.fragment.app.FragmentManager: void restoreSaveState(android.os.Parcelable)> ==> <androidx.fragment.app.FragmentManager: androidx.fragment.app.FragmentFactory getFragmentFactory()>
VIRTUAL edge: $r10 = virtualinvoke r0.<androidx.fragment.app.FragmentManager: androidx.fragment.app.Fragment findActiveFragment(java.lang.String)>($r9) in <androidx.fragment.app.FragmentManager: void restoreSaveState(android.os.Parcelable)> ==> <androidx.fragment.app.FragmentManager: androidx.fragment.app.Fragment findActiveFragment(java.lang.String)>
SPECIAL edge: specialinvoke r0.<androidx.fragment.app.FragmentManager: void dispatchParentPrimaryNavigationFragmentChanged(androidx.fragment.app.Fragment)>($r10) in <androidx.fragment.app.FragmentManager: void restoreSaveState(android.os.Parcelable)> ==> <androidx.fragment.app.FragmentManager: void dispatchParentPrimaryNavigationFragmentChanged(androidx.fragment.app.Fragment)>
VIRTUAL edge: $r3 = virtualinvoke r0.<androidx.fragment.app.FragmentManager: androidx.fragment.app.Fragment findActiveFragment(java.lang.String)>($r2) in <androidx.fragment.app.FragmentManager: void dispatchParentPrimaryNavigationFragmentChanged(androidx.fragment.app.Fragment)> ==> <androidx.fragment.app.FragmentManager: androidx.fragment.app.Fragment findActiveFragment(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<androidx.fragment.app.FragmentStore: androidx.fragment.app.Fragment findActiveFragment(java.lang.String)>($r3) in <androidx.fragment.app.FragmentManager: androidx.fragment.app.Fragment findActiveFragment(java.lang.String)> ==> <androidx.fragment.app.FragmentStore: androidx.fragment.app.Fragment findActiveFragment(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r1.<androidx.fragment.app.FragmentFactory: androidx.fragment.app.Fragment instantiate(java.lang.ClassLoader,java.lang.String)>($r5, $r6) in <androidx.fragment.app.FragmentStateManager: void <init>(androidx.fragment.app.FragmentLifecycleCallbacksDispatcher,androidx.fragment.app.FragmentStore,java.lang.ClassLoader,androidx.fragment.app.FragmentFactory,androidx.fragment.app.FragmentState)> ==> <androidx.fragment.app.FragmentManager$3: androidx.fragment.app.Fragment instantiate(java.lang.ClassLoader,java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<androidx.fragment.app.FragmentManager: androidx.fragment.app.FragmentHostCallback getHost()>() in <androidx.fragment.app.FragmentManager$3: androidx.fragment.app.Fragment instantiate(java.lang.ClassLoader,java.lang.String)> ==> <androidx.fragment.app.FragmentManager: androidx.fragment.app.FragmentHostCallback getHost()>
VIRTUAL edge: $r5 = virtualinvoke $r3.<androidx.fragment.app.FragmentManager: androidx.fragment.app.FragmentHostCallback getHost()>() in <androidx.fragment.app.FragmentManager$3: androidx.fragment.app.Fragment instantiate(java.lang.ClassLoader,java.lang.String)> ==> <androidx.fragment.app.FragmentManager: androidx.fragment.app.FragmentHostCallback getHost()>
VIRTUAL edge: virtualinvoke $r4.<androidx.fragment.app.FragmentStore: void resetActiveFragments()>() in <androidx.fragment.app.FragmentManager: void restoreSaveState(android.os.Parcelable)> ==> <androidx.fragment.app.FragmentStore: void resetActiveFragments()>
VIRTUAL edge: virtualinvoke $r4.<androidx.fragment.app.FragmentStore: void makeActive(androidx.fragment.app.FragmentStateManager)>($r12) in <androidx.fragment.app.FragmentManager: void restoreSaveState(android.os.Parcelable)> ==> <androidx.fragment.app.FragmentStore: void makeActive(androidx.fragment.app.FragmentStateManager)>
VIRTUAL edge: $z0 = virtualinvoke $r4.<androidx.fragment.app.FragmentStore: boolean containsActiveFragment(java.lang.String)>($r9) in <androidx.fragment.app.FragmentManager: void restoreSaveState(android.os.Parcelable)> ==> <androidx.fragment.app.FragmentStore: boolean containsActiveFragment(java.lang.String)>
VIRTUAL edge: virtualinvoke $r4.<androidx.fragment.app.FragmentStore: void restoreAddedFragments(java.util.List)>($r3) in <androidx.fragment.app.FragmentManager: void restoreSaveState(android.os.Parcelable)> ==> <androidx.fragment.app.FragmentStore: void restoreAddedFragments(java.util.List)>
CLINIT edge: $z0 = staticinvoke <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>(2) in <androidx.fragment.app.FragmentStore: void makeActive(androidx.fragment.app.FragmentStateManager)> ==> <androidx.fragment.app.FragmentManager: void <clinit>()>
STATIC edge: $z0 = staticinvoke <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>(2) in <androidx.fragment.app.FragmentStore: void makeActive(androidx.fragment.app.FragmentStateManager)> ==> <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>
CLINIT edge: $z0 = staticinvoke <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>(2) in <androidx.fragment.app.FragmentStore: void restoreAddedFragments(java.util.List)> ==> <androidx.fragment.app.FragmentManager: void <clinit>()>
STATIC edge: $z0 = staticinvoke <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>(2) in <androidx.fragment.app.FragmentStore: void restoreAddedFragments(java.util.List)> ==> <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>
VIRTUAL edge: $r6 = virtualinvoke r0.<androidx.fragment.app.FragmentStore: androidx.fragment.app.Fragment findActiveFragment(java.lang.String)>($r5) in <androidx.fragment.app.FragmentStore: void restoreAddedFragments(java.util.List)> ==> <androidx.fragment.app.FragmentStore: androidx.fragment.app.Fragment findActiveFragment(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<androidx.fragment.app.FragmentStore: void addFragment(androidx.fragment.app.Fragment)>($r6) in <androidx.fragment.app.FragmentStore: void restoreAddedFragments(java.util.List)> ==> <androidx.fragment.app.FragmentStore: void addFragment(androidx.fragment.app.Fragment)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<androidx.fragment.app.FragmentStateManager: androidx.fragment.app.Fragment getFragment()>() in <androidx.fragment.app.FragmentStore: void makeActive(androidx.fragment.app.FragmentStateManager)> ==> <androidx.fragment.app.FragmentStateManager: androidx.fragment.app.Fragment getFragment()>
VIRTUAL edge: $z0 = virtualinvoke r0.<androidx.fragment.app.FragmentStore: boolean containsActiveFragment(java.lang.String)>($r1) in <androidx.fragment.app.FragmentStore: void makeActive(androidx.fragment.app.FragmentStateManager)> ==> <androidx.fragment.app.FragmentStore: boolean containsActiveFragment(java.lang.String)>
VIRTUAL edge: virtualinvoke $r3.<androidx.fragment.app.FragmentManager: void attachController(androidx.fragment.app.FragmentHostCallback,androidx.fragment.app.FragmentContainer,androidx.fragment.app.Fragment)>($r2, $r2, $r1) in <androidx.fragment.app.FragmentController: void attachHost(androidx.fragment.app.Fragment)> ==> <androidx.fragment.app.FragmentManager: void attachController(androidx.fragment.app.FragmentHostCallback,androidx.fragment.app.FragmentContainer,androidx.fragment.app.Fragment)>
CLINIT edge: $r11 = staticinvoke <androidx.fragment.app.FragmentManagerViewModel: androidx.fragment.app.FragmentManagerViewModel getInstance(androidx.lifecycle.ViewModelStore)>($r13) in <androidx.fragment.app.FragmentManager: void attachController(androidx.fragment.app.FragmentHostCallback,androidx.fragment.app.FragmentContainer,androidx.fragment.app.Fragment)> ==> <androidx.fragment.app.FragmentManagerViewModel: void <clinit>()>
STATIC edge: $r11 = staticinvoke <androidx.fragment.app.FragmentManagerViewModel: androidx.fragment.app.FragmentManagerViewModel getInstance(androidx.lifecycle.ViewModelStore)>($r13) in <androidx.fragment.app.FragmentManager: void attachController(androidx.fragment.app.FragmentHostCallback,androidx.fragment.app.FragmentContainer,androidx.fragment.app.Fragment)> ==> <androidx.fragment.app.FragmentManagerViewModel: androidx.fragment.app.FragmentManagerViewModel getInstance(androidx.lifecycle.ViewModelStore)>
CLINIT edge: $r28 = new androidx.activity.result.contract.ActivityResultContracts$RequestMultiplePermissions in <androidx.fragment.app.FragmentManager: void attachController(androidx.fragment.app.FragmentHostCallback,androidx.fragment.app.FragmentContainer,androidx.fragment.app.Fragment)> ==> <androidx.activity.result.contract.ActivityResultContracts$RequestMultiplePermissions: void <clinit>()>
CLINIT edge: $r24 = new androidx.activity.result.contract.ActivityResultContracts$StartActivityForResult in <androidx.fragment.app.FragmentManager: void attachController(androidx.fragment.app.FragmentHostCallback,androidx.fragment.app.FragmentContainer,androidx.fragment.app.Fragment)> ==> <androidx.activity.result.contract.ActivityResultContracts$StartActivityForResult: void <clinit>()>
CLINIT edge: $r1 = <androidx.fragment.app.FragmentManagerViewModel: androidx.lifecycle.ViewModelProvider$Factory FACTORY> in <androidx.fragment.app.FragmentManagerViewModel: androidx.fragment.app.FragmentManagerViewModel getInstance(androidx.lifecycle.ViewModelStore)> ==> <androidx.fragment.app.FragmentManagerViewModel: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<androidx.activity.result.contract.ActivityResultContracts$StartActivityForResult$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null) in <androidx.activity.result.contract.ActivityResultContracts$StartActivityForResult: void <clinit>()> ==> <androidx.activity.result.contract.ActivityResultContracts$StartActivityForResult$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>
SPECIAL edge: specialinvoke r0.<androidx.activity.result.contract.ActivityResultContracts$StartActivityForResult$Companion: void <init>()>() in <androidx.activity.result.contract.ActivityResultContracts$StartActivityForResult$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)> ==> <androidx.activity.result.contract.ActivityResultContracts$StartActivityForResult$Companion: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.activity.result.contract.ActivityResultContracts$StartActivityForResult$Companion: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<androidx.activity.result.contract.ActivityResultContracts$RequestMultiplePermissions$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null) in <androidx.activity.result.contract.ActivityResultContracts$RequestMultiplePermissions: void <clinit>()> ==> <androidx.activity.result.contract.ActivityResultContracts$RequestMultiplePermissions$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>
SPECIAL edge: specialinvoke r0.<androidx.activity.result.contract.ActivityResultContracts$RequestMultiplePermissions$Companion: void <init>()>() in <androidx.activity.result.contract.ActivityResultContracts$RequestMultiplePermissions$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)> ==> <androidx.activity.result.contract.ActivityResultContracts$RequestMultiplePermissions$Companion: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.activity.result.contract.ActivityResultContracts$RequestMultiplePermissions$Companion: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<androidx.lifecycle.ViewModelProvider: void <init>(androidx.lifecycle.ViewModelStore,androidx.lifecycle.ViewModelProvider$Factory)>($r3, $r1) in <androidx.fragment.app.FragmentManagerViewModel: androidx.fragment.app.FragmentManagerViewModel getInstance(androidx.lifecycle.ViewModelStore)> ==> <androidx.lifecycle.ViewModelProvider: void <init>(androidx.lifecycle.ViewModelStore,androidx.lifecycle.ViewModelProvider$Factory)>
VIRTUAL edge: $r2 = virtualinvoke $r0.<androidx.lifecycle.ViewModelProvider: androidx.lifecycle.ViewModel get(java.lang.Class)>(class "Landroidx/fragment/app/FragmentManagerViewModel;") in <androidx.fragment.app.FragmentManagerViewModel: androidx.fragment.app.FragmentManagerViewModel getInstance(androidx.lifecycle.ViewModelStore)> ==> <androidx.lifecycle.ViewModelProvider: androidx.lifecycle.ViewModel get(java.lang.Class)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "store") in <androidx.lifecycle.ViewModelProvider: void <init>(androidx.lifecycle.ViewModelStore,androidx.lifecycle.ViewModelProvider$Factory)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "modelClass") in <androidx.lifecycle.ViewModelProvider: androidx.lifecycle.ViewModel get(java.lang.Class)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getCanonicalName()>() in <androidx.lifecycle.ViewModelProvider: androidx.lifecycle.ViewModel get(java.lang.Class)> ==> <java.lang.Class: java.lang.String getCanonicalName()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.String getCanonicalName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke r0.<androidx.lifecycle.ViewModelProvider: androidx.lifecycle.ViewModel get(java.lang.String,java.lang.Class)>($r3, $r2) in <androidx.lifecycle.ViewModelProvider: androidx.lifecycle.ViewModel get(java.lang.Class)> ==> <androidx.lifecycle.ViewModelProvider: androidx.lifecycle.ViewModel get(java.lang.String,java.lang.Class)>
CLINIT edge: $r10 = <androidx.lifecycle.ViewModelProvider$NewInstanceFactory: androidx.lifecycle.viewmodel.CreationExtras$Key VIEW_MODEL_KEY> in <androidx.lifecycle.ViewModelProvider: androidx.lifecycle.ViewModel get(java.lang.String,java.lang.Class)> ==> <androidx.lifecycle.ViewModelProvider$NewInstanceFactory: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r5, "null cannot be cast to non-null type T of androidx.lifecycle.ViewModelProvider.get") in <androidx.lifecycle.ViewModelProvider: androidx.lifecycle.ViewModel get(java.lang.String,java.lang.Class)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r5) in <androidx.lifecycle.ViewModelProvider: androidx.lifecycle.ViewModel get(java.lang.String,java.lang.Class)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r3, "modelClass") in <androidx.lifecycle.ViewModelProvider: androidx.lifecycle.ViewModel get(java.lang.String,java.lang.Class)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "key") in <androidx.lifecycle.ViewModelProvider: androidx.lifecycle.ViewModel get(java.lang.String,java.lang.Class)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
CLINIT edge: $r1 = <androidx.lifecycle.ViewModelProvider$NewInstanceFactory$Companion$ViewModelKeyImpl: androidx.lifecycle.ViewModelProvider$NewInstanceFactory$Companion$ViewModelKeyImpl INSTANCE> in <androidx.lifecycle.ViewModelProvider$NewInstanceFactory: void <clinit>()> ==> <androidx.lifecycle.ViewModelProvider$NewInstanceFactory$Companion$ViewModelKeyImpl: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<androidx.lifecycle.ViewModelProvider$NewInstanceFactory$Companion$ViewModelKeyImpl: void <init>()>() in <androidx.lifecycle.ViewModelProvider$NewInstanceFactory$Companion$ViewModelKeyImpl: void <clinit>()> ==> <androidx.lifecycle.ViewModelProvider$NewInstanceFactory$Companion$ViewModelKeyImpl: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.lifecycle.ViewModelProvider$NewInstanceFactory$Companion$ViewModelKeyImpl: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<androidx.lifecycle.ViewModelProvider$NewInstanceFactory$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null) in <androidx.lifecycle.ViewModelProvider$NewInstanceFactory: void <clinit>()> ==> <androidx.lifecycle.ViewModelProvider$NewInstanceFactory$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>
SPECIAL edge: specialinvoke r0.<androidx.lifecycle.ViewModelProvider$NewInstanceFactory$Companion: void <init>()>() in <androidx.lifecycle.ViewModelProvider$NewInstanceFactory$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)> ==> <androidx.lifecycle.ViewModelProvider$NewInstanceFactory$Companion: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.lifecycle.ViewModelProvider$NewInstanceFactory$Companion: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r8.<androidx.lifecycle.viewmodel.MutableCreationExtras: void <init>(androidx.lifecycle.viewmodel.CreationExtras)>($r9) in <androidx.lifecycle.ViewModelProvider: androidx.lifecycle.ViewModel get(java.lang.String,java.lang.Class)> ==> <androidx.lifecycle.viewmodel.MutableCreationExtras: void <init>(androidx.lifecycle.viewmodel.CreationExtras)>
VIRTUAL edge: virtualinvoke $r8.<androidx.lifecycle.viewmodel.MutableCreationExtras: void set(androidx.lifecycle.viewmodel.CreationExtras$Key,java.lang.Object)>($r10, $r2) in <androidx.lifecycle.ViewModelProvider: androidx.lifecycle.ViewModel get(java.lang.String,java.lang.Class)> ==> <androidx.lifecycle.viewmodel.MutableCreationExtras: void set(androidx.lifecycle.viewmodel.CreationExtras$Key,java.lang.Object)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "initialExtras") in <androidx.lifecycle.viewmodel.MutableCreationExtras: void <init>(androidx.lifecycle.viewmodel.CreationExtras)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "key") in <androidx.lifecycle.viewmodel.MutableCreationExtras: void set(androidx.lifecycle.viewmodel.CreationExtras$Key,java.lang.Object)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke r0.<androidx.lifecycle.viewmodel.MutableCreationExtras: java.util.Map getMap$lifecycle_viewmodel_release()>() in <androidx.lifecycle.viewmodel.MutableCreationExtras: void set(androidx.lifecycle.viewmodel.CreationExtras$Key,java.lang.Object)> ==> <androidx.lifecycle.viewmodel.CreationExtras: java.util.Map getMap$lifecycle_viewmodel_release()>
VIRTUAL edge: $r3 = virtualinvoke $r1.<androidx.lifecycle.viewmodel.CreationExtras: java.util.Map getMap$lifecycle_viewmodel_release()>() in <androidx.lifecycle.viewmodel.MutableCreationExtras: void <init>(androidx.lifecycle.viewmodel.CreationExtras)> ==> <androidx.lifecycle.viewmodel.CreationExtras: java.util.Map getMap$lifecycle_viewmodel_release()>
SPECIAL edge: specialinvoke r0.<androidx.lifecycle.viewmodel.CreationExtras: void <init>()>() in <androidx.lifecycle.viewmodel.MutableCreationExtras: void <init>(androidx.lifecycle.viewmodel.CreationExtras)> ==> <androidx.lifecycle.viewmodel.CreationExtras: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.lifecycle.viewmodel.CreationExtras: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.Class: boolean isInstance(java.lang.Object)>($r5) in <androidx.lifecycle.ViewModelProvider: androidx.lifecycle.ViewModel get(java.lang.String,java.lang.Class)> ==> <java.lang.Class: boolean isInstance(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isInstance(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<androidx.lifecycle.ViewModelProvider: void <init>(androidx.lifecycle.ViewModelStore,androidx.lifecycle.ViewModelProvider$Factory,androidx.lifecycle.viewmodel.CreationExtras,int,kotlin.jvm.internal.DefaultConstructorMarker)>($r1, $r2, null, 4, null) in <androidx.lifecycle.ViewModelProvider: void <init>(androidx.lifecycle.ViewModelStore,androidx.lifecycle.ViewModelProvider$Factory)> ==> <androidx.lifecycle.ViewModelProvider: void <init>(androidx.lifecycle.ViewModelStore,androidx.lifecycle.ViewModelProvider$Factory,androidx.lifecycle.viewmodel.CreationExtras,int,kotlin.jvm.internal.DefaultConstructorMarker)>
CLINIT edge: $r5 = <androidx.lifecycle.viewmodel.CreationExtras$Empty: androidx.lifecycle.viewmodel.CreationExtras$Empty INSTANCE> in <androidx.lifecycle.ViewModelProvider: void <init>(androidx.lifecycle.ViewModelStore,androidx.lifecycle.ViewModelProvider$Factory,androidx.lifecycle.viewmodel.CreationExtras,int,kotlin.jvm.internal.DefaultConstructorMarker)> ==> <androidx.lifecycle.viewmodel.CreationExtras$Empty: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<androidx.lifecycle.viewmodel.CreationExtras$Empty: void <init>()>() in <androidx.lifecycle.viewmodel.CreationExtras$Empty: void <clinit>()> ==> <androidx.lifecycle.viewmodel.CreationExtras$Empty: void <init>()>
SPECIAL edge: specialinvoke r0.<androidx.lifecycle.viewmodel.CreationExtras: void <init>()>() in <androidx.lifecycle.viewmodel.CreationExtras$Empty: void <init>()> ==> <androidx.lifecycle.viewmodel.CreationExtras: void <init>()>
SPECIAL edge: specialinvoke r0.<androidx.lifecycle.ViewModelProvider: void <init>(androidx.lifecycle.ViewModelStore,androidx.lifecycle.ViewModelProvider$Factory,androidx.lifecycle.viewmodel.CreationExtras)>($r1, $r2, $r4) in <androidx.lifecycle.ViewModelProvider: void <init>(androidx.lifecycle.ViewModelStore,androidx.lifecycle.ViewModelProvider$Factory,androidx.lifecycle.viewmodel.CreationExtras,int,kotlin.jvm.internal.DefaultConstructorMarker)> ==> <androidx.lifecycle.ViewModelProvider: void <init>(androidx.lifecycle.ViewModelStore,androidx.lifecycle.ViewModelProvider$Factory,androidx.lifecycle.viewmodel.CreationExtras)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "store") in <androidx.lifecycle.ViewModelProvider: void <init>(androidx.lifecycle.ViewModelStore,androidx.lifecycle.ViewModelProvider$Factory,androidx.lifecycle.viewmodel.CreationExtras)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.lifecycle.ViewModelProvider: void <init>(androidx.lifecycle.ViewModelStore,androidx.lifecycle.ViewModelProvider$Factory,androidx.lifecycle.viewmodel.CreationExtras)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<androidx.fragment.app.FragmentManagerViewModel$1: void <init>()>() in <androidx.fragment.app.FragmentManagerViewModel: void <clinit>()> ==> <androidx.fragment.app.FragmentManagerViewModel$1: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.fragment.app.FragmentManagerViewModel$1: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r29.<androidx.fragment.app.FragmentManager$11: void <init>(androidx.fragment.app.FragmentManager)>(r0) in <androidx.fragment.app.FragmentManager: void attachController(androidx.fragment.app.FragmentHostCallback,androidx.fragment.app.FragmentContainer,androidx.fragment.app.Fragment)> ==> <androidx.fragment.app.FragmentManager$11: void <init>(androidx.fragment.app.FragmentManager)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.fragment.app.FragmentManager$11: void <init>(androidx.fragment.app.FragmentManager)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r28.<androidx.activity.result.contract.ActivityResultContracts$RequestMultiplePermissions: void <init>()>() in <androidx.fragment.app.FragmentManager: void attachController(androidx.fragment.app.FragmentHostCallback,androidx.fragment.app.FragmentContainer,androidx.fragment.app.Fragment)> ==> <androidx.activity.result.contract.ActivityResultContracts$RequestMultiplePermissions: void <init>()>
SPECIAL edge: specialinvoke r0.<androidx.activity.result.contract.ActivityResultContract: void <init>()>() in <androidx.activity.result.contract.ActivityResultContracts$RequestMultiplePermissions: void <init>()> ==> <androidx.activity.result.contract.ActivityResultContract: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.activity.result.contract.ActivityResultContract: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r27.<androidx.fragment.app.FragmentManager$10: void <init>(androidx.fragment.app.FragmentManager)>(r0) in <androidx.fragment.app.FragmentManager: void attachController(androidx.fragment.app.FragmentHostCallback,androidx.fragment.app.FragmentContainer,androidx.fragment.app.Fragment)> ==> <androidx.fragment.app.FragmentManager$10: void <init>(androidx.fragment.app.FragmentManager)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.fragment.app.FragmentManager$10: void <init>(androidx.fragment.app.FragmentManager)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r26.<androidx.fragment.app.FragmentManager$FragmentIntentSenderContract: void <init>()>() in <androidx.fragment.app.FragmentManager: void attachController(androidx.fragment.app.FragmentHostCallback,androidx.fragment.app.FragmentContainer,androidx.fragment.app.Fragment)> ==> <androidx.fragment.app.FragmentManager$FragmentIntentSenderContract: void <init>()>
SPECIAL edge: specialinvoke r0.<androidx.activity.result.contract.ActivityResultContract: void <init>()>() in <androidx.fragment.app.FragmentManager$FragmentIntentSenderContract: void <init>()> ==> <androidx.activity.result.contract.ActivityResultContract: void <init>()>
SPECIAL edge: specialinvoke $r25.<androidx.fragment.app.FragmentManager$9: void <init>(androidx.fragment.app.FragmentManager)>(r0) in <androidx.fragment.app.FragmentManager: void attachController(androidx.fragment.app.FragmentHostCallback,androidx.fragment.app.FragmentContainer,androidx.fragment.app.Fragment)> ==> <androidx.fragment.app.FragmentManager$9: void <init>(androidx.fragment.app.FragmentManager)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.fragment.app.FragmentManager$9: void <init>(androidx.fragment.app.FragmentManager)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r24.<androidx.activity.result.contract.ActivityResultContracts$StartActivityForResult: void <init>()>() in <androidx.fragment.app.FragmentManager: void attachController(androidx.fragment.app.FragmentHostCallback,androidx.fragment.app.FragmentContainer,androidx.fragment.app.Fragment)> ==> <androidx.activity.result.contract.ActivityResultContracts$StartActivityForResult: void <init>()>
SPECIAL edge: specialinvoke r0.<androidx.activity.result.contract.ActivityResultContract: void <init>()>() in <androidx.activity.result.contract.ActivityResultContracts$StartActivityForResult: void <init>()> ==> <androidx.activity.result.contract.ActivityResultContract: void <init>()>
SPECIAL edge: specialinvoke $r22.<androidx.fragment.app.FragmentManagerViewModel: void <init>(boolean)>(0) in <androidx.fragment.app.FragmentManager: void attachController(androidx.fragment.app.FragmentHostCallback,androidx.fragment.app.FragmentContainer,androidx.fragment.app.Fragment)> ==> <androidx.fragment.app.FragmentManagerViewModel: void <init>(boolean)>
SPECIAL edge: specialinvoke r0.<androidx.lifecycle.ViewModel: void <init>()>() in <androidx.fragment.app.FragmentManagerViewModel: void <init>(boolean)> ==> <androidx.lifecycle.ViewModel: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.lifecycle.ViewModel: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r21.<androidx.fragment.app.FragmentManager$8: void <init>(androidx.fragment.app.FragmentManager,androidx.fragment.app.Fragment)>(r0, $r3) in <androidx.fragment.app.FragmentManager: void attachController(androidx.fragment.app.FragmentHostCallback,androidx.fragment.app.FragmentContainer,androidx.fragment.app.Fragment)> ==> <androidx.fragment.app.FragmentManager$8: void <init>(androidx.fragment.app.FragmentManager,androidx.fragment.app.Fragment)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.fragment.app.FragmentManager$8: void <init>(androidx.fragment.app.FragmentManager,androidx.fragment.app.Fragment)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $r16 = interfaceinvoke $r15.<androidx.activity.result.ActivityResultRegistryOwner: androidx.activity.result.ActivityResultRegistry getActivityResultRegistry()>() in <androidx.fragment.app.FragmentManager: void attachController(androidx.fragment.app.FragmentHostCallback,androidx.fragment.app.FragmentContainer,androidx.fragment.app.Fragment)> ==> <androidx.fragment.app.FragmentActivity$HostCallbacks: androidx.activity.result.ActivityResultRegistry getActivityResultRegistry()>
VIRTUAL edge: $r1 = virtualinvoke $r2.<androidx.fragment.app.FragmentActivity: androidx.activity.result.ActivityResultRegistry getActivityResultRegistry()>() in <androidx.fragment.app.FragmentActivity$HostCallbacks: androidx.activity.result.ActivityResultRegistry getActivityResultRegistry()> ==> <androidx.activity.ComponentActivity: androidx.activity.result.ActivityResultRegistry getActivityResultRegistry()>
VIRTUAL edge: $r20 = virtualinvoke $r16.<androidx.activity.result.ActivityResultRegistry: androidx.activity.result.ActivityResultLauncher register(java.lang.String,androidx.activity.result.contract.ActivityResultContract,androidx.activity.result.ActivityResultCallback)>($r19, $r24, $r25) in <androidx.fragment.app.FragmentManager: void attachController(androidx.fragment.app.FragmentHostCallback,androidx.fragment.app.FragmentContainer,androidx.fragment.app.Fragment)> ==> <androidx.activity.result.ActivityResultRegistry: androidx.activity.result.ActivityResultLauncher register(java.lang.String,androidx.activity.result.contract.ActivityResultContract,androidx.activity.result.ActivityResultCallback)>
VIRTUAL edge: $r20 = virtualinvoke $r16.<androidx.activity.result.ActivityResultRegistry: androidx.activity.result.ActivityResultLauncher register(java.lang.String,androidx.activity.result.contract.ActivityResultContract,androidx.activity.result.ActivityResultCallback)>($r19, $r26, $r27) in <androidx.fragment.app.FragmentManager: void attachController(androidx.fragment.app.FragmentHostCallback,androidx.fragment.app.FragmentContainer,androidx.fragment.app.Fragment)> ==> <androidx.activity.result.ActivityResultRegistry: androidx.activity.result.ActivityResultLauncher register(java.lang.String,androidx.activity.result.contract.ActivityResultContract,androidx.activity.result.ActivityResultCallback)>
SPECIAL edge: specialinvoke $r11.<androidx.activity.result.ActivityResultRegistry$3: void <init>(androidx.activity.result.ActivityResultRegistry,java.lang.String,androidx.activity.result.contract.ActivityResultContract)>(r0, $r1, $r2) in <androidx.activity.result.ActivityResultRegistry: androidx.activity.result.ActivityResultLauncher register(java.lang.String,androidx.activity.result.contract.ActivityResultContract,androidx.activity.result.ActivityResultCallback)> ==> <androidx.activity.result.ActivityResultRegistry$3: void <init>(androidx.activity.result.ActivityResultRegistry,java.lang.String,androidx.activity.result.contract.ActivityResultContract)>
SPECIAL edge: specialinvoke r0.<androidx.activity.result.ActivityResultLauncher: void <init>()>() in <androidx.activity.result.ActivityResultRegistry$3: void <init>(androidx.activity.result.ActivityResultRegistry,java.lang.String,androidx.activity.result.contract.ActivityResultContract)> ==> <androidx.activity.result.ActivityResultLauncher: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.activity.result.ActivityResultLauncher: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r5.<androidx.activity.result.ActivityResultRegistry$CallbackAndContract: void <init>(androidx.activity.result.ActivityResultCallback,androidx.activity.result.contract.ActivityResultContract)>($r3, $r2) in <androidx.activity.result.ActivityResultRegistry: androidx.activity.result.ActivityResultLauncher register(java.lang.String,androidx.activity.result.contract.ActivityResultContract,androidx.activity.result.ActivityResultCallback)> ==> <androidx.activity.result.ActivityResultRegistry$CallbackAndContract: void <init>(androidx.activity.result.ActivityResultCallback,androidx.activity.result.contract.ActivityResultContract)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.activity.result.ActivityResultRegistry$CallbackAndContract: void <init>(androidx.activity.result.ActivityResultCallback,androidx.activity.result.contract.ActivityResultContract)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: interfaceinvoke $r3.<androidx.activity.result.ActivityResultCallback: void onActivityResult(java.lang.Object)>($r6) in <androidx.activity.result.ActivityResultRegistry: androidx.activity.result.ActivityResultLauncher register(java.lang.String,androidx.activity.result.contract.ActivityResultContract,androidx.activity.result.ActivityResultCallback)> ==> <androidx.fragment.app.FragmentManager$9: void onActivityResult(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<androidx.activity.result.ActivityResultCallback: void onActivityResult(java.lang.Object)>($r6) in <androidx.activity.result.ActivityResultRegistry: androidx.activity.result.ActivityResultLauncher register(java.lang.String,androidx.activity.result.contract.ActivityResultContract,androidx.activity.result.ActivityResultCallback)> ==> <androidx.fragment.app.FragmentManager$10: void onActivityResult(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<androidx.activity.result.ActivityResultCallback: void onActivityResult(java.lang.Object)>($r6) in <androidx.activity.result.ActivityResultRegistry: androidx.activity.result.ActivityResultLauncher register(java.lang.String,androidx.activity.result.contract.ActivityResultContract,androidx.activity.result.ActivityResultCallback)> ==> <androidx.fragment.app.FragmentManager$11: void onActivityResult(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<androidx.fragment.app.FragmentManager$11: void onActivityResult(java.util.Map)>($r2) in <androidx.fragment.app.FragmentManager$11: void onActivityResult(java.lang.Object)> ==> <androidx.fragment.app.FragmentManager$11: void onActivityResult(java.util.Map)>
CLINIT edge: $r3 = newarray (java.lang.String)[0] in <androidx.fragment.app.FragmentManager$11: void onActivityResult(java.util.Map)> ==> <java.lang.String: void <clinit>()>
STATIC edge: $r15 = staticinvoke <androidx.fragment.app.FragmentManager: androidx.fragment.app.FragmentStore access$200(androidx.fragment.app.FragmentManager)>($r10) in <androidx.fragment.app.FragmentManager$11: void onActivityResult(java.util.Map)> ==> <androidx.fragment.app.FragmentManager: androidx.fragment.app.FragmentStore access$200(androidx.fragment.app.FragmentManager)>
CLINIT edge: $r15 = staticinvoke <androidx.fragment.app.FragmentManager: androidx.fragment.app.FragmentStore access$200(androidx.fragment.app.FragmentManager)>($r10) in <androidx.fragment.app.FragmentManager$11: void onActivityResult(java.util.Map)> ==> <androidx.fragment.app.FragmentManager: void <clinit>()>
VIRTUAL edge: virtualinvoke r0.<androidx.fragment.app.FragmentManager$10: void onActivityResult(androidx.activity.result.ActivityResult)>($r2) in <androidx.fragment.app.FragmentManager$10: void onActivityResult(java.lang.Object)> ==> <androidx.fragment.app.FragmentManager$10: void onActivityResult(androidx.activity.result.ActivityResult)>
CLINIT edge: $r8 = staticinvoke <androidx.fragment.app.FragmentManager: androidx.fragment.app.FragmentStore access$200(androidx.fragment.app.FragmentManager)>($r3) in <androidx.fragment.app.FragmentManager$10: void onActivityResult(androidx.activity.result.ActivityResult)> ==> <androidx.fragment.app.FragmentManager: void <clinit>()>
STATIC edge: $r8 = staticinvoke <androidx.fragment.app.FragmentManager: androidx.fragment.app.FragmentStore access$200(androidx.fragment.app.FragmentManager)>($r3) in <androidx.fragment.app.FragmentManager$10: void onActivityResult(androidx.activity.result.ActivityResult)> ==> <androidx.fragment.app.FragmentManager: androidx.fragment.app.FragmentStore access$200(androidx.fragment.app.FragmentManager)>
VIRTUAL edge: virtualinvoke r0.<androidx.fragment.app.FragmentManager$9: void onActivityResult(androidx.activity.result.ActivityResult)>($r2) in <androidx.fragment.app.FragmentManager$9: void onActivityResult(java.lang.Object)> ==> <androidx.fragment.app.FragmentManager$9: void onActivityResult(androidx.activity.result.ActivityResult)>
CLINIT edge: $r8 = staticinvoke <androidx.fragment.app.FragmentManager: androidx.fragment.app.FragmentStore access$200(androidx.fragment.app.FragmentManager)>($r3) in <androidx.fragment.app.FragmentManager$9: void onActivityResult(androidx.activity.result.ActivityResult)> ==> <androidx.fragment.app.FragmentManager: void <clinit>()>
STATIC edge: $r8 = staticinvoke <androidx.fragment.app.FragmentManager: androidx.fragment.app.FragmentStore access$200(androidx.fragment.app.FragmentManager)>($r3) in <androidx.fragment.app.FragmentManager$9: void onActivityResult(androidx.activity.result.ActivityResult)> ==> <androidx.fragment.app.FragmentManager: androidx.fragment.app.FragmentStore access$200(androidx.fragment.app.FragmentManager)>
VIRTUAL edge: $r6 = virtualinvoke $r2.<androidx.activity.result.contract.ActivityResultContract: java.lang.Object parseResult(int,android.content.Intent)>($i0, $r10) in <androidx.activity.result.ActivityResultRegistry: androidx.activity.result.ActivityResultLauncher register(java.lang.String,androidx.activity.result.contract.ActivityResultContract,androidx.activity.result.ActivityResultCallback)> ==> <androidx.activity.result.contract.ActivityResultContracts$StartActivityForResult: androidx.activity.result.ActivityResult parseResult(int,android.content.Intent)>
VIRTUAL edge: $r6 = virtualinvoke $r2.<androidx.activity.result.contract.ActivityResultContract: java.lang.Object parseResult(int,android.content.Intent)>($i0, $r10) in <androidx.activity.result.ActivityResultRegistry: androidx.activity.result.ActivityResultLauncher register(java.lang.String,androidx.activity.result.contract.ActivityResultContract,androidx.activity.result.ActivityResultCallback)> ==> <androidx.fragment.app.FragmentManager$FragmentIntentSenderContract: androidx.activity.result.ActivityResult parseResult(int,android.content.Intent)>
VIRTUAL edge: $r6 = virtualinvoke $r2.<androidx.activity.result.contract.ActivityResultContract: java.lang.Object parseResult(int,android.content.Intent)>($i0, $r10) in <androidx.activity.result.ActivityResultRegistry: androidx.activity.result.ActivityResultLauncher register(java.lang.String,androidx.activity.result.contract.ActivityResultContract,androidx.activity.result.ActivityResultCallback)> ==> <androidx.activity.result.contract.ActivityResultContracts$RequestMultiplePermissions: java.util.Map parseResult(int,android.content.Intent)>
CLINIT edge: $r2 = new androidx.activity.result.ActivityResult in <androidx.activity.result.contract.ActivityResultContracts$StartActivityForResult: androidx.activity.result.ActivityResult parseResult(int,android.content.Intent)> ==> <androidx.activity.result.ActivityResult: void <clinit>()>
CLINIT edge: $r2 = new androidx.activity.result.ActivityResult in <androidx.fragment.app.FragmentManager$FragmentIntentSenderContract: androidx.activity.result.ActivityResult parseResult(int,android.content.Intent)> ==> <androidx.activity.result.ActivityResult: void <clinit>()>
CLINIT edge: $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0) in <androidx.activity.result.contract.ActivityResultContracts$RequestMultiplePermissions: java.util.Map parseResult(int,android.content.Intent)> ==> <java.lang.Boolean: void <clinit>()>
STATIC edge: $r2 = staticinvoke <kotlin.collections.MapsKt: java.util.Map emptyMap()>() in <androidx.activity.result.contract.ActivityResultContracts$RequestMultiplePermissions: java.util.Map parseResult(int,android.content.Intent)> ==> <kotlin.collections.MapsKt__MapsKt: java.util.Map emptyMap()>
STATIC edge: $r2 = staticinvoke <kotlin.collections.MapsKt: java.util.Map toMap(java.lang.Iterable)>($r9) in <androidx.activity.result.contract.ActivityResultContracts$RequestMultiplePermissions: java.util.Map parseResult(int,android.content.Intent)> ==> <kotlin.collections.MapsKt__MapsKt: java.util.Map toMap(java.lang.Iterable)>
STATIC edge: $r7 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List zip(java.lang.Iterable,java.lang.Iterable)>($r9, $r10) in <androidx.activity.result.contract.ActivityResultContracts$RequestMultiplePermissions: java.util.Map parseResult(int,android.content.Intent)> ==> <kotlin.collections.CollectionsKt___CollectionsKt: java.util.List zip(java.lang.Iterable,java.lang.Iterable)>
STATIC edge: $r8 = staticinvoke <kotlin.collections.ArraysKt: java.util.List filterNotNull(java.lang.Object[])>($r3) in <androidx.activity.result.contract.ActivityResultContracts$RequestMultiplePermissions: java.util.Map parseResult(int,android.content.Intent)> ==> <kotlin.collections.ArraysKt___ArraysKt: java.util.List filterNotNull(java.lang.Object[])>
STATIC edge: $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0) in <androidx.activity.result.contract.ActivityResultContracts$RequestMultiplePermissions: java.util.Map parseResult(int,android.content.Intent)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
STATIC edge: $r2 = staticinvoke <kotlin.collections.MapsKt: java.util.Map emptyMap()>() in <androidx.activity.result.contract.ActivityResultContracts$RequestMultiplePermissions: java.util.Map parseResult(int,android.content.Intent)> ==> <kotlin.collections.MapsKt__MapsKt: java.util.Map emptyMap()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>") in <kotlin.collections.MapsKt__MapsKt: java.util.Map toMap(java.lang.Iterable)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: $r3 = staticinvoke <kotlin.collections.MapsKt: java.util.Map optimizeReadOnlyMap(java.util.Map)>($r3) in <kotlin.collections.MapsKt__MapsKt: java.util.Map toMap(java.lang.Iterable)> ==> <kotlin.collections.MapsKt__MapsKt: java.util.Map optimizeReadOnlyMap(java.util.Map)>
STATIC edge: $r3 = staticinvoke <kotlin.collections.MapsKt: java.util.Map toMap(java.lang.Iterable,java.util.Map)>($r0, $r3) in <kotlin.collections.MapsKt__MapsKt: java.util.Map toMap(java.lang.Iterable)> ==> <kotlin.collections.MapsKt__MapsKt: java.util.Map toMap(java.lang.Iterable,java.util.Map)>
STATIC edge: $r3 = staticinvoke <kotlin.collections.MapsKt: java.util.Map emptyMap()>() in <kotlin.collections.MapsKt__MapsKt: java.util.Map toMap(java.lang.Iterable)> ==> <kotlin.collections.MapsKt__MapsKt: java.util.Map emptyMap()>
STATIC edge: $r3 = staticinvoke <kotlin.collections.MapsKt: java.util.Map mapOf(kotlin.Pair)>($r7) in <kotlin.collections.MapsKt__MapsKt: java.util.Map toMap(java.lang.Iterable)> ==> <kotlin.collections.MapsKt__MapsJVMKt: java.util.Map mapOf(kotlin.Pair)>
STATIC edge: $i0 = staticinvoke <kotlin.collections.MapsKt: int mapCapacity(int)>($i0) in <kotlin.collections.MapsKt__MapsKt: java.util.Map toMap(java.lang.Iterable)> ==> <kotlin.collections.MapsKt__MapsJVMKt: int mapCapacity(int)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>") in <kotlin.collections.CollectionsKt___CollectionsKt: java.util.List zip(java.lang.Iterable,java.lang.Iterable)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: $r7 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r5, $r6) in <kotlin.collections.CollectionsKt___CollectionsKt: java.util.List zip(java.lang.Iterable,java.lang.Iterable)> ==> <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>
STATIC edge: $i1 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r1, 10) in <kotlin.collections.CollectionsKt___CollectionsKt: java.util.List zip(java.lang.Iterable,java.lang.Iterable)> ==> <kotlin.collections.CollectionsKt__IterablesKt: int collectionSizeOrDefault(java.lang.Iterable,int)>
STATIC edge: $i0 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r0, 10) in <kotlin.collections.CollectionsKt___CollectionsKt: java.util.List zip(java.lang.Iterable,java.lang.Iterable)> ==> <kotlin.collections.CollectionsKt__IterablesKt: int collectionSizeOrDefault(java.lang.Iterable,int)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>") in <kotlin.collections.MapsKt__MapsKt: java.util.Map optimizeReadOnlyMap(java.util.Map)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: $r0 = staticinvoke <kotlin.collections.MapsKt: java.util.Map emptyMap()>() in <kotlin.collections.MapsKt__MapsKt: java.util.Map optimizeReadOnlyMap(java.util.Map)> ==> <kotlin.collections.MapsKt__MapsKt: java.util.Map emptyMap()>
STATIC edge: $r0 = staticinvoke <kotlin.collections.MapsKt: java.util.Map toSingletonMap(java.util.Map)>($r0) in <kotlin.collections.MapsKt__MapsKt: java.util.Map optimizeReadOnlyMap(java.util.Map)> ==> <kotlin.collections.MapsKt__MapsJVMKt: java.util.Map toSingletonMap(java.util.Map)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>") in <kotlin.collections.MapsKt__MapsKt: java.util.Map toMap(java.lang.Iterable,java.util.Map)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.collections.MapsKt: void putAll(java.util.Map,java.lang.Iterable)>($r1, $r0) in <kotlin.collections.MapsKt__MapsKt: java.util.Map toMap(java.lang.Iterable,java.util.Map)> ==> <kotlin.collections.MapsKt__MapsKt: void putAll(java.util.Map,java.lang.Iterable)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r3, "singletonMap(pair.first, pair.second)") in <kotlin.collections.MapsKt__MapsJVMKt: java.util.Map mapOf(kotlin.Pair)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "pair") in <kotlin.collections.MapsKt__MapsJVMKt: java.util.Map mapOf(kotlin.Pair)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>") in <kotlin.collections.MapsKt__MapsKt: void putAll(java.util.Map,java.lang.Iterable)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke $r2.<kotlin.Pair: void <init>(java.lang.Object,java.lang.Object)>($r0, $r1) in <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)> ==> <kotlin.Pair: void <init>(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <kotlin.Pair: void <init>(java.lang.Object,java.lang.Object)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $i0 = interfaceinvoke $r0.<java.util.Map: int size()>() in <kotlin.collections.MapsKt__MapsKt: java.util.Map optimizeReadOnlyMap(java.util.Map)> ==> <kotlin.collections.EmptyMap: int size()>
INTERFACE edge: interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r5) in <kotlin.collections.MapsKt__MapsKt: void putAll(java.util.Map,java.lang.Iterable)> ==> <kotlin.collections.EmptyMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<androidx.activity.result.ActivityResult$1: void <init>()>() in <androidx.activity.result.ActivityResult: void <clinit>()> ==> <androidx.activity.result.ActivityResult$1: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.activity.result.ActivityResult$1: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r2.<androidx.activity.result.ActivityResult: void <init>(int,android.content.Intent)>($i0, $r1) in <androidx.fragment.app.FragmentManager$FragmentIntentSenderContract: androidx.activity.result.ActivityResult parseResult(int,android.content.Intent)> ==> <androidx.activity.result.ActivityResult: void <init>(int,android.content.Intent)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.activity.result.ActivityResult: void <init>(int,android.content.Intent)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r2.<androidx.activity.result.ActivityResult: void <init>(int,android.content.Intent)>($i0, $r1) in <androidx.activity.result.contract.ActivityResultContracts$StartActivityForResult: androidx.activity.result.ActivityResult parseResult(int,android.content.Intent)> ==> <androidx.activity.result.ActivityResult: void <init>(int,android.content.Intent)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>() in <androidx.fragment.app.FragmentManager$11: void onActivityResult(java.util.Map)> ==> <kotlin.collections.EmptyMap: java.util.Set keySet()>
INTERFACE edge: $r6 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>() in <androidx.fragment.app.FragmentManager$11: void onActivityResult(java.util.Map)> ==> <kotlin.collections.EmptyMap: java.util.Collection values()>
VIRTUAL edge: $r1 = virtualinvoke r0.<kotlin.collections.EmptyMap: java.util.Collection getValues()>() in <kotlin.collections.EmptyMap: java.util.Collection values()> ==> <kotlin.collections.EmptyMap: java.util.Collection getValues()>
CLINIT edge: $r1 = <kotlin.collections.EmptyList: kotlin.collections.EmptyList INSTANCE> in <kotlin.collections.EmptyMap: java.util.Collection getValues()> ==> <kotlin.collections.EmptyList: void <clinit>()>
VIRTUAL edge: $r1 = virtualinvoke r0.<kotlin.collections.EmptyMap: java.util.Set getKeys()>() in <kotlin.collections.EmptyMap: java.util.Set keySet()> ==> <kotlin.collections.EmptyMap: java.util.Set getKeys()>
CLINIT edge: $r1 = <kotlin.collections.EmptySet: kotlin.collections.EmptySet INSTANCE> in <kotlin.collections.EmptyMap: java.util.Set getKeys()> ==> <kotlin.collections.EmptySet: void <clinit>()>
INTERFACE edge: $r4 = interfaceinvoke $r2.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r3) in <androidx.fragment.app.FragmentManager$11: void onActivityResult(java.util.Map)> ==> <kotlin.collections.EmptySet: java.lang.Object[] toArray(java.lang.Object[])>
CLINIT edge: $r1 = staticinvoke <kotlin.jvm.internal.CollectionToArray: java.lang.Object[] toArray(java.util.Collection,java.lang.Object[])>($r2, $r1) in <kotlin.collections.EmptySet: java.lang.Object[] toArray(java.lang.Object[])> ==> <kotlin.jvm.internal.CollectionToArray: void <clinit>()>
STATIC edge: $r1 = staticinvoke <kotlin.jvm.internal.CollectionToArray: java.lang.Object[] toArray(java.util.Collection,java.lang.Object[])>($r2, $r1) in <kotlin.collections.EmptySet: java.lang.Object[] toArray(java.lang.Object[])> ==> <kotlin.jvm.internal.CollectionToArray: java.lang.Object[] toArray(java.util.Collection,java.lang.Object[])>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "array") in <kotlin.collections.EmptySet: java.lang.Object[] toArray(java.lang.Object[])> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "collection") in <kotlin.jvm.internal.CollectionToArray: java.lang.Object[] toArray(java.util.Collection,java.lang.Object[])> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r1, "copyOf(result, size)") in <kotlin.jvm.internal.CollectionToArray: java.lang.Object[] toArray(java.util.Collection,java.lang.Object[])> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r5, "null cannot be cast to non-null type kotlin.Array<kotlin.Any?>") in <kotlin.jvm.internal.CollectionToArray: java.lang.Object[] toArray(java.util.Collection,java.lang.Object[])> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke $r6.<java.lang.OutOfMemoryError: void <init>()>() in <kotlin.jvm.internal.CollectionToArray: java.lang.Object[] toArray(java.util.Collection,java.lang.Object[])> ==> <java.lang.OutOfMemoryError: void <init>()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>() in <kotlin.jvm.internal.CollectionToArray: java.lang.Object[] toArray(java.util.Collection,java.lang.Object[])> ==> <java.lang.Object: java.lang.Class getClass()>
INTERFACE edge: $i0 = interfaceinvoke $r0.<java.util.Collection: int size()>() in <kotlin.jvm.internal.CollectionToArray: java.lang.Object[] toArray(java.util.Collection,java.lang.Object[])> ==> <kotlin.collections.EmptySet: int size()>
INTERFACE edge: $r2 = interfaceinvoke $r0.<java.util.Collection: java.util.Iterator iterator()>() in <kotlin.jvm.internal.CollectionToArray: java.lang.Object[] toArray(java.util.Collection,java.lang.Object[])> ==> <kotlin.collections.EmptySet: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>() in <kotlin.jvm.internal.CollectionToArray: java.lang.Object[] toArray(java.util.Collection,java.lang.Object[])> ==> <kotlin.collections.EmptyIterator: boolean hasNext()>
INTERFACE edge: $r5 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>() in <kotlin.jvm.internal.CollectionToArray: java.lang.Object[] toArray(java.util.Collection,java.lang.Object[])> ==> <kotlin.collections.EmptyIterator: java.lang.Void next()>
VIRTUAL edge: $i1 = virtualinvoke $r2.<androidx.activity.result.ActivityResult: int getResultCode()>() in <androidx.fragment.app.FragmentManager$10: void onActivityResult(androidx.activity.result.ActivityResult)> ==> <androidx.activity.result.ActivityResult: int getResultCode()>
VIRTUAL edge: $r10 = virtualinvoke $r2.<androidx.activity.result.ActivityResult: android.content.Intent getData()>() in <androidx.fragment.app.FragmentManager$10: void onActivityResult(androidx.activity.result.ActivityResult)> ==> <androidx.activity.result.ActivityResult: android.content.Intent getData()>
VIRTUAL edge: $i1 = virtualinvoke $r2.<androidx.activity.result.ActivityResult: int getResultCode()>() in <androidx.fragment.app.FragmentManager$9: void onActivityResult(androidx.activity.result.ActivityResult)> ==> <androidx.activity.result.ActivityResult: int getResultCode()>
VIRTUAL edge: $r10 = virtualinvoke $r2.<androidx.activity.result.ActivityResult: android.content.Intent getData()>() in <androidx.fragment.app.FragmentManager$9: void onActivityResult(androidx.activity.result.ActivityResult)> ==> <androidx.activity.result.ActivityResult: android.content.Intent getData()>
SPECIAL edge: specialinvoke r0.<androidx.activity.result.ActivityResultRegistry: void registerKey(java.lang.String)>($r1) in <androidx.activity.result.ActivityResultRegistry: androidx.activity.result.ActivityResultLauncher register(java.lang.String,androidx.activity.result.contract.ActivityResultContract,androidx.activity.result.ActivityResultCallback)> ==> <androidx.activity.result.ActivityResultRegistry: void registerKey(java.lang.String)>
SPECIAL edge: $i0 = specialinvoke r0.<androidx.activity.result.ActivityResultRegistry: int generateRandomNumber()>() in <androidx.activity.result.ActivityResultRegistry: void registerKey(java.lang.String)> ==> <androidx.activity.result.ActivityResultRegistry: int generateRandomNumber()>
SPECIAL edge: specialinvoke r0.<androidx.activity.result.ActivityResultRegistry: void bindRcKey(int,java.lang.String)>($i0, $r1) in <androidx.activity.result.ActivityResultRegistry: void registerKey(java.lang.String)> ==> <androidx.activity.result.ActivityResultRegistry: void bindRcKey(int,java.lang.String)>
CLINIT edge: $r1 = <kotlin.random.Random: kotlin.random.Random$Default Default> in <androidx.activity.result.ActivityResultRegistry: int generateRandomNumber()> ==> <kotlin.random.Random: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <androidx.activity.result.ActivityResultRegistry: int generateRandomNumber()> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
CLINIT edge: $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <androidx.activity.result.ActivityResultRegistry: int generateRandomNumber()> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: $r2 = <kotlin.internal.PlatformImplementationsKt: kotlin.internal.PlatformImplementations IMPLEMENTATIONS> in <kotlin.random.Random: void <clinit>()> ==> <kotlin.internal.PlatformImplementationsKt: void <clinit>()>
STATIC edge: $r12 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("kotlin.internal.jdk8.JDK8PlatformImplementations") in <kotlin.internal.PlatformImplementationsKt: void <clinit>()> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
STATIC edge: $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r17, $r18) in <kotlin.internal.PlatformImplementationsKt: void <clinit>()> ==> <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r13, "forName(\"kotlin.internal\u2026entations\").newInstance()") in <kotlin.internal.PlatformImplementationsKt: void <clinit>()> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
STATIC edge: $r12 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("kotlin.internal.JRE7PlatformImplementations") in <kotlin.internal.PlatformImplementationsKt: void <clinit>()> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
STATIC edge: $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r17, $r18) in <kotlin.internal.PlatformImplementationsKt: void <clinit>()> ==> <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r13, "forName(\"kotlin.internal\u2026entations\").newInstance()") in <kotlin.internal.PlatformImplementationsKt: void <clinit>()> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
STATIC edge: $r12 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("kotlin.internal.JRE8PlatformImplementations") in <kotlin.internal.PlatformImplementationsKt: void <clinit>()> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.ClassNotFoundException: void <init>(java.lang.String,java.lang.Throwable)>($r20, $r21) in <kotlin.internal.PlatformImplementationsKt: void <clinit>()> ==> <java.lang.ClassNotFoundException: void <init>(java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r0.<java.lang.ClassNotFoundException: void <init>(java.lang.String,java.lang.Throwable)>($r20, $r21) in <kotlin.internal.PlatformImplementationsKt: void <clinit>()> ==> <java.lang.ClassNotFoundException: void <init>(java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassNotFoundException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.ReflectiveOperationException: void <init>()>() in <java.lang.ClassNotFoundException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.ReflectiveOperationException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ReflectiveOperationException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.ReflectiveOperationException: void <init>()> ==> <java.lang.Exception: void <init>()>
VIRTUAL edge: $r17 = virtualinvoke $r12.<java.lang.Class: java.lang.ClassLoader getClassLoader()>() in <kotlin.internal.PlatformImplementationsKt: void <clinit>()> ==> <java.lang.Class: java.lang.ClassLoader getClassLoader()>
VIRTUAL edge: $r17 = virtualinvoke $r12.<java.lang.Class: java.lang.ClassLoader getClassLoader()>() in <kotlin.internal.PlatformImplementationsKt: void <clinit>()> ==> <java.lang.Class: java.lang.ClassLoader getClassLoader()>
SPECIAL edge: specialinvoke $r16.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type kotlin.internal.PlatformImplementations") in <kotlin.internal.PlatformImplementationsKt: void <clinit>()> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r16.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type kotlin.internal.PlatformImplementations") in <kotlin.internal.PlatformImplementationsKt: void <clinit>()> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r16.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type kotlin.internal.PlatformImplementations") in <kotlin.internal.PlatformImplementationsKt: void <clinit>()> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r14.<kotlin.internal.PlatformImplementations: void <init>()>() in <kotlin.internal.PlatformImplementationsKt: void <clinit>()> ==> <kotlin.internal.PlatformImplementations: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <kotlin.internal.PlatformImplementations: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r0 = virtualinvoke $r2.<kotlin.internal.PlatformImplementations: kotlin.random.Random defaultPlatformRandom()>() in <kotlin.random.Random: void <clinit>()> ==> <kotlin.internal.PlatformImplementations: kotlin.random.Random defaultPlatformRandom()>
CLINIT edge: $r1 = new kotlin.random.FallbackThreadLocalRandom in <kotlin.internal.PlatformImplementations: kotlin.random.Random defaultPlatformRandom()> ==> <kotlin.random.Random: void <clinit>()>
SPECIAL edge: specialinvoke $r1.<kotlin.random.FallbackThreadLocalRandom: void <init>()>() in <kotlin.internal.PlatformImplementations: kotlin.random.Random defaultPlatformRandom()> ==> <kotlin.random.FallbackThreadLocalRandom: void <init>()>
SPECIAL edge: specialinvoke $r1.<kotlin.random.FallbackThreadLocalRandom$implStorage$1: void <init>()>() in <kotlin.random.FallbackThreadLocalRandom: void <init>()> ==> <kotlin.random.FallbackThreadLocalRandom$implStorage$1: void <init>()>
SPECIAL edge: specialinvoke r0.<kotlin.random.AbstractPlatformRandom: void <init>()>() in <kotlin.random.FallbackThreadLocalRandom: void <init>()> ==> <kotlin.random.AbstractPlatformRandom: void <init>()>
SPECIAL edge: specialinvoke r0.<kotlin.random.Random: void <init>()>() in <kotlin.random.AbstractPlatformRandom: void <init>()> ==> <kotlin.random.Random: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <kotlin.random.Random: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<kotlin.random.Random$Default: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null) in <kotlin.random.Random: void <clinit>()> ==> <kotlin.random.Random$Default: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>
SPECIAL edge: specialinvoke r0.<kotlin.random.Random$Default: void <init>()>() in <kotlin.random.Random$Default: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)> ==> <kotlin.random.Random$Default: void <init>()>
SPECIAL edge: specialinvoke r0.<kotlin.random.Random: void <init>()>() in <kotlin.random.Random$Default: void <init>()> ==> <kotlin.random.Random: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<kotlin.random.Random$Default: int nextInt(int)>(2147418112) in <androidx.activity.result.ActivityResultRegistry: int generateRandomNumber()> ==> <kotlin.random.Random$Default: int nextInt(int)>
CLINIT edge: $r1 = staticinvoke <kotlin.random.Random: kotlin.random.Random access$getDefaultRandom$cp()>() in <kotlin.random.Random$Default: int nextInt(int)> ==> <kotlin.random.Random: void <clinit>()>
STATIC edge: $r1 = staticinvoke <kotlin.random.Random: kotlin.random.Random access$getDefaultRandom$cp()>() in <kotlin.random.Random$Default: int nextInt(int)> ==> <kotlin.random.Random: kotlin.random.Random access$getDefaultRandom$cp()>
CLINIT edge: r0 = <kotlin.random.Random: kotlin.random.Random defaultRandom> in <kotlin.random.Random: kotlin.random.Random access$getDefaultRandom$cp()> ==> <kotlin.random.Random: void <clinit>()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<kotlin.random.Random: int nextInt(int)>($i0) in <kotlin.random.Random$Default: int nextInt(int)> ==> <kotlin.random.AbstractPlatformRandom: int nextInt(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<kotlin.random.AbstractPlatformRandom: java.util.Random getImpl()>() in <kotlin.random.AbstractPlatformRandom: int nextInt(int)> ==> <kotlin.random.FallbackThreadLocalRandom: java.util.Random getImpl()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r1, "implStorage.get()") in <kotlin.random.FallbackThreadLocalRandom: java.util.Random getImpl()> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
INTERFACE edge: $r13 = interfaceinvoke $r12.<androidx.lifecycle.ViewModelStoreOwner: androidx.lifecycle.ViewModelStore getViewModelStore()>() in <androidx.fragment.app.FragmentManager: void attachController(androidx.fragment.app.FragmentHostCallback,androidx.fragment.app.FragmentContainer,androidx.fragment.app.Fragment)> ==> <androidx.fragment.app.FragmentActivity$HostCallbacks: androidx.lifecycle.ViewModelStore getViewModelStore()>
VIRTUAL edge: $r1 = virtualinvoke $r2.<androidx.fragment.app.FragmentActivity: androidx.lifecycle.ViewModelStore getViewModelStore()>() in <androidx.fragment.app.FragmentActivity$HostCallbacks: androidx.lifecycle.ViewModelStore getViewModelStore()> ==> <androidx.activity.ComponentActivity: androidx.lifecycle.ViewModelStore getViewModelStore()>
VIRTUAL edge: $r1 = virtualinvoke r0.<androidx.activity.ComponentActivity: android.app.Application getApplication()>() in <androidx.activity.ComponentActivity: androidx.lifecycle.ViewModelStore getViewModelStore()> ==> <android.app.Activity: android.app.Application getApplication()>
VIRTUAL edge: virtualinvoke r0.<androidx.activity.ComponentActivity: void ensureViewModelStore()>() in <androidx.activity.ComponentActivity: androidx.lifecycle.ViewModelStore getViewModelStore()> ==> <androidx.activity.ComponentActivity: void ensureViewModelStore()>
SPECIAL edge: specialinvoke $r2.<androidx.lifecycle.ViewModelStore: void <init>()>() in <androidx.activity.ComponentActivity: void ensureViewModelStore()> ==> <androidx.lifecycle.ViewModelStore: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.lifecycle.ViewModelStore: void <init>()> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $r8 = interfaceinvoke $r31.<androidx.activity.OnBackPressedDispatcherOwner: androidx.activity.OnBackPressedDispatcher getOnBackPressedDispatcher()>() in <androidx.fragment.app.FragmentManager: void attachController(androidx.fragment.app.FragmentHostCallback,androidx.fragment.app.FragmentContainer,androidx.fragment.app.Fragment)> ==> <androidx.fragment.app.FragmentActivity$HostCallbacks: androidx.activity.OnBackPressedDispatcher getOnBackPressedDispatcher()>
VIRTUAL edge: $r1 = virtualinvoke $r2.<androidx.fragment.app.FragmentActivity: androidx.activity.OnBackPressedDispatcher getOnBackPressedDispatcher()>() in <androidx.fragment.app.FragmentActivity$HostCallbacks: androidx.activity.OnBackPressedDispatcher getOnBackPressedDispatcher()> ==> <androidx.activity.ComponentActivity: androidx.activity.OnBackPressedDispatcher getOnBackPressedDispatcher()>
SPECIAL edge: specialinvoke $r4.<androidx.activity.ComponentActivity$6: void <init>(androidx.activity.ComponentActivity)>(r0) in <androidx.activity.ComponentActivity: androidx.activity.OnBackPressedDispatcher getOnBackPressedDispatcher()> ==> <androidx.activity.ComponentActivity$6: void <init>(androidx.activity.ComponentActivity)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.activity.ComponentActivity$6: void <init>(androidx.activity.ComponentActivity)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r3.<androidx.activity.ComponentActivity$5: void <init>(androidx.activity.ComponentActivity)>(r0) in <androidx.activity.ComponentActivity: androidx.activity.OnBackPressedDispatcher getOnBackPressedDispatcher()> ==> <androidx.activity.ComponentActivity$5: void <init>(androidx.activity.ComponentActivity)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.activity.ComponentActivity$5: void <init>(androidx.activity.ComponentActivity)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r2.<androidx.activity.OnBackPressedDispatcher: void <init>(java.lang.Runnable)>($r3) in <androidx.activity.ComponentActivity: androidx.activity.OnBackPressedDispatcher getOnBackPressedDispatcher()> ==> <androidx.activity.OnBackPressedDispatcher: void <init>(java.lang.Runnable)>
SPECIAL edge: specialinvoke r0.<androidx.activity.OnBackPressedDispatcher: void <init>(java.lang.Runnable,androidx.core.util.Consumer)>($r1, null) in <androidx.activity.OnBackPressedDispatcher: void <init>(java.lang.Runnable)> ==> <androidx.activity.OnBackPressedDispatcher: void <init>(java.lang.Runnable,androidx.core.util.Consumer)>
CLINIT edge: $r3 = new kotlin.collections.ArrayDeque in <androidx.activity.OnBackPressedDispatcher: void <init>(java.lang.Runnable,androidx.core.util.Consumer)> ==> <kotlin.collections.ArrayDeque: void <clinit>()>
CLINIT edge: $r14 = <androidx.activity.OnBackPressedDispatcher$Api33Impl: androidx.activity.OnBackPressedDispatcher$Api33Impl INSTANCE> in <androidx.activity.OnBackPressedDispatcher: void <init>(java.lang.Runnable,androidx.core.util.Consumer)> ==> <androidx.activity.OnBackPressedDispatcher$Api33Impl: void <clinit>()>
CLINIT edge: $r4 = <androidx.activity.OnBackPressedDispatcher$Api34Impl: androidx.activity.OnBackPressedDispatcher$Api34Impl INSTANCE> in <androidx.activity.OnBackPressedDispatcher: void <init>(java.lang.Runnable,androidx.core.util.Consumer)> ==> <androidx.activity.OnBackPressedDispatcher$Api34Impl: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<androidx.activity.OnBackPressedDispatcher$Api34Impl: void <init>()>() in <androidx.activity.OnBackPressedDispatcher$Api34Impl: void <clinit>()> ==> <androidx.activity.OnBackPressedDispatcher$Api34Impl: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.activity.OnBackPressedDispatcher$Api34Impl: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<androidx.activity.OnBackPressedDispatcher$Api33Impl: void <init>()>() in <androidx.activity.OnBackPressedDispatcher$Api33Impl: void <clinit>()> ==> <androidx.activity.OnBackPressedDispatcher$Api33Impl: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.activity.OnBackPressedDispatcher$Api33Impl: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<kotlin.collections.ArrayDeque$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null) in <kotlin.collections.ArrayDeque: void <clinit>()> ==> <kotlin.collections.ArrayDeque$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>
SPECIAL edge: specialinvoke r0.<kotlin.collections.ArrayDeque$Companion: void <init>()>() in <kotlin.collections.ArrayDeque$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)> ==> <kotlin.collections.ArrayDeque$Companion: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <kotlin.collections.ArrayDeque$Companion: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r15.<androidx.activity.OnBackPressedDispatcher$5: void <init>(androidx.activity.OnBackPressedDispatcher)>(r0) in <androidx.activity.OnBackPressedDispatcher: void <init>(java.lang.Runnable,androidx.core.util.Consumer)> ==> <androidx.activity.OnBackPressedDispatcher$5: void <init>(androidx.activity.OnBackPressedDispatcher)>
SPECIAL edge: specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0) in <androidx.activity.OnBackPressedDispatcher$5: void <init>(androidx.activity.OnBackPressedDispatcher)> ==> <kotlin.jvm.internal.Lambda: void <init>(int)>
VIRTUAL edge: $r13 = virtualinvoke $r14.<androidx.activity.OnBackPressedDispatcher$Api33Impl: android.window.OnBackInvokedCallback createOnBackInvokedCallback(kotlin.jvm.functions.Function0)>($r10) in <androidx.activity.OnBackPressedDispatcher: void <init>(java.lang.Runnable,androidx.core.util.Consumer)> ==> <androidx.activity.OnBackPressedDispatcher$Api33Impl: android.window.OnBackInvokedCallback createOnBackInvokedCallback(kotlin.jvm.functions.Function0)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "onBackInvoked") in <androidx.activity.OnBackPressedDispatcher$Api33Impl: android.window.OnBackInvokedCallback createOnBackInvokedCallback(kotlin.jvm.functions.Function0)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke $r2.<androidx.activity.OnBackPressedDispatcher$Api33Impl$$ExternalSyntheticLambda0: void <init>(kotlin.jvm.functions.Function0)>($r1) in <androidx.activity.OnBackPressedDispatcher$Api33Impl: android.window.OnBackInvokedCallback createOnBackInvokedCallback(kotlin.jvm.functions.Function0)> ==> <androidx.activity.OnBackPressedDispatcher$Api33Impl$$ExternalSyntheticLambda0: void <init>(kotlin.jvm.functions.Function0)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.activity.OnBackPressedDispatcher$Api33Impl$$ExternalSyntheticLambda0: void <init>(kotlin.jvm.functions.Function0)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r11.<androidx.activity.OnBackPressedDispatcher$4: void <init>(androidx.activity.OnBackPressedDispatcher)>(r0) in <androidx.activity.OnBackPressedDispatcher: void <init>(java.lang.Runnable,androidx.core.util.Consumer)> ==> <androidx.activity.OnBackPressedDispatcher$4: void <init>(androidx.activity.OnBackPressedDispatcher)>
SPECIAL edge: specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0) in <androidx.activity.OnBackPressedDispatcher$4: void <init>(androidx.activity.OnBackPressedDispatcher)> ==> <kotlin.jvm.internal.Lambda: void <init>(int)>
SPECIAL edge: specialinvoke $r9.<androidx.activity.OnBackPressedDispatcher$3: void <init>(androidx.activity.OnBackPressedDispatcher)>(r0) in <androidx.activity.OnBackPressedDispatcher: void <init>(java.lang.Runnable,androidx.core.util.Consumer)> ==> <androidx.activity.OnBackPressedDispatcher$3: void <init>(androidx.activity.OnBackPressedDispatcher)>
SPECIAL edge: specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(0) in <androidx.activity.OnBackPressedDispatcher$3: void <init>(androidx.activity.OnBackPressedDispatcher)> ==> <kotlin.jvm.internal.Lambda: void <init>(int)>
SPECIAL edge: specialinvoke $r7.<androidx.activity.OnBackPressedDispatcher$2: void <init>(androidx.activity.OnBackPressedDispatcher)>(r0) in <androidx.activity.OnBackPressedDispatcher: void <init>(java.lang.Runnable,androidx.core.util.Consumer)> ==> <androidx.activity.OnBackPressedDispatcher$2: void <init>(androidx.activity.OnBackPressedDispatcher)>
SPECIAL edge: specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1) in <androidx.activity.OnBackPressedDispatcher$2: void <init>(androidx.activity.OnBackPressedDispatcher)> ==> <kotlin.jvm.internal.Lambda: void <init>(int)>
SPECIAL edge: specialinvoke $r5.<androidx.activity.OnBackPressedDispatcher$1: void <init>(androidx.activity.OnBackPressedDispatcher)>(r0) in <androidx.activity.OnBackPressedDispatcher: void <init>(java.lang.Runnable,androidx.core.util.Consumer)> ==> <androidx.activity.OnBackPressedDispatcher$1: void <init>(androidx.activity.OnBackPressedDispatcher)>
SPECIAL edge: specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1) in <androidx.activity.OnBackPressedDispatcher$1: void <init>(androidx.activity.OnBackPressedDispatcher)> ==> <kotlin.jvm.internal.Lambda: void <init>(int)>
VIRTUAL edge: $r13 = virtualinvoke $r4.<androidx.activity.OnBackPressedDispatcher$Api34Impl: android.window.OnBackInvokedCallback createOnBackAnimationCallback(kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function0,kotlin.jvm.functions.Function0)>($r6, $r8, $r10, $r12) in <androidx.activity.OnBackPressedDispatcher: void <init>(java.lang.Runnable,androidx.core.util.Consumer)> ==> <androidx.activity.OnBackPressedDispatcher$Api34Impl: android.window.OnBackInvokedCallback createOnBackAnimationCallback(kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function0,kotlin.jvm.functions.Function0)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "onBackStarted") in <androidx.activity.OnBackPressedDispatcher$Api34Impl: android.window.OnBackInvokedCallback createOnBackAnimationCallback(kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function0,kotlin.jvm.functions.Function0)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke $r5.<androidx.activity.OnBackPressedDispatcher$Api34Impl$createOnBackAnimationCallback$1: void <init>(kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function0,kotlin.jvm.functions.Function0)>($r1, $r2, $r3, $r4) in <androidx.activity.OnBackPressedDispatcher$Api34Impl: android.window.OnBackInvokedCallback createOnBackAnimationCallback(kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function0,kotlin.jvm.functions.Function0)> ==> <androidx.activity.OnBackPressedDispatcher$Api34Impl$createOnBackAnimationCallback$1: void <init>(kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function0,kotlin.jvm.functions.Function0)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.activity.OnBackPressedDispatcher$Api34Impl$createOnBackAnimationCallback$1: void <init>(kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function1,kotlin.jvm.functions.Function0,kotlin.jvm.functions.Function0)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r3.<kotlin.collections.ArrayDeque: void <init>()>() in <androidx.activity.OnBackPressedDispatcher: void <init>(java.lang.Runnable,androidx.core.util.Consumer)> ==> <kotlin.collections.ArrayDeque: void <init>()>
CLINIT edge: $r1 = <kotlin.collections.ArrayDeque: java.lang.Object[] emptyElementData> in <kotlin.collections.ArrayDeque: void <init>()> ==> <kotlin.collections.ArrayDeque: void <clinit>()>
SPECIAL edge: specialinvoke r0.<kotlin.collections.AbstractMutableList: void <init>()>() in <kotlin.collections.ArrayDeque: void <init>()> ==> <kotlin.collections.AbstractMutableList: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.activity.OnBackPressedDispatcher: void <init>(java.lang.Runnable,androidx.core.util.Consumer)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke r0.<androidx.activity.ComponentActivity: androidx.lifecycle.Lifecycle getLifecycle()>() in <androidx.activity.ComponentActivity: androidx.activity.OnBackPressedDispatcher getOnBackPressedDispatcher()> ==> <androidx.activity.ComponentActivity: androidx.lifecycle.Lifecycle getLifecycle()>
VIRTUAL edge: virtualinvoke $r8.<androidx.activity.OnBackPressedDispatcher: void addCallback(androidx.lifecycle.LifecycleOwner,androidx.activity.OnBackPressedCallback)>($r7, $r9) in <androidx.fragment.app.FragmentManager: void attachController(androidx.fragment.app.FragmentHostCallback,androidx.fragment.app.FragmentContainer,androidx.fragment.app.Fragment)> ==> <androidx.activity.OnBackPressedDispatcher: void addCallback(androidx.lifecycle.LifecycleOwner,androidx.activity.OnBackPressedCallback)>
CLINIT edge: $r2 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State DESTROYED> in <androidx.activity.OnBackPressedDispatcher: void addCallback(androidx.lifecycle.LifecycleOwner,androidx.activity.OnBackPressedCallback)> ==> <androidx.lifecycle.Lifecycle$State: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "onBackPressedCallback") in <androidx.activity.OnBackPressedDispatcher: void addCallback(androidx.lifecycle.LifecycleOwner,androidx.activity.OnBackPressedCallback)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
CLINIT edge: $r8 = new androidx.activity.OnBackPressedDispatcher$addCallback$1 in <androidx.activity.OnBackPressedDispatcher: void addCallback(androidx.lifecycle.LifecycleOwner,androidx.activity.OnBackPressedCallback)> ==> <kotlin.jvm.internal.CallableReference: void <clinit>()>
CLINIT edge: $r0 = staticinvoke <kotlin.jvm.internal.CallableReference$NoReceiver: kotlin.jvm.internal.CallableReference$NoReceiver access$000()>() in <kotlin.jvm.internal.CallableReference: void <clinit>()> ==> <kotlin.jvm.internal.CallableReference$NoReceiver: void <clinit>()>
STATIC edge: $r0 = staticinvoke <kotlin.jvm.internal.CallableReference$NoReceiver: kotlin.jvm.internal.CallableReference$NoReceiver access$000()>() in <kotlin.jvm.internal.CallableReference: void <clinit>()> ==> <kotlin.jvm.internal.CallableReference$NoReceiver: kotlin.jvm.internal.CallableReference$NoReceiver access$000()>
CLINIT edge: r0 = <kotlin.jvm.internal.CallableReference$NoReceiver: kotlin.jvm.internal.CallableReference$NoReceiver INSTANCE> in <kotlin.jvm.internal.CallableReference$NoReceiver: kotlin.jvm.internal.CallableReference$NoReceiver access$000()> ==> <kotlin.jvm.internal.CallableReference$NoReceiver: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<kotlin.jvm.internal.CallableReference$NoReceiver: void <init>()>() in <kotlin.jvm.internal.CallableReference$NoReceiver: void <clinit>()> ==> <kotlin.jvm.internal.CallableReference$NoReceiver: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <kotlin.jvm.internal.CallableReference$NoReceiver: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r8.<androidx.activity.OnBackPressedDispatcher$addCallback$1: void <init>(java.lang.Object)>(r0) in <androidx.activity.OnBackPressedDispatcher: void addCallback(androidx.lifecycle.LifecycleOwner,androidx.activity.OnBackPressedCallback)> ==> <androidx.activity.OnBackPressedDispatcher$addCallback$1: void <init>(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<kotlin.jvm.internal.FunctionReferenceImpl: void <init>(int,java.lang.Object,java.lang.Class,java.lang.String,java.lang.String,int)>(0, $r1, class "Landroidx/activity/OnBackPressedDispatcher;", "updateEnabledCallbacks", "updateEnabledCallbacks()V", 0) in <androidx.activity.OnBackPressedDispatcher$addCallback$1: void <init>(java.lang.Object)> ==> <kotlin.jvm.internal.FunctionReferenceImpl: void <init>(int,java.lang.Object,java.lang.Class,java.lang.String,java.lang.String,int)>
SPECIAL edge: specialinvoke r0.<kotlin.jvm.internal.FunctionReference: void <init>(int,java.lang.Object,java.lang.Class,java.lang.String,java.lang.String,int)>($i0, $r1, $r2, $r3, $r4, $i1) in <kotlin.jvm.internal.FunctionReferenceImpl: void <init>(int,java.lang.Object,java.lang.Class,java.lang.String,java.lang.String,int)> ==> <kotlin.jvm.internal.FunctionReference: void <init>(int,java.lang.Object,java.lang.Class,java.lang.String,java.lang.String,int)>
SPECIAL edge: specialinvoke r0.<kotlin.jvm.internal.CallableReference: void <init>(java.lang.Object,java.lang.Class,java.lang.String,java.lang.String,boolean)>($r1, $r2, $r3, $r4, $z0) in <kotlin.jvm.internal.FunctionReference: void <init>(int,java.lang.Object,java.lang.Class,java.lang.String,java.lang.String,int)> ==> <kotlin.jvm.internal.CallableReference: void <init>(java.lang.Object,java.lang.Class,java.lang.String,java.lang.String,boolean)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <kotlin.jvm.internal.CallableReference: void <init>(java.lang.Object,java.lang.Class,java.lang.String,java.lang.String,boolean)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r6.<androidx.activity.OnBackPressedDispatcher$LifecycleOnBackPressedCancellable: void <init>(androidx.activity.OnBackPressedDispatcher,androidx.lifecycle.Lifecycle,androidx.activity.OnBackPressedCallback)>(r0, $r4, $r1) in <androidx.activity.OnBackPressedDispatcher: void addCallback(androidx.lifecycle.LifecycleOwner,androidx.activity.OnBackPressedCallback)> ==> <androidx.activity.OnBackPressedDispatcher$LifecycleOnBackPressedCancellable: void <init>(androidx.activity.OnBackPressedDispatcher,androidx.lifecycle.Lifecycle,androidx.activity.OnBackPressedCallback)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "lifecycle") in <androidx.activity.OnBackPressedDispatcher$LifecycleOnBackPressedCancellable: void <init>(androidx.activity.OnBackPressedDispatcher,androidx.lifecycle.Lifecycle,androidx.activity.OnBackPressedCallback)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.activity.OnBackPressedDispatcher$LifecycleOnBackPressedCancellable: void <init>(androidx.activity.OnBackPressedDispatcher,androidx.lifecycle.Lifecycle,androidx.activity.OnBackPressedCallback)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $r4 = interfaceinvoke $r3.<androidx.lifecycle.LifecycleOwner: androidx.lifecycle.Lifecycle getLifecycle()>() in <androidx.activity.OnBackPressedDispatcher: void addCallback(androidx.lifecycle.LifecycleOwner,androidx.activity.OnBackPressedCallback)> ==> <androidx.fragment.app.FragmentActivity$HostCallbacks: androidx.lifecycle.Lifecycle getLifecycle()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<androidx.lifecycle.Lifecycle: androidx.lifecycle.Lifecycle$State getCurrentState()>() in <androidx.activity.OnBackPressedDispatcher: void addCallback(androidx.lifecycle.LifecycleOwner,androidx.activity.OnBackPressedCallback)> ==> <androidx.lifecycle.LifecycleRegistry: androidx.lifecycle.Lifecycle$State getCurrentState()>
VIRTUAL edge: virtualinvoke $r1.<androidx.lifecycle.Lifecycle: void addObserver(androidx.lifecycle.LifecycleObserver)>($r4) in <androidx.activity.OnBackPressedDispatcher$LifecycleOnBackPressedCancellable: void <init>(androidx.activity.OnBackPressedDispatcher,androidx.lifecycle.Lifecycle,androidx.activity.OnBackPressedCallback)> ==> <androidx.lifecycle.LifecycleRegistry: void addObserver(androidx.lifecycle.LifecycleObserver)>
SPECIAL edge: specialinvoke r0.<androidx.activity.OnBackPressedDispatcher: void updateEnabledCallbacks()>() in <androidx.activity.OnBackPressedDispatcher: void addCallback(androidx.lifecycle.LifecycleOwner,androidx.activity.OnBackPressedCallback)> ==> <androidx.activity.OnBackPressedDispatcher: void updateEnabledCallbacks()>
CLINIT edge: $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2) in <androidx.activity.OnBackPressedDispatcher: void updateEnabledCallbacks()> ==> <java.lang.Boolean: void <clinit>()>
STATIC edge: $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2) in <androidx.activity.OnBackPressedDispatcher: void updateEnabledCallbacks()> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
SPECIAL edge: specialinvoke r0.<androidx.activity.OnBackPressedDispatcher: void updateBackInvokedCallbackState(boolean)>($z2) in <androidx.activity.OnBackPressedDispatcher: void updateEnabledCallbacks()> ==> <androidx.activity.OnBackPressedDispatcher: void updateBackInvokedCallbackState(boolean)>
CLINIT edge: $r3 = <androidx.activity.OnBackPressedDispatcher$Api33Impl: androidx.activity.OnBackPressedDispatcher$Api33Impl INSTANCE> in <androidx.activity.OnBackPressedDispatcher: void updateBackInvokedCallbackState(boolean)> ==> <androidx.activity.OnBackPressedDispatcher$Api33Impl: void <clinit>()>
CLINIT edge: $r3 = <androidx.activity.OnBackPressedDispatcher$Api33Impl: androidx.activity.OnBackPressedDispatcher$Api33Impl INSTANCE> in <androidx.activity.OnBackPressedDispatcher: void updateBackInvokedCallbackState(boolean)> ==> <androidx.activity.OnBackPressedDispatcher$Api33Impl: void <clinit>()>
VIRTUAL edge: virtualinvoke $r3.<androidx.activity.OnBackPressedDispatcher$Api33Impl: void registerOnBackInvokedCallback(java.lang.Object,int,java.lang.Object)>($r1, 0, $r2) in <androidx.activity.OnBackPressedDispatcher: void updateBackInvokedCallbackState(boolean)> ==> <androidx.activity.OnBackPressedDispatcher$Api33Impl: void registerOnBackInvokedCallback(java.lang.Object,int,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r3.<androidx.activity.OnBackPressedDispatcher$Api33Impl: void unregisterOnBackInvokedCallback(java.lang.Object,java.lang.Object)>($r1, $r2) in <androidx.activity.OnBackPressedDispatcher: void updateBackInvokedCallbackState(boolean)> ==> <androidx.activity.OnBackPressedDispatcher$Api33Impl: void unregisterOnBackInvokedCallback(java.lang.Object,java.lang.Object)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "dispatcher") in <androidx.activity.OnBackPressedDispatcher$Api33Impl: void registerOnBackInvokedCallback(java.lang.Object,int,java.lang.Object)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "dispatcher") in <androidx.activity.OnBackPressedDispatcher$Api33Impl: void unregisterOnBackInvokedCallback(java.lang.Object,java.lang.Object)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "callback") in <androidx.activity.OnBackPressedDispatcher$Api33Impl: void unregisterOnBackInvokedCallback(java.lang.Object,java.lang.Object)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
INTERFACE edge: $z1 = interfaceinvoke $r3.<java.util.Collection: boolean isEmpty()>() in <androidx.activity.OnBackPressedDispatcher: void updateEnabledCallbacks()> ==> <kotlin.collections.ArrayDeque: boolean isEmpty()>
VIRTUAL edge: $i0 = virtualinvoke r0.<kotlin.collections.ArrayDeque: int size()>() in <kotlin.collections.ArrayDeque: boolean isEmpty()> ==> <kotlin.collections.AbstractMutableList: int size()>
VIRTUAL edge: $i0 = virtualinvoke r0.<kotlin.collections.AbstractMutableList: int getSize()>() in <kotlin.collections.AbstractMutableList: int size()> ==> <kotlin.collections.ArrayDeque: int getSize()>
VIRTUAL edge: virtualinvoke r0.<androidx.fragment.app.FragmentManager: void addFragmentOnAttachListener(androidx.fragment.app.FragmentOnAttachListener)>($r21) in <androidx.fragment.app.FragmentManager: void attachController(androidx.fragment.app.FragmentHostCallback,androidx.fragment.app.FragmentContainer,androidx.fragment.app.Fragment)> ==> <androidx.fragment.app.FragmentManager: void addFragmentOnAttachListener(androidx.fragment.app.FragmentOnAttachListener)>
SPECIAL edge: specialinvoke r0.<androidx.fragment.app.FragmentManager: void updateOnBackPressedCallbackEnabled()>() in <androidx.fragment.app.FragmentManager: void attachController(androidx.fragment.app.FragmentHostCallback,androidx.fragment.app.FragmentContainer,androidx.fragment.app.Fragment)> ==> <androidx.fragment.app.FragmentManager: void updateOnBackPressedCallbackEnabled()>
VIRTUAL edge: $z0 = virtualinvoke r0.<androidx.fragment.app.FragmentManager: boolean isStateSaved()>() in <androidx.fragment.app.FragmentManager: void attachController(androidx.fragment.app.FragmentHostCallback,androidx.fragment.app.FragmentContainer,androidx.fragment.app.Fragment)> ==> <androidx.fragment.app.FragmentManager: boolean isStateSaved()>
VIRTUAL edge: $i0 = virtualinvoke r0.<androidx.fragment.app.FragmentManager: int getBackStackEntryCount()>() in <androidx.fragment.app.FragmentManager: void updateOnBackPressedCallbackEnabled()> ==> <androidx.fragment.app.FragmentManager: int getBackStackEntryCount()>
VIRTUAL edge: $z0 = virtualinvoke r0.<androidx.fragment.app.FragmentManager: boolean isPrimaryNavigation(androidx.fragment.app.Fragment)>($r4) in <androidx.fragment.app.FragmentManager: void updateOnBackPressedCallbackEnabled()> ==> <androidx.fragment.app.FragmentManager: boolean isPrimaryNavigation(androidx.fragment.app.Fragment)>
VIRTUAL edge: $z0 = virtualinvoke r0.<androidx.fragment.app.FragmentManager: boolean isPrimaryNavigation(androidx.fragment.app.Fragment)>($r2) in <androidx.fragment.app.FragmentManager: boolean isPrimaryNavigation(androidx.fragment.app.Fragment)> ==> <androidx.fragment.app.FragmentManager: boolean isPrimaryNavigation(androidx.fragment.app.Fragment)>
VIRTUAL edge: virtualinvoke $r3.<androidx.activity.OnBackPressedCallback: void setEnabled(boolean)>(1) in <androidx.fragment.app.FragmentManager: void updateOnBackPressedCallbackEnabled()> ==> <androidx.activity.OnBackPressedCallback: void setEnabled(boolean)>
VIRTUAL edge: virtualinvoke $r3.<androidx.activity.OnBackPressedCallback: void setEnabled(boolean)>($z1) in <androidx.fragment.app.FragmentManager: void updateOnBackPressedCallbackEnabled()> ==> <androidx.activity.OnBackPressedCallback: void setEnabled(boolean)>
VIRTUAL edge: virtualinvoke $r14.<androidx.fragment.app.FragmentStore: void setNonConfig(androidx.fragment.app.FragmentManagerViewModel)>($r11) in <androidx.fragment.app.FragmentManager: void attachController(androidx.fragment.app.FragmentHostCallback,androidx.fragment.app.FragmentContainer,androidx.fragment.app.Fragment)> ==> <androidx.fragment.app.FragmentStore: void setNonConfig(androidx.fragment.app.FragmentManagerViewModel)>
VIRTUAL edge: virtualinvoke $r11.<androidx.fragment.app.FragmentManagerViewModel: void setIsStateSaved(boolean)>($z0) in <androidx.fragment.app.FragmentManager: void attachController(androidx.fragment.app.FragmentHostCallback,androidx.fragment.app.FragmentContainer,androidx.fragment.app.Fragment)> ==> <androidx.fragment.app.FragmentManagerViewModel: void setIsStateSaved(boolean)>
VIRTUAL edge: virtualinvoke $r1.<androidx.activity.OnBackPressedCallback: void addCancellable(androidx.activity.Cancellable)>($r7) in <androidx.activity.OnBackPressedDispatcher: void addCallback(androidx.lifecycle.LifecycleOwner,androidx.activity.OnBackPressedCallback)> ==> <androidx.activity.OnBackPressedCallback: void addCancellable(androidx.activity.Cancellable)>
VIRTUAL edge: virtualinvoke $r1.<androidx.activity.OnBackPressedCallback: void setEnabledChangedCallback$activity_release(kotlin.jvm.functions.Function0)>($r9) in <androidx.activity.OnBackPressedDispatcher: void addCallback(androidx.lifecycle.LifecycleOwner,androidx.activity.OnBackPressedCallback)> ==> <androidx.activity.OnBackPressedCallback: void setEnabledChangedCallback$activity_release(kotlin.jvm.functions.Function0)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "cancellable") in <androidx.activity.OnBackPressedCallback: void addCancellable(androidx.activity.Cancellable)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<androidx.appcompat.app.AppCompatActivity: androidx.appcompat.app.AppCompatDelegate getDelegate()>() in <androidx.appcompat.app.AppCompatActivity$2: void onContextAvailable(android.content.Context)> ==> <androidx.appcompat.app.AppCompatActivity: androidx.appcompat.app.AppCompatDelegate getDelegate()>
VIRTUAL edge: $r4 = virtualinvoke $r2.<androidx.appcompat.app.AppCompatActivity: androidx.savedstate.SavedStateRegistry getSavedStateRegistry()>() in <androidx.appcompat.app.AppCompatActivity$2: void onContextAvailable(android.content.Context)> ==> <androidx.activity.ComponentActivity: androidx.savedstate.SavedStateRegistry getSavedStateRegistry()>
VIRTUAL edge: virtualinvoke $r3.<androidx.appcompat.app.AppCompatDelegate: void installViewFactory()>() in <androidx.appcompat.app.AppCompatActivity$2: void onContextAvailable(android.content.Context)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: void installViewFactory()>
VIRTUAL edge: virtualinvoke $r3.<androidx.appcompat.app.AppCompatDelegate: void onCreate(android.os.Bundle)>($r5) in <androidx.appcompat.app.AppCompatActivity$2: void onContextAvailable(android.content.Context)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: void onCreate(android.os.Bundle)>
STATIC edge: staticinvoke <androidx.core.view.LayoutInflaterCompat: void setFactory2(android.view.LayoutInflater,android.view.LayoutInflater$Factory2)>($r2, r0) in <androidx.appcompat.app.AppCompatDelegateImpl: void installViewFactory()> ==> <androidx.core.view.LayoutInflaterCompat: void setFactory2(android.view.LayoutInflater,android.view.LayoutInflater$Factory2)>
CLINIT edge: staticinvoke <androidx.appcompat.app.AppCompatDelegateImpl: void addActiveDelegate(androidx.appcompat.app.AppCompatDelegate)>(r0) in <androidx.appcompat.app.AppCompatDelegateImpl: void onCreate(android.os.Bundle)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: void <clinit>()>
STATIC edge: staticinvoke <androidx.appcompat.app.AppCompatDelegateImpl: void addActiveDelegate(androidx.appcompat.app.AppCompatDelegate)>(r0) in <androidx.appcompat.app.AppCompatDelegateImpl: void onCreate(android.os.Bundle)> ==> <androidx.appcompat.app.AppCompatDelegate: void addActiveDelegate(androidx.appcompat.app.AppCompatDelegate)>
STATIC edge: $r5 = staticinvoke <androidx.core.app.NavUtils: java.lang.String getParentActivityName(android.app.Activity)>($r4) in <androidx.appcompat.app.AppCompatDelegateImpl: void onCreate(android.os.Bundle)> ==> <androidx.core.app.NavUtils: java.lang.String getParentActivityName(android.app.Activity)>
CLINIT edge: staticinvoke <androidx.appcompat.app.AppCompatDelegateImpl: void addActiveDelegate(androidx.appcompat.app.AppCompatDelegate)>(r0) in <androidx.appcompat.app.AppCompatDelegateImpl: void onCreate(android.os.Bundle)> ==> <androidx.appcompat.app.AppCompatDelegate: void <clinit>()>
CLINIT edge: $r0 = <androidx.appcompat.app.AppCompatDelegate: java.lang.Object sActivityDelegatesLock> in <androidx.appcompat.app.AppCompatDelegate: void addActiveDelegate(androidx.appcompat.app.AppCompatDelegate)> ==> <androidx.appcompat.app.AppCompatDelegate: void <clinit>()>
STATIC edge: staticinvoke <androidx.appcompat.app.AppCompatDelegate: void removeDelegateFromActives(androidx.appcompat.app.AppCompatDelegate)>($r3) in <androidx.appcompat.app.AppCompatDelegate: void addActiveDelegate(androidx.appcompat.app.AppCompatDelegate)> ==> <androidx.appcompat.app.AppCompatDelegate: void removeDelegateFromActives(androidx.appcompat.app.AppCompatDelegate)>
STATIC edge: $r2 = staticinvoke <androidx.core.app.NavUtils: java.lang.String getParentActivityName(android.content.Context,android.content.ComponentName)>($r0, $r1) in <androidx.core.app.NavUtils: java.lang.String getParentActivityName(android.app.Activity)> ==> <androidx.core.app.NavUtils: java.lang.String getParentActivityName(android.content.Context,android.content.ComponentName)>
CLINIT edge: $r0 = <androidx.appcompat.app.AppCompatDelegate: java.lang.Object sActivityDelegatesLock> in <androidx.appcompat.app.AppCompatDelegate: void removeDelegateFromActives(androidx.appcompat.app.AppCompatDelegate)> ==> <androidx.appcompat.app.AppCompatDelegate: void <clinit>()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<androidx.collection.ArraySet: java.util.Iterator iterator()>() in <androidx.appcompat.app.AppCompatDelegate: void removeDelegateFromActives(androidx.appcompat.app.AppCompatDelegate)> ==> <androidx.collection.ArraySet: java.util.Iterator iterator()>
SPECIAL edge: $r1 = specialinvoke r0.<androidx.collection.ArraySet: androidx.collection.MapCollections getCollection()>() in <androidx.collection.ArraySet: java.util.Iterator iterator()> ==> <androidx.collection.ArraySet: androidx.collection.MapCollections getCollection()>
SPECIAL edge: specialinvoke $r2.<androidx.collection.ArraySet$1: void <init>(androidx.collection.ArraySet)>(r0) in <androidx.collection.ArraySet: androidx.collection.MapCollections getCollection()> ==> <androidx.collection.ArraySet$1: void <init>(androidx.collection.ArraySet)>
SPECIAL edge: specialinvoke r0.<androidx.collection.MapCollections: void <init>()>() in <androidx.collection.ArraySet$1: void <init>(androidx.collection.ArraySet)> ==> <androidx.collection.MapCollections: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.collection.MapCollections: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<androidx.collection.MapCollections: java.util.Set getKeySet()>() in <androidx.collection.ArraySet: java.util.Iterator iterator()> ==> <androidx.collection.MapCollections: java.util.Set getKeySet()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>() in <androidx.collection.ArraySet: java.util.Iterator iterator()> ==> <androidx.collection.MapCollections$KeySet: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke $r1.<androidx.collection.MapCollections$ArrayIterator: void <init>(androidx.collection.MapCollections,int)>($r2, 0) in <androidx.collection.MapCollections$KeySet: java.util.Iterator iterator()> ==> <androidx.collection.MapCollections$ArrayIterator: void <init>(androidx.collection.MapCollections,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.collection.MapCollections$ArrayIterator: void <init>(androidx.collection.MapCollections,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<androidx.collection.MapCollections$KeySet: void <init>(androidx.collection.MapCollections)>(r0) in <androidx.collection.MapCollections: java.util.Set getKeySet()> ==> <androidx.collection.MapCollections$KeySet: void <init>(androidx.collection.MapCollections)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.collection.MapCollections$KeySet: void <init>(androidx.collection.MapCollections)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>() in <androidx.appcompat.app.AppCompatDelegate: void removeDelegateFromActives(androidx.appcompat.app.AppCompatDelegate)> ==> <androidx.collection.MapCollections$ArrayIterator: boolean hasNext()>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>() in <androidx.appcompat.app.AppCompatDelegate: void removeDelegateFromActives(androidx.appcompat.app.AppCompatDelegate)> ==> <androidx.collection.MapCollections$ArrayIterator: java.lang.Object next()>
INTERFACE edge: interfaceinvoke $r3.<java.util.Iterator: void remove()>() in <androidx.appcompat.app.AppCompatDelegate: void removeDelegateFromActives(androidx.appcompat.app.AppCompatDelegate)> ==> <androidx.collection.MapCollections$ArrayIterator: void remove()>
VIRTUAL edge: $z0 = virtualinvoke r0.<androidx.collection.MapCollections$ArrayIterator: boolean hasNext()>() in <androidx.collection.MapCollections$ArrayIterator: java.lang.Object next()> ==> <androidx.collection.MapCollections$ArrayIterator: boolean hasNext()>
VIRTUAL edge: virtualinvoke $r1.<androidx.collection.ArraySet: boolean add(java.lang.Object)>($r2) in <androidx.appcompat.app.AppCompatDelegate: void addActiveDelegate(androidx.appcompat.app.AppCompatDelegate)> ==> <androidx.collection.ArraySet: boolean add(java.lang.Object)>
STATIC edge: staticinvoke <androidx.collection.ArraySet: void freeArrays(int[],java.lang.Object[],int)>($r2, $r3, $i2) in <androidx.collection.ArraySet: boolean add(java.lang.Object)> ==> <androidx.collection.ArraySet: void freeArrays(int[],java.lang.Object[],int)>
CLINIT edge: staticinvoke <androidx.collection.ArraySet: void freeArrays(int[],java.lang.Object[],int)>($r2, $r3, $i2) in <androidx.collection.ArraySet: boolean add(java.lang.Object)> ==> <androidx.collection.ArraySet: void <clinit>()>
CLINIT edge: $i1 = <androidx.collection.ArraySet: int sTwiceBaseCacheSize> in <androidx.collection.ArraySet: void freeArrays(int[],java.lang.Object[],int)> ==> <androidx.collection.ArraySet: void <clinit>()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <androidx.collection.ArraySet: boolean add(java.lang.Object)> ==> <java.lang.Object: int hashCode()>
SPECIAL edge: $i1 = specialinvoke r0.<androidx.collection.ArraySet: int indexOfNull()>() in <androidx.collection.ArraySet: boolean add(java.lang.Object)> ==> <androidx.collection.ArraySet: int indexOfNull()>
SPECIAL edge: $i1 = specialinvoke r0.<androidx.collection.ArraySet: int indexOf(java.lang.Object,int)>($r1, $i0) in <androidx.collection.ArraySet: boolean add(java.lang.Object)> ==> <androidx.collection.ArraySet: int indexOf(java.lang.Object,int)>
SPECIAL edge: specialinvoke r0.<androidx.collection.ArraySet: void allocArrays(int)>($i3) in <androidx.collection.ArraySet: boolean add(java.lang.Object)> ==> <androidx.collection.ArraySet: void allocArrays(int)>
CLINIT edge: $i0 = staticinvoke <androidx.collection.ContainerHelpers: int binarySearch(int[],int,int)>($r1, $i1, 0) in <androidx.collection.ArraySet: int indexOfNull()> ==> <androidx.collection.ContainerHelpers: void <clinit>()>
STATIC edge: $i0 = staticinvoke <androidx.collection.ContainerHelpers: int binarySearch(int[],int,int)>($r1, $i1, 0) in <androidx.collection.ArraySet: int indexOfNull()> ==> <androidx.collection.ContainerHelpers: int binarySearch(int[],int,int)>
CLINIT edge: $i2 = staticinvoke <androidx.collection.ContainerHelpers: int binarySearch(int[],int,int)>($r2, $i1, $i0) in <androidx.collection.ArraySet: int indexOf(java.lang.Object,int)> ==> <androidx.collection.ContainerHelpers: void <clinit>()>
STATIC edge: $i2 = staticinvoke <androidx.collection.ContainerHelpers: int binarySearch(int[],int,int)>($r2, $i1, $i0) in <androidx.collection.ArraySet: int indexOf(java.lang.Object,int)> ==> <androidx.collection.ContainerHelpers: int binarySearch(int[],int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <androidx.collection.ArraySet: int indexOf(java.lang.Object,int)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <androidx.collection.ArraySet: int indexOf(java.lang.Object,int)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: boolean applyApplicationSpecificConfig(boolean)>(0) in <androidx.appcompat.app.AppCompatDelegateImpl: void onCreate(android.os.Bundle)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: boolean applyApplicationSpecificConfig(boolean)>
SPECIAL edge: specialinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: void ensureWindow()>() in <androidx.appcompat.app.AppCompatDelegateImpl: void onCreate(android.os.Bundle)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: void ensureWindow()>
VIRTUAL edge: $r6 = virtualinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.app.ActionBar peekSupportActionBar()>() in <androidx.appcompat.app.AppCompatDelegateImpl: void onCreate(android.os.Bundle)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.app.ActionBar peekSupportActionBar()>
SPECIAL edge: $z0 = specialinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: boolean applyApplicationSpecificConfig(boolean,boolean)>($z0, 1) in <androidx.appcompat.app.AppCompatDelegateImpl: boolean applyApplicationSpecificConfig(boolean)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: boolean applyApplicationSpecificConfig(boolean,boolean)>
SPECIAL edge: $i0 = specialinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: int calculateNightMode()>() in <androidx.appcompat.app.AppCompatDelegateImpl: boolean applyApplicationSpecificConfig(boolean,boolean)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: int calculateNightMode()>
VIRTUAL edge: $i1 = virtualinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: int mapNightMode(android.content.Context,int)>($r1, $i0) in <androidx.appcompat.app.AppCompatDelegateImpl: boolean applyApplicationSpecificConfig(boolean,boolean)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: int mapNightMode(android.content.Context,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: androidx.core.os.LocaleListCompat calculateApplicationLocales(android.content.Context)>($r1) in <androidx.appcompat.app.AppCompatDelegateImpl: boolean applyApplicationSpecificConfig(boolean,boolean)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: androidx.core.os.LocaleListCompat calculateApplicationLocales(android.content.Context)>
VIRTUAL edge: $r2 = virtualinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: androidx.core.os.LocaleListCompat getConfigurationLocales(android.content.res.Configuration)>($r4) in <androidx.appcompat.app.AppCompatDelegateImpl: boolean applyApplicationSpecificConfig(boolean,boolean)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: androidx.core.os.LocaleListCompat getConfigurationLocales(android.content.res.Configuration)>
SPECIAL edge: $z0 = specialinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: boolean updateAppConfiguration(int,androidx.core.os.LocaleListCompat,boolean)>($i1, $r2, $z0) in <androidx.appcompat.app.AppCompatDelegateImpl: boolean applyApplicationSpecificConfig(boolean,boolean)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: boolean updateAppConfiguration(int,androidx.core.os.LocaleListCompat,boolean)>
SPECIAL edge: $r5 = specialinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager getAutoTimeNightModeManager(android.content.Context)>($r1) in <androidx.appcompat.app.AppCompatDelegateImpl: boolean applyApplicationSpecificConfig(boolean,boolean)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager getAutoTimeNightModeManager(android.content.Context)>
SPECIAL edge: $r5 = specialinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager getAutoBatteryNightModeManager(android.content.Context)>($r1) in <androidx.appcompat.app.AppCompatDelegateImpl: boolean applyApplicationSpecificConfig(boolean,boolean)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager getAutoBatteryNightModeManager(android.content.Context)>
CLINIT edge: $i0 = staticinvoke <androidx.appcompat.app.AppCompatDelegateImpl: int getDefaultNightMode()>() in <androidx.appcompat.app.AppCompatDelegateImpl: int calculateNightMode()> ==> <androidx.appcompat.app.AppCompatDelegateImpl: void <clinit>()>
STATIC edge: $i0 = staticinvoke <androidx.appcompat.app.AppCompatDelegateImpl: int getDefaultNightMode()>() in <androidx.appcompat.app.AppCompatDelegateImpl: int calculateNightMode()> ==> <androidx.appcompat.app.AppCompatDelegate: int getDefaultNightMode()>
CLINIT edge: $i0 = staticinvoke <androidx.appcompat.app.AppCompatDelegateImpl: int getDefaultNightMode()>() in <androidx.appcompat.app.AppCompatDelegateImpl: int calculateNightMode()> ==> <androidx.appcompat.app.AppCompatDelegate: void <clinit>()>
STATIC edge: $r2 = staticinvoke <androidx.appcompat.app.LocaleOverlayHelper: androidx.core.os.LocaleListCompat combineLocalesIfOverlayExists(androidx.core.os.LocaleListCompat,androidx.core.os.LocaleListCompat)>($r2, $r5) in <androidx.appcompat.app.AppCompatDelegateImpl: androidx.core.os.LocaleListCompat calculateApplicationLocales(android.content.Context)> ==> <androidx.appcompat.app.LocaleOverlayHelper: androidx.core.os.LocaleListCompat combineLocalesIfOverlayExists(androidx.core.os.LocaleListCompat,androidx.core.os.LocaleListCompat)>
STATIC edge: $r2 = staticinvoke <androidx.appcompat.app.AppCompatDelegateImpl: androidx.core.os.LocaleListCompat getRequestedAppLocales()>() in <androidx.appcompat.app.AppCompatDelegateImpl: androidx.core.os.LocaleListCompat calculateApplicationLocales(android.content.Context)> ==> <androidx.appcompat.app.AppCompatDelegate: androidx.core.os.LocaleListCompat getRequestedAppLocales()>
CLINIT edge: $r2 = staticinvoke <androidx.appcompat.app.AppCompatDelegateImpl: androidx.core.os.LocaleListCompat getRequestedAppLocales()>() in <androidx.appcompat.app.AppCompatDelegateImpl: androidx.core.os.LocaleListCompat calculateApplicationLocales(android.content.Context)> ==> <androidx.appcompat.app.AppCompatDelegate: void <clinit>()>
CLINIT edge: $r2 = staticinvoke <androidx.appcompat.app.AppCompatDelegateImpl: androidx.core.os.LocaleListCompat getRequestedAppLocales()>() in <androidx.appcompat.app.AppCompatDelegateImpl: androidx.core.os.LocaleListCompat calculateApplicationLocales(android.content.Context)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: void <clinit>()>
STATIC edge: $r1 = staticinvoke <androidx.appcompat.app.AppCompatDelegateImpl$Api24Impl: androidx.core.os.LocaleListCompat getLocales(android.content.res.Configuration)>($r2) in <androidx.appcompat.app.AppCompatDelegateImpl: androidx.core.os.LocaleListCompat getConfigurationLocales(android.content.res.Configuration)> ==> <androidx.appcompat.app.AppCompatDelegateImpl$Api24Impl: androidx.core.os.LocaleListCompat getLocales(android.content.res.Configuration)>
CLINIT edge: $z0 = <androidx.appcompat.app.AppCompatDelegateImpl: boolean sCanReturnDifferentContext> in <androidx.appcompat.app.AppCompatDelegateImpl: boolean updateAppConfiguration(int,androidx.core.os.LocaleListCompat,boolean)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: void <clinit>()>
STATIC edge: staticinvoke <androidx.core.app.ActivityCompat: void recreate(android.app.Activity)>($r9) in <androidx.appcompat.app.AppCompatDelegateImpl: boolean updateAppConfiguration(int,androidx.core.os.LocaleListCompat,boolean)> ==> <androidx.core.app.ActivityCompat: void recreate(android.app.Activity)>
CLINIT edge: staticinvoke <androidx.core.app.ActivityCompat: void recreate(android.app.Activity)>($r9) in <androidx.appcompat.app.AppCompatDelegateImpl: boolean updateAppConfiguration(int,androidx.core.os.LocaleListCompat,boolean)> ==> <androidx.core.content.ContextCompat: void <clinit>()>
CLINIT edge: $z0 = <androidx.appcompat.app.AppCompatDelegateImpl: boolean sCanReturnDifferentContext> in <androidx.appcompat.app.AppCompatDelegateImpl: boolean updateAppConfiguration(int,androidx.core.os.LocaleListCompat,boolean)> ==> <androidx.appcompat.app.AppCompatDelegate: void <clinit>()>
STATIC edge: $r1 = staticinvoke <androidx.appcompat.app.TwilightManager: androidx.appcompat.app.TwilightManager getInstance(android.content.Context)>($r2) in <androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager getAutoTimeNightModeManager(android.content.Context)> ==> <androidx.appcompat.app.TwilightManager: androidx.appcompat.app.TwilightManager getInstance(android.content.Context)>
CLINIT edge: i0 = <androidx.appcompat.app.AppCompatDelegate: int sDefaultNightMode> in <androidx.appcompat.app.AppCompatDelegate: int getDefaultNightMode()> ==> <androidx.appcompat.app.AppCompatDelegate: void <clinit>()>
CLINIT edge: $r1 = staticinvoke <androidx.core.os.LocaleListCompat: androidx.core.os.LocaleListCompat getEmptyLocaleList()>() in <androidx.appcompat.app.LocaleOverlayHelper: androidx.core.os.LocaleListCompat combineLocalesIfOverlayExists(androidx.core.os.LocaleListCompat,androidx.core.os.LocaleListCompat)> ==> <androidx.core.os.LocaleListCompat: void <clinit>()>
STATIC edge: $r1 = staticinvoke <androidx.core.os.LocaleListCompat: androidx.core.os.LocaleListCompat getEmptyLocaleList()>() in <androidx.appcompat.app.LocaleOverlayHelper: androidx.core.os.LocaleListCompat combineLocalesIfOverlayExists(androidx.core.os.LocaleListCompat,androidx.core.os.LocaleListCompat)> ==> <androidx.core.os.LocaleListCompat: androidx.core.os.LocaleListCompat getEmptyLocaleList()>
STATIC edge: $r1 = staticinvoke <androidx.appcompat.app.LocaleOverlayHelper: androidx.core.os.LocaleListCompat combineLocales(androidx.core.os.LocaleListCompat,androidx.core.os.LocaleListCompat)>($r1, $r0) in <androidx.appcompat.app.LocaleOverlayHelper: androidx.core.os.LocaleListCompat combineLocalesIfOverlayExists(androidx.core.os.LocaleListCompat,androidx.core.os.LocaleListCompat)> ==> <androidx.appcompat.app.LocaleOverlayHelper: androidx.core.os.LocaleListCompat combineLocales(androidx.core.os.LocaleListCompat,androidx.core.os.LocaleListCompat)>
CLINIT edge: r0 = <androidx.appcompat.app.AppCompatDelegate: androidx.core.os.LocaleListCompat sRequestedAppLocales> in <androidx.appcompat.app.AppCompatDelegate: androidx.core.os.LocaleListCompat getRequestedAppLocales()> ==> <androidx.appcompat.app.AppCompatDelegate: void <clinit>()>
CLINIT edge: $r3 = staticinvoke <androidx.core.os.LocaleListCompat: androidx.core.os.LocaleListCompat forLanguageTags(java.lang.String)>($r2) in <androidx.appcompat.app.AppCompatDelegateImpl$Api24Impl: androidx.core.os.LocaleListCompat getLocales(android.content.res.Configuration)> ==> <androidx.core.os.LocaleListCompat: void <clinit>()>
STATIC edge: $r3 = staticinvoke <androidx.core.os.LocaleListCompat: androidx.core.os.LocaleListCompat forLanguageTags(java.lang.String)>($r2) in <androidx.appcompat.app.AppCompatDelegateImpl$Api24Impl: androidx.core.os.LocaleListCompat getLocales(android.content.res.Configuration)> ==> <androidx.core.os.LocaleListCompat: androidx.core.os.LocaleListCompat forLanguageTags(java.lang.String)>
STATIC edge: $r0 = staticinvoke <androidx.core.os.LocaleListCompat: androidx.core.os.LocaleListCompat create(java.util.Locale[])>($r1) in <androidx.core.os.LocaleListCompat: void <clinit>()> ==> <androidx.core.os.LocaleListCompat: androidx.core.os.LocaleListCompat create(java.util.Locale[])>
CLINIT edge: r0 = <androidx.core.os.LocaleListCompat: androidx.core.os.LocaleListCompat sEmptyLocaleList> in <androidx.core.os.LocaleListCompat: androidx.core.os.LocaleListCompat getEmptyLocaleList()> ==> <androidx.core.os.LocaleListCompat: void <clinit>()>
STATIC edge: $r2 = staticinvoke <androidx.core.os.LocaleListCompat: androidx.core.os.LocaleListCompat create(java.util.Locale[])>($r4) in <androidx.appcompat.app.LocaleOverlayHelper: androidx.core.os.LocaleListCompat combineLocales(androidx.core.os.LocaleListCompat,androidx.core.os.LocaleListCompat)> ==> <androidx.core.os.LocaleListCompat: androidx.core.os.LocaleListCompat create(java.util.Locale[])>
CLINIT edge: $r2 = staticinvoke <androidx.core.os.LocaleListCompat: androidx.core.os.LocaleListCompat create(java.util.Locale[])>($r4) in <androidx.appcompat.app.LocaleOverlayHelper: androidx.core.os.LocaleListCompat combineLocales(androidx.core.os.LocaleListCompat,androidx.core.os.LocaleListCompat)> ==> <androidx.core.os.LocaleListCompat: void <clinit>()>
STATIC edge: $r4 = staticinvoke <androidx.core.os.LocaleListCompat: androidx.core.os.LocaleListCompat getEmptyLocaleList()>() in <androidx.core.os.LocaleListCompat: androidx.core.os.LocaleListCompat forLanguageTags(java.lang.String)> ==> <androidx.core.os.LocaleListCompat: androidx.core.os.LocaleListCompat getEmptyLocaleList()>
STATIC edge: $r4 = staticinvoke <androidx.core.os.LocaleListCompat: androidx.core.os.LocaleListCompat create(java.util.Locale[])>($r2) in <androidx.core.os.LocaleListCompat: androidx.core.os.LocaleListCompat forLanguageTags(java.lang.String)> ==> <androidx.core.os.LocaleListCompat: androidx.core.os.LocaleListCompat create(java.util.Locale[])>
STATIC edge: $r3 = staticinvoke <androidx.core.os.LocaleListCompat$Api21Impl: java.util.Locale forLanguageTag(java.lang.String)>($r0) in <androidx.core.os.LocaleListCompat: androidx.core.os.LocaleListCompat forLanguageTags(java.lang.String)> ==> <androidx.core.os.LocaleListCompat$Api21Impl: java.util.Locale forLanguageTag(java.lang.String)>
CLINIT edge: $r4 = staticinvoke <androidx.core.os.LocaleListCompat: androidx.core.os.LocaleListCompat getEmptyLocaleList()>() in <androidx.core.os.LocaleListCompat: androidx.core.os.LocaleListCompat forLanguageTags(java.lang.String)> ==> <androidx.core.os.LocaleListCompat: void <clinit>()>
CLINIT edge: $r3 = staticinvoke <androidx.core.os.LocaleListCompat$Api21Impl: java.util.Locale forLanguageTag(java.lang.String)>($r0) in <androidx.core.os.LocaleListCompat: androidx.core.os.LocaleListCompat forLanguageTags(java.lang.String)> ==> <androidx.core.os.LocaleListCompat$Api21Impl: void <clinit>()>
STATIC edge: $r2 = staticinvoke <androidx.core.os.LocaleListCompat: androidx.core.os.LocaleListCompat wrap(android.os.LocaleList)>($r1) in <androidx.core.os.LocaleListCompat: androidx.core.os.LocaleListCompat create(java.util.Locale[])> ==> <androidx.core.os.LocaleListCompat: androidx.core.os.LocaleListCompat wrap(android.os.LocaleList)>
STATIC edge: $r1 = staticinvoke <androidx.core.os.LocaleListCompat$Api24Impl: android.os.LocaleList createLocaleList(java.util.Locale[])>($r0) in <androidx.core.os.LocaleListCompat: androidx.core.os.LocaleListCompat create(java.util.Locale[])> ==> <androidx.core.os.LocaleListCompat$Api24Impl: android.os.LocaleList createLocaleList(java.util.Locale[])>
CLINIT edge: $r1 = new androidx.core.os.LocaleListCompat in <androidx.core.os.LocaleListCompat: androidx.core.os.LocaleListCompat wrap(android.os.LocaleList)> ==> <androidx.core.os.LocaleListCompat: void <clinit>()>
SPECIAL edge: specialinvoke $r2.<androidx.core.os.LocaleListPlatformWrapper: void <init>(java.lang.Object)>($r0) in <androidx.core.os.LocaleListCompat: androidx.core.os.LocaleListCompat wrap(android.os.LocaleList)> ==> <androidx.core.os.LocaleListPlatformWrapper: void <init>(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.core.os.LocaleListPlatformWrapper: void <init>(java.lang.Object)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<androidx.core.os.LocaleListCompat: void <init>(androidx.core.os.LocaleListInterface)>($r2) in <androidx.core.os.LocaleListCompat: androidx.core.os.LocaleListCompat wrap(android.os.LocaleList)> ==> <androidx.core.os.LocaleListCompat: void <init>(androidx.core.os.LocaleListInterface)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.core.os.LocaleListCompat: void <init>(androidx.core.os.LocaleListInterface)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $i1 = virtualinvoke $r2.<androidx.core.os.LocaleListCompat: int size()>() in <androidx.appcompat.app.LocaleOverlayHelper: androidx.core.os.LocaleListCompat combineLocales(androidx.core.os.LocaleListCompat,androidx.core.os.LocaleListCompat)> ==> <androidx.core.os.LocaleListCompat: int size()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<androidx.core.os.LocaleListCompat: java.util.Locale get(int)>($i0) in <androidx.appcompat.app.LocaleOverlayHelper: androidx.core.os.LocaleListCompat combineLocales(androidx.core.os.LocaleListCompat,androidx.core.os.LocaleListCompat)> ==> <androidx.core.os.LocaleListCompat: java.util.Locale get(int)>
VIRTUAL edge: $i1 = virtualinvoke $r2.<androidx.core.os.LocaleListCompat: int size()>() in <androidx.appcompat.app.LocaleOverlayHelper: androidx.core.os.LocaleListCompat combineLocales(androidx.core.os.LocaleListCompat,androidx.core.os.LocaleListCompat)> ==> <androidx.core.os.LocaleListCompat: int size()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<androidx.core.os.LocaleListInterface: java.util.Locale get(int)>($i0) in <androidx.core.os.LocaleListCompat: java.util.Locale get(int)> ==> <androidx.core.os.LocaleListPlatformWrapper: java.util.Locale get(int)>
INTERFACE edge: $i0 = interfaceinvoke $r1.<androidx.core.os.LocaleListInterface: int size()>() in <androidx.core.os.LocaleListCompat: int size()> ==> <androidx.core.os.LocaleListPlatformWrapper: int size()>
SPECIAL edge: specialinvoke $r1.<androidx.appcompat.app.TwilightManager: void <init>(android.content.Context,android.location.LocationManager)>($r0, $r3) in <androidx.appcompat.app.TwilightManager: androidx.appcompat.app.TwilightManager getInstance(android.content.Context)> ==> <androidx.appcompat.app.TwilightManager: void <init>(android.content.Context,android.location.LocationManager)>
SPECIAL edge: specialinvoke $r3.<androidx.appcompat.app.TwilightManager$TwilightState: void <init>()>() in <androidx.appcompat.app.TwilightManager: void <init>(android.content.Context,android.location.LocationManager)> ==> <androidx.appcompat.app.TwilightManager$TwilightState: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.appcompat.app.TwilightManager$TwilightState: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.appcompat.app.TwilightManager: void <init>(android.content.Context,android.location.LocationManager)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r3.<androidx.core.app.ActivityCompat$$ExternalSyntheticLambda0: void <init>(android.app.Activity)>($r0) in <androidx.core.app.ActivityCompat: void recreate(android.app.Activity)> ==> <androidx.core.app.ActivityCompat$$ExternalSyntheticLambda0: void <init>(android.app.Activity)>
EXECUTOR edge: virtualinvoke $r2.<android.os.Handler: boolean post(java.lang.Runnable)>($r3) in <androidx.core.app.ActivityCompat: void recreate(android.app.Activity)> ==> <androidx.core.app.ActivityCompat$$ExternalSyntheticLambda0: void run()>
CLINIT edge: staticinvoke <androidx.core.app.ActivityCompat: void lambda$recreate$0(android.app.Activity)>($r1) in <androidx.core.app.ActivityCompat$$ExternalSyntheticLambda0: void run()> ==> <androidx.core.content.ContextCompat: void <clinit>()>
STATIC edge: staticinvoke <androidx.core.app.ActivityCompat: void lambda$recreate$0(android.app.Activity)>($r1) in <androidx.core.app.ActivityCompat$$ExternalSyntheticLambda0: void run()> ==> <androidx.core.app.ActivityCompat: void lambda$recreate$0(android.app.Activity)>
CLINIT edge: $z0 = staticinvoke <androidx.core.app.ActivityRecreator: boolean recreate(android.app.Activity)>($r0) in <androidx.core.app.ActivityCompat: void lambda$recreate$0(android.app.Activity)> ==> <androidx.core.app.ActivityRecreator: void <clinit>()>
STATIC edge: $z0 = staticinvoke <androidx.core.app.ActivityRecreator: boolean recreate(android.app.Activity)>($r0) in <androidx.core.app.ActivityCompat: void lambda$recreate$0(android.app.Activity)> ==> <androidx.core.app.ActivityRecreator: boolean recreate(android.app.Activity)>
STATIC edge: $r4 = staticinvoke <androidx.core.app.ActivityRecreator: java.lang.reflect.Method getRequestRelaunchActivityMethod(java.lang.Class)>($r2) in <androidx.core.app.ActivityRecreator: void <clinit>()> ==> <androidx.core.app.ActivityRecreator: java.lang.reflect.Method getRequestRelaunchActivityMethod(java.lang.Class)>
STATIC edge: $r4 = staticinvoke <androidx.core.app.ActivityRecreator: java.lang.reflect.Method getPerformStopActivity2Params(java.lang.Class)>($r2) in <androidx.core.app.ActivityRecreator: void <clinit>()> ==> <androidx.core.app.ActivityRecreator: java.lang.reflect.Method getPerformStopActivity2Params(java.lang.Class)>
STATIC edge: $r4 = staticinvoke <androidx.core.app.ActivityRecreator: java.lang.reflect.Method getPerformStopActivity3Params(java.lang.Class)>($r2) in <androidx.core.app.ActivityRecreator: void <clinit>()> ==> <androidx.core.app.ActivityRecreator: java.lang.reflect.Method getPerformStopActivity3Params(java.lang.Class)>
STATIC edge: $r3 = staticinvoke <androidx.core.app.ActivityRecreator: java.lang.reflect.Field getTokenField()>() in <androidx.core.app.ActivityRecreator: void <clinit>()> ==> <androidx.core.app.ActivityRecreator: java.lang.reflect.Field getTokenField()>
STATIC edge: $r3 = staticinvoke <androidx.core.app.ActivityRecreator: java.lang.reflect.Field getMainThreadField()>() in <androidx.core.app.ActivityRecreator: void <clinit>()> ==> <androidx.core.app.ActivityRecreator: java.lang.reflect.Field getMainThreadField()>
STATIC edge: $r2 = staticinvoke <androidx.core.app.ActivityRecreator: java.lang.Class getActivityThreadClass()>() in <androidx.core.app.ActivityRecreator: void <clinit>()> ==> <androidx.core.app.ActivityRecreator: java.lang.Class getActivityThreadClass()>
STATIC edge: $r13 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0) in <androidx.core.app.ActivityRecreator: boolean recreate(android.app.Activity)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
STATIC edge: $r13 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0) in <androidx.core.app.ActivityRecreator: boolean recreate(android.app.Activity)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
STATIC edge: $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0) in <androidx.core.app.ActivityRecreator: boolean recreate(android.app.Activity)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $z0 = staticinvoke <androidx.core.app.ActivityRecreator: boolean needsRelaunchCall()>() in <androidx.core.app.ActivityRecreator: boolean recreate(android.app.Activity)> ==> <androidx.core.app.ActivityRecreator: boolean needsRelaunchCall()>
STATIC edge: $z0 = staticinvoke <androidx.core.app.ActivityRecreator: boolean needsRelaunchCall()>() in <androidx.core.app.ActivityRecreator: boolean recreate(android.app.Activity)> ==> <androidx.core.app.ActivityRecreator: boolean needsRelaunchCall()>
CLINIT edge: $r1 = <androidx.core.app.ActivityRecreator: android.os.Handler mainHandler> in <androidx.core.app.ActivityRecreator: boolean recreate(android.app.Activity)> ==> <androidx.core.app.ActivityRecreator: void <clinit>()>
CLINIT edge: $r13 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0) in <androidx.core.app.ActivityRecreator: boolean recreate(android.app.Activity)> ==> <java.lang.Boolean: void <clinit>()>
CLINIT edge: $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0) in <androidx.core.app.ActivityRecreator: boolean recreate(android.app.Activity)> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: $z0 = staticinvoke <androidx.core.app.ActivityRecreator: boolean needsRelaunchCall()>() in <androidx.core.app.ActivityRecreator: java.lang.reflect.Method getRequestRelaunchActivityMethod(java.lang.Class)> ==> <androidx.core.app.ActivityRecreator: boolean needsRelaunchCall()>
CLINIT edge: $r3 = <java.lang.Boolean: java.lang.Class TYPE> in <androidx.core.app.ActivityRecreator: java.lang.reflect.Method getRequestRelaunchActivityMethod(java.lang.Class)> ==> <java.lang.Boolean: void <clinit>()>
CLINIT edge: $r3 = <java.lang.Integer: java.lang.Class TYPE> in <androidx.core.app.ActivityRecreator: java.lang.reflect.Method getRequestRelaunchActivityMethod(java.lang.Class)> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: $r4 = <java.lang.Boolean: java.lang.Class TYPE> in <androidx.core.app.ActivityRecreator: java.lang.reflect.Method getPerformStopActivity2Params(java.lang.Class)> ==> <java.lang.Boolean: void <clinit>()>
CLINIT edge: $r4 = <java.lang.Boolean: java.lang.Class TYPE> in <androidx.core.app.ActivityRecreator: java.lang.reflect.Method getPerformStopActivity3Params(java.lang.Class)> ==> <java.lang.Boolean: void <clinit>()>
STATIC edge: $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("android.app.ActivityThread") in <androidx.core.app.ActivityRecreator: java.lang.Class getActivityThreadClass()> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
SPECIAL edge: specialinvoke $r14.<androidx.core.app.ActivityRecreator$2: void <init>(android.app.Application,androidx.core.app.ActivityRecreator$LifecycleCheckCallbacks)>($r9, $r0) in <androidx.core.app.ActivityRecreator: boolean recreate(android.app.Activity)> ==> <androidx.core.app.ActivityRecreator$2: void <init>(android.app.Application,androidx.core.app.ActivityRecreator$LifecycleCheckCallbacks)>
EXECUTOR edge: virtualinvoke $r1.<android.os.Handler: boolean post(java.lang.Runnable)>($r14) in <androidx.core.app.ActivityRecreator: boolean recreate(android.app.Activity)> ==> <androidx.core.app.ActivityRecreator$2: void run()>
SPECIAL edge: specialinvoke $r14.<androidx.core.app.ActivityRecreator$2: void <init>(android.app.Application,androidx.core.app.ActivityRecreator$LifecycleCheckCallbacks)>($r9, $r0) in <androidx.core.app.ActivityRecreator: boolean recreate(android.app.Activity)> ==> <androidx.core.app.ActivityRecreator$2: void <init>(android.app.Application,androidx.core.app.ActivityRecreator$LifecycleCheckCallbacks)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.core.app.ActivityRecreator$2: void <init>(android.app.Application,androidx.core.app.ActivityRecreator$LifecycleCheckCallbacks)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r10.<androidx.core.app.ActivityRecreator$1: void <init>(androidx.core.app.ActivityRecreator$LifecycleCheckCallbacks,java.lang.Object)>($r0, $r7) in <androidx.core.app.ActivityRecreator: boolean recreate(android.app.Activity)> ==> <androidx.core.app.ActivityRecreator$1: void <init>(androidx.core.app.ActivityRecreator$LifecycleCheckCallbacks,java.lang.Object)>
EXECUTOR edge: virtualinvoke $r1.<android.os.Handler: boolean post(java.lang.Runnable)>($r10) in <androidx.core.app.ActivityRecreator: boolean recreate(android.app.Activity)> ==> <androidx.core.app.ActivityRecreator$1: void run()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.core.app.ActivityRecreator$1: void <init>(androidx.core.app.ActivityRecreator$LifecycleCheckCallbacks,java.lang.Object)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r1.<android.os.Handler: boolean post(java.lang.Runnable)>($r10) in <androidx.core.app.ActivityRecreator: boolean recreate(android.app.Activity)> ==> <android.os.Handler: boolean post(java.lang.Runnable)>
VIRTUAL edge: virtualinvoke $r1.<android.os.Handler: boolean post(java.lang.Runnable)>($r14) in <androidx.core.app.ActivityRecreator: boolean recreate(android.app.Activity)> ==> <android.os.Handler: boolean post(java.lang.Runnable)>
INTERFACE edge: interfaceinvoke param0.<java.lang.Runnable: void run()>() in <android.os.Handler: boolean post(java.lang.Runnable)> ==> <androidx.core.app.ActivityRecreator$1: void run()>
INTERFACE edge: interfaceinvoke param0.<java.lang.Runnable: void run()>() in <android.os.Handler: boolean post(java.lang.Runnable)> ==> <androidx.core.app.ActivityRecreator$2: void run()>
SPECIAL edge: specialinvoke $r0.<androidx.core.app.ActivityRecreator$LifecycleCheckCallbacks: void <init>(android.app.Activity)>($r4) in <androidx.core.app.ActivityRecreator: boolean recreate(android.app.Activity)> ==> <androidx.core.app.ActivityRecreator$LifecycleCheckCallbacks: void <init>(android.app.Activity)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.core.app.ActivityRecreator$LifecycleCheckCallbacks: void <init>(android.app.Activity)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.core.app.ActivityCompat$$ExternalSyntheticLambda0: void <init>(android.app.Activity)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r2.<android.os.Handler: boolean post(java.lang.Runnable)>($r3) in <androidx.core.app.ActivityCompat: void recreate(android.app.Activity)> ==> <android.os.Handler: boolean post(java.lang.Runnable)>
INTERFACE edge: interfaceinvoke param0.<java.lang.Runnable: void run()>() in <android.os.Handler: boolean post(java.lang.Runnable)> ==> <androidx.core.app.ActivityCompat$$ExternalSyntheticLambda0: void run()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<androidx.core.os.LocaleListCompat: boolean isEmpty()>() in <androidx.appcompat.app.LocaleOverlayHelper: androidx.core.os.LocaleListCompat combineLocalesIfOverlayExists(androidx.core.os.LocaleListCompat,androidx.core.os.LocaleListCompat)> ==> <androidx.core.os.LocaleListCompat: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<androidx.core.os.LocaleListInterface: boolean isEmpty()>() in <androidx.core.os.LocaleListCompat: boolean isEmpty()> ==> <androidx.core.os.LocaleListPlatformWrapper: boolean isEmpty()>
SPECIAL edge: specialinvoke $r3.<androidx.appcompat.app.AppCompatDelegateImpl$AutoBatteryNightModeManager: void <init>(androidx.appcompat.app.AppCompatDelegateImpl,android.content.Context)>(r0, $r1) in <androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager getAutoBatteryNightModeManager(android.content.Context)> ==> <androidx.appcompat.app.AppCompatDelegateImpl$AutoBatteryNightModeManager: void <init>(androidx.appcompat.app.AppCompatDelegateImpl,android.content.Context)>
SPECIAL edge: specialinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager: void <init>(androidx.appcompat.app.AppCompatDelegateImpl)>($r1) in <androidx.appcompat.app.AppCompatDelegateImpl$AutoBatteryNightModeManager: void <init>(androidx.appcompat.app.AppCompatDelegateImpl,android.content.Context)> ==> <androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager: void <init>(androidx.appcompat.app.AppCompatDelegateImpl)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager: void <init>(androidx.appcompat.app.AppCompatDelegateImpl)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r4.<androidx.appcompat.app.AppCompatDelegateImpl$AutoTimeNightModeManager: void <init>(androidx.appcompat.app.AppCompatDelegateImpl,androidx.appcompat.app.TwilightManager)>(r0, $r1) in <androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager getAutoTimeNightModeManager(android.content.Context)> ==> <androidx.appcompat.app.AppCompatDelegateImpl$AutoTimeNightModeManager: void <init>(androidx.appcompat.app.AppCompatDelegateImpl,androidx.appcompat.app.TwilightManager)>
SPECIAL edge: specialinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager: void <init>(androidx.appcompat.app.AppCompatDelegateImpl)>($r1) in <androidx.appcompat.app.AppCompatDelegateImpl$AutoTimeNightModeManager: void <init>(androidx.appcompat.app.AppCompatDelegateImpl,androidx.appcompat.app.TwilightManager)> ==> <androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager: void <init>(androidx.appcompat.app.AppCompatDelegateImpl)>
SPECIAL edge: $r3 = specialinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: android.content.res.Configuration createOverrideAppConfiguration(android.content.Context,int,androidx.core.os.LocaleListCompat,android.content.res.Configuration,boolean)>($r2, $i0, $r1, null, 0) in <androidx.appcompat.app.AppCompatDelegateImpl: boolean updateAppConfiguration(int,androidx.core.os.LocaleListCompat,boolean)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: android.content.res.Configuration createOverrideAppConfiguration(android.content.Context,int,androidx.core.os.LocaleListCompat,android.content.res.Configuration,boolean)>
SPECIAL edge: $i1 = specialinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: int getActivityHandlesConfigChangesFlags(android.content.Context)>($r2) in <androidx.appcompat.app.AppCompatDelegateImpl: boolean updateAppConfiguration(int,androidx.core.os.LocaleListCompat,boolean)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: int getActivityHandlesConfigChangesFlags(android.content.Context)>
VIRTUAL edge: $r6 = virtualinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: androidx.core.os.LocaleListCompat getConfigurationLocales(android.content.res.Configuration)>($r4) in <androidx.appcompat.app.AppCompatDelegateImpl: boolean updateAppConfiguration(int,androidx.core.os.LocaleListCompat,boolean)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: androidx.core.os.LocaleListCompat getConfigurationLocales(android.content.res.Configuration)>
VIRTUAL edge: $r7 = virtualinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: androidx.core.os.LocaleListCompat getConfigurationLocales(android.content.res.Configuration)>($r3) in <androidx.appcompat.app.AppCompatDelegateImpl: boolean updateAppConfiguration(int,androidx.core.os.LocaleListCompat,boolean)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: androidx.core.os.LocaleListCompat getConfigurationLocales(android.content.res.Configuration)>
SPECIAL edge: specialinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: void updateResourcesConfiguration(int,androidx.core.os.LocaleListCompat,boolean,android.content.res.Configuration)>($i2, $r7, $z1, null) in <androidx.appcompat.app.AppCompatDelegateImpl: boolean updateAppConfiguration(int,androidx.core.os.LocaleListCompat,boolean)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: void updateResourcesConfiguration(int,androidx.core.os.LocaleListCompat,boolean,android.content.res.Configuration)>
VIRTUAL edge: $r1 = virtualinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: androidx.core.os.LocaleListCompat getConfigurationLocales(android.content.res.Configuration)>($r3) in <androidx.appcompat.app.AppCompatDelegateImpl: boolean updateAppConfiguration(int,androidx.core.os.LocaleListCompat,boolean)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: androidx.core.os.LocaleListCompat getConfigurationLocales(android.content.res.Configuration)>
VIRTUAL edge: virtualinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: void setDefaultLocalesForLocaleList(androidx.core.os.LocaleListCompat)>($r1) in <androidx.appcompat.app.AppCompatDelegateImpl: boolean updateAppConfiguration(int,androidx.core.os.LocaleListCompat,boolean)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: void setDefaultLocalesForLocaleList(androidx.core.os.LocaleListCompat)>
STATIC edge: staticinvoke <androidx.appcompat.app.ResourcesFlusher: void flush(android.content.res.Resources)>($r4) in <androidx.appcompat.app.AppCompatDelegateImpl: void updateResourcesConfiguration(int,androidx.core.os.LocaleListCompat,boolean,android.content.res.Configuration)> ==> <androidx.appcompat.app.ResourcesFlusher: void flush(android.content.res.Resources)>
STATIC edge: staticinvoke <androidx.appcompat.app.AppCompatDelegateImpl$Api24Impl: void setDefaultLocales(androidx.core.os.LocaleListCompat)>($r1) in <androidx.appcompat.app.AppCompatDelegateImpl: void setDefaultLocalesForLocaleList(androidx.core.os.LocaleListCompat)> ==> <androidx.appcompat.app.AppCompatDelegateImpl$Api24Impl: void setDefaultLocales(androidx.core.os.LocaleListCompat)>
STATIC edge: staticinvoke <androidx.appcompat.app.ResourcesFlusher: void flushNougats(android.content.res.Resources)>($r0) in <androidx.appcompat.app.ResourcesFlusher: void flush(android.content.res.Resources)> ==> <androidx.appcompat.app.ResourcesFlusher: void flushNougats(android.content.res.Resources)>
STATIC edge: staticinvoke <androidx.appcompat.app.ResourcesFlusher: void flushThemedResourcesCache(java.lang.Object)>($r4) in <androidx.appcompat.app.ResourcesFlusher: void flushNougats(android.content.res.Resources)> ==> <androidx.appcompat.app.ResourcesFlusher: void flushThemedResourcesCache(java.lang.Object)>
STATIC edge: $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("android.content.res.ThemedResourceCache") in <androidx.appcompat.app.ResourcesFlusher: void flushThemedResourcesCache(java.lang.Object)> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
STATIC edge: staticinvoke <androidx.appcompat.app.ResourcesFlusher$Api16Impl: void clear(android.util.LongSparseArray)>($r5) in <androidx.appcompat.app.ResourcesFlusher: void flushThemedResourcesCache(java.lang.Object)> ==> <androidx.appcompat.app.ResourcesFlusher$Api16Impl: void clear(android.util.LongSparseArray)>
VIRTUAL edge: virtualinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: void setConfigurationLocales(android.content.res.Configuration,androidx.core.os.LocaleListCompat)>($r8, $r1) in <androidx.appcompat.app.AppCompatDelegateImpl: void updateResourcesConfiguration(int,androidx.core.os.LocaleListCompat,boolean,android.content.res.Configuration)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: void setConfigurationLocales(android.content.res.Configuration,androidx.core.os.LocaleListCompat)>
SPECIAL edge: specialinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: void updateActivityConfiguration(android.content.res.Configuration)>($r8) in <androidx.appcompat.app.AppCompatDelegateImpl: void updateResourcesConfiguration(int,androidx.core.os.LocaleListCompat,boolean,android.content.res.Configuration)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: void updateActivityConfiguration(android.content.res.Configuration)>
STATIC edge: staticinvoke <androidx.appcompat.app.AppCompatDelegateImpl$Api24Impl: void setLocales(android.content.res.Configuration,androidx.core.os.LocaleListCompat)>($r1, $r2) in <androidx.appcompat.app.AppCompatDelegateImpl: void setConfigurationLocales(android.content.res.Configuration,androidx.core.os.LocaleListCompat)> ==> <androidx.appcompat.app.AppCompatDelegateImpl$Api24Impl: void setLocales(android.content.res.Configuration,androidx.core.os.LocaleListCompat)>
CLINIT edge: $r2 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State CREATED> in <androidx.appcompat.app.AppCompatDelegateImpl: void updateActivityConfiguration(android.content.res.Configuration)> ==> <androidx.lifecycle.Lifecycle$State: void <clinit>()>
VIRTUAL edge: virtualinvoke $r4.<android.app.Activity: void onConfigurationChanged(android.content.res.Configuration)>($r1) in <androidx.appcompat.app.AppCompatDelegateImpl: void updateActivityConfiguration(android.content.res.Configuration)> ==> <androidx.appcompat.app.AppCompatActivity: void onConfigurationChanged(android.content.res.Configuration)>
SPECIAL edge: specialinvoke r0.<androidx.fragment.app.FragmentActivity: void onConfigurationChanged(android.content.res.Configuration)>($r2) in <androidx.appcompat.app.AppCompatActivity: void onConfigurationChanged(android.content.res.Configuration)> ==> <androidx.fragment.app.FragmentActivity: void onConfigurationChanged(android.content.res.Configuration)>
VIRTUAL edge: $r3 = virtualinvoke r0.<androidx.appcompat.app.AppCompatActivity: androidx.appcompat.app.AppCompatDelegate getDelegate()>() in <androidx.appcompat.app.AppCompatActivity: void onConfigurationChanged(android.content.res.Configuration)> ==> <androidx.appcompat.app.AppCompatActivity: androidx.appcompat.app.AppCompatDelegate getDelegate()>
VIRTUAL edge: virtualinvoke $r3.<androidx.appcompat.app.AppCompatDelegate: void onConfigurationChanged(android.content.res.Configuration)>($r2) in <androidx.appcompat.app.AppCompatActivity: void onConfigurationChanged(android.content.res.Configuration)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: void onConfigurationChanged(android.content.res.Configuration)>
CLINIT edge: $r3 = staticinvoke <androidx.appcompat.widget.AppCompatDrawableManager: androidx.appcompat.widget.AppCompatDrawableManager get()>() in <androidx.appcompat.app.AppCompatDelegateImpl: void onConfigurationChanged(android.content.res.Configuration)> ==> <androidx.appcompat.widget.AppCompatDrawableManager: void <clinit>()>
STATIC edge: $r3 = staticinvoke <androidx.appcompat.widget.AppCompatDrawableManager: androidx.appcompat.widget.AppCompatDrawableManager get()>() in <androidx.appcompat.app.AppCompatDelegateImpl: void onConfigurationChanged(android.content.res.Configuration)> ==> <androidx.appcompat.widget.AppCompatDrawableManager: androidx.appcompat.widget.AppCompatDrawableManager get()>
VIRTUAL edge: virtualinvoke $r3.<androidx.appcompat.widget.AppCompatDrawableManager: void onConfigurationChanged(android.content.Context)>($r4) in <androidx.appcompat.app.AppCompatDelegateImpl: void onConfigurationChanged(android.content.res.Configuration)> ==> <androidx.appcompat.widget.AppCompatDrawableManager: void onConfigurationChanged(android.content.Context)>
VIRTUAL edge: virtualinvoke $r1.<androidx.appcompat.widget.ResourceManagerInternal: void onConfigurationChanged(android.content.Context)>($r2) in <androidx.appcompat.widget.AppCompatDrawableManager: void onConfigurationChanged(android.content.Context)> ==> <androidx.appcompat.widget.ResourceManagerInternal: void onConfigurationChanged(android.content.Context)>
VIRTUAL edge: $r2 = virtualinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.app.ActionBar getSupportActionBar()>() in <androidx.appcompat.app.AppCompatDelegateImpl: void onConfigurationChanged(android.content.res.Configuration)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.app.ActionBar getSupportActionBar()>
SPECIAL edge: specialinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: void initWindowDecorActionBar()>() in <androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.app.ActionBar getSupportActionBar()> ==> <androidx.appcompat.app.AppCompatDelegateImpl: void initWindowDecorActionBar()>
CLINIT edge: $r3 = new androidx.appcompat.app.WindowDecorActionBar in <androidx.appcompat.app.AppCompatDelegateImpl: void initWindowDecorActionBar()> ==> <androidx.appcompat.app.WindowDecorActionBar: void <clinit>()>
CLINIT edge: $r3 = new androidx.appcompat.app.WindowDecorActionBar in <androidx.appcompat.app.AppCompatDelegateImpl: void initWindowDecorActionBar()> ==> <androidx.appcompat.app.WindowDecorActionBar: void <clinit>()>
SPECIAL edge: specialinvoke $r3.<androidx.appcompat.app.WindowDecorActionBar: void <init>(android.app.Activity,boolean)>($r4, $z0) in <androidx.appcompat.app.AppCompatDelegateImpl: void initWindowDecorActionBar()> ==> <androidx.appcompat.app.WindowDecorActionBar: void <init>(android.app.Activity,boolean)>
SPECIAL edge: specialinvoke $r3.<androidx.appcompat.app.WindowDecorActionBar: void <init>(android.app.Dialog)>($r5) in <androidx.appcompat.app.AppCompatDelegateImpl: void initWindowDecorActionBar()> ==> <androidx.appcompat.app.WindowDecorActionBar: void <init>(android.app.Dialog)>
SPECIAL edge: specialinvoke $r7.<androidx.appcompat.app.WindowDecorActionBar$3: void <init>(androidx.appcompat.app.WindowDecorActionBar)>(r0) in <androidx.appcompat.app.WindowDecorActionBar: void <init>(android.app.Dialog)> ==> <androidx.appcompat.app.WindowDecorActionBar$3: void <init>(androidx.appcompat.app.WindowDecorActionBar)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.appcompat.app.WindowDecorActionBar$3: void <init>(androidx.appcompat.app.WindowDecorActionBar)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r6.<androidx.appcompat.app.WindowDecorActionBar$2: void <init>(androidx.appcompat.app.WindowDecorActionBar)>(r0) in <androidx.appcompat.app.WindowDecorActionBar: void <init>(android.app.Dialog)> ==> <androidx.appcompat.app.WindowDecorActionBar$2: void <init>(androidx.appcompat.app.WindowDecorActionBar)>
SPECIAL edge: specialinvoke r0.<androidx.core.view.ViewPropertyAnimatorListenerAdapter: void <init>()>() in <androidx.appcompat.app.WindowDecorActionBar$2: void <init>(androidx.appcompat.app.WindowDecorActionBar)> ==> <androidx.core.view.ViewPropertyAnimatorListenerAdapter: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.core.view.ViewPropertyAnimatorListenerAdapter: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r5.<androidx.appcompat.app.WindowDecorActionBar$1: void <init>(androidx.appcompat.app.WindowDecorActionBar)>(r0) in <androidx.appcompat.app.WindowDecorActionBar: void <init>(android.app.Dialog)> ==> <androidx.appcompat.app.WindowDecorActionBar$1: void <init>(androidx.appcompat.app.WindowDecorActionBar)>
SPECIAL edge: specialinvoke r0.<androidx.core.view.ViewPropertyAnimatorListenerAdapter: void <init>()>() in <androidx.appcompat.app.WindowDecorActionBar$1: void <init>(androidx.appcompat.app.WindowDecorActionBar)> ==> <androidx.core.view.ViewPropertyAnimatorListenerAdapter: void <init>()>
SPECIAL edge: specialinvoke r0.<androidx.appcompat.app.ActionBar: void <init>()>() in <androidx.appcompat.app.WindowDecorActionBar: void <init>(android.app.Dialog)> ==> <androidx.appcompat.app.ActionBar: void <init>()>
SPECIAL edge: specialinvoke r0.<androidx.appcompat.app.WindowDecorActionBar: void init(android.view.View)>($r3) in <androidx.appcompat.app.WindowDecorActionBar: void <init>(android.app.Dialog)> ==> <androidx.appcompat.app.WindowDecorActionBar: void init(android.view.View)>
CLINIT edge: $r9 = <androidx.appcompat.R$styleable: int[] ActionBar> in <androidx.appcompat.app.WindowDecorActionBar: void init(android.view.View)> ==> <androidx.appcompat.R$styleable: void <clinit>()>
STATIC edge: $r8 = staticinvoke <androidx.appcompat.view.ActionBarPolicy: androidx.appcompat.view.ActionBarPolicy get(android.content.Context)>($r7) in <androidx.appcompat.app.WindowDecorActionBar: void init(android.view.View)> ==> <androidx.appcompat.view.ActionBarPolicy: androidx.appcompat.view.ActionBarPolicy get(android.content.Context)>
VIRTUAL edge: $z1 = virtualinvoke $r8.<androidx.appcompat.view.ActionBarPolicy: boolean enableHomeButtonByDefault()>() in <androidx.appcompat.app.WindowDecorActionBar: void init(android.view.View)> ==> <androidx.appcompat.view.ActionBarPolicy: boolean enableHomeButtonByDefault()>
VIRTUAL edge: $z0 = virtualinvoke $r8.<androidx.appcompat.view.ActionBarPolicy: boolean hasEmbeddedTabs()>() in <androidx.appcompat.app.WindowDecorActionBar: void init(android.view.View)> ==> <androidx.appcompat.view.ActionBarPolicy: boolean hasEmbeddedTabs()>
SPECIAL edge: specialinvoke $r1.<androidx.appcompat.view.ActionBarPolicy: void <init>(android.content.Context)>($r0) in <androidx.appcompat.view.ActionBarPolicy: androidx.appcompat.view.ActionBarPolicy get(android.content.Context)> ==> <androidx.appcompat.view.ActionBarPolicy: void <init>(android.content.Context)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.appcompat.view.ActionBarPolicy: void <init>(android.content.Context)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: $r4 = specialinvoke r0.<androidx.appcompat.app.WindowDecorActionBar: androidx.appcompat.widget.DecorToolbar getDecorToolbar(android.view.View)>($r2) in <androidx.appcompat.app.WindowDecorActionBar: void init(android.view.View)> ==> <androidx.appcompat.app.WindowDecorActionBar: androidx.appcompat.widget.DecorToolbar getDecorToolbar(android.view.View)>
VIRTUAL edge: virtualinvoke r0.<androidx.appcompat.app.WindowDecorActionBar: void setHomeButtonEnabled(boolean)>($z0) in <androidx.appcompat.app.WindowDecorActionBar: void init(android.view.View)> ==> <androidx.appcompat.app.WindowDecorActionBar: void setHomeButtonEnabled(boolean)>
SPECIAL edge: specialinvoke r0.<androidx.appcompat.app.WindowDecorActionBar: void setHasEmbeddedTabs(boolean)>($z0) in <androidx.appcompat.app.WindowDecorActionBar: void init(android.view.View)> ==> <androidx.appcompat.app.WindowDecorActionBar: void setHasEmbeddedTabs(boolean)>
VIRTUAL edge: virtualinvoke r0.<androidx.appcompat.app.WindowDecorActionBar: void setHideOnContentScrollEnabled(boolean)>(1) in <androidx.appcompat.app.WindowDecorActionBar: void init(android.view.View)> ==> <androidx.appcompat.app.WindowDecorActionBar: void setHideOnContentScrollEnabled(boolean)>
VIRTUAL edge: virtualinvoke r0.<androidx.appcompat.app.WindowDecorActionBar: void setElevation(float)>($f0) in <androidx.appcompat.app.WindowDecorActionBar: void init(android.view.View)> ==> <androidx.appcompat.app.WindowDecorActionBar: void setElevation(float)>
VIRTUAL edge: $r13 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() in <androidx.appcompat.app.WindowDecorActionBar: void init(android.view.View)> ==> <java.lang.Object: java.lang.Class getClass()>
CLINIT edge: staticinvoke <androidx.core.view.ViewCompat: void requestApplyInsets(android.view.View)>($r4) in <androidx.appcompat.app.WindowDecorActionBar: void setHasEmbeddedTabs(boolean)> ==> <androidx.core.view.ViewCompat: void <clinit>()>
STATIC edge: staticinvoke <androidx.core.view.ViewCompat: void requestApplyInsets(android.view.View)>($r4) in <androidx.appcompat.app.WindowDecorActionBar: void setHasEmbeddedTabs(boolean)> ==> <androidx.core.view.ViewCompat: void requestApplyInsets(android.view.View)>
CLINIT edge: staticinvoke <androidx.core.view.ViewCompat: void setElevation(android.view.View,float)>($r1, $f0) in <androidx.appcompat.app.WindowDecorActionBar: void setElevation(float)> ==> <androidx.core.view.ViewCompat: void <clinit>()>
STATIC edge: staticinvoke <androidx.core.view.ViewCompat: void setElevation(android.view.View,float)>($r1, $f0) in <androidx.appcompat.app.WindowDecorActionBar: void setElevation(float)> ==> <androidx.core.view.ViewCompat: void setElevation(android.view.View,float)>
STATIC edge: staticinvoke <androidx.core.view.ViewCompat$Api21Impl: void setElevation(android.view.View,float)>($r0, $f0) in <androidx.core.view.ViewCompat: void setElevation(android.view.View,float)> ==> <androidx.core.view.ViewCompat$Api21Impl: void setElevation(android.view.View,float)>
VIRTUAL edge: $i0 = virtualinvoke r0.<androidx.appcompat.app.WindowDecorActionBar: int getNavigationMode()>() in <androidx.appcompat.app.WindowDecorActionBar: void setHasEmbeddedTabs(boolean)> ==> <androidx.appcompat.app.WindowDecorActionBar: int getNavigationMode()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.appcompat.app.ActionBar: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r7.<androidx.appcompat.app.WindowDecorActionBar$3: void <init>(androidx.appcompat.app.WindowDecorActionBar)>(r0) in <androidx.appcompat.app.WindowDecorActionBar: void <init>(android.app.Activity,boolean)> ==> <androidx.appcompat.app.WindowDecorActionBar$3: void <init>(androidx.appcompat.app.WindowDecorActionBar)>
SPECIAL edge: specialinvoke $r6.<androidx.appcompat.app.WindowDecorActionBar$2: void <init>(androidx.appcompat.app.WindowDecorActionBar)>(r0) in <androidx.appcompat.app.WindowDecorActionBar: void <init>(android.app.Activity,boolean)> ==> <androidx.appcompat.app.WindowDecorActionBar$2: void <init>(androidx.appcompat.app.WindowDecorActionBar)>
SPECIAL edge: specialinvoke $r5.<androidx.appcompat.app.WindowDecorActionBar$1: void <init>(androidx.appcompat.app.WindowDecorActionBar)>(r0) in <androidx.appcompat.app.WindowDecorActionBar: void <init>(android.app.Activity,boolean)> ==> <androidx.appcompat.app.WindowDecorActionBar$1: void <init>(androidx.appcompat.app.WindowDecorActionBar)>
SPECIAL edge: specialinvoke r0.<androidx.appcompat.app.ActionBar: void <init>()>() in <androidx.appcompat.app.WindowDecorActionBar: void <init>(android.app.Activity,boolean)> ==> <androidx.appcompat.app.ActionBar: void <init>()>
SPECIAL edge: specialinvoke r0.<androidx.appcompat.app.WindowDecorActionBar: void init(android.view.View)>($r3) in <androidx.appcompat.app.WindowDecorActionBar: void <init>(android.app.Activity,boolean)> ==> <androidx.appcompat.app.WindowDecorActionBar: void init(android.view.View)>
SPECIAL edge: specialinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: void ensureSubDecor()>() in <androidx.appcompat.app.AppCompatDelegateImpl: void initWindowDecorActionBar()> ==> <androidx.appcompat.app.AppCompatDelegateImpl: void ensureSubDecor()>
VIRTUAL edge: virtualinvoke $r1.<androidx.appcompat.app.ActionBar: void setDefaultDisplayHomeAsUpEnabled(boolean)>($z0) in <androidx.appcompat.app.AppCompatDelegateImpl: void initWindowDecorActionBar()> ==> <androidx.appcompat.app.WindowDecorActionBar: void setDefaultDisplayHomeAsUpEnabled(boolean)>
VIRTUAL edge: virtualinvoke r0.<androidx.appcompat.app.WindowDecorActionBar: void setDisplayHomeAsUpEnabled(boolean)>($z0) in <androidx.appcompat.app.WindowDecorActionBar: void setDefaultDisplayHomeAsUpEnabled(boolean)> ==> <androidx.appcompat.app.WindowDecorActionBar: void setDisplayHomeAsUpEnabled(boolean)>
VIRTUAL edge: virtualinvoke r0.<androidx.appcompat.app.WindowDecorActionBar: void setDisplayOptions(int,int)>($b0, 4) in <androidx.appcompat.app.WindowDecorActionBar: void setDisplayHomeAsUpEnabled(boolean)> ==> <androidx.appcompat.app.WindowDecorActionBar: void setDisplayOptions(int,int)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<android.content.Context: android.content.res.Resources getResources()>() in <androidx.appcompat.app.AppCompatDelegateImpl: void onConfigurationChanged(android.content.res.Configuration)> ==> <androidx.appcompat.app.AppCompatActivity: android.content.res.Resources getResources()>
CLINIT edge: $z0 = staticinvoke <androidx.appcompat.widget.VectorEnabledTintResources: boolean shouldBeUsed()>() in <androidx.appcompat.app.AppCompatActivity: android.content.res.Resources getResources()> ==> <androidx.appcompat.widget.VectorEnabledTintResources: void <clinit>()>
STATIC edge: $z0 = staticinvoke <androidx.appcompat.widget.VectorEnabledTintResources: boolean shouldBeUsed()>() in <androidx.appcompat.app.AppCompatActivity: android.content.res.Resources getResources()> ==> <androidx.appcompat.widget.VectorEnabledTintResources: boolean shouldBeUsed()>
CLINIT edge: staticinvoke <androidx.appcompat.widget.VectorEnabledTintResources: boolean isCompatVectorFromResourcesEnabled()>() in <androidx.appcompat.widget.VectorEnabledTintResources: boolean shouldBeUsed()> ==> <androidx.appcompat.widget.VectorEnabledTintResources: void <clinit>()>
STATIC edge: staticinvoke <androidx.appcompat.widget.VectorEnabledTintResources: boolean isCompatVectorFromResourcesEnabled()>() in <androidx.appcompat.widget.VectorEnabledTintResources: boolean shouldBeUsed()> ==> <androidx.appcompat.widget.VectorEnabledTintResources: boolean isCompatVectorFromResourcesEnabled()>
CLINIT edge: z0 = <androidx.appcompat.widget.VectorEnabledTintResources: boolean sCompatVectorFromResourcesEnabled> in <androidx.appcompat.widget.VectorEnabledTintResources: boolean isCompatVectorFromResourcesEnabled()> ==> <androidx.appcompat.widget.VectorEnabledTintResources: void <clinit>()>
SPECIAL edge: specialinvoke $r2.<androidx.appcompat.widget.VectorEnabledTintResources: void <init>(android.content.Context,android.content.res.Resources)>(r0, $r1) in <androidx.appcompat.app.AppCompatActivity: android.content.res.Resources getResources()> ==> <androidx.appcompat.widget.VectorEnabledTintResources: void <init>(android.content.Context,android.content.res.Resources)>
SPECIAL edge: specialinvoke r0.<androidx.appcompat.widget.ResourcesWrapper: void <init>(android.content.res.Resources)>($r2) in <androidx.appcompat.widget.VectorEnabledTintResources: void <init>(android.content.Context,android.content.res.Resources)> ==> <androidx.appcompat.widget.ResourcesWrapper: void <init>(android.content.res.Resources)>
VIRTUAL edge: $r3 = virtualinvoke $r1.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>() in <androidx.appcompat.widget.ResourcesWrapper: void <init>(android.content.res.Resources)> ==> <androidx.appcompat.widget.VectorEnabledTintResources: android.util.DisplayMetrics getDisplayMetrics()>
VIRTUAL edge: $r4 = virtualinvoke $r1.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>() in <androidx.appcompat.widget.ResourcesWrapper: void <init>(android.content.res.Resources)> ==> <androidx.appcompat.widget.VectorEnabledTintResources: android.content.res.Configuration getConfiguration()>
VIRTUAL edge: $r1 = virtualinvoke $r2.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>() in <androidx.appcompat.widget.ResourcesWrapper: android.content.res.Configuration getConfiguration()> ==> <androidx.appcompat.widget.VectorEnabledTintResources: android.content.res.Configuration getConfiguration()>
VIRTUAL edge: $r1 = virtualinvoke $r2.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>() in <androidx.appcompat.widget.ResourcesWrapper: android.util.DisplayMetrics getDisplayMetrics()> ==> <androidx.appcompat.widget.VectorEnabledTintResources: android.util.DisplayMetrics getDisplayMetrics()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>() in <androidx.appcompat.app.AppCompatDelegateImpl: void onConfigurationChanged(android.content.res.Configuration)> ==> <androidx.appcompat.widget.VectorEnabledTintResources: android.content.res.Configuration getConfiguration()>
SPECIAL edge: specialinvoke r0.<androidx.activity.ComponentActivity: void onConfigurationChanged(android.content.res.Configuration)>($r1) in <androidx.fragment.app.FragmentActivity: void onConfigurationChanged(android.content.res.Configuration)> ==> <androidx.activity.ComponentActivity: void onConfigurationChanged(android.content.res.Configuration)>
VIRTUAL edge: virtualinvoke $r2.<androidx.fragment.app.FragmentController: void noteStateNotSaved()>() in <androidx.fragment.app.FragmentActivity: void onConfigurationChanged(android.content.res.Configuration)> ==> <androidx.fragment.app.FragmentController: void noteStateNotSaved()>
VIRTUAL edge: virtualinvoke $r2.<androidx.fragment.app.FragmentController: void dispatchConfigurationChanged(android.content.res.Configuration)>($r1) in <androidx.fragment.app.FragmentActivity: void onConfigurationChanged(android.content.res.Configuration)> ==> <androidx.fragment.app.FragmentController: void dispatchConfigurationChanged(android.content.res.Configuration)>
VIRTUAL edge: virtualinvoke $r3.<androidx.fragment.app.FragmentManager: void dispatchConfigurationChanged(android.content.res.Configuration)>($r1) in <androidx.fragment.app.FragmentController: void dispatchConfigurationChanged(android.content.res.Configuration)> ==> <androidx.fragment.app.FragmentManager: void dispatchConfigurationChanged(android.content.res.Configuration)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<androidx.fragment.app.FragmentStore: java.util.List getFragments()>() in <androidx.fragment.app.FragmentManager: void dispatchConfigurationChanged(android.content.res.Configuration)> ==> <androidx.fragment.app.FragmentStore: java.util.List getFragments()>
VIRTUAL edge: virtualinvoke $r2.<androidx.fragment.app.FragmentManager: void noteStateNotSaved()>() in <androidx.fragment.app.FragmentController: void noteStateNotSaved()> ==> <androidx.fragment.app.FragmentManager: void noteStateNotSaved()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<androidx.fragment.app.FragmentStore: java.util.List getFragments()>() in <androidx.fragment.app.FragmentManager: void noteStateNotSaved()> ==> <androidx.fragment.app.FragmentStore: java.util.List getFragments()>
VIRTUAL edge: virtualinvoke $r2.<androidx.fragment.app.FragmentManagerViewModel: void setIsStateSaved(boolean)>(0) in <androidx.fragment.app.FragmentManager: void noteStateNotSaved()> ==> <androidx.fragment.app.FragmentManagerViewModel: void setIsStateSaved(boolean)>
INTERFACE edge: $r6 = interfaceinvoke $r5.<androidx.lifecycle.LifecycleOwner: androidx.lifecycle.Lifecycle getLifecycle()>() in <androidx.appcompat.app.AppCompatDelegateImpl: void updateActivityConfiguration(android.content.res.Configuration)> ==> <androidx.activity.ComponentActivity: androidx.lifecycle.Lifecycle getLifecycle()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<android.content.Context: android.content.res.Resources getResources()>() in <androidx.appcompat.app.AppCompatDelegateImpl: void updateResourcesConfiguration(int,androidx.core.os.LocaleListCompat,boolean,android.content.res.Configuration)> ==> <androidx.appcompat.app.AppCompatActivity: android.content.res.Resources getResources()>
VIRTUAL edge: virtualinvoke $r3.<android.content.Context: void setTheme(int)>($i0) in <androidx.appcompat.app.AppCompatDelegateImpl: void updateResourcesConfiguration(int,androidx.core.os.LocaleListCompat,boolean,android.content.res.Configuration)> ==> <androidx.appcompat.app.AppCompatActivity: void setTheme(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<androidx.appcompat.app.AppCompatActivity: androidx.appcompat.app.AppCompatDelegate getDelegate()>() in <androidx.appcompat.app.AppCompatActivity: void setTheme(int)> ==> <androidx.appcompat.app.AppCompatActivity: androidx.appcompat.app.AppCompatDelegate getDelegate()>
VIRTUAL edge: virtualinvoke $r1.<androidx.appcompat.app.AppCompatDelegate: void setTheme(int)>($i0) in <androidx.appcompat.app.AppCompatActivity: void setTheme(int)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: void setTheme(int)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>() in <androidx.appcompat.app.AppCompatDelegateImpl: void updateResourcesConfiguration(int,androidx.core.os.LocaleListCompat,boolean,android.content.res.Configuration)> ==> <androidx.appcompat.widget.VectorEnabledTintResources: android.content.res.Configuration getConfiguration()>
VIRTUAL edge: virtualinvoke $r4.<android.content.res.Resources: void updateConfiguration(android.content.res.Configuration,android.util.DisplayMetrics)>($r8, null) in <androidx.appcompat.app.AppCompatDelegateImpl: void updateResourcesConfiguration(int,androidx.core.os.LocaleListCompat,boolean,android.content.res.Configuration)> ==> <androidx.appcompat.widget.VectorEnabledTintResources: void updateConfiguration(android.content.res.Configuration,android.util.DisplayMetrics)>
SPECIAL edge: specialinvoke r0.<androidx.appcompat.widget.ResourcesWrapper: void updateConfiguration(android.content.res.Configuration,android.util.DisplayMetrics)>($r1, $r2) in <androidx.appcompat.widget.VectorEnabledTintResources: void updateConfiguration(android.content.res.Configuration,android.util.DisplayMetrics)> ==> <androidx.appcompat.widget.ResourcesWrapper: void updateConfiguration(android.content.res.Configuration,android.util.DisplayMetrics)>
VIRTUAL edge: $r5 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>() in <androidx.appcompat.app.AppCompatDelegateImpl: int getActivityHandlesConfigChangesFlags(android.content.Context)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: virtualinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: void setConfigurationLocales(android.content.res.Configuration,androidx.core.os.LocaleListCompat)>($r6, $r1) in <androidx.appcompat.app.AppCompatDelegateImpl: android.content.res.Configuration createOverrideAppConfiguration(android.content.Context,int,androidx.core.os.LocaleListCompat,android.content.res.Configuration,boolean)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: void setConfigurationLocales(android.content.res.Configuration,androidx.core.os.LocaleListCompat)>
VIRTUAL edge: virtualinvoke $r10.<androidx.appcompat.app.AppCompatActivity: void onNightModeChanged(int)>($i0) in <androidx.appcompat.app.AppCompatDelegateImpl: boolean updateAppConfiguration(int,androidx.core.os.LocaleListCompat,boolean)> ==> <androidx.appcompat.app.AppCompatActivity: void onNightModeChanged(int)>
VIRTUAL edge: virtualinvoke $r10.<androidx.appcompat.app.AppCompatActivity: void onLocalesChanged(androidx.core.os.LocaleListCompat)>($r1) in <androidx.appcompat.app.AppCompatDelegateImpl: boolean updateAppConfiguration(int,androidx.core.os.LocaleListCompat,boolean)> ==> <androidx.appcompat.app.AppCompatActivity: void onLocalesChanged(androidx.core.os.LocaleListCompat)>
VIRTUAL edge: $r5 = virtualinvoke $r2.<android.content.Context: android.content.res.Resources getResources()>() in <androidx.appcompat.app.AppCompatDelegateImpl: boolean updateAppConfiguration(int,androidx.core.os.LocaleListCompat,boolean)> ==> <androidx.appcompat.app.AppCompatActivity: android.content.res.Resources getResources()>
VIRTUAL edge: $r5 = virtualinvoke $r2.<android.content.Context: android.content.res.Resources getResources()>() in <androidx.appcompat.app.AppCompatDelegateImpl: boolean updateAppConfiguration(int,androidx.core.os.LocaleListCompat,boolean)> ==> <androidx.appcompat.app.AppCompatActivity: android.content.res.Resources getResources()>
VIRTUAL edge: $r4 = virtualinvoke $r5.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>() in <androidx.appcompat.app.AppCompatDelegateImpl: boolean updateAppConfiguration(int,androidx.core.os.LocaleListCompat,boolean)> ==> <androidx.appcompat.widget.VectorEnabledTintResources: android.content.res.Configuration getConfiguration()>
VIRTUAL edge: $r4 = virtualinvoke $r2.<android.content.Context: android.content.res.Resources getResources()>() in <androidx.appcompat.app.AppCompatDelegateImpl: android.content.res.Configuration createOverrideAppConfiguration(android.content.Context,int,androidx.core.os.LocaleListCompat,android.content.res.Configuration,boolean)> ==> <androidx.appcompat.app.AppCompatActivity: android.content.res.Resources getResources()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>() in <androidx.appcompat.app.AppCompatDelegateImpl: android.content.res.Configuration createOverrideAppConfiguration(android.content.Context,int,androidx.core.os.LocaleListCompat,android.content.res.Configuration,boolean)> ==> <androidx.appcompat.widget.VectorEnabledTintResources: android.content.res.Configuration getConfiguration()>
VIRTUAL edge: $z2 = virtualinvoke $r6.<androidx.core.os.LocaleListCompat: boolean equals(java.lang.Object)>($r7) in <androidx.appcompat.app.AppCompatDelegateImpl: boolean updateAppConfiguration(int,androidx.core.os.LocaleListCompat,boolean)> ==> <androidx.core.os.LocaleListCompat: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <androidx.core.os.LocaleListCompat: boolean equals(java.lang.Object)> ==> <androidx.core.os.LocaleListPlatformWrapper: boolean equals(java.lang.Object)>
INTERFACE edge: $r2 = interfaceinvoke $r3.<androidx.core.os.LocaleListInterface: java.lang.Object getLocaleList()>() in <androidx.core.os.LocaleListPlatformWrapper: boolean equals(java.lang.Object)> ==> <androidx.core.os.LocaleListPlatformWrapper: java.lang.Object getLocaleList()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<androidx.core.os.LocaleListCompat: java.lang.String toLanguageTags()>() in <androidx.appcompat.app.AppCompatDelegateImpl$Api24Impl: void setLocales(android.content.res.Configuration,androidx.core.os.LocaleListCompat)> ==> <androidx.core.os.LocaleListCompat: java.lang.String toLanguageTags()>
INTERFACE edge: $r1 = interfaceinvoke $r2.<androidx.core.os.LocaleListInterface: java.lang.String toLanguageTags()>() in <androidx.core.os.LocaleListCompat: java.lang.String toLanguageTags()> ==> <androidx.core.os.LocaleListPlatformWrapper: java.lang.String toLanguageTags()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<androidx.core.os.LocaleListCompat: java.lang.String toLanguageTags()>() in <androidx.appcompat.app.AppCompatDelegateImpl$Api24Impl: void setDefaultLocales(androidx.core.os.LocaleListCompat)> ==> <androidx.core.os.LocaleListCompat: java.lang.String toLanguageTags()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<androidx.core.os.LocaleListCompat: boolean isEmpty()>() in <androidx.appcompat.app.AppCompatDelegateImpl: androidx.core.os.LocaleListCompat calculateApplicationLocales(android.content.Context)> ==> <androidx.core.os.LocaleListCompat: boolean isEmpty()>
VIRTUAL edge: $r5 = virtualinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: androidx.core.os.LocaleListCompat getConfigurationLocales(android.content.res.Configuration)>($r4) in <androidx.appcompat.app.AppCompatDelegateImpl: androidx.core.os.LocaleListCompat calculateApplicationLocales(android.content.Context)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: androidx.core.os.LocaleListCompat getConfigurationLocales(android.content.res.Configuration)>
VIRTUAL edge: $i2 = virtualinvoke $r0.<androidx.core.os.LocaleListCompat: int size()>() in <androidx.appcompat.app.LocaleOverlayHelper: androidx.core.os.LocaleListCompat combineLocales(androidx.core.os.LocaleListCompat,androidx.core.os.LocaleListCompat)> ==> <androidx.core.os.LocaleListCompat: int size()>
VIRTUAL edge: $r3 = virtualinvoke $r0.<androidx.core.os.LocaleListCompat: java.util.Locale get(int)>($i1) in <androidx.appcompat.app.LocaleOverlayHelper: androidx.core.os.LocaleListCompat combineLocales(androidx.core.os.LocaleListCompat,androidx.core.os.LocaleListCompat)> ==> <androidx.core.os.LocaleListCompat: java.util.Locale get(int)>
SPECIAL edge: $r2 = specialinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager getAutoBatteryNightModeManager(android.content.Context)>($r1) in <androidx.appcompat.app.AppCompatDelegateImpl: int mapNightMode(android.content.Context,int)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager getAutoBatteryNightModeManager(android.content.Context)>
SPECIAL edge: $r2 = specialinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager getAutoTimeNightModeManager(android.content.Context)>($r1) in <androidx.appcompat.app.AppCompatDelegateImpl: int mapNightMode(android.content.Context,int)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager getAutoTimeNightModeManager(android.content.Context)>
VIRTUAL edge: $i0 = virtualinvoke $r2.<androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager: int getApplyableNightMode()>() in <androidx.appcompat.app.AppCompatDelegateImpl: int mapNightMode(android.content.Context,int)> ==> <androidx.appcompat.app.AppCompatDelegateImpl$AutoBatteryNightModeManager: int getApplyableNightMode()>
VIRTUAL edge: $i0 = virtualinvoke $r2.<androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager: int getApplyableNightMode()>() in <androidx.appcompat.app.AppCompatDelegateImpl: int mapNightMode(android.content.Context,int)> ==> <androidx.appcompat.app.AppCompatDelegateImpl$AutoBatteryNightModeManager: int getApplyableNightMode()>
VIRTUAL edge: $i0 = virtualinvoke $r2.<androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager: int getApplyableNightMode()>() in <androidx.appcompat.app.AppCompatDelegateImpl: int mapNightMode(android.content.Context,int)> ==> <androidx.appcompat.app.AppCompatDelegateImpl$AutoTimeNightModeManager: int getApplyableNightMode()>
VIRTUAL edge: $i0 = virtualinvoke $r2.<androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager: int getApplyableNightMode()>() in <androidx.appcompat.app.AppCompatDelegateImpl: int mapNightMode(android.content.Context,int)> ==> <androidx.appcompat.app.AppCompatDelegateImpl$AutoTimeNightModeManager: int getApplyableNightMode()>
STATIC edge: $z0 = staticinvoke <androidx.appcompat.app.AppCompatDelegateImpl$Api21Impl: boolean isPowerSaveMode(android.os.PowerManager)>($r1) in <androidx.appcompat.app.AppCompatDelegateImpl$AutoBatteryNightModeManager: int getApplyableNightMode()> ==> <androidx.appcompat.app.AppCompatDelegateImpl$Api21Impl: boolean isPowerSaveMode(android.os.PowerManager)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<androidx.appcompat.app.TwilightManager: boolean isNight()>() in <androidx.appcompat.app.AppCompatDelegateImpl$AutoTimeNightModeManager: int getApplyableNightMode()> ==> <androidx.appcompat.app.TwilightManager: boolean isNight()>
SPECIAL edge: $z0 = specialinvoke r0.<androidx.appcompat.app.TwilightManager: boolean isStateValid()>() in <androidx.appcompat.app.TwilightManager: boolean isNight()> ==> <androidx.appcompat.app.TwilightManager: boolean isStateValid()>
SPECIAL edge: $r2 = specialinvoke r0.<androidx.appcompat.app.TwilightManager: android.location.Location getLastKnownLocation()>() in <androidx.appcompat.app.TwilightManager: boolean isNight()> ==> <androidx.appcompat.app.TwilightManager: android.location.Location getLastKnownLocation()>
SPECIAL edge: specialinvoke r0.<androidx.appcompat.app.TwilightManager: void updateState(android.location.Location)>($r2) in <androidx.appcompat.app.TwilightManager: boolean isNight()> ==> <androidx.appcompat.app.TwilightManager: void updateState(android.location.Location)>
STATIC edge: $i0 = staticinvoke <androidx.core.content.PermissionChecker: int checkSelfPermission(android.content.Context,java.lang.String)>($r1, "android.permission.ACCESS_COARSE_LOCATION") in <androidx.appcompat.app.TwilightManager: android.location.Location getLastKnownLocation()> ==> <androidx.core.content.PermissionChecker: int checkSelfPermission(android.content.Context,java.lang.String)>
STATIC edge: $i0 = staticinvoke <androidx.core.content.PermissionChecker: int checkSelfPermission(android.content.Context,java.lang.String)>($r1, "android.permission.ACCESS_FINE_LOCATION") in <androidx.appcompat.app.TwilightManager: android.location.Location getLastKnownLocation()> ==> <androidx.core.content.PermissionChecker: int checkSelfPermission(android.content.Context,java.lang.String)>
STATIC edge: $r3 = staticinvoke <androidx.appcompat.app.TwilightCalculator: androidx.appcompat.app.TwilightCalculator getInstance()>() in <androidx.appcompat.app.TwilightManager: void updateState(android.location.Location)> ==> <androidx.appcompat.app.TwilightCalculator: androidx.appcompat.app.TwilightCalculator getInstance()>
STATIC edge: $i0 = staticinvoke <androidx.core.content.PermissionChecker: int checkPermission(android.content.Context,java.lang.String,int,int,java.lang.String)>($r1, $r0, $i0, $i1, $r2) in <androidx.core.content.PermissionChecker: int checkSelfPermission(android.content.Context,java.lang.String)> ==> <androidx.core.content.PermissionChecker: int checkPermission(android.content.Context,java.lang.String,int,int,java.lang.String)>
STATIC edge: $r1 = staticinvoke <androidx.core.app.AppOpsManagerCompat: java.lang.String permissionToOp(java.lang.String)>($r1) in <androidx.core.content.PermissionChecker: int checkPermission(android.content.Context,java.lang.String,int,int,java.lang.String)> ==> <androidx.core.app.AppOpsManagerCompat: java.lang.String permissionToOp(java.lang.String)>
STATIC edge: $i1 = staticinvoke <androidx.core.app.AppOpsManagerCompat: int noteProxyOpNoThrow(android.content.Context,java.lang.String,java.lang.String)>($r0, $r1, $r2) in <androidx.core.content.PermissionChecker: int checkPermission(android.content.Context,java.lang.String,int,int,java.lang.String)> ==> <androidx.core.app.AppOpsManagerCompat: int noteProxyOpNoThrow(android.content.Context,java.lang.String,java.lang.String)>
STATIC edge: $i1 = staticinvoke <androidx.core.app.AppOpsManagerCompat: int checkOrNoteProxyOp(android.content.Context,int,java.lang.String,java.lang.String)>($r0, $i0, $r1, $r2) in <androidx.core.content.PermissionChecker: int checkPermission(android.content.Context,java.lang.String,int,int,java.lang.String)> ==> <androidx.core.app.AppOpsManagerCompat: int checkOrNoteProxyOp(android.content.Context,int,java.lang.String,java.lang.String)>
STATIC edge: $z0 = staticinvoke <androidx.core.util.ObjectsCompat: boolean equals(java.lang.Object,java.lang.Object)>($r5, $r2) in <androidx.core.content.PermissionChecker: int checkPermission(android.content.Context,java.lang.String,int,int,java.lang.String)> ==> <androidx.core.util.ObjectsCompat: boolean equals(java.lang.Object,java.lang.Object)>
STATIC edge: $r0 = staticinvoke <androidx.core.app.AppOpsManagerCompat$Api23Impl: java.lang.String permissionToOp(java.lang.String)>($r0) in <androidx.core.app.AppOpsManagerCompat: java.lang.String permissionToOp(java.lang.String)> ==> <androidx.core.app.AppOpsManagerCompat$Api23Impl: java.lang.String permissionToOp(java.lang.String)>
STATIC edge: $r3 = staticinvoke <androidx.core.app.AppOpsManagerCompat$Api23Impl: java.lang.Object getSystemService(android.content.Context,java.lang.Class)>($r2, class "Landroid/app/AppOpsManager;") in <androidx.core.app.AppOpsManagerCompat: int noteProxyOpNoThrow(android.content.Context,java.lang.String,java.lang.String)> ==> <androidx.core.app.AppOpsManagerCompat$Api23Impl: java.lang.Object getSystemService(android.content.Context,java.lang.Class)>
STATIC edge: $i0 = staticinvoke <androidx.core.app.AppOpsManagerCompat$Api23Impl: int noteProxyOpNoThrow(android.app.AppOpsManager,java.lang.String,java.lang.String)>($r4, $r0, $r1) in <androidx.core.app.AppOpsManagerCompat: int noteProxyOpNoThrow(android.content.Context,java.lang.String,java.lang.String)> ==> <androidx.core.app.AppOpsManagerCompat$Api23Impl: int noteProxyOpNoThrow(android.app.AppOpsManager,java.lang.String,java.lang.String)>
STATIC edge: $i0 = staticinvoke <androidx.core.app.AppOpsManagerCompat: int noteProxyOpNoThrow(android.content.Context,java.lang.String,java.lang.String)>($r1, $r0, $r2) in <androidx.core.app.AppOpsManagerCompat: int checkOrNoteProxyOp(android.content.Context,int,java.lang.String,java.lang.String)> ==> <androidx.core.app.AppOpsManagerCompat: int noteProxyOpNoThrow(android.content.Context,java.lang.String,java.lang.String)>
STATIC edge: $i0 = staticinvoke <androidx.core.app.AppOpsManagerCompat$Api29Impl: int checkOpNoThrow(android.app.AppOpsManager,java.lang.String,int,java.lang.String)>($r3, $r0, $i0, $r2) in <androidx.core.app.AppOpsManagerCompat: int checkOrNoteProxyOp(android.content.Context,int,java.lang.String,java.lang.String)> ==> <androidx.core.app.AppOpsManagerCompat$Api29Impl: int checkOpNoThrow(android.app.AppOpsManager,java.lang.String,int,java.lang.String)>
STATIC edge: $r2 = staticinvoke <androidx.core.app.AppOpsManagerCompat$Api29Impl: java.lang.String getOpPackageName(android.content.Context)>($r1) in <androidx.core.app.AppOpsManagerCompat: int checkOrNoteProxyOp(android.content.Context,int,java.lang.String,java.lang.String)> ==> <androidx.core.app.AppOpsManagerCompat$Api29Impl: java.lang.String getOpPackageName(android.content.Context)>
STATIC edge: $r3 = staticinvoke <androidx.core.app.AppOpsManagerCompat$Api29Impl: android.app.AppOpsManager getSystemService(android.content.Context)>($r1) in <androidx.core.app.AppOpsManagerCompat: int checkOrNoteProxyOp(android.content.Context,int,java.lang.String,java.lang.String)> ==> <androidx.core.app.AppOpsManagerCompat$Api29Impl: android.app.AppOpsManager getSystemService(android.content.Context)>
VIRTUAL edge: virtualinvoke $r3.<androidx.appcompat.app.TwilightCalculator: void calculateTwilight(long,double,double)>($l2, $d0, $d1) in <androidx.appcompat.app.TwilightManager: void updateState(android.location.Location)> ==> <androidx.appcompat.app.TwilightCalculator: void calculateTwilight(long,double,double)>
VIRTUAL edge: virtualinvoke $r3.<androidx.appcompat.app.TwilightCalculator: void calculateTwilight(long,double,double)>($l1, $d0, $d1) in <androidx.appcompat.app.TwilightManager: void updateState(android.location.Location)> ==> <androidx.appcompat.app.TwilightCalculator: void calculateTwilight(long,double,double)>
SPECIAL edge: specialinvoke $r0.<androidx.appcompat.app.TwilightCalculator: void <init>()>() in <androidx.appcompat.app.TwilightCalculator: androidx.appcompat.app.TwilightCalculator getInstance()> ==> <androidx.appcompat.app.TwilightCalculator: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.appcompat.app.TwilightCalculator: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: $r3 = specialinvoke r0.<androidx.appcompat.app.TwilightManager: android.location.Location getLastKnownLocationForProvider(java.lang.String)>("network") in <androidx.appcompat.app.TwilightManager: android.location.Location getLastKnownLocation()> ==> <androidx.appcompat.app.TwilightManager: android.location.Location getLastKnownLocationForProvider(java.lang.String)>
VIRTUAL edge: virtualinvoke $r5.<androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager: void setup()>() in <androidx.appcompat.app.AppCompatDelegateImpl: boolean applyApplicationSpecificConfig(boolean,boolean)> ==> <androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager: void setup()>
VIRTUAL edge: virtualinvoke $r5.<androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager: void cleanup()>() in <androidx.appcompat.app.AppCompatDelegateImpl: boolean applyApplicationSpecificConfig(boolean,boolean)> ==> <androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager: void cleanup()>
VIRTUAL edge: virtualinvoke $r5.<androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager: void setup()>() in <androidx.appcompat.app.AppCompatDelegateImpl: boolean applyApplicationSpecificConfig(boolean,boolean)> ==> <androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager: void setup()>
SPECIAL edge: specialinvoke $r3.<androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager$1: void <init>(androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager)>(r0) in <androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager: void setup()> ==> <androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager$1: void <init>(androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager)>
VIRTUAL edge: virtualinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager: void cleanup()>() in <androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager: void setup()> ==> <androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager: void cleanup()>
VIRTUAL edge: $r2 = virtualinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager: android.content.IntentFilter createIntentFilterForBroadcastReceiver()>() in <androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager: void setup()> ==> <androidx.appcompat.app.AppCompatDelegateImpl$AutoBatteryNightModeManager: android.content.IntentFilter createIntentFilterForBroadcastReceiver()>
VIRTUAL edge: $r2 = virtualinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager: android.content.IntentFilter createIntentFilterForBroadcastReceiver()>() in <androidx.appcompat.app.AppCompatDelegateImpl$AutoNightModeManager: void setup()> ==> <androidx.appcompat.app.AppCompatDelegateImpl$AutoTimeNightModeManager: android.content.IntentFilter createIntentFilterForBroadcastReceiver()>
VIRTUAL edge: $r3 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>() in <androidx.appcompat.app.AppCompatDelegateImpl: boolean applyApplicationSpecificConfig(boolean,boolean)> ==> <androidx.appcompat.app.AppCompatActivity: android.content.res.Resources getResources()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>() in <androidx.appcompat.app.AppCompatDelegateImpl: boolean applyApplicationSpecificConfig(boolean,boolean)> ==> <androidx.appcompat.widget.VectorEnabledTintResources: android.content.res.Configuration getConfiguration()>
VIRTUAL edge: $r3 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>() in <androidx.appcompat.app.AppCompatDelegateImpl: androidx.core.os.LocaleListCompat calculateApplicationLocales(android.content.Context)> ==> <androidx.appcompat.app.AppCompatActivity: android.content.res.Resources getResources()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>() in <androidx.appcompat.app.AppCompatDelegateImpl: androidx.core.os.LocaleListCompat calculateApplicationLocales(android.content.Context)> ==> <androidx.appcompat.widget.VectorEnabledTintResources: android.content.res.Configuration getConfiguration()>
VIRTUAL edge: $r9 = virtualinvoke $r8.<android.content.Context: android.content.res.Resources getResources()>() in <androidx.appcompat.app.AppCompatDelegateImpl: void onCreate(android.os.Bundle)> ==> <androidx.appcompat.app.AppCompatActivity: android.content.res.Resources getResources()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>() in <androidx.appcompat.app.AppCompatDelegateImpl: void onCreate(android.os.Bundle)> ==> <androidx.appcompat.widget.VectorEnabledTintResources: android.content.res.Configuration getConfiguration()>
VIRTUAL edge: $r1 = virtualinvoke $r2.<androidx.savedstate.SavedStateRegistryController: androidx.savedstate.SavedStateRegistry getSavedStateRegistry()>() in <androidx.activity.ComponentActivity: androidx.savedstate.SavedStateRegistry getSavedStateRegistry()> ==> <androidx.savedstate.SavedStateRegistryController: androidx.savedstate.SavedStateRegistry getSavedStateRegistry()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<androidx.savedstate.SavedStateRegistry: android.os.Bundle consumeRestoredStateForKey(java.lang.String)>("androidx:appcompat") in <androidx.appcompat.app.AppCompatActivity$2: void onContextAvailable(android.content.Context)> ==> <androidx.savedstate.SavedStateRegistry: android.os.Bundle consumeRestoredStateForKey(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<androidx.savedstate.SavedStateRegistry: android.os.Bundle consumeRestoredStateForKey(java.lang.String)>("android:support:fragments") in <androidx.fragment.app.FragmentActivity$2: void onContextAvailable(android.content.Context)> ==> <androidx.savedstate.SavedStateRegistry: android.os.Bundle consumeRestoredStateForKey(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<androidx.savedstate.SavedStateRegistry: android.os.Bundle consumeRestoredStateForKey(java.lang.String)>("android:support:activity-result") in <androidx.activity.ComponentActivity: void lambda$new$2$androidx-activity-ComponentActivity(android.content.Context)> ==> <androidx.savedstate.SavedStateRegistry: android.os.Bundle consumeRestoredStateForKey(java.lang.String)>
VIRTUAL edge: virtualinvoke $r16.<androidx.savedstate.SavedStateRegistry: void registerSavedStateProvider(java.lang.String,androidx.savedstate.SavedStateRegistry$SavedStateProvider)>("android:support:activity-result", $r17) in <androidx.activity.ComponentActivity: void <init>()> ==> <androidx.savedstate.SavedStateRegistry: void registerSavedStateProvider(java.lang.String,androidx.savedstate.SavedStateRegistry$SavedStateProvider)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "key") in <androidx.savedstate.SavedStateRegistry: void registerSavedStateProvider(java.lang.String,androidx.savedstate.SavedStateRegistry$SavedStateProvider)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>() in <androidx.savedstate.SavedStateRegistry: void registerSavedStateProvider(java.lang.String,androidx.savedstate.SavedStateRegistry$SavedStateProvider)> ==> <java.lang.String: java.lang.String toString()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<androidx.arch.core.internal.SafeIterableMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>($r1, $r2) in <androidx.savedstate.SavedStateRegistry: void registerSavedStateProvider(java.lang.String,androidx.savedstate.SavedStateRegistry$SavedStateProvider)> ==> <androidx.arch.core.internal.SafeIterableMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke r0.<androidx.arch.core.internal.SafeIterableMap: androidx.arch.core.internal.SafeIterableMap$Entry get(java.lang.Object)>($r3) in <androidx.arch.core.internal.SafeIterableMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)> ==> <androidx.arch.core.internal.SafeIterableMap: androidx.arch.core.internal.SafeIterableMap$Entry get(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<androidx.arch.core.internal.SafeIterableMap: androidx.arch.core.internal.SafeIterableMap$Entry put(java.lang.Object,java.lang.Object)>($r3, $r1) in <androidx.arch.core.internal.SafeIterableMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)> ==> <androidx.arch.core.internal.SafeIterableMap: androidx.arch.core.internal.SafeIterableMap$Entry put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r2.<androidx.savedstate.SavedStateRegistry: void registerSavedStateProvider(java.lang.String,androidx.savedstate.SavedStateRegistry$SavedStateProvider)>("android:support:fragments", $r1) in <androidx.fragment.app.FragmentActivity: void init()> ==> <androidx.savedstate.SavedStateRegistry: void registerSavedStateProvider(java.lang.String,androidx.savedstate.SavedStateRegistry$SavedStateProvider)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<androidx.savedstate.SavedStateRegistry: androidx.savedstate.SavedStateRegistry$SavedStateProvider getSavedStateProvider(java.lang.String)>("androidx.lifecycle.internal.SavedStateHandlesProvider") in <androidx.lifecycle.SavedStateHandleSupport: void enableSavedStateHandles(androidx.savedstate.SavedStateRegistryOwner)> ==> <androidx.savedstate.SavedStateRegistry: androidx.savedstate.SavedStateRegistry$SavedStateProvider getSavedStateProvider(java.lang.String)>
VIRTUAL edge: virtualinvoke $r4.<androidx.savedstate.SavedStateRegistry: void registerSavedStateProvider(java.lang.String,androidx.savedstate.SavedStateRegistry$SavedStateProvider)>("androidx.lifecycle.internal.SavedStateHandlesProvider", $r5) in <androidx.lifecycle.SavedStateHandleSupport: void enableSavedStateHandles(androidx.savedstate.SavedStateRegistryOwner)> ==> <androidx.savedstate.SavedStateRegistry: void registerSavedStateProvider(java.lang.String,androidx.savedstate.SavedStateRegistry$SavedStateProvider)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "key") in <androidx.savedstate.SavedStateRegistry: androidx.savedstate.SavedStateRegistry$SavedStateProvider getSavedStateProvider(java.lang.String)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r6, $r1) in <androidx.savedstate.SavedStateRegistry: androidx.savedstate.SavedStateRegistry$SavedStateProvider getSavedStateProvider(java.lang.String)> ==> <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r5, "components") in <androidx.savedstate.SavedStateRegistry: androidx.savedstate.SavedStateRegistry$SavedStateProvider getSavedStateProvider(java.lang.String)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<androidx.arch.core.internal.SafeIterableMap: java.util.Iterator iterator()>() in <androidx.savedstate.SavedStateRegistry: androidx.savedstate.SavedStateRegistry$SavedStateProvider getSavedStateProvider(java.lang.String)> ==> <androidx.arch.core.internal.SafeIterableMap: java.util.Iterator iterator()>
CLINIT edge: $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0) in <androidx.arch.core.internal.SafeIterableMap: java.util.Iterator iterator()> ==> <java.lang.Boolean: void <clinit>()>
STATIC edge: $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0) in <androidx.arch.core.internal.SafeIterableMap: java.util.Iterator iterator()> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
INTERFACE edge: $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>() in <androidx.savedstate.SavedStateRegistry: androidx.savedstate.SavedStateRegistry$SavedStateProvider getSavedStateProvider(java.lang.String)> ==> <androidx.arch.core.internal.SafeIterableMap$ListIterator: boolean hasNext()>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>() in <androidx.savedstate.SavedStateRegistry: androidx.savedstate.SavedStateRegistry$SavedStateProvider getSavedStateProvider(java.lang.String)> ==> <androidx.arch.core.internal.SafeIterableMap$ListIterator: java.util.Map$Entry next()>
SPECIAL edge: specialinvoke $r1.<androidx.arch.core.internal.SafeIterableMap$AscendingIterator: void <init>(androidx.arch.core.internal.SafeIterableMap$Entry,androidx.arch.core.internal.SafeIterableMap$Entry)>($r3, $r4) in <androidx.arch.core.internal.SafeIterableMap: java.util.Iterator iterator()> ==> <androidx.arch.core.internal.SafeIterableMap$AscendingIterator: void <init>(androidx.arch.core.internal.SafeIterableMap$Entry,androidx.arch.core.internal.SafeIterableMap$Entry)>
SPECIAL edge: specialinvoke r0.<androidx.arch.core.internal.SafeIterableMap$ListIterator: void <init>(androidx.arch.core.internal.SafeIterableMap$Entry,androidx.arch.core.internal.SafeIterableMap$Entry)>($r1, $r2) in <androidx.arch.core.internal.SafeIterableMap$AscendingIterator: void <init>(androidx.arch.core.internal.SafeIterableMap$Entry,androidx.arch.core.internal.SafeIterableMap$Entry)> ==> <androidx.arch.core.internal.SafeIterableMap$ListIterator: void <init>(androidx.arch.core.internal.SafeIterableMap$Entry,androidx.arch.core.internal.SafeIterableMap$Entry)>
VIRTUAL edge: $r1 = virtualinvoke r0.<androidx.arch.core.internal.SafeIterableMap$ListIterator: androidx.arch.core.internal.SafeIterableMap$Entry forward(androidx.arch.core.internal.SafeIterableMap$Entry)>($r2) in <androidx.arch.core.internal.SafeIterableMap$ListIterator: androidx.arch.core.internal.SafeIterableMap$Entry nextNode()> ==> <androidx.arch.core.internal.SafeIterableMap$AscendingIterator: androidx.arch.core.internal.SafeIterableMap$Entry forward(androidx.arch.core.internal.SafeIterableMap$Entry)>
VIRTUAL edge: virtualinvoke $r2.<androidx.savedstate.SavedStateRegistry: void registerSavedStateProvider(java.lang.String,androidx.savedstate.SavedStateRegistry$SavedStateProvider)>("androidx:appcompat", $r1) in <androidx.appcompat.app.AppCompatActivity: void initDelegate()> ==> <androidx.savedstate.SavedStateRegistry: void registerSavedStateProvider(java.lang.String,androidx.savedstate.SavedStateRegistry$SavedStateProvider)>
VIRTUAL edge: virtualinvoke $r3.<androidx.activity.contextaware.ContextAwareHelper: void dispatchOnContextAvailable(android.content.Context)>(r0) in <androidx.activity.ComponentActivity: void onCreate(android.os.Bundle)> ==> <androidx.activity.contextaware.ContextAwareHelper: void dispatchOnContextAvailable(android.content.Context)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "context") in <androidx.activity.contextaware.ContextAwareHelper: void dispatchOnContextAvailable(android.content.Context)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<androidx.savedstate.SavedStateRegistryController: void performRestore(android.os.Bundle)>($r1) in <androidx.activity.ComponentActivity: void onCreate(android.os.Bundle)> ==> <androidx.savedstate.SavedStateRegistryController: void performRestore(android.os.Bundle)>
CLINIT edge: $r1 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State STARTED> in <androidx.savedstate.SavedStateRegistryController: void performRestore(android.os.Bundle)> ==> <androidx.lifecycle.Lifecycle$State: void <clinit>()>
VIRTUAL edge: virtualinvoke r0.<androidx.savedstate.SavedStateRegistryController: void performAttach()>() in <androidx.savedstate.SavedStateRegistryController: void performRestore(android.os.Bundle)> ==> <androidx.savedstate.SavedStateRegistryController: void performAttach()>
VIRTUAL edge: virtualinvoke $r6.<androidx.savedstate.SavedStateRegistry: void performRestore$savedstate_release(android.os.Bundle)>($r2) in <androidx.savedstate.SavedStateRegistryController: void performRestore(android.os.Bundle)> ==> <androidx.savedstate.SavedStateRegistry: void performRestore$savedstate_release(android.os.Bundle)>
VIRTUAL edge: $r3 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>() in <androidx.savedstate.SavedStateRegistry: void performRestore$savedstate_release(android.os.Bundle)> ==> <java.lang.String: java.lang.String toString()>
INTERFACE edge: $r4 = interfaceinvoke $r3.<androidx.savedstate.SavedStateRegistryOwner: androidx.lifecycle.Lifecycle getLifecycle()>() in <androidx.savedstate.SavedStateRegistryController: void performRestore(android.os.Bundle)> ==> <androidx.fragment.app.Fragment: androidx.lifecycle.Lifecycle getLifecycle()>
INTERFACE edge: $r4 = interfaceinvoke $r3.<androidx.savedstate.SavedStateRegistryOwner: androidx.lifecycle.Lifecycle getLifecycle()>() in <androidx.savedstate.SavedStateRegistryController: void performRestore(android.os.Bundle)> ==> <androidx.activity.ComponentActivity: androidx.lifecycle.Lifecycle getLifecycle()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<androidx.lifecycle.Lifecycle: androidx.lifecycle.Lifecycle$State getCurrentState()>() in <androidx.savedstate.SavedStateRegistryController: void performRestore(android.os.Bundle)> ==> <androidx.lifecycle.LifecycleRegistry: androidx.lifecycle.Lifecycle$State getCurrentState()>
VIRTUAL edge: $z0 = virtualinvoke $r5.<androidx.lifecycle.Lifecycle$State: boolean isAtLeast(androidx.lifecycle.Lifecycle$State)>($r1) in <androidx.savedstate.SavedStateRegistryController: void performRestore(android.os.Bundle)> ==> <androidx.lifecycle.Lifecycle$State: boolean isAtLeast(androidx.lifecycle.Lifecycle$State)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "state") in <androidx.lifecycle.Lifecycle$State: boolean isAtLeast(androidx.lifecycle.Lifecycle$State)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<androidx.lifecycle.Lifecycle$State: int compareTo(java.lang.Enum)>($r2) in <androidx.lifecycle.Lifecycle$State: boolean isAtLeast(androidx.lifecycle.Lifecycle$State)> ==> <java.lang.Enum: int compareTo(java.lang.Enum)>
VIRTUAL edge: virtualinvoke $r4.<androidx.fragment.app.FragmentController: void dispatchCreate()>() in <androidx.fragment.app.FragmentActivity: void onCreate(android.os.Bundle)> ==> <androidx.fragment.app.FragmentController: void dispatchCreate()>
VIRTUAL edge: virtualinvoke $r2.<androidx.fragment.app.FragmentManager: void dispatchCreate()>() in <androidx.fragment.app.FragmentController: void dispatchCreate()> ==> <androidx.fragment.app.FragmentManager: void dispatchCreate()>
CLINIT edge: $z0 = <androidx.fragment.app.FragmentManager: boolean USE_STATE_MANAGER> in <androidx.fragment.app.FragmentManager: void dispatchStateChange(int)> ==> <androidx.fragment.app.FragmentManager: void <clinit>()>
VIRTUAL edge: virtualinvoke r0.<androidx.fragment.app.FragmentManager: void moveToState(int,boolean)>($i0, 0) in <androidx.fragment.app.FragmentManager: void dispatchStateChange(int)> ==> <androidx.fragment.app.FragmentManager: void moveToState(int,boolean)>
SPECIAL edge: $r2 = specialinvoke r0.<androidx.fragment.app.FragmentManager: java.util.Set collectAllSpecialEffectsController()>() in <androidx.fragment.app.FragmentManager: void dispatchStateChange(int)> ==> <androidx.fragment.app.FragmentManager: java.util.Set collectAllSpecialEffectsController()>
VIRTUAL edge: virtualinvoke r0.<androidx.fragment.app.FragmentManager: boolean execPendingActions(boolean)>(1) in <androidx.fragment.app.FragmentManager: void dispatchStateChange(int)> ==> <androidx.fragment.app.FragmentManager: boolean execPendingActions(boolean)>
CLINIT edge: $z0 = <androidx.fragment.app.FragmentManager: boolean USE_STATE_MANAGER> in <androidx.fragment.app.FragmentManager: void moveToState(int,boolean)> ==> <androidx.fragment.app.FragmentManager: void <clinit>()>
STATIC edge: $r10 = staticinvoke <androidx.fragment.app.SpecialEffectsController: androidx.fragment.app.SpecialEffectsController getOrCreateController(android.view.ViewGroup,androidx.fragment.app.SpecialEffectsControllerFactory)>($r8, $r9) in <androidx.fragment.app.FragmentManager: java.util.Set collectAllSpecialEffectsController()> ==> <androidx.fragment.app.SpecialEffectsController: androidx.fragment.app.SpecialEffectsController getOrCreateController(android.view.ViewGroup,androidx.fragment.app.SpecialEffectsControllerFactory)>
SPECIAL edge: specialinvoke r0.<androidx.fragment.app.FragmentManager: void ensureExecReady(boolean)>($z0) in <androidx.fragment.app.FragmentManager: boolean execPendingActions(boolean)> ==> <androidx.fragment.app.FragmentManager: void ensureExecReady(boolean)>
SPECIAL edge: $z0 = specialinvoke r0.<androidx.fragment.app.FragmentManager: boolean generateOpsForPendingActions(java.util.ArrayList,java.util.ArrayList)>($r1, $r2) in <androidx.fragment.app.FragmentManager: boolean execPendingActions(boolean)> ==> <androidx.fragment.app.FragmentManager: boolean generateOpsForPendingActions(java.util.ArrayList,java.util.ArrayList)>
SPECIAL edge: specialinvoke r0.<androidx.fragment.app.FragmentManager: void removeRedundantOperationsAndExecute(java.util.ArrayList,java.util.ArrayList)>($r1, $r2) in <androidx.fragment.app.FragmentManager: boolean execPendingActions(boolean)> ==> <androidx.fragment.app.FragmentManager: void removeRedundantOperationsAndExecute(java.util.ArrayList,java.util.ArrayList)>
SPECIAL edge: specialinvoke r0.<androidx.fragment.app.FragmentManager: void cleanupExec()>() in <androidx.fragment.app.FragmentManager: boolean execPendingActions(boolean)> ==> <androidx.fragment.app.FragmentManager: void cleanupExec()>
SPECIAL edge: specialinvoke r0.<androidx.fragment.app.FragmentManager: void updateOnBackPressedCallbackEnabled()>() in <androidx.fragment.app.FragmentManager: boolean execPendingActions(boolean)> ==> <androidx.fragment.app.FragmentManager: void updateOnBackPressedCallbackEnabled()>
SPECIAL edge: specialinvoke r0.<androidx.fragment.app.FragmentManager: void doPendingDeferredStart()>() in <androidx.fragment.app.FragmentManager: boolean execPendingActions(boolean)> ==> <androidx.fragment.app.FragmentManager: void doPendingDeferredStart()>
SPECIAL edge: specialinvoke r0.<androidx.fragment.app.FragmentManager: void startPendingDeferredFragments()>() in <androidx.fragment.app.FragmentManager: void doPendingDeferredStart()> ==> <androidx.fragment.app.FragmentManager: void startPendingDeferredFragments()>
VIRTUAL edge: virtualinvoke r0.<androidx.fragment.app.FragmentManager: void performPendingDeferredStart(androidx.fragment.app.FragmentStateManager)>($r5) in <androidx.fragment.app.FragmentManager: void startPendingDeferredFragments()> ==> <androidx.fragment.app.FragmentManager: void performPendingDeferredStart(androidx.fragment.app.FragmentStateManager)>
CLINIT edge: $z0 = <androidx.fragment.app.FragmentManager: boolean USE_STATE_MANAGER> in <androidx.fragment.app.FragmentManager: void performPendingDeferredStart(androidx.fragment.app.FragmentStateManager)> ==> <androidx.fragment.app.FragmentManager: void <clinit>()>
VIRTUAL edge: virtualinvoke r0.<androidx.fragment.app.FragmentManager: void moveToState(androidx.fragment.app.Fragment)>($r1) in <androidx.fragment.app.FragmentManager: void performPendingDeferredStart(androidx.fragment.app.FragmentStateManager)> ==> <androidx.fragment.app.FragmentManager: void moveToState(androidx.fragment.app.Fragment)>
VIRTUAL edge: virtualinvoke r0.<androidx.fragment.app.FragmentManager: void moveToState(androidx.fragment.app.Fragment,int)>($r1, $i0) in <androidx.fragment.app.FragmentManager: void moveToState(androidx.fragment.app.Fragment)> ==> <androidx.fragment.app.FragmentManager: void moveToState(androidx.fragment.app.Fragment,int)>
CLINIT edge: $z0 = staticinvoke <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>(3) in <androidx.fragment.app.FragmentManager: void moveToState(androidx.fragment.app.Fragment,int)> ==> <androidx.fragment.app.FragmentManager: void <clinit>()>
STATIC edge: $z0 = staticinvoke <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>(3) in <androidx.fragment.app.FragmentManager: void moveToState(androidx.fragment.app.Fragment,int)> ==> <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>
STATIC edge: staticinvoke <androidx.fragment.app.FragmentAnim: void animateRemoveFragment(androidx.fragment.app.Fragment,androidx.fragment.app.FragmentAnim$AnimationOrAnimator,androidx.fragment.app.FragmentTransition$Callback)>($r1, $r14, $r15) in <androidx.fragment.app.FragmentManager: void moveToState(androidx.fragment.app.Fragment,int)> ==> <androidx.fragment.app.FragmentAnim: void animateRemoveFragment(androidx.fragment.app.Fragment,androidx.fragment.app.FragmentAnim$AnimationOrAnimator,androidx.fragment.app.FragmentTransition$Callback)>
STATIC edge: $r14 = staticinvoke <androidx.fragment.app.FragmentAnim: androidx.fragment.app.FragmentAnim$AnimationOrAnimator loadAnimation(android.content.Context,androidx.fragment.app.Fragment,boolean,boolean)>($r13, $r1, 0, $z0) in <androidx.fragment.app.FragmentManager: void moveToState(androidx.fragment.app.Fragment,int)> ==> <androidx.fragment.app.FragmentAnim: androidx.fragment.app.FragmentAnim$AnimationOrAnimator loadAnimation(android.content.Context,androidx.fragment.app.Fragment,boolean,boolean)>
STATIC edge: $z0 = staticinvoke <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>(3) in <androidx.fragment.app.FragmentManager: void moveToState(androidx.fragment.app.Fragment,int)> ==> <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>
CLINIT edge: $z0 = staticinvoke <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>(3) in <androidx.fragment.app.FragmentManager: void moveToState(androidx.fragment.app.Fragment,int)> ==> <androidx.fragment.app.FragmentManager: void <clinit>()>
CLINIT edge: $z0 = staticinvoke <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>(2) in <androidx.fragment.app.FragmentManager: void moveToState(androidx.fragment.app.Fragment,int)> ==> <androidx.fragment.app.FragmentManager: void <clinit>()>
STATIC edge: $i1 = staticinvoke <androidx.fragment.app.FragmentAnim: int getNextAnim(androidx.fragment.app.Fragment,boolean,boolean)>($r2, $z0, $z1) in <androidx.fragment.app.FragmentAnim: androidx.fragment.app.FragmentAnim$AnimationOrAnimator loadAnimation(android.content.Context,androidx.fragment.app.Fragment,boolean,boolean)> ==> <androidx.fragment.app.FragmentAnim: int getNextAnim(androidx.fragment.app.Fragment,boolean,boolean)>
STATIC edge: $i2 = staticinvoke <androidx.fragment.app.FragmentAnim: int transitToAnimResourceId(int,boolean)>($i0, $z0) in <androidx.fragment.app.FragmentAnim: androidx.fragment.app.FragmentAnim$AnimationOrAnimator loadAnimation(android.content.Context,androidx.fragment.app.Fragment,boolean,boolean)> ==> <androidx.fragment.app.FragmentAnim: int transitToAnimResourceId(int,boolean)>
VIRTUAL edge: $z0 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r10) in <androidx.fragment.app.FragmentAnim: androidx.fragment.app.FragmentAnim$AnimationOrAnimator loadAnimation(android.content.Context,androidx.fragment.app.Fragment,boolean,boolean)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r7.<androidx.fragment.app.FragmentAnim$AnimationOrAnimator: void <init>(android.view.animation.Animation)>($r6) in <androidx.fragment.app.FragmentAnim: androidx.fragment.app.FragmentAnim$AnimationOrAnimator loadAnimation(android.content.Context,androidx.fragment.app.Fragment,boolean,boolean)> ==> <androidx.fragment.app.FragmentAnim$AnimationOrAnimator: void <init>(android.view.animation.Animation)>
SPECIAL edge: specialinvoke $r7.<androidx.fragment.app.FragmentAnim$AnimationOrAnimator: void <init>(android.animation.Animator)>($r8) in <androidx.fragment.app.FragmentAnim: androidx.fragment.app.FragmentAnim$AnimationOrAnimator loadAnimation(android.content.Context,androidx.fragment.app.Fragment,boolean,boolean)> ==> <androidx.fragment.app.FragmentAnim$AnimationOrAnimator: void <init>(android.animation.Animator)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.fragment.app.FragmentAnim$AnimationOrAnimator: void <init>(android.animation.Animator)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.fragment.app.FragmentAnim$AnimationOrAnimator: void <init>(android.view.animation.Animation)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r12.<androidx.fragment.app.FragmentAnim$3: void <init>(android.view.ViewGroup,android.view.View,androidx.fragment.app.Fragment,androidx.fragment.app.FragmentTransition$Callback,androidx.core.os.CancellationSignal)>($r1, $r2, $r5, $r0, $r3) in <androidx.fragment.app.FragmentAnim: void animateRemoveFragment(androidx.fragment.app.Fragment,androidx.fragment.app.FragmentAnim$AnimationOrAnimator,androidx.fragment.app.FragmentTransition$Callback)> ==> <androidx.fragment.app.FragmentAnim$3: void <init>(android.view.ViewGroup,android.view.View,androidx.fragment.app.Fragment,androidx.fragment.app.FragmentTransition$Callback,androidx.core.os.CancellationSignal)>
SPECIAL edge: specialinvoke $r10.<androidx.fragment.app.FragmentAnim$2: void <init>(android.view.ViewGroup,androidx.fragment.app.Fragment,androidx.fragment.app.FragmentTransition$Callback,androidx.core.os.CancellationSignal)>($r1, $r5, $r0, $r3) in <androidx.fragment.app.FragmentAnim: void animateRemoveFragment(androidx.fragment.app.Fragment,androidx.fragment.app.FragmentAnim$AnimationOrAnimator,androidx.fragment.app.FragmentTransition$Callback)> ==> <androidx.fragment.app.FragmentAnim$2: void <init>(android.view.ViewGroup,androidx.fragment.app.Fragment,androidx.fragment.app.FragmentTransition$Callback,androidx.core.os.CancellationSignal)>
SPECIAL edge: specialinvoke $r9.<androidx.fragment.app.FragmentAnim$EndViewTransitionAnimation: void <init>(android.view.animation.Animation,android.view.ViewGroup,android.view.View)>($r8, $r1, $r2) in <androidx.fragment.app.FragmentAnim: void animateRemoveFragment(androidx.fragment.app.Fragment,androidx.fragment.app.FragmentAnim$AnimationOrAnimator,androidx.fragment.app.FragmentTransition$Callback)> ==> <androidx.fragment.app.FragmentAnim$EndViewTransitionAnimation: void <init>(android.view.animation.Animation,android.view.ViewGroup,android.view.View)>
EXECUTOR edge: virtualinvoke $r2.<android.view.ViewGroup: boolean post(java.lang.Runnable)>(r0) in <androidx.fragment.app.FragmentAnim$EndViewTransitionAnimation: void <init>(android.view.animation.Animation,android.view.ViewGroup,android.view.View)> ==> <androidx.fragment.app.FragmentAnim$EndViewTransitionAnimation: void run()>
EXECUTOR edge: virtualinvoke $r2.<android.view.ViewGroup: boolean post(java.lang.Runnable)>(r0) in <androidx.fragment.app.FragmentAnim$EndViewTransitionAnimation: void run()> ==> <androidx.fragment.app.FragmentAnim$EndViewTransitionAnimation: void run()>
SPECIAL edge: specialinvoke $r7.<androidx.fragment.app.FragmentAnim$1: void <init>(androidx.fragment.app.Fragment)>($r5) in <androidx.fragment.app.FragmentAnim: void animateRemoveFragment(androidx.fragment.app.Fragment,androidx.fragment.app.FragmentAnim$AnimationOrAnimator,androidx.fragment.app.FragmentTransition$Callback)> ==> <androidx.fragment.app.FragmentAnim$1: void <init>(androidx.fragment.app.Fragment)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.fragment.app.FragmentAnim$1: void <init>(androidx.fragment.app.Fragment)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r3.<androidx.core.os.CancellationSignal: void <init>()>() in <androidx.fragment.app.FragmentAnim: void animateRemoveFragment(androidx.fragment.app.Fragment,androidx.fragment.app.FragmentAnim$AnimationOrAnimator,androidx.fragment.app.FragmentTransition$Callback)> ==> <androidx.core.os.CancellationSignal: void <init>()>
VIRTUAL edge: virtualinvoke $r3.<androidx.core.os.CancellationSignal: void setOnCancelListener(androidx.core.os.CancellationSignal$OnCancelListener)>($r7) in <androidx.fragment.app.FragmentAnim: void animateRemoveFragment(androidx.fragment.app.Fragment,androidx.fragment.app.FragmentAnim$AnimationOrAnimator,androidx.fragment.app.FragmentTransition$Callback)> ==> <androidx.core.os.CancellationSignal: void setOnCancelListener(androidx.core.os.CancellationSignal$OnCancelListener)>
INTERFACE edge: interfaceinvoke $r1.<androidx.core.os.CancellationSignal$OnCancelListener: void onCancel()>() in <androidx.core.os.CancellationSignal: void setOnCancelListener(androidx.core.os.CancellationSignal$OnCancelListener)> ==> <androidx.fragment.app.FragmentAnim$1: void onCancel()>
SPECIAL edge: specialinvoke r0.<androidx.core.os.CancellationSignal: void waitForCancelFinishedLocked()>() in <androidx.core.os.CancellationSignal: void setOnCancelListener(androidx.core.os.CancellationSignal$OnCancelListener)> ==> <androidx.core.os.CancellationSignal: void waitForCancelFinishedLocked()>
VIRTUAL edge: virtualinvoke r0.<java.lang.Object: void wait()>() in <androidx.core.os.CancellationSignal: void waitForCancelFinishedLocked()> ==> <java.lang.Object: void wait()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: void wait()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r4.<androidx.fragment.app.FragmentStateManager: void <init>(androidx.fragment.app.FragmentLifecycleCallbacksDispatcher,androidx.fragment.app.FragmentStore,androidx.fragment.app.Fragment)>($r6, $r2, $r1) in <androidx.fragment.app.FragmentManager: void moveToState(androidx.fragment.app.Fragment,int)> ==> <androidx.fragment.app.FragmentStateManager: void <init>(androidx.fragment.app.FragmentLifecycleCallbacksDispatcher,androidx.fragment.app.FragmentStore,androidx.fragment.app.Fragment)>
VIRTUAL edge: virtualinvoke $r4.<androidx.fragment.app.FragmentStateManager: void setFragmentManagerState(int)>(1) in <androidx.fragment.app.FragmentManager: void moveToState(androidx.fragment.app.Fragment,int)> ==> <androidx.fragment.app.FragmentStateManager: void setFragmentManagerState(int)>
VIRTUAL edge: $i2 = virtualinvoke $r5.<androidx.fragment.app.FragmentStateManager: int computeExpectedState()>() in <androidx.fragment.app.FragmentManager: void moveToState(androidx.fragment.app.Fragment,int)> ==> <androidx.fragment.app.FragmentStateManager: int computeExpectedState()>
VIRTUAL edge: virtualinvoke $r5.<androidx.fragment.app.FragmentStateManager: void attach()>() in <androidx.fragment.app.FragmentManager: void moveToState(androidx.fragment.app.Fragment,int)> ==> <androidx.fragment.app.FragmentStateManager: void attach()>
VIRTUAL edge: virtualinvoke $r5.<androidx.fragment.app.FragmentStateManager: void create()>() in <androidx.fragment.app.FragmentManager: void moveToState(androidx.fragment.app.Fragment,int)> ==> <androidx.fragment.app.FragmentStateManager: void create()>
VIRTUAL edge: virtualinvoke $r5.<androidx.fragment.app.FragmentStateManager: void ensureInflatedView()>() in <androidx.fragment.app.FragmentManager: void moveToState(androidx.fragment.app.Fragment,int)> ==> <androidx.fragment.app.FragmentStateManager: void ensureInflatedView()>
VIRTUAL edge: virtualinvoke $r5.<androidx.fragment.app.FragmentStateManager: void createView()>() in <androidx.fragment.app.FragmentManager: void moveToState(androidx.fragment.app.Fragment,int)> ==> <androidx.fragment.app.FragmentStateManager: void createView()>
VIRTUAL edge: virtualinvoke $r5.<androidx.fragment.app.FragmentStateManager: void activityCreated()>() in <androidx.fragment.app.FragmentManager: void moveToState(androidx.fragment.app.Fragment,int)> ==> <androidx.fragment.app.FragmentStateManager: void activityCreated()>
VIRTUAL edge: virtualinvoke $r5.<androidx.fragment.app.FragmentStateManager: void start()>() in <androidx.fragment.app.FragmentManager: void moveToState(androidx.fragment.app.Fragment,int)> ==> <androidx.fragment.app.FragmentStateManager: void start()>
VIRTUAL edge: virtualinvoke $r5.<androidx.fragment.app.FragmentStateManager: void resume()>() in <androidx.fragment.app.FragmentManager: void moveToState(androidx.fragment.app.Fragment,int)> ==> <androidx.fragment.app.FragmentStateManager: void resume()>
VIRTUAL edge: virtualinvoke $r5.<androidx.fragment.app.FragmentStateManager: void pause()>() in <androidx.fragment.app.FragmentManager: void moveToState(androidx.fragment.app.Fragment,int)> ==> <androidx.fragment.app.FragmentStateManager: void pause()>
VIRTUAL edge: virtualinvoke $r5.<androidx.fragment.app.FragmentStateManager: void stop()>() in <androidx.fragment.app.FragmentManager: void moveToState(androidx.fragment.app.Fragment,int)> ==> <androidx.fragment.app.FragmentStateManager: void stop()>
VIRTUAL edge: virtualinvoke $r5.<androidx.fragment.app.FragmentStateManager: void saveViewState()>() in <androidx.fragment.app.FragmentManager: void moveToState(androidx.fragment.app.Fragment,int)> ==> <androidx.fragment.app.FragmentStateManager: void saveViewState()>
VIRTUAL edge: virtualinvoke $r5.<androidx.fragment.app.FragmentStateManager: void destroyFragmentView()>() in <androidx.fragment.app.FragmentManager: void moveToState(androidx.fragment.app.Fragment,int)> ==> <androidx.fragment.app.FragmentStateManager: void destroyFragmentView()>
VIRTUAL edge: virtualinvoke $r5.<androidx.fragment.app.FragmentStateManager: void destroy()>() in <androidx.fragment.app.FragmentManager: void moveToState(androidx.fragment.app.Fragment,int)> ==> <androidx.fragment.app.FragmentStateManager: void destroy()>
SPECIAL edge: specialinvoke r0.<androidx.fragment.app.FragmentManager: void cancelExitAnimation(androidx.fragment.app.Fragment)>($r1) in <androidx.fragment.app.FragmentManager: void moveToState(androidx.fragment.app.Fragment,int)> ==> <androidx.fragment.app.FragmentManager: void cancelExitAnimation(androidx.fragment.app.Fragment)>
SPECIAL edge: specialinvoke r0.<androidx.fragment.app.FragmentManager: void destroyFragmentView(androidx.fragment.app.Fragment)>($r1) in <androidx.fragment.app.FragmentManager: void cancelExitAnimation(androidx.fragment.app.Fragment)> ==> <androidx.fragment.app.FragmentManager: void destroyFragmentView(androidx.fragment.app.Fragment)>
VIRTUAL edge: virtualinvoke $r3.<androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void dispatchOnFragmentViewDestroyed(androidx.fragment.app.Fragment,boolean)>($r1, 0) in <androidx.fragment.app.FragmentManager: void destroyFragmentView(androidx.fragment.app.Fragment)> ==> <androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void dispatchOnFragmentViewDestroyed(androidx.fragment.app.Fragment,boolean)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<androidx.fragment.app.FragmentManager: androidx.fragment.app.Fragment getParent()>() in <androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void dispatchOnFragmentViewDestroyed(androidx.fragment.app.Fragment,boolean)> ==> <androidx.fragment.app.FragmentManager: androidx.fragment.app.Fragment getParent()>
VIRTUAL edge: $r4 = virtualinvoke $r2.<androidx.fragment.app.FragmentManager: androidx.fragment.app.FragmentLifecycleCallbacksDispatcher getLifecycleCallbacksDispatcher()>() in <androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void dispatchOnFragmentViewDestroyed(androidx.fragment.app.Fragment,boolean)> ==> <androidx.fragment.app.FragmentManager: androidx.fragment.app.FragmentLifecycleCallbacksDispatcher getLifecycleCallbacksDispatcher()>
INTERFACE edge: interfaceinvoke $r0.<androidx.fragment.app.FragmentTransition$Callback: void onStart(androidx.fragment.app.Fragment,androidx.core.os.CancellationSignal)>($r5, $r3) in <androidx.fragment.app.FragmentAnim: void animateRemoveFragment(androidx.fragment.app.Fragment,androidx.fragment.app.FragmentAnim$AnimationOrAnimator,androidx.fragment.app.FragmentTransition$Callback)> ==> <androidx.fragment.app.FragmentManager$2: void onStart(androidx.fragment.app.Fragment,androidx.core.os.CancellationSignal)>
VIRTUAL edge: virtualinvoke $r3.<androidx.fragment.app.FragmentManager: void addCancellationSignal(androidx.fragment.app.Fragment,androidx.core.os.CancellationSignal)>($r1, $r2) in <androidx.fragment.app.FragmentManager$2: void onStart(androidx.fragment.app.Fragment,androidx.core.os.CancellationSignal)> ==> <androidx.fragment.app.FragmentManager: void addCancellationSignal(androidx.fragment.app.Fragment,androidx.core.os.CancellationSignal)>
VIRTUAL edge: $z0 = virtualinvoke $r10.<androidx.fragment.app.FragmentHostCallback: boolean onShouldSaveFragmentState(androidx.fragment.app.Fragment)>($r1) in <androidx.fragment.app.FragmentManager: void moveToState(androidx.fragment.app.Fragment,int)> ==> <androidx.fragment.app.FragmentActivity$HostCallbacks: boolean onShouldSaveFragmentState(androidx.fragment.app.Fragment)>
VIRTUAL edge: $r13 = virtualinvoke $r10.<androidx.fragment.app.FragmentHostCallback: android.content.Context getContext()>() in <androidx.fragment.app.FragmentManager: void moveToState(androidx.fragment.app.Fragment,int)> ==> <androidx.fragment.app.FragmentHostCallback: android.content.Context getContext()>
VIRTUAL edge: $r9 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>() in <androidx.fragment.app.FragmentAnim: androidx.fragment.app.FragmentAnim$AnimationOrAnimator loadAnimation(android.content.Context,androidx.fragment.app.Fragment,boolean,boolean)> ==> <androidx.appcompat.app.AppCompatActivity: android.content.res.Resources getResources()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<android.content.res.Resources: java.lang.String getResourceTypeName(int)>($i2) in <androidx.fragment.app.FragmentAnim: androidx.fragment.app.FragmentAnim$AnimationOrAnimator loadAnimation(android.content.Context,androidx.fragment.app.Fragment,boolean,boolean)> ==> <androidx.appcompat.widget.VectorEnabledTintResources: java.lang.String getResourceTypeName(int)>
SPECIAL edge: $r1 = specialinvoke r0.<androidx.appcompat.widget.ResourcesWrapper: java.lang.String getResourceTypeName(int)>($i0) in <androidx.appcompat.widget.VectorEnabledTintResources: java.lang.String getResourceTypeName(int)> ==> <androidx.appcompat.widget.ResourcesWrapper: java.lang.String getResourceTypeName(int)>
VIRTUAL edge: $r4 = virtualinvoke $r2.<androidx.fragment.app.FragmentStore: androidx.fragment.app.FragmentStateManager getFragmentStateManager(java.lang.String)>($r3) in <androidx.fragment.app.FragmentManager: void moveToState(androidx.fragment.app.Fragment,int)> ==> <androidx.fragment.app.FragmentStore: androidx.fragment.app.FragmentStateManager getFragmentStateManager(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<androidx.fragment.app.FragmentStore: java.util.List getActiveFragmentStateManagers()>() in <androidx.fragment.app.FragmentManager: void startPendingDeferredFragments()> ==> <androidx.fragment.app.FragmentStore: java.util.List getActiveFragmentStateManagers()>
SPECIAL edge: specialinvoke r0.<androidx.fragment.app.FragmentManager: void executePostponedTransaction(java.util.ArrayList,java.util.ArrayList)>($r1, $r2) in <androidx.fragment.app.FragmentManager: void removeRedundantOperationsAndExecute(java.util.ArrayList,java.util.ArrayList)> ==> <androidx.fragment.app.FragmentManager: void executePostponedTransaction(java.util.ArrayList,java.util.ArrayList)>
SPECIAL edge: specialinvoke r0.<androidx.fragment.app.FragmentManager: void executeOpsTogether(java.util.ArrayList,java.util.ArrayList,int,int)>($r1, $r2, $i1, $i2) in <androidx.fragment.app.FragmentManager: void removeRedundantOperationsAndExecute(java.util.ArrayList,java.util.ArrayList)> ==> <androidx.fragment.app.FragmentManager: void executeOpsTogether(java.util.ArrayList,java.util.ArrayList,int,int)>
CLINIT edge: $z2 = <androidx.fragment.app.FragmentManager: boolean USE_STATE_MANAGER> in <androidx.fragment.app.FragmentManager: void executeOpsTogether(java.util.ArrayList,java.util.ArrayList,int,int)> ==> <androidx.fragment.app.FragmentManager: void <clinit>()>
STATIC edge: staticinvoke <androidx.fragment.app.FragmentTransition: void startTransitions(android.content.Context,androidx.fragment.app.FragmentContainer,java.util.ArrayList,java.util.ArrayList,int,int,boolean,androidx.fragment.app.FragmentTransition$Callback)>($r15, $r16, $r1, $r2, $i0, $i4, 1, $r17) in <androidx.fragment.app.FragmentManager: void executeOpsTogether(java.util.ArrayList,java.util.ArrayList,int,int)> ==> <androidx.fragment.app.FragmentTransition: void startTransitions(android.content.Context,androidx.fragment.app.FragmentContainer,java.util.ArrayList,java.util.ArrayList,int,int,boolean,androidx.fragment.app.FragmentTransition$Callback)>
STATIC edge: staticinvoke <androidx.fragment.app.FragmentManager: void executeOps(java.util.ArrayList,java.util.ArrayList,int,int)>($r1, $r2, $i0, $i1) in <androidx.fragment.app.FragmentManager: void executeOpsTogether(java.util.ArrayList,java.util.ArrayList,int,int)> ==> <androidx.fragment.app.FragmentManager: void executeOps(java.util.ArrayList,java.util.ArrayList,int,int)>
CLINIT edge: staticinvoke <androidx.fragment.app.FragmentTransition: void startTransitions(android.content.Context,androidx.fragment.app.FragmentContainer,java.util.ArrayList,java.util.ArrayList,int,int,boolean,androidx.fragment.app.FragmentTransition$Callback)>($r15, $r16, $r1, $r2, $i0, $i4, 1, $r17) in <androidx.fragment.app.FragmentManager: void executeOpsTogether(java.util.ArrayList,java.util.ArrayList,int,int)> ==> <androidx.fragment.app.FragmentTransition: void <clinit>()>
CLINIT edge: $r21 = new androidx.collection.ArraySet in <androidx.fragment.app.FragmentManager: void executeOpsTogether(java.util.ArrayList,java.util.ArrayList,int,int)> ==> <androidx.collection.ArraySet: void <clinit>()>
CLINIT edge: staticinvoke <androidx.fragment.app.FragmentManager: void executeOps(java.util.ArrayList,java.util.ArrayList,int,int)>($r1, $r2, $i0, $i1) in <androidx.fragment.app.FragmentManager: void executeOpsTogether(java.util.ArrayList,java.util.ArrayList,int,int)> ==> <androidx.fragment.app.FragmentManager: void <clinit>()>
CLINIT edge: staticinvoke <androidx.fragment.app.FragmentTransition: void startTransitions(android.content.Context,androidx.fragment.app.FragmentContainer,java.util.ArrayList,java.util.ArrayList,int,int,boolean,androidx.fragment.app.FragmentTransition$Callback)>($r15, $r16, $r1, $r2, $i0, $i1, 0, $r17) in <androidx.fragment.app.FragmentManager: void executeOpsTogether(java.util.ArrayList,java.util.ArrayList,int,int)> ==> <androidx.fragment.app.FragmentTransition: void <clinit>()>
CLINIT edge: staticinvoke <androidx.fragment.app.FragmentTransition: void calculatePopFragments(androidx.fragment.app.BackStackRecord,android.util.SparseArray,boolean)>($r7, $r4, $z0) in <androidx.fragment.app.FragmentTransition: void startTransitions(android.content.Context,androidx.fragment.app.FragmentContainer,java.util.ArrayList,java.util.ArrayList,int,int,boolean,androidx.fragment.app.FragmentTransition$Callback)> ==> <androidx.fragment.app.FragmentTransition: void <clinit>()>
STATIC edge: staticinvoke <androidx.fragment.app.FragmentTransition: void configureTransitionsOrdered(android.view.ViewGroup,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$Callback)>($r13, $r11, $r9, $r10, $r3) in <androidx.fragment.app.FragmentTransition: void startTransitions(android.content.Context,androidx.fragment.app.FragmentContainer,java.util.ArrayList,java.util.ArrayList,int,int,boolean,androidx.fragment.app.FragmentTransition$Callback)> ==> <androidx.fragment.app.FragmentTransition: void configureTransitionsOrdered(android.view.ViewGroup,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$Callback)>
STATIC edge: staticinvoke <androidx.fragment.app.FragmentTransition: void configureTransitionsReordered(android.view.ViewGroup,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$Callback)>($r13, $r11, $r9, $r10, $r3) in <androidx.fragment.app.FragmentTransition: void startTransitions(android.content.Context,androidx.fragment.app.FragmentContainer,java.util.ArrayList,java.util.ArrayList,int,int,boolean,androidx.fragment.app.FragmentTransition$Callback)> ==> <androidx.fragment.app.FragmentTransition: void configureTransitionsReordered(android.view.ViewGroup,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$Callback)>
STATIC edge: $r10 = staticinvoke <androidx.fragment.app.FragmentTransition: androidx.collection.ArrayMap calculateNameOverrides(int,java.util.ArrayList,java.util.ArrayList,int,int)>($i4, $r1, $r2, $i0, $i1) in <androidx.fragment.app.FragmentTransition: void startTransitions(android.content.Context,androidx.fragment.app.FragmentContainer,java.util.ArrayList,java.util.ArrayList,int,int,boolean,androidx.fragment.app.FragmentTransition$Callback)> ==> <androidx.fragment.app.FragmentTransition: androidx.collection.ArrayMap calculateNameOverrides(int,java.util.ArrayList,java.util.ArrayList,int,int)>
STATIC edge: staticinvoke <androidx.fragment.app.FragmentTransition: void calculateFragments(androidx.fragment.app.BackStackRecord,android.util.SparseArray,boolean)>($r7, $r4, $z0) in <androidx.fragment.app.FragmentTransition: void startTransitions(android.content.Context,androidx.fragment.app.FragmentContainer,java.util.ArrayList,java.util.ArrayList,int,int,boolean,androidx.fragment.app.FragmentTransition$Callback)> ==> <androidx.fragment.app.FragmentTransition: void calculateFragments(androidx.fragment.app.BackStackRecord,android.util.SparseArray,boolean)>
STATIC edge: staticinvoke <androidx.fragment.app.FragmentTransition: void calculatePopFragments(androidx.fragment.app.BackStackRecord,android.util.SparseArray,boolean)>($r7, $r4, $z0) in <androidx.fragment.app.FragmentTransition: void startTransitions(android.content.Context,androidx.fragment.app.FragmentContainer,java.util.ArrayList,java.util.ArrayList,int,int,boolean,androidx.fragment.app.FragmentTransition$Callback)> ==> <androidx.fragment.app.FragmentTransition: void calculatePopFragments(androidx.fragment.app.BackStackRecord,android.util.SparseArray,boolean)>
STATIC edge: $r0 = staticinvoke <androidx.fragment.app.FragmentTransition: androidx.fragment.app.FragmentTransitionImpl resolveSupportImpl()>() in <androidx.fragment.app.FragmentTransition: void <clinit>()> ==> <androidx.fragment.app.FragmentTransition: androidx.fragment.app.FragmentTransitionImpl resolveSupportImpl()>
CLINIT edge: $r7 = staticinvoke <androidx.fragment.app.FragmentTransition: androidx.fragment.app.FragmentTransitionImpl chooseImpl(androidx.fragment.app.Fragment,androidx.fragment.app.Fragment)>($r6, $r5) in <androidx.fragment.app.FragmentTransition: void configureTransitionsOrdered(android.view.ViewGroup,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$Callback)> ==> <androidx.fragment.app.FragmentTransition: void <clinit>()>
STATIC edge: staticinvoke <androidx.fragment.app.FragmentTransition: void scheduleTargetChange(androidx.fragment.app.FragmentTransitionImpl,android.view.ViewGroup,androidx.fragment.app.Fragment,android.view.View,java.util.ArrayList,java.lang.Object,java.util.ArrayList,java.lang.Object,java.util.ArrayList)>($r7, $r0, $r5, $r2, $r11, $r8, $r10, $r9, $r14) in <androidx.fragment.app.FragmentTransition: void configureTransitionsOrdered(android.view.ViewGroup,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$Callback)> ==> <androidx.fragment.app.FragmentTransition: void scheduleTargetChange(androidx.fragment.app.FragmentTransitionImpl,android.view.ViewGroup,androidx.fragment.app.Fragment,android.view.View,java.util.ArrayList,java.lang.Object,java.util.ArrayList,java.lang.Object,java.util.ArrayList)>
STATIC edge: $r13 = staticinvoke <androidx.fragment.app.FragmentTransition: java.lang.Object mergeTransitions(androidx.fragment.app.FragmentTransitionImpl,java.lang.Object,java.lang.Object,java.lang.Object,androidx.fragment.app.Fragment,boolean)>($r7, $r8, $r13, $r12, $r5, $z0) in <androidx.fragment.app.FragmentTransition: void configureTransitionsOrdered(android.view.ViewGroup,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$Callback)> ==> <androidx.fragment.app.FragmentTransition: java.lang.Object mergeTransitions(androidx.fragment.app.FragmentTransitionImpl,java.lang.Object,java.lang.Object,java.lang.Object,androidx.fragment.app.Fragment,boolean)>
STATIC edge: $r14 = staticinvoke <androidx.fragment.app.FragmentTransition: java.util.ArrayList configureEnteringExitingViews(androidx.fragment.app.FragmentTransitionImpl,java.lang.Object,androidx.fragment.app.Fragment,java.util.ArrayList,android.view.View)>($r7, $r13, $r6, $r10, $r2) in <androidx.fragment.app.FragmentTransition: void configureTransitionsOrdered(android.view.ViewGroup,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$Callback)> ==> <androidx.fragment.app.FragmentTransition: java.util.ArrayList configureEnteringExitingViews(androidx.fragment.app.FragmentTransitionImpl,java.lang.Object,androidx.fragment.app.Fragment,java.util.ArrayList,android.view.View)>
STATIC edge: $r12 = staticinvoke <androidx.fragment.app.FragmentTransition: java.lang.Object configureSharedElementsOrdered(androidx.fragment.app.FragmentTransitionImpl,android.view.ViewGroup,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,java.util.ArrayList,java.util.ArrayList,java.lang.Object,java.lang.Object)>($r7, $r0, $r2, $r3, $r1, $r10, $r11, $r8, $r9) in <androidx.fragment.app.FragmentTransition: void configureTransitionsOrdered(android.view.ViewGroup,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$Callback)> ==> <androidx.fragment.app.FragmentTransition: java.lang.Object configureSharedElementsOrdered(androidx.fragment.app.FragmentTransitionImpl,android.view.ViewGroup,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,java.util.ArrayList,java.util.ArrayList,java.lang.Object,java.lang.Object)>
STATIC edge: $r9 = staticinvoke <androidx.fragment.app.FragmentTransition: java.lang.Object getExitTransition(androidx.fragment.app.FragmentTransitionImpl,androidx.fragment.app.Fragment,boolean)>($r7, $r6, $z1) in <androidx.fragment.app.FragmentTransition: void configureTransitionsOrdered(android.view.ViewGroup,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$Callback)> ==> <androidx.fragment.app.FragmentTransition: java.lang.Object getExitTransition(androidx.fragment.app.FragmentTransitionImpl,androidx.fragment.app.Fragment,boolean)>
STATIC edge: $r8 = staticinvoke <androidx.fragment.app.FragmentTransition: java.lang.Object getEnterTransition(androidx.fragment.app.FragmentTransitionImpl,androidx.fragment.app.Fragment,boolean)>($r7, $r5, $z0) in <androidx.fragment.app.FragmentTransition: void configureTransitionsOrdered(android.view.ViewGroup,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$Callback)> ==> <androidx.fragment.app.FragmentTransition: java.lang.Object getEnterTransition(androidx.fragment.app.FragmentTransitionImpl,androidx.fragment.app.Fragment,boolean)>
STATIC edge: $r7 = staticinvoke <androidx.fragment.app.FragmentTransition: androidx.fragment.app.FragmentTransitionImpl chooseImpl(androidx.fragment.app.Fragment,androidx.fragment.app.Fragment)>($r6, $r5) in <androidx.fragment.app.FragmentTransition: void configureTransitionsOrdered(android.view.ViewGroup,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$Callback)> ==> <androidx.fragment.app.FragmentTransition: androidx.fragment.app.FragmentTransitionImpl chooseImpl(androidx.fragment.app.Fragment,androidx.fragment.app.Fragment)>
CLINIT edge: $r8 = staticinvoke <androidx.fragment.app.FragmentTransition: androidx.fragment.app.FragmentTransitionImpl chooseImpl(androidx.fragment.app.Fragment,androidx.fragment.app.Fragment)>($r7, $r6) in <androidx.fragment.app.FragmentTransition: void configureTransitionsReordered(android.view.ViewGroup,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$Callback)> ==> <androidx.fragment.app.FragmentTransition: void <clinit>()>
STATIC edge: staticinvoke <androidx.fragment.app.FragmentTransition: void setViewVisibility(java.util.ArrayList,int)>($r15, 0) in <androidx.fragment.app.FragmentTransition: void configureTransitionsReordered(android.view.ViewGroup,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$Callback)> ==> <androidx.fragment.app.FragmentTransition: void setViewVisibility(java.util.ArrayList,int)>
STATIC edge: staticinvoke <androidx.fragment.app.FragmentTransition: void replaceHide(androidx.fragment.app.FragmentTransitionImpl,java.lang.Object,androidx.fragment.app.Fragment,java.util.ArrayList)>($r8, $r13, $r7, $r14) in <androidx.fragment.app.FragmentTransition: void configureTransitionsReordered(android.view.ViewGroup,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$Callback)> ==> <androidx.fragment.app.FragmentTransition: void replaceHide(androidx.fragment.app.FragmentTransitionImpl,java.lang.Object,androidx.fragment.app.Fragment,java.util.ArrayList)>
STATIC edge: $r11 = staticinvoke <androidx.fragment.app.FragmentTransition: java.lang.Object mergeTransitions(androidx.fragment.app.FragmentTransitionImpl,java.lang.Object,java.lang.Object,java.lang.Object,androidx.fragment.app.Fragment,boolean)>($r8, $r10, $r13, $r12, $r6, $z0) in <androidx.fragment.app.FragmentTransition: void configureTransitionsReordered(android.view.ViewGroup,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$Callback)> ==> <androidx.fragment.app.FragmentTransition: java.lang.Object mergeTransitions(androidx.fragment.app.FragmentTransitionImpl,java.lang.Object,java.lang.Object,java.lang.Object,androidx.fragment.app.Fragment,boolean)>
STATIC edge: staticinvoke <androidx.fragment.app.FragmentTransition: void setViewVisibility(java.util.ArrayList,int)>($r15, 4) in <androidx.fragment.app.FragmentTransition: void configureTransitionsReordered(android.view.ViewGroup,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$Callback)> ==> <androidx.fragment.app.FragmentTransition: void setViewVisibility(java.util.ArrayList,int)>
STATIC edge: $r15 = staticinvoke <androidx.fragment.app.FragmentTransition: java.util.ArrayList configureEnteringExitingViews(androidx.fragment.app.FragmentTransitionImpl,java.lang.Object,androidx.fragment.app.Fragment,java.util.ArrayList,android.view.View)>($r8, $r10, $r6, $r4, $r1) in <androidx.fragment.app.FragmentTransition: void configureTransitionsReordered(android.view.ViewGroup,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$Callback)> ==> <androidx.fragment.app.FragmentTransition: java.util.ArrayList configureEnteringExitingViews(androidx.fragment.app.FragmentTransitionImpl,java.lang.Object,androidx.fragment.app.Fragment,java.util.ArrayList,android.view.View)>
STATIC edge: $r12 = staticinvoke <androidx.fragment.app.FragmentTransition: java.lang.Object configureSharedElementsReordered(androidx.fragment.app.FragmentTransitionImpl,android.view.ViewGroup,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,java.util.ArrayList,java.util.ArrayList,java.lang.Object,java.lang.Object)>($r8, $r0, $r1, $r2, $r5, $r9, $r4, $r10, $r11) in <androidx.fragment.app.FragmentTransition: void configureTransitionsReordered(android.view.ViewGroup,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$Callback)> ==> <androidx.fragment.app.FragmentTransition: java.lang.Object configureSharedElementsReordered(androidx.fragment.app.FragmentTransitionImpl,android.view.ViewGroup,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,java.util.ArrayList,java.util.ArrayList,java.lang.Object,java.lang.Object)>
STATIC edge: $r11 = staticinvoke <androidx.fragment.app.FragmentTransition: java.lang.Object getExitTransition(androidx.fragment.app.FragmentTransitionImpl,androidx.fragment.app.Fragment,boolean)>($r8, $r7, $z1) in <androidx.fragment.app.FragmentTransition: void configureTransitionsReordered(android.view.ViewGroup,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$Callback)> ==> <androidx.fragment.app.FragmentTransition: java.lang.Object getExitTransition(androidx.fragment.app.FragmentTransitionImpl,androidx.fragment.app.Fragment,boolean)>
STATIC edge: $r10 = staticinvoke <androidx.fragment.app.FragmentTransition: java.lang.Object getEnterTransition(androidx.fragment.app.FragmentTransitionImpl,androidx.fragment.app.Fragment,boolean)>($r8, $r6, $z0) in <androidx.fragment.app.FragmentTransition: void configureTransitionsReordered(android.view.ViewGroup,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$Callback)> ==> <androidx.fragment.app.FragmentTransition: java.lang.Object getEnterTransition(androidx.fragment.app.FragmentTransitionImpl,androidx.fragment.app.Fragment,boolean)>
STATIC edge: $r8 = staticinvoke <androidx.fragment.app.FragmentTransition: androidx.fragment.app.FragmentTransitionImpl chooseImpl(androidx.fragment.app.Fragment,androidx.fragment.app.Fragment)>($r7, $r6) in <androidx.fragment.app.FragmentTransition: void configureTransitionsReordered(android.view.ViewGroup,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$Callback)> ==> <androidx.fragment.app.FragmentTransition: androidx.fragment.app.FragmentTransitionImpl chooseImpl(androidx.fragment.app.Fragment,androidx.fragment.app.Fragment)>
CLINIT edge: staticinvoke <androidx.fragment.app.FragmentTransition: void addToFirstInLastOut(androidx.fragment.app.BackStackRecord,androidx.fragment.app.FragmentTransaction$Op,android.util.SparseArray,boolean,boolean)>($r0, $r4, $r1, 0, $z0) in <androidx.fragment.app.FragmentTransition: void calculateFragments(androidx.fragment.app.BackStackRecord,android.util.SparseArray,boolean)> ==> <androidx.fragment.app.FragmentTransition: void <clinit>()>
STATIC edge: staticinvoke <androidx.fragment.app.FragmentTransition: void addToFirstInLastOut(androidx.fragment.app.BackStackRecord,androidx.fragment.app.FragmentTransaction$Op,android.util.SparseArray,boolean,boolean)>($r0, $r4, $r1, 0, $z0) in <androidx.fragment.app.FragmentTransition: void calculateFragments(androidx.fragment.app.BackStackRecord,android.util.SparseArray,boolean)> ==> <androidx.fragment.app.FragmentTransition: void addToFirstInLastOut(androidx.fragment.app.BackStackRecord,androidx.fragment.app.FragmentTransaction$Op,android.util.SparseArray,boolean,boolean)>
CLINIT edge: staticinvoke <androidx.fragment.app.FragmentTransition: void addToFirstInLastOut(androidx.fragment.app.BackStackRecord,androidx.fragment.app.FragmentTransaction$Op,android.util.SparseArray,boolean,boolean)>($r0, $r6, $r1, 1, $z0) in <androidx.fragment.app.FragmentTransition: void calculatePopFragments(androidx.fragment.app.BackStackRecord,android.util.SparseArray,boolean)> ==> <androidx.fragment.app.FragmentTransition: void <clinit>()>
STATIC edge: staticinvoke <androidx.fragment.app.FragmentTransition: void addToFirstInLastOut(androidx.fragment.app.BackStackRecord,androidx.fragment.app.FragmentTransaction$Op,android.util.SparseArray,boolean,boolean)>($r0, $r6, $r1, 1, $z0) in <androidx.fragment.app.FragmentTransition: void calculatePopFragments(androidx.fragment.app.BackStackRecord,android.util.SparseArray,boolean)> ==> <androidx.fragment.app.FragmentTransition: void addToFirstInLastOut(androidx.fragment.app.BackStackRecord,androidx.fragment.app.FragmentTransaction$Op,android.util.SparseArray,boolean,boolean)>
STATIC edge: $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("androidx.transition.FragmentTransitionSupport") in <androidx.fragment.app.FragmentTransition: androidx.fragment.app.FragmentTransitionImpl resolveSupportImpl()> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
STATIC edge: staticinvoke <androidx.core.view.OneShotPreDrawListener: androidx.core.view.OneShotPreDrawListener add(android.view.View,java.lang.Runnable)>($r1, $r9) in <androidx.fragment.app.FragmentTransition: void scheduleTargetChange(androidx.fragment.app.FragmentTransitionImpl,android.view.ViewGroup,androidx.fragment.app.Fragment,android.view.View,java.util.ArrayList,java.lang.Object,java.util.ArrayList,java.lang.Object,java.util.ArrayList)> ==> <androidx.core.view.OneShotPreDrawListener: androidx.core.view.OneShotPreDrawListener add(android.view.View,java.lang.Runnable)>
CLINIT edge: $r12 = staticinvoke <androidx.fragment.app.FragmentTransition: java.lang.Object getSharedElementTransition(androidx.fragment.app.FragmentTransitionImpl,androidx.fragment.app.Fragment,androidx.fragment.app.Fragment,boolean)>($r0, $r9, $r10, $z0) in <androidx.fragment.app.FragmentTransition: java.lang.Object configureSharedElementsOrdered(androidx.fragment.app.FragmentTransitionImpl,android.view.ViewGroup,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,java.util.ArrayList,java.util.ArrayList,java.lang.Object,java.lang.Object)> ==> <androidx.fragment.app.FragmentTransition: void <clinit>()>
STATIC edge: staticinvoke <androidx.core.view.OneShotPreDrawListener: androidx.core.view.OneShotPreDrawListener add(android.view.View,java.lang.Runnable)>($r1, $r16) in <androidx.fragment.app.FragmentTransition: java.lang.Object configureSharedElementsOrdered(androidx.fragment.app.FragmentTransitionImpl,android.view.ViewGroup,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,java.util.ArrayList,java.util.ArrayList,java.lang.Object,java.lang.Object)> ==> <androidx.core.view.OneShotPreDrawListener: androidx.core.view.OneShotPreDrawListener add(android.view.View,java.lang.Runnable)>
STATIC edge: staticinvoke <androidx.fragment.app.FragmentTransition: void setOutEpicenter(androidx.fragment.app.FragmentTransitionImpl,java.lang.Object,java.lang.Object,androidx.collection.ArrayMap,boolean,androidx.fragment.app.BackStackRecord)>($r0, $r12, $r8, $r11, $z1, $r15) in <androidx.fragment.app.FragmentTransition: java.lang.Object configureSharedElementsOrdered(androidx.fragment.app.FragmentTransitionImpl,android.view.ViewGroup,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,java.util.ArrayList,java.util.ArrayList,java.lang.Object,java.lang.Object)> ==> <androidx.fragment.app.FragmentTransition: void setOutEpicenter(androidx.fragment.app.FragmentTransitionImpl,java.lang.Object,java.lang.Object,androidx.collection.ArrayMap,boolean,androidx.fragment.app.BackStackRecord)>
STATIC edge: staticinvoke <androidx.fragment.app.FragmentTransition: void callSharedElementStartEnd(androidx.fragment.app.Fragment,androidx.fragment.app.Fragment,boolean,androidx.collection.ArrayMap,boolean)>($r9, $r10, $z0, $r11, 1) in <androidx.fragment.app.FragmentTransition: java.lang.Object configureSharedElementsOrdered(androidx.fragment.app.FragmentTransitionImpl,android.view.ViewGroup,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,java.util.ArrayList,java.util.ArrayList,java.lang.Object,java.lang.Object)> ==> <androidx.fragment.app.FragmentTransition: void callSharedElementStartEnd(androidx.fragment.app.Fragment,androidx.fragment.app.Fragment,boolean,androidx.collection.ArrayMap,boolean)>
STATIC edge: $r11 = staticinvoke <androidx.fragment.app.FragmentTransition: androidx.collection.ArrayMap captureOutSharedElements(androidx.fragment.app.FragmentTransitionImpl,androidx.collection.ArrayMap,java.lang.Object,androidx.fragment.app.FragmentTransition$FragmentContainerTransition)>($r0, $r11, $r12, $r4) in <androidx.fragment.app.FragmentTransition: java.lang.Object configureSharedElementsOrdered(androidx.fragment.app.FragmentTransitionImpl,android.view.ViewGroup,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,java.util.ArrayList,java.util.ArrayList,java.lang.Object,java.lang.Object)> ==> <androidx.fragment.app.FragmentTransition: androidx.collection.ArrayMap captureOutSharedElements(androidx.fragment.app.FragmentTransitionImpl,androidx.collection.ArrayMap,java.lang.Object,androidx.fragment.app.FragmentTransition$FragmentContainerTransition)>
STATIC edge: $r12 = staticinvoke <androidx.fragment.app.FragmentTransition: java.lang.Object getSharedElementTransition(androidx.fragment.app.FragmentTransitionImpl,androidx.fragment.app.Fragment,androidx.fragment.app.Fragment,boolean)>($r0, $r9, $r10, $z0) in <androidx.fragment.app.FragmentTransition: java.lang.Object configureSharedElementsOrdered(androidx.fragment.app.FragmentTransitionImpl,android.view.ViewGroup,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,java.util.ArrayList,java.util.ArrayList,java.lang.Object,java.lang.Object)> ==> <androidx.fragment.app.FragmentTransition: java.lang.Object getSharedElementTransition(androidx.fragment.app.FragmentTransitionImpl,androidx.fragment.app.Fragment,androidx.fragment.app.Fragment,boolean)>
CLINIT edge: $r4 = <androidx.fragment.app.FragmentTransition: androidx.fragment.app.FragmentTransitionImpl PLATFORM_IMPL> in <androidx.fragment.app.FragmentTransition: androidx.fragment.app.FragmentTransitionImpl chooseImpl(androidx.fragment.app.Fragment,androidx.fragment.app.Fragment)> ==> <androidx.fragment.app.FragmentTransition: void <clinit>()>
STATIC edge: $z0 = staticinvoke <androidx.fragment.app.FragmentTransition: boolean canHandleAll(androidx.fragment.app.FragmentTransitionImpl,java.util.List)>($r5, $r2) in <androidx.fragment.app.FragmentTransition: androidx.fragment.app.FragmentTransitionImpl chooseImpl(androidx.fragment.app.Fragment,androidx.fragment.app.Fragment)> ==> <androidx.fragment.app.FragmentTransition: boolean canHandleAll(androidx.fragment.app.FragmentTransitionImpl,java.util.List)>
STATIC edge: $z0 = staticinvoke <androidx.fragment.app.FragmentTransition: boolean canHandleAll(androidx.fragment.app.FragmentTransitionImpl,java.util.List)>($r4, $r2) in <androidx.fragment.app.FragmentTransition: androidx.fragment.app.FragmentTransitionImpl chooseImpl(androidx.fragment.app.Fragment,androidx.fragment.app.Fragment)> ==> <androidx.fragment.app.FragmentTransition: boolean canHandleAll(androidx.fragment.app.FragmentTransitionImpl,java.util.List)>
STATIC edge: staticinvoke <androidx.core.view.OneShotPreDrawListener: androidx.core.view.OneShotPreDrawListener add(android.view.View,java.lang.Runnable)>($r5, $r6) in <androidx.fragment.app.FragmentTransition: void replaceHide(androidx.fragment.app.FragmentTransitionImpl,java.lang.Object,androidx.fragment.app.Fragment,java.util.ArrayList)> ==> <androidx.core.view.OneShotPreDrawListener: androidx.core.view.OneShotPreDrawListener add(android.view.View,java.lang.Runnable)>
CLINIT edge: $r12 = staticinvoke <androidx.fragment.app.FragmentTransition: java.lang.Object getSharedElementTransition(androidx.fragment.app.FragmentTransitionImpl,androidx.fragment.app.Fragment,androidx.fragment.app.Fragment,boolean)>($r0, $r9, $r10, $z0) in <androidx.fragment.app.FragmentTransition: java.lang.Object configureSharedElementsReordered(androidx.fragment.app.FragmentTransitionImpl,android.view.ViewGroup,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,java.util.ArrayList,java.util.ArrayList,java.lang.Object,java.lang.Object)> ==> <androidx.fragment.app.FragmentTransition: void <clinit>()>
STATIC edge: staticinvoke <androidx.core.view.OneShotPreDrawListener: androidx.core.view.OneShotPreDrawListener add(android.view.View,java.lang.Runnable)>($r1, $r19) in <androidx.fragment.app.FragmentTransition: java.lang.Object configureSharedElementsReordered(androidx.fragment.app.FragmentTransitionImpl,android.view.ViewGroup,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,java.util.ArrayList,java.util.ArrayList,java.lang.Object,java.lang.Object)> ==> <androidx.core.view.OneShotPreDrawListener: androidx.core.view.OneShotPreDrawListener add(android.view.View,java.lang.Runnable)>
STATIC edge: $r2 = staticinvoke <androidx.fragment.app.FragmentTransition: android.view.View getInEpicenterView(androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,java.lang.Object,boolean)>($r14, $r4, $r7, $z0) in <androidx.fragment.app.FragmentTransition: java.lang.Object configureSharedElementsReordered(androidx.fragment.app.FragmentTransitionImpl,android.view.ViewGroup,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,java.util.ArrayList,java.util.ArrayList,java.lang.Object,java.lang.Object)> ==> <androidx.fragment.app.FragmentTransition: android.view.View getInEpicenterView(androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,java.lang.Object,boolean)>
STATIC edge: staticinvoke <androidx.fragment.app.FragmentTransition: void setOutEpicenter(androidx.fragment.app.FragmentTransitionImpl,java.lang.Object,java.lang.Object,androidx.collection.ArrayMap,boolean,androidx.fragment.app.BackStackRecord)>($r0, $r12, $r8, $r13, $z1, $r17) in <androidx.fragment.app.FragmentTransition: java.lang.Object configureSharedElementsReordered(androidx.fragment.app.FragmentTransitionImpl,android.view.ViewGroup,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,java.util.ArrayList,java.util.ArrayList,java.lang.Object,java.lang.Object)> ==> <androidx.fragment.app.FragmentTransition: void setOutEpicenter(androidx.fragment.app.FragmentTransitionImpl,java.lang.Object,java.lang.Object,androidx.collection.ArrayMap,boolean,androidx.fragment.app.BackStackRecord)>
STATIC edge: staticinvoke <androidx.fragment.app.FragmentTransition: void callSharedElementStartEnd(androidx.fragment.app.Fragment,androidx.fragment.app.Fragment,boolean,androidx.collection.ArrayMap,boolean)>($r9, $r10, $z0, $r13, 1) in <androidx.fragment.app.FragmentTransition: java.lang.Object configureSharedElementsReordered(androidx.fragment.app.FragmentTransitionImpl,android.view.ViewGroup,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,java.util.ArrayList,java.util.ArrayList,java.lang.Object,java.lang.Object)> ==> <androidx.fragment.app.FragmentTransition: void callSharedElementStartEnd(androidx.fragment.app.Fragment,androidx.fragment.app.Fragment,boolean,androidx.collection.ArrayMap,boolean)>
STATIC edge: staticinvoke <androidx.fragment.app.FragmentTransition: void addSharedElementsWithMatchingNames(java.util.ArrayList,androidx.collection.ArrayMap,java.util.Collection)>($r6, $r14, $r16) in <androidx.fragment.app.FragmentTransition: java.lang.Object configureSharedElementsReordered(androidx.fragment.app.FragmentTransitionImpl,android.view.ViewGroup,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,java.util.ArrayList,java.util.ArrayList,java.lang.Object,java.lang.Object)> ==> <androidx.fragment.app.FragmentTransition: void addSharedElementsWithMatchingNames(java.util.ArrayList,androidx.collection.ArrayMap,java.util.Collection)>
STATIC edge: staticinvoke <androidx.fragment.app.FragmentTransition: void addSharedElementsWithMatchingNames(java.util.ArrayList,androidx.collection.ArrayMap,java.util.Collection)>($r5, $r13, $r15) in <androidx.fragment.app.FragmentTransition: java.lang.Object configureSharedElementsReordered(androidx.fragment.app.FragmentTransitionImpl,android.view.ViewGroup,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,java.util.ArrayList,java.util.ArrayList,java.lang.Object,java.lang.Object)> ==> <androidx.fragment.app.FragmentTransition: void addSharedElementsWithMatchingNames(java.util.ArrayList,androidx.collection.ArrayMap,java.util.Collection)>
STATIC edge: $r14 = staticinvoke <androidx.fragment.app.FragmentTransition: androidx.collection.ArrayMap captureInSharedElements(androidx.fragment.app.FragmentTransitionImpl,androidx.collection.ArrayMap,java.lang.Object,androidx.fragment.app.FragmentTransition$FragmentContainerTransition)>($r0, $r3, $r12, $r4) in <androidx.fragment.app.FragmentTransition: java.lang.Object configureSharedElementsReordered(androidx.fragment.app.FragmentTransitionImpl,android.view.ViewGroup,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,java.util.ArrayList,java.util.ArrayList,java.lang.Object,java.lang.Object)> ==> <androidx.fragment.app.FragmentTransition: androidx.collection.ArrayMap captureInSharedElements(androidx.fragment.app.FragmentTransitionImpl,androidx.collection.ArrayMap,java.lang.Object,androidx.fragment.app.FragmentTransition$FragmentContainerTransition)>
STATIC edge: $r13 = staticinvoke <androidx.fragment.app.FragmentTransition: androidx.collection.ArrayMap captureOutSharedElements(androidx.fragment.app.FragmentTransitionImpl,androidx.collection.ArrayMap,java.lang.Object,androidx.fragment.app.FragmentTransition$FragmentContainerTransition)>($r0, $r3, $r12, $r4) in <androidx.fragment.app.FragmentTransition: java.lang.Object configureSharedElementsReordered(androidx.fragment.app.FragmentTransitionImpl,android.view.ViewGroup,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,java.util.ArrayList,java.util.ArrayList,java.lang.Object,java.lang.Object)> ==> <androidx.fragment.app.FragmentTransition: androidx.collection.ArrayMap captureOutSharedElements(androidx.fragment.app.FragmentTransitionImpl,androidx.collection.ArrayMap,java.lang.Object,androidx.fragment.app.FragmentTransition$FragmentContainerTransition)>
STATIC edge: $r12 = staticinvoke <androidx.fragment.app.FragmentTransition: java.lang.Object getSharedElementTransition(androidx.fragment.app.FragmentTransitionImpl,androidx.fragment.app.Fragment,androidx.fragment.app.Fragment,boolean)>($r0, $r9, $r10, $z0) in <androidx.fragment.app.FragmentTransition: java.lang.Object configureSharedElementsReordered(androidx.fragment.app.FragmentTransitionImpl,android.view.ViewGroup,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,java.util.ArrayList,java.util.ArrayList,java.lang.Object,java.lang.Object)> ==> <androidx.fragment.app.FragmentTransition: java.lang.Object getSharedElementTransition(androidx.fragment.app.FragmentTransitionImpl,androidx.fragment.app.Fragment,androidx.fragment.app.Fragment,boolean)>
CLINIT edge: $r4 = <androidx.fragment.app.FragmentTransition: int[] INVERSE_OPS> in <androidx.fragment.app.FragmentTransition: void addToFirstInLastOut(androidx.fragment.app.BackStackRecord,androidx.fragment.app.FragmentTransaction$Op,android.util.SparseArray,boolean,boolean)> ==> <androidx.fragment.app.FragmentTransition: void <clinit>()>
STATIC edge: $r8 = staticinvoke <androidx.fragment.app.FragmentTransition: androidx.fragment.app.FragmentTransition$FragmentContainerTransition ensureContainer(androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.util.SparseArray,int)>($r7, $r0, $i0) in <androidx.fragment.app.FragmentTransition: void addToFirstInLastOut(androidx.fragment.app.BackStackRecord,androidx.fragment.app.FragmentTransaction$Op,android.util.SparseArray,boolean,boolean)> ==> <androidx.fragment.app.FragmentTransition: androidx.fragment.app.FragmentTransition$FragmentContainerTransition ensureContainer(androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.util.SparseArray,int)>
CLINIT edge: $r10 = staticinvoke <androidx.core.view.ViewCompat: java.lang.String getTransitionName(android.view.View)>($r5) in <androidx.fragment.app.FragmentTransition: androidx.collection.ArrayMap captureOutSharedElements(androidx.fragment.app.FragmentTransitionImpl,androidx.collection.ArrayMap,java.lang.Object,androidx.fragment.app.FragmentTransition$FragmentContainerTransition)> ==> <androidx.core.view.ViewCompat: void <clinit>()>
STATIC edge: $r10 = staticinvoke <androidx.core.view.ViewCompat: java.lang.String getTransitionName(android.view.View)>($r5) in <androidx.fragment.app.FragmentTransition: androidx.collection.ArrayMap captureOutSharedElements(androidx.fragment.app.FragmentTransitionImpl,androidx.collection.ArrayMap,java.lang.Object,androidx.fragment.app.FragmentTransition$FragmentContainerTransition)> ==> <androidx.core.view.ViewCompat: java.lang.String getTransitionName(android.view.View)>
STATIC edge: $r10 = staticinvoke <androidx.core.view.ViewCompat: java.lang.String getTransitionName(android.view.View)>($r5) in <androidx.fragment.app.FragmentTransition: androidx.collection.ArrayMap captureOutSharedElements(androidx.fragment.app.FragmentTransitionImpl,androidx.collection.ArrayMap,java.lang.Object,androidx.fragment.app.FragmentTransition$FragmentContainerTransition)> ==> <androidx.core.view.ViewCompat: java.lang.String getTransitionName(android.view.View)>
CLINIT edge: $r5 = staticinvoke <androidx.core.view.ViewCompat: java.lang.String getTransitionName(android.view.View)>($r4) in <androidx.fragment.app.FragmentTransition: void addSharedElementsWithMatchingNames(java.util.ArrayList,androidx.collection.ArrayMap,java.util.Collection)> ==> <androidx.core.view.ViewCompat: void <clinit>()>
STATIC edge: $r5 = staticinvoke <androidx.core.view.ViewCompat: java.lang.String getTransitionName(android.view.View)>($r4) in <androidx.fragment.app.FragmentTransition: void addSharedElementsWithMatchingNames(java.util.ArrayList,androidx.collection.ArrayMap,java.util.Collection)> ==> <androidx.core.view.ViewCompat: java.lang.String getTransitionName(android.view.View)>
CLINIT edge: $r10 = staticinvoke <androidx.fragment.app.FragmentTransition: java.lang.String findKeyForValue(androidx.collection.ArrayMap,java.lang.String)>($r0, $r10) in <androidx.fragment.app.FragmentTransition: androidx.collection.ArrayMap captureInSharedElements(androidx.fragment.app.FragmentTransitionImpl,androidx.collection.ArrayMap,java.lang.Object,androidx.fragment.app.FragmentTransition$FragmentContainerTransition)> ==> <androidx.fragment.app.FragmentTransition: void <clinit>()>
STATIC edge: staticinvoke <androidx.fragment.app.FragmentTransition: void retainValues(androidx.collection.ArrayMap,androidx.collection.ArrayMap)>($r0, $r12) in <androidx.fragment.app.FragmentTransition: androidx.collection.ArrayMap captureInSharedElements(androidx.fragment.app.FragmentTransitionImpl,androidx.collection.ArrayMap,java.lang.Object,androidx.fragment.app.FragmentTransition$FragmentContainerTransition)> ==> <androidx.fragment.app.FragmentTransition: void retainValues(androidx.collection.ArrayMap,androidx.collection.ArrayMap)>
STATIC edge: $r11 = staticinvoke <androidx.core.view.ViewCompat: java.lang.String getTransitionName(android.view.View)>($r5) in <androidx.fragment.app.FragmentTransition: androidx.collection.ArrayMap captureInSharedElements(androidx.fragment.app.FragmentTransitionImpl,androidx.collection.ArrayMap,java.lang.Object,androidx.fragment.app.FragmentTransition$FragmentContainerTransition)> ==> <androidx.core.view.ViewCompat: java.lang.String getTransitionName(android.view.View)>
STATIC edge: $r10 = staticinvoke <androidx.fragment.app.FragmentTransition: java.lang.String findKeyForValue(androidx.collection.ArrayMap,java.lang.String)>($r0, $r10) in <androidx.fragment.app.FragmentTransition: androidx.collection.ArrayMap captureInSharedElements(androidx.fragment.app.FragmentTransitionImpl,androidx.collection.ArrayMap,java.lang.Object,androidx.fragment.app.FragmentTransition$FragmentContainerTransition)> ==> <androidx.fragment.app.FragmentTransition: java.lang.String findKeyForValue(androidx.collection.ArrayMap,java.lang.String)>
STATIC edge: $r11 = staticinvoke <androidx.core.view.ViewCompat: java.lang.String getTransitionName(android.view.View)>($r5) in <androidx.fragment.app.FragmentTransition: androidx.collection.ArrayMap captureInSharedElements(androidx.fragment.app.FragmentTransitionImpl,androidx.collection.ArrayMap,java.lang.Object,androidx.fragment.app.FragmentTransition$FragmentContainerTransition)> ==> <androidx.core.view.ViewCompat: java.lang.String getTransitionName(android.view.View)>
STATIC edge: $r10 = staticinvoke <androidx.fragment.app.FragmentTransition: java.lang.String findKeyForValue(androidx.collection.ArrayMap,java.lang.String)>($r0, $r10) in <androidx.fragment.app.FragmentTransition: androidx.collection.ArrayMap captureInSharedElements(androidx.fragment.app.FragmentTransitionImpl,androidx.collection.ArrayMap,java.lang.Object,androidx.fragment.app.FragmentTransition$FragmentContainerTransition)> ==> <androidx.fragment.app.FragmentTransition: java.lang.String findKeyForValue(androidx.collection.ArrayMap,java.lang.String)>
CLINIT edge: staticinvoke <androidx.fragment.app.FragmentTransition: void retainValues(androidx.collection.ArrayMap,androidx.collection.ArrayMap)>($r0, $r12) in <androidx.fragment.app.FragmentTransition: androidx.collection.ArrayMap captureInSharedElements(androidx.fragment.app.FragmentTransitionImpl,androidx.collection.ArrayMap,java.lang.Object,androidx.fragment.app.FragmentTransition$FragmentContainerTransition)> ==> <androidx.fragment.app.FragmentTransition: void <clinit>()>
CLINIT edge: $r10 = staticinvoke <androidx.fragment.app.FragmentTransition: java.lang.String findKeyForValue(androidx.collection.ArrayMap,java.lang.String)>($r0, $r10) in <androidx.fragment.app.FragmentTransition: androidx.collection.ArrayMap captureInSharedElements(androidx.fragment.app.FragmentTransitionImpl,androidx.collection.ArrayMap,java.lang.Object,androidx.fragment.app.FragmentTransition$FragmentContainerTransition)> ==> <androidx.fragment.app.FragmentTransition: void <clinit>()>
CLINIT edge: $r11 = staticinvoke <androidx.core.view.ViewCompat: java.lang.String getTransitionName(android.view.View)>($r5) in <androidx.fragment.app.FragmentTransition: androidx.collection.ArrayMap captureInSharedElements(androidx.fragment.app.FragmentTransitionImpl,androidx.collection.ArrayMap,java.lang.Object,androidx.fragment.app.FragmentTransition$FragmentContainerTransition)> ==> <androidx.core.view.ViewCompat: void <clinit>()>
STATIC edge: $r0 = staticinvoke <androidx.core.view.ViewCompat$Api21Impl: java.lang.String getTransitionName(android.view.View)>($r1) in <androidx.core.view.ViewCompat: java.lang.String getTransitionName(android.view.View)> ==> <androidx.core.view.ViewCompat$Api21Impl: java.lang.String getTransitionName(android.view.View)>
VIRTUAL edge: virtualinvoke $r13.<androidx.collection.ArrayMap: void clear()>() in <androidx.fragment.app.FragmentTransition: java.lang.Object configureSharedElementsReordered(androidx.fragment.app.FragmentTransitionImpl,android.view.ViewGroup,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,java.util.ArrayList,java.util.ArrayList,java.lang.Object,java.lang.Object)> ==> <androidx.collection.SimpleArrayMap: void clear()>
CLINIT edge: $r3 = <androidx.collection.ContainerHelpers: int[] EMPTY_INTS> in <androidx.collection.SimpleArrayMap: void clear()> ==> <androidx.collection.ContainerHelpers: void <clinit>()>
STATIC edge: staticinvoke <androidx.collection.SimpleArrayMap: void freeArrays(int[],java.lang.Object[],int)>($r1, $r2, $i0) in <androidx.collection.SimpleArrayMap: void clear()> ==> <androidx.collection.SimpleArrayMap: void freeArrays(int[],java.lang.Object[],int)>
VIRTUAL edge: virtualinvoke $r8.<androidx.fragment.app.FragmentTransitionImpl: void setListenerForTransitionEnd(androidx.fragment.app.Fragment,java.lang.Object,androidx.core.os.CancellationSignal,java.lang.Runnable)>($r7, $r11, $r16, $r17) in <androidx.fragment.app.FragmentTransition: void configureTransitionsReordered(android.view.ViewGroup,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$Callback)> ==> <androidx.fragment.app.FragmentTransitionCompat21: void setListenerForTransitionEnd(androidx.fragment.app.Fragment,java.lang.Object,androidx.core.os.CancellationSignal,java.lang.Runnable)>
VIRTUAL edge: $r18 = virtualinvoke $r8.<androidx.fragment.app.FragmentTransitionImpl: java.util.ArrayList prepareSetNameOverridesReordered(java.util.ArrayList)>($r4) in <androidx.fragment.app.FragmentTransition: void configureTransitionsReordered(android.view.ViewGroup,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$Callback)> ==> <androidx.fragment.app.FragmentTransitionImpl: java.util.ArrayList prepareSetNameOverridesReordered(java.util.ArrayList)>
VIRTUAL edge: virtualinvoke $r8.<androidx.fragment.app.FragmentTransitionImpl: void scheduleRemoveTargets(java.lang.Object,java.lang.Object,java.util.ArrayList,java.lang.Object,java.util.ArrayList,java.lang.Object,java.util.ArrayList)>($r11, $r10, $r15, $r13, $r14, $r12, $r4) in <androidx.fragment.app.FragmentTransition: void configureTransitionsReordered(android.view.ViewGroup,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$Callback)> ==> <androidx.fragment.app.FragmentTransitionCompat21: void scheduleRemoveTargets(java.lang.Object,java.lang.Object,java.util.ArrayList,java.lang.Object,java.util.ArrayList,java.lang.Object,java.util.ArrayList)>
VIRTUAL edge: virtualinvoke $r8.<androidx.fragment.app.FragmentTransitionImpl: void beginDelayedTransition(android.view.ViewGroup,java.lang.Object)>($r0, $r11) in <androidx.fragment.app.FragmentTransition: void configureTransitionsReordered(android.view.ViewGroup,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$Callback)> ==> <androidx.fragment.app.FragmentTransitionCompat21: void beginDelayedTransition(android.view.ViewGroup,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r8.<androidx.fragment.app.FragmentTransitionImpl: void setNameOverridesReordered(android.view.View,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList,java.util.Map)>($r0, $r9, $r4, $r18, $r2) in <androidx.fragment.app.FragmentTransition: void configureTransitionsReordered(android.view.ViewGroup,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$Callback)> ==> <androidx.fragment.app.FragmentTransitionImpl: void setNameOverridesReordered(android.view.View,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList,java.util.Map)>
VIRTUAL edge: virtualinvoke $r8.<androidx.fragment.app.FragmentTransitionImpl: void swapSharedElementTargets(java.lang.Object,java.util.ArrayList,java.util.ArrayList)>($r12, $r9, $r4) in <androidx.fragment.app.FragmentTransition: void configureTransitionsReordered(android.view.ViewGroup,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$Callback)> ==> <androidx.fragment.app.FragmentTransitionCompat21: void swapSharedElementTargets(java.lang.Object,java.util.ArrayList,java.util.ArrayList)>
CLINIT edge: $r5 = staticinvoke <androidx.core.view.ViewCompat: java.lang.String getTransitionName(android.view.View)>($r4) in <androidx.fragment.app.FragmentTransitionImpl: java.util.ArrayList prepareSetNameOverridesReordered(java.util.ArrayList)> ==> <androidx.core.view.ViewCompat: void <clinit>()>
STATIC edge: staticinvoke <androidx.core.view.ViewCompat: void setTransitionName(android.view.View,java.lang.String)>($r4, null) in <androidx.fragment.app.FragmentTransitionImpl: java.util.ArrayList prepareSetNameOverridesReordered(java.util.ArrayList)> ==> <androidx.core.view.ViewCompat: void setTransitionName(android.view.View,java.lang.String)>
STATIC edge: $r5 = staticinvoke <androidx.core.view.ViewCompat: java.lang.String getTransitionName(android.view.View)>($r4) in <androidx.fragment.app.FragmentTransitionImpl: java.util.ArrayList prepareSetNameOverridesReordered(java.util.ArrayList)> ==> <androidx.core.view.ViewCompat: java.lang.String getTransitionName(android.view.View)>
CLINIT edge: $r9 = staticinvoke <androidx.core.view.ViewCompat: java.lang.String getTransitionName(android.view.View)>($r8) in <androidx.fragment.app.FragmentTransitionImpl: void setNameOverridesReordered(android.view.View,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList,java.util.Map)> ==> <androidx.core.view.ViewCompat: void <clinit>()>
STATIC edge: staticinvoke <androidx.core.view.OneShotPreDrawListener: androidx.core.view.OneShotPreDrawListener add(android.view.View,java.lang.Runnable)>($r1, $r11) in <androidx.fragment.app.FragmentTransitionImpl: void setNameOverridesReordered(android.view.View,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList,java.util.Map)> ==> <androidx.core.view.OneShotPreDrawListener: androidx.core.view.OneShotPreDrawListener add(android.view.View,java.lang.Runnable)>
STATIC edge: staticinvoke <androidx.core.view.ViewCompat: void setTransitionName(android.view.View,java.lang.String)>($r8, $r9) in <androidx.fragment.app.FragmentTransitionImpl: void setNameOverridesReordered(android.view.View,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList,java.util.Map)> ==> <androidx.core.view.ViewCompat: void setTransitionName(android.view.View,java.lang.String)>
STATIC edge: $r9 = staticinvoke <androidx.core.view.ViewCompat: java.lang.String getTransitionName(android.view.View)>($r8) in <androidx.fragment.app.FragmentTransitionImpl: void setNameOverridesReordered(android.view.View,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList,java.util.Map)> ==> <androidx.core.view.ViewCompat: java.lang.String getTransitionName(android.view.View)>
STATIC edge: staticinvoke <androidx.core.view.ViewCompat$Api21Impl: void setTransitionName(android.view.View,java.lang.String)>($r0, $r1) in <androidx.core.view.ViewCompat: void setTransitionName(android.view.View,java.lang.String)> ==> <androidx.core.view.ViewCompat$Api21Impl: void setTransitionName(android.view.View,java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<androidx.fragment.app.FragmentTransitionCompat21: void replaceTargets(java.lang.Object,java.util.ArrayList,java.util.ArrayList)>($r4, $r1, $r2) in <androidx.fragment.app.FragmentTransitionCompat21: void swapSharedElementTargets(java.lang.Object,java.util.ArrayList,java.util.ArrayList)> ==> <androidx.fragment.app.FragmentTransitionCompat21: void replaceTargets(java.lang.Object,java.util.ArrayList,java.util.ArrayList)>
STATIC edge: $z0 = staticinvoke <androidx.fragment.app.FragmentTransitionCompat21: boolean hasSimpleTarget(android.transition.Transition)>($r4) in <androidx.fragment.app.FragmentTransitionCompat21: void replaceTargets(java.lang.Object,java.util.ArrayList,java.util.ArrayList)> ==> <androidx.fragment.app.FragmentTransitionCompat21: boolean hasSimpleTarget(android.transition.Transition)>
STATIC edge: $z0 = staticinvoke <androidx.fragment.app.FragmentTransitionCompat21: boolean isNullOrEmpty(java.util.List)>($r1) in <androidx.fragment.app.FragmentTransitionCompat21: boolean hasSimpleTarget(android.transition.Transition)> ==> <androidx.fragment.app.FragmentTransitionImpl: boolean isNullOrEmpty(java.util.List)>
STATIC edge: $z0 = staticinvoke <androidx.fragment.app.FragmentTransitionCompat21: boolean isNullOrEmpty(java.util.List)>($r1) in <androidx.fragment.app.FragmentTransitionCompat21: boolean hasSimpleTarget(android.transition.Transition)> ==> <androidx.fragment.app.FragmentTransitionImpl: boolean isNullOrEmpty(java.util.List)>
SPECIAL edge: specialinvoke $r11.<androidx.fragment.app.FragmentTransitionImpl$1: void <init>(androidx.fragment.app.FragmentTransitionImpl,int,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)>(r0, $i0, $r3, $r4, $r2, $r5) in <androidx.fragment.app.FragmentTransitionImpl: void setNameOverridesReordered(android.view.View,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList,java.util.Map)> ==> <androidx.fragment.app.FragmentTransitionImpl$1: void <init>(androidx.fragment.app.FragmentTransitionImpl,int,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.fragment.app.FragmentTransitionImpl$1: void <init>(androidx.fragment.app.FragmentTransitionImpl,int,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r8.<androidx.fragment.app.FragmentTransitionCompat21$3: void <init>(androidx.fragment.app.FragmentTransitionCompat21,java.lang.Object,java.util.ArrayList,java.lang.Object,java.util.ArrayList,java.lang.Object,java.util.ArrayList)>(r0, $r2, $r3, $r4, $r5, $r6, $r7) in <androidx.fragment.app.FragmentTransitionCompat21: void scheduleRemoveTargets(java.lang.Object,java.lang.Object,java.util.ArrayList,java.lang.Object,java.util.ArrayList,java.lang.Object,java.util.ArrayList)> ==> <androidx.fragment.app.FragmentTransitionCompat21$3: void <init>(androidx.fragment.app.FragmentTransitionCompat21,java.lang.Object,java.util.ArrayList,java.lang.Object,java.util.ArrayList,java.lang.Object,java.util.ArrayList)>
SPECIAL edge: specialinvoke $r6.<androidx.fragment.app.FragmentTransitionCompat21$4: void <init>(androidx.fragment.app.FragmentTransitionCompat21,java.lang.Runnable)>(r0, $r2) in <androidx.fragment.app.FragmentTransitionCompat21: void setListenerForTransitionEnd(androidx.fragment.app.Fragment,java.lang.Object,androidx.core.os.CancellationSignal,java.lang.Runnable)> ==> <androidx.fragment.app.FragmentTransitionCompat21$4: void <init>(androidx.fragment.app.FragmentTransitionCompat21,java.lang.Runnable)>
VIRTUAL edge: virtualinvoke $r7.<androidx.fragment.app.FragmentTransitionImpl: void addTarget(java.lang.Object,android.view.View)>($r8, $r2) in <androidx.fragment.app.FragmentTransition: void configureTransitionsOrdered(android.view.ViewGroup,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$Callback)> ==> <androidx.fragment.app.FragmentTransitionCompat21: void addTarget(java.lang.Object,android.view.View)>
VIRTUAL edge: virtualinvoke $r7.<androidx.fragment.app.FragmentTransitionImpl: void setListenerForTransitionEnd(androidx.fragment.app.Fragment,java.lang.Object,androidx.core.os.CancellationSignal,java.lang.Runnable)>($r6, $r13, $r15, $r16) in <androidx.fragment.app.FragmentTransition: void configureTransitionsOrdered(android.view.ViewGroup,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$Callback)> ==> <androidx.fragment.app.FragmentTransitionCompat21: void setListenerForTransitionEnd(androidx.fragment.app.Fragment,java.lang.Object,androidx.core.os.CancellationSignal,java.lang.Runnable)>
VIRTUAL edge: virtualinvoke $r7.<androidx.fragment.app.FragmentTransitionImpl: void scheduleRemoveTargets(java.lang.Object,java.lang.Object,java.util.ArrayList,java.lang.Object,java.util.ArrayList,java.lang.Object,java.util.ArrayList)>($r13, $r8, $r10, $r9, $r14, $r12, $r11) in <androidx.fragment.app.FragmentTransition: void configureTransitionsOrdered(android.view.ViewGroup,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$Callback)> ==> <androidx.fragment.app.FragmentTransitionCompat21: void scheduleRemoveTargets(java.lang.Object,java.lang.Object,java.util.ArrayList,java.lang.Object,java.util.ArrayList,java.lang.Object,java.util.ArrayList)>
VIRTUAL edge: virtualinvoke $r7.<androidx.fragment.app.FragmentTransitionImpl: void setNameOverridesOrdered(android.view.View,java.util.ArrayList,java.util.Map)>($r0, $r11, $r3) in <androidx.fragment.app.FragmentTransition: void configureTransitionsOrdered(android.view.ViewGroup,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$Callback)> ==> <androidx.fragment.app.FragmentTransitionImpl: void setNameOverridesOrdered(android.view.View,java.util.ArrayList,java.util.Map)>
VIRTUAL edge: virtualinvoke $r7.<androidx.fragment.app.FragmentTransitionImpl: void beginDelayedTransition(android.view.ViewGroup,java.lang.Object)>($r0, $r13) in <androidx.fragment.app.FragmentTransition: void configureTransitionsOrdered(android.view.ViewGroup,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$Callback)> ==> <androidx.fragment.app.FragmentTransitionCompat21: void beginDelayedTransition(android.view.ViewGroup,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r7.<androidx.fragment.app.FragmentTransitionImpl: void scheduleNameReset(android.view.ViewGroup,java.util.ArrayList,java.util.Map)>($r0, $r11, $r3) in <androidx.fragment.app.FragmentTransition: void configureTransitionsOrdered(android.view.ViewGroup,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$Callback)> ==> <androidx.fragment.app.FragmentTransitionImpl: void scheduleNameReset(android.view.ViewGroup,java.util.ArrayList,java.util.Map)>
STATIC edge: staticinvoke <androidx.core.view.OneShotPreDrawListener: androidx.core.view.OneShotPreDrawListener add(android.view.View,java.lang.Runnable)>($r1, $r4) in <androidx.fragment.app.FragmentTransitionImpl: void setNameOverridesOrdered(android.view.View,java.util.ArrayList,java.util.Map)> ==> <androidx.core.view.OneShotPreDrawListener: androidx.core.view.OneShotPreDrawListener add(android.view.View,java.lang.Runnable)>
STATIC edge: staticinvoke <androidx.core.view.OneShotPreDrawListener: androidx.core.view.OneShotPreDrawListener add(android.view.View,java.lang.Runnable)>($r1, $r4) in <androidx.fragment.app.FragmentTransitionImpl: void scheduleNameReset(android.view.ViewGroup,java.util.ArrayList,java.util.Map)> ==> <androidx.core.view.OneShotPreDrawListener: androidx.core.view.OneShotPreDrawListener add(android.view.View,java.lang.Runnable)>
SPECIAL edge: specialinvoke $r4.<androidx.fragment.app.FragmentTransitionImpl$3: void <init>(androidx.fragment.app.FragmentTransitionImpl,java.util.ArrayList,java.util.Map)>(r0, $r2, $r3) in <androidx.fragment.app.FragmentTransitionImpl: void scheduleNameReset(android.view.ViewGroup,java.util.ArrayList,java.util.Map)> ==> <androidx.fragment.app.FragmentTransitionImpl$3: void <init>(androidx.fragment.app.FragmentTransitionImpl,java.util.ArrayList,java.util.Map)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.fragment.app.FragmentTransitionImpl$3: void <init>(androidx.fragment.app.FragmentTransitionImpl,java.util.ArrayList,java.util.Map)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r4.<androidx.fragment.app.FragmentTransitionImpl$2: void <init>(androidx.fragment.app.FragmentTransitionImpl,java.util.ArrayList,java.util.Map)>(r0, $r2, $r3) in <androidx.fragment.app.FragmentTransitionImpl: void setNameOverridesOrdered(android.view.View,java.util.ArrayList,java.util.Map)> ==> <androidx.fragment.app.FragmentTransitionImpl$2: void <init>(androidx.fragment.app.FragmentTransitionImpl,java.util.ArrayList,java.util.Map)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.fragment.app.FragmentTransitionImpl$2: void <init>(androidx.fragment.app.FragmentTransitionImpl,java.util.ArrayList,java.util.Map)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<androidx.collection.ArrayMap: boolean containsKey(java.lang.Object)>($r3) in <androidx.fragment.app.FragmentTransition: void retainValues(androidx.collection.ArrayMap,androidx.collection.ArrayMap)> ==> <androidx.collection.SimpleArrayMap: boolean containsKey(java.lang.Object)>
SPECIAL edge: specialinvoke $r1.<androidx.fragment.app.FragmentTransition$FragmentContainerTransition: void <init>()>() in <androidx.fragment.app.FragmentTransition: androidx.fragment.app.FragmentTransition$FragmentContainerTransition ensureContainer(androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.util.SparseArray,int)> ==> <androidx.fragment.app.FragmentTransition$FragmentContainerTransition: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.fragment.app.FragmentTransition$FragmentContainerTransition: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r12.<androidx.collection.ArrayMap: void <init>()>() in <androidx.fragment.app.FragmentTransition: androidx.collection.ArrayMap captureInSharedElements(androidx.fragment.app.FragmentTransitionImpl,androidx.collection.ArrayMap,java.lang.Object,androidx.fragment.app.FragmentTransition$FragmentContainerTransition)> ==> <androidx.collection.ArrayMap: void <init>()>
VIRTUAL edge: virtualinvoke $r12.<androidx.collection.ArrayMap: boolean retainAll(java.util.Collection)>($r8) in <androidx.fragment.app.FragmentTransition: androidx.collection.ArrayMap captureInSharedElements(androidx.fragment.app.FragmentTransitionImpl,androidx.collection.ArrayMap,java.lang.Object,androidx.fragment.app.FragmentTransition$FragmentContainerTransition)> ==> <androidx.collection.ArrayMap: boolean retainAll(java.util.Collection)>
VIRTUAL edge: $r2 = virtualinvoke $r12.<androidx.collection.ArrayMap: java.lang.Object get(java.lang.Object)>($r10) in <androidx.fragment.app.FragmentTransition: androidx.collection.ArrayMap captureInSharedElements(androidx.fragment.app.FragmentTransitionImpl,androidx.collection.ArrayMap,java.lang.Object,androidx.fragment.app.FragmentTransition$FragmentContainerTransition)> ==> <androidx.collection.SimpleArrayMap: java.lang.Object get(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <androidx.collection.MapCollections: boolean retainAllHelper(java.util.Map,java.util.Collection)>(r0, $r1) in <androidx.collection.ArrayMap: boolean retainAll(java.util.Collection)> ==> <androidx.collection.MapCollections: boolean retainAllHelper(java.util.Map,java.util.Collection)>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.Map: int size()>() in <androidx.collection.MapCollections: boolean retainAllHelper(java.util.Map,java.util.Collection)> ==> <androidx.collection.SimpleArrayMap: int size()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>() in <androidx.collection.MapCollections: boolean retainAllHelper(java.util.Map,java.util.Collection)> ==> <androidx.collection.ArrayMap: java.util.Set keySet()>
SPECIAL edge: $r1 = specialinvoke r0.<androidx.collection.ArrayMap: androidx.collection.MapCollections getCollection()>() in <androidx.collection.ArrayMap: java.util.Set keySet()> ==> <androidx.collection.ArrayMap: androidx.collection.MapCollections getCollection()>
SPECIAL edge: specialinvoke $r2.<androidx.collection.ArrayMap$1: void <init>(androidx.collection.ArrayMap)>(r0) in <androidx.collection.ArrayMap: androidx.collection.MapCollections getCollection()> ==> <androidx.collection.ArrayMap$1: void <init>(androidx.collection.ArrayMap)>
SPECIAL edge: specialinvoke r0.<androidx.collection.MapCollections: void <init>()>() in <androidx.collection.ArrayMap$1: void <init>(androidx.collection.ArrayMap)> ==> <androidx.collection.MapCollections: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<androidx.collection.MapCollections: java.util.Set getKeySet()>() in <androidx.collection.ArrayMap: java.util.Set keySet()> ==> <androidx.collection.MapCollections: java.util.Set getKeySet()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>() in <androidx.collection.MapCollections: boolean retainAllHelper(java.util.Map,java.util.Collection)> ==> <androidx.collection.MapCollections$KeySet: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>() in <androidx.collection.MapCollections: boolean retainAllHelper(java.util.Map,java.util.Collection)> ==> <androidx.collection.MapCollections$ArrayIterator: boolean hasNext()>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>() in <androidx.collection.MapCollections: boolean retainAllHelper(java.util.Map,java.util.Collection)> ==> <androidx.collection.MapCollections$ArrayIterator: java.lang.Object next()>
INTERFACE edge: interfaceinvoke $r3.<java.util.Iterator: void remove()>() in <androidx.collection.MapCollections: boolean retainAllHelper(java.util.Map,java.util.Collection)> ==> <androidx.collection.MapCollections$ArrayIterator: void remove()>
SPECIAL edge: specialinvoke r0.<androidx.collection.SimpleArrayMap: void <init>()>() in <androidx.collection.ArrayMap: void <init>()> ==> <androidx.collection.SimpleArrayMap: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<androidx.collection.ArrayMap: int size()>() in <androidx.fragment.app.FragmentTransition: void addSharedElementsWithMatchingNames(java.util.ArrayList,androidx.collection.ArrayMap,java.util.Collection)> ==> <androidx.collection.SimpleArrayMap: int size()>
VIRTUAL edge: $r3 = virtualinvoke $r1.<androidx.collection.ArrayMap: java.lang.Object valueAt(int)>($i0) in <androidx.fragment.app.FragmentTransition: void addSharedElementsWithMatchingNames(java.util.ArrayList,androidx.collection.ArrayMap,java.util.Collection)> ==> <androidx.collection.SimpleArrayMap: java.lang.Object valueAt(int)>
VIRTUAL edge: $r2 = virtualinvoke $r0.<androidx.collection.ArrayMap: java.lang.Object get(java.lang.Object)>($r5) in <androidx.fragment.app.FragmentTransition: android.view.View getInEpicenterView(androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,java.lang.Object,boolean)> ==> <androidx.collection.SimpleArrayMap: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<androidx.fragment.app.FragmentTransitionImpl: boolean canHandle(java.lang.Object)>($r2) in <androidx.fragment.app.FragmentTransition: boolean canHandleAll(androidx.fragment.app.FragmentTransitionImpl,java.util.List)> ==> <androidx.fragment.app.FragmentTransitionCompat21: boolean canHandle(java.lang.Object)>
SPECIAL edge: specialinvoke $r12.<androidx.collection.ArrayMap: void <init>()>() in <androidx.fragment.app.FragmentTransition: androidx.collection.ArrayMap captureOutSharedElements(androidx.fragment.app.FragmentTransitionImpl,androidx.collection.ArrayMap,java.lang.Object,androidx.fragment.app.FragmentTransition$FragmentContainerTransition)> ==> <androidx.collection.ArrayMap: void <init>()>
VIRTUAL edge: virtualinvoke $r12.<androidx.collection.ArrayMap: boolean retainAll(java.util.Collection)>($r8) in <androidx.fragment.app.FragmentTransition: androidx.collection.ArrayMap captureOutSharedElements(androidx.fragment.app.FragmentTransitionImpl,androidx.collection.ArrayMap,java.lang.Object,androidx.fragment.app.FragmentTransition$FragmentContainerTransition)> ==> <androidx.collection.ArrayMap: boolean retainAll(java.util.Collection)>
VIRTUAL edge: $r2 = virtualinvoke $r12.<androidx.collection.ArrayMap: java.lang.Object get(java.lang.Object)>($r9) in <androidx.fragment.app.FragmentTransition: androidx.collection.ArrayMap captureOutSharedElements(androidx.fragment.app.FragmentTransitionImpl,androidx.collection.ArrayMap,java.lang.Object,androidx.fragment.app.FragmentTransition$FragmentContainerTransition)> ==> <androidx.collection.SimpleArrayMap: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $r11 = virtualinvoke $r12.<androidx.collection.ArrayMap: java.util.Set keySet()>() in <androidx.fragment.app.FragmentTransition: androidx.collection.ArrayMap captureOutSharedElements(androidx.fragment.app.FragmentTransitionImpl,androidx.collection.ArrayMap,java.lang.Object,androidx.fragment.app.FragmentTransition$FragmentContainerTransition)> ==> <androidx.collection.ArrayMap: java.util.Set keySet()>
VIRTUAL edge: $i1 = virtualinvoke $r2.<androidx.collection.ArrayMap: int size()>() in <androidx.fragment.app.FragmentTransition: void callSharedElementStartEnd(androidx.fragment.app.Fragment,androidx.fragment.app.Fragment,boolean,androidx.collection.ArrayMap,boolean)> ==> <androidx.collection.SimpleArrayMap: int size()>
VIRTUAL edge: $r6 = virtualinvoke $r2.<androidx.collection.ArrayMap: java.lang.Object keyAt(int)>($i0) in <androidx.fragment.app.FragmentTransition: void callSharedElementStartEnd(androidx.fragment.app.Fragment,androidx.fragment.app.Fragment,boolean,androidx.collection.ArrayMap,boolean)> ==> <androidx.collection.SimpleArrayMap: java.lang.Object keyAt(int)>
VIRTUAL edge: $r6 = virtualinvoke $r2.<androidx.collection.ArrayMap: java.lang.Object valueAt(int)>($i0) in <androidx.fragment.app.FragmentTransition: void callSharedElementStartEnd(androidx.fragment.app.Fragment,androidx.fragment.app.Fragment,boolean,androidx.collection.ArrayMap,boolean)> ==> <androidx.collection.SimpleArrayMap: java.lang.Object valueAt(int)>
VIRTUAL edge: $r6 = virtualinvoke $r4.<androidx.collection.ArrayMap: java.lang.Object get(java.lang.Object)>($r7) in <androidx.fragment.app.FragmentTransition: void setOutEpicenter(androidx.fragment.app.FragmentTransitionImpl,java.lang.Object,java.lang.Object,androidx.collection.ArrayMap,boolean,androidx.fragment.app.BackStackRecord)> ==> <androidx.collection.SimpleArrayMap: java.lang.Object get(java.lang.Object)>
SPECIAL edge: specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("runnable == null") in <androidx.core.view.OneShotPreDrawListener: androidx.core.view.OneShotPreDrawListener add(android.view.View,java.lang.Runnable)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<androidx.core.view.OneShotPreDrawListener: void <init>(android.view.View,java.lang.Runnable)>($r2, $r3) in <androidx.core.view.OneShotPreDrawListener: androidx.core.view.OneShotPreDrawListener add(android.view.View,java.lang.Runnable)> ==> <androidx.core.view.OneShotPreDrawListener: void <init>(android.view.View,java.lang.Runnable)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.core.view.OneShotPreDrawListener: void <init>(android.view.View,java.lang.Runnable)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r19.<androidx.fragment.app.FragmentTransition$5: void <init>(androidx.fragment.app.Fragment,androidx.fragment.app.Fragment,boolean,androidx.collection.ArrayMap,android.view.View,androidx.fragment.app.FragmentTransitionImpl,android.graphics.Rect)>($r9, $r10, $z0, $r14, $r2, $r0, $r18) in <androidx.fragment.app.FragmentTransition: java.lang.Object configureSharedElementsReordered(androidx.fragment.app.FragmentTransitionImpl,android.view.ViewGroup,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,java.util.ArrayList,java.util.ArrayList,java.lang.Object,java.lang.Object)> ==> <androidx.fragment.app.FragmentTransition$5: void <init>(androidx.fragment.app.Fragment,androidx.fragment.app.Fragment,boolean,androidx.collection.ArrayMap,android.view.View,androidx.fragment.app.FragmentTransitionImpl,android.graphics.Rect)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.fragment.app.FragmentTransition$5: void <init>(androidx.fragment.app.Fragment,androidx.fragment.app.Fragment,boolean,androidx.collection.ArrayMap,android.view.View,androidx.fragment.app.FragmentTransitionImpl,android.graphics.Rect)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r0.<androidx.fragment.app.FragmentTransitionImpl: void setSharedElementTargets(java.lang.Object,android.view.View,java.util.ArrayList)>($r12, $r2, $r5) in <androidx.fragment.app.FragmentTransition: java.lang.Object configureSharedElementsReordered(androidx.fragment.app.FragmentTransitionImpl,android.view.ViewGroup,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,java.util.ArrayList,java.util.ArrayList,java.lang.Object,java.lang.Object)> ==> <androidx.fragment.app.FragmentTransitionCompat21: void setSharedElementTargets(java.lang.Object,android.view.View,java.util.ArrayList)>
VIRTUAL edge: virtualinvoke $r0.<androidx.fragment.app.FragmentTransitionImpl: void setEpicenter(java.lang.Object,android.graphics.Rect)>($r7, $r18) in <androidx.fragment.app.FragmentTransition: java.lang.Object configureSharedElementsReordered(androidx.fragment.app.FragmentTransitionImpl,android.view.ViewGroup,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,java.util.ArrayList,java.util.ArrayList,java.lang.Object,java.lang.Object)> ==> <androidx.fragment.app.FragmentTransitionCompat21: void setEpicenter(java.lang.Object,android.graphics.Rect)>
STATIC edge: staticinvoke <androidx.fragment.app.FragmentTransitionCompat21: void bfsAddViewChildren(java.util.List,android.view.View)>($r5, $r6) in <androidx.fragment.app.FragmentTransitionCompat21: void setSharedElementTargets(java.lang.Object,android.view.View,java.util.ArrayList)> ==> <androidx.fragment.app.FragmentTransitionImpl: void bfsAddViewChildren(java.util.List,android.view.View)>
CLINIT edge: $r2 = staticinvoke <androidx.core.view.ViewCompat: java.lang.String getTransitionName(android.view.View)>($r1) in <androidx.fragment.app.FragmentTransitionImpl: void bfsAddViewChildren(java.util.List,android.view.View)> ==> <androidx.core.view.ViewCompat: void <clinit>()>
STATIC edge: $r2 = staticinvoke <androidx.core.view.ViewCompat: java.lang.String getTransitionName(android.view.View)>($r1) in <androidx.fragment.app.FragmentTransitionImpl: void bfsAddViewChildren(java.util.List,android.view.View)> ==> <androidx.core.view.ViewCompat: java.lang.String getTransitionName(android.view.View)>
STATIC edge: $z0 = staticinvoke <androidx.fragment.app.FragmentTransitionImpl: boolean containedBeforeIndex(java.util.List,android.view.View,int)>($r0, $r1, $i0) in <androidx.fragment.app.FragmentTransitionImpl: void bfsAddViewChildren(java.util.List,android.view.View)> ==> <androidx.fragment.app.FragmentTransitionImpl: boolean containedBeforeIndex(java.util.List,android.view.View,int)>
STATIC edge: $z0 = staticinvoke <androidx.fragment.app.FragmentTransitionImpl: boolean containedBeforeIndex(java.util.List,android.view.View,int)>($r0, $r1, $i0) in <androidx.fragment.app.FragmentTransitionImpl: void bfsAddViewChildren(java.util.List,android.view.View)> ==> <androidx.fragment.app.FragmentTransitionImpl: boolean containedBeforeIndex(java.util.List,android.view.View,int)>
CLINIT edge: $r2 = staticinvoke <androidx.core.view.ViewCompat: java.lang.String getTransitionName(android.view.View)>($r1) in <androidx.fragment.app.FragmentTransitionImpl: void bfsAddViewChildren(java.util.List,android.view.View)> ==> <androidx.core.view.ViewCompat: void <clinit>()>
SPECIAL edge: specialinvoke $r2.<androidx.fragment.app.FragmentTransitionCompat21$5: void <init>(androidx.fragment.app.FragmentTransitionCompat21,android.graphics.Rect)>(r0, $r1) in <androidx.fragment.app.FragmentTransitionCompat21: void setEpicenter(java.lang.Object,android.graphics.Rect)> ==> <androidx.fragment.app.FragmentTransitionCompat21$5: void <init>(androidx.fragment.app.FragmentTransitionCompat21,android.graphics.Rect)>
VIRTUAL edge: virtualinvoke r0.<androidx.fragment.app.FragmentTransitionCompat21: void addTargets(java.lang.Object,java.util.ArrayList)>($r4, $r2) in <androidx.fragment.app.FragmentTransitionCompat21: void setSharedElementTargets(java.lang.Object,android.view.View,java.util.ArrayList)> ==> <androidx.fragment.app.FragmentTransitionCompat21: void addTargets(java.lang.Object,java.util.ArrayList)>
STATIC edge: $z0 = staticinvoke <androidx.fragment.app.FragmentTransitionCompat21: boolean hasSimpleTarget(android.transition.Transition)>($r3) in <androidx.fragment.app.FragmentTransitionCompat21: void addTargets(java.lang.Object,java.util.ArrayList)> ==> <androidx.fragment.app.FragmentTransitionCompat21: boolean hasSimpleTarget(android.transition.Transition)>
STATIC edge: $z0 = staticinvoke <androidx.fragment.app.FragmentTransitionCompat21: boolean isNullOrEmpty(java.util.List)>($r5) in <androidx.fragment.app.FragmentTransitionCompat21: void addTargets(java.lang.Object,java.util.ArrayList)> ==> <androidx.fragment.app.FragmentTransitionImpl: boolean isNullOrEmpty(java.util.List)>
VIRTUAL edge: virtualinvoke r0.<androidx.fragment.app.FragmentTransitionCompat21: void addTargets(java.lang.Object,java.util.ArrayList)>($r3, $r1) in <androidx.fragment.app.FragmentTransitionCompat21: void addTargets(java.lang.Object,java.util.ArrayList)> ==> <androidx.fragment.app.FragmentTransitionCompat21: void addTargets(java.lang.Object,java.util.ArrayList)>
VIRTUAL edge: virtualinvoke $r1.<androidx.fragment.app.FragmentTransitionImpl: void findNamedViews(java.util.Map,android.view.View)>($r12, $r5) in <androidx.fragment.app.FragmentTransition: androidx.collection.ArrayMap captureInSharedElements(androidx.fragment.app.FragmentTransitionImpl,androidx.collection.ArrayMap,java.lang.Object,androidx.fragment.app.FragmentTransition$FragmentContainerTransition)> ==> <androidx.fragment.app.FragmentTransitionImpl: void findNamedViews(java.util.Map,android.view.View)>
CLINIT edge: $r3 = staticinvoke <androidx.core.view.ViewCompat: java.lang.String getTransitionName(android.view.View)>($r2) in <androidx.fragment.app.FragmentTransitionImpl: void findNamedViews(java.util.Map,android.view.View)> ==> <androidx.core.view.ViewCompat: void <clinit>()>
STATIC edge: $r3 = staticinvoke <androidx.core.view.ViewCompat: java.lang.String getTransitionName(android.view.View)>($r2) in <androidx.fragment.app.FragmentTransitionImpl: void findNamedViews(java.util.Map,android.view.View)> ==> <androidx.core.view.ViewCompat: java.lang.String getTransitionName(android.view.View)>
INTERFACE edge: interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r2) in <androidx.fragment.app.FragmentTransitionImpl: void findNamedViews(java.util.Map,android.view.View)> ==> <androidx.collection.SimpleArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
STATIC edge: staticinvoke <androidx.collection.SimpleArrayMap: void freeArrays(int[],java.lang.Object[],int)>($r4, $r3, $i0) in <androidx.collection.SimpleArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <androidx.collection.SimpleArrayMap: void freeArrays(int[],java.lang.Object[],int)>
VIRTUAL edge: $i2 = virtualinvoke r0.<androidx.collection.SimpleArrayMap: int indexOfNull()>() in <androidx.collection.SimpleArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <androidx.collection.SimpleArrayMap: int indexOfNull()>
VIRTUAL edge: $i2 = virtualinvoke r0.<androidx.collection.SimpleArrayMap: int indexOf(java.lang.Object,int)>($r2, $i1) in <androidx.collection.SimpleArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <androidx.collection.SimpleArrayMap: int indexOf(java.lang.Object,int)>
SPECIAL edge: specialinvoke r0.<androidx.collection.SimpleArrayMap: void allocArrays(int)>($i3) in <androidx.collection.SimpleArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <androidx.collection.SimpleArrayMap: void allocArrays(int)>
VIRTUAL edge: $i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <androidx.collection.SimpleArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <java.lang.Object: int hashCode()>
VIRTUAL edge: $i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <androidx.collection.SimpleArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <java.lang.String: int hashCode()>
VIRTUAL edge: virtualinvoke r0.<androidx.fragment.app.FragmentTransitionImpl: void findNamedViews(java.util.Map,android.view.View)>($r1, $r2) in <androidx.fragment.app.FragmentTransitionImpl: void findNamedViews(java.util.Map,android.view.View)> ==> <androidx.fragment.app.FragmentTransitionImpl: void findNamedViews(java.util.Map,android.view.View)>
VIRTUAL edge: $r3 = virtualinvoke $r1.<androidx.fragment.app.FragmentTransitionImpl: java.lang.Object cloneTransition(java.lang.Object)>($r3) in <androidx.fragment.app.FragmentTransition: java.lang.Object getSharedElementTransition(androidx.fragment.app.FragmentTransitionImpl,androidx.fragment.app.Fragment,androidx.fragment.app.Fragment,boolean)> ==> <androidx.fragment.app.FragmentTransitionCompat21: java.lang.Object cloneTransition(java.lang.Object)>
VIRTUAL edge: $r3 = virtualinvoke $r1.<androidx.fragment.app.FragmentTransitionImpl: java.lang.Object wrapTransitionInSet(java.lang.Object)>($r3) in <androidx.fragment.app.FragmentTransition: java.lang.Object getSharedElementTransition(androidx.fragment.app.FragmentTransitionImpl,androidx.fragment.app.Fragment,androidx.fragment.app.Fragment,boolean)> ==> <androidx.fragment.app.FragmentTransitionCompat21: java.lang.Object wrapTransitionInSet(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r1.<androidx.fragment.app.FragmentTransitionImpl: void findNamedViews(java.util.Map,android.view.View)>($r12, $r5) in <androidx.fragment.app.FragmentTransition: androidx.collection.ArrayMap captureOutSharedElements(androidx.fragment.app.FragmentTransitionImpl,androidx.collection.ArrayMap,java.lang.Object,androidx.fragment.app.FragmentTransition$FragmentContainerTransition)> ==> <androidx.fragment.app.FragmentTransitionImpl: void findNamedViews(java.util.Map,android.view.View)>
VIRTUAL edge: virtualinvoke $r0.<androidx.fragment.app.FragmentTransitionImpl: void setEpicenter(java.lang.Object,android.view.View)>($r1, $r8) in <androidx.fragment.app.FragmentTransition: void setOutEpicenter(androidx.fragment.app.FragmentTransitionImpl,java.lang.Object,java.lang.Object,androidx.collection.ArrayMap,boolean,androidx.fragment.app.BackStackRecord)> ==> <androidx.fragment.app.FragmentTransitionCompat21: void setEpicenter(java.lang.Object,android.view.View)>
SPECIAL edge: specialinvoke $r5.<androidx.fragment.app.FragmentTransitionCompat21$1: void <init>(androidx.fragment.app.FragmentTransitionCompat21,android.graphics.Rect)>(r0, $r1) in <androidx.fragment.app.FragmentTransitionCompat21: void setEpicenter(java.lang.Object,android.view.View)> ==> <androidx.fragment.app.FragmentTransitionCompat21$1: void <init>(androidx.fragment.app.FragmentTransitionCompat21,android.graphics.Rect)>
VIRTUAL edge: virtualinvoke r0.<androidx.fragment.app.FragmentTransitionCompat21: void getBoundsOnScreen(android.view.View,android.graphics.Rect)>($r3, $r1) in <androidx.fragment.app.FragmentTransitionCompat21: void setEpicenter(java.lang.Object,android.view.View)> ==> <androidx.fragment.app.FragmentTransitionImpl: void getBoundsOnScreen(android.view.View,android.graphics.Rect)>
CLINIT edge: $z0 = staticinvoke <androidx.core.view.ViewCompat: boolean isAttachedToWindow(android.view.View)>($r2) in <androidx.fragment.app.FragmentTransitionImpl: void getBoundsOnScreen(android.view.View,android.graphics.Rect)> ==> <androidx.core.view.ViewCompat: void <clinit>()>
STATIC edge: $z0 = staticinvoke <androidx.core.view.ViewCompat: boolean isAttachedToWindow(android.view.View)>($r2) in <androidx.fragment.app.FragmentTransitionImpl: void getBoundsOnScreen(android.view.View,android.graphics.Rect)> ==> <androidx.core.view.ViewCompat: boolean isAttachedToWindow(android.view.View)>
SPECIAL edge: specialinvoke $r6.<androidx.fragment.app.FragmentTransition$2: void <init>(java.util.ArrayList)>($r1) in <androidx.fragment.app.FragmentTransition: void replaceHide(androidx.fragment.app.FragmentTransitionImpl,java.lang.Object,androidx.fragment.app.Fragment,java.util.ArrayList)> ==> <androidx.fragment.app.FragmentTransition$2: void <init>(java.util.ArrayList)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.fragment.app.FragmentTransition$2: void <init>(java.util.ArrayList)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r3.<androidx.fragment.app.FragmentTransitionImpl: void scheduleHideFragmentView(java.lang.Object,android.view.View,java.util.ArrayList)>($r4, $r2, $r1) in <androidx.fragment.app.FragmentTransition: void replaceHide(androidx.fragment.app.FragmentTransitionImpl,java.lang.Object,androidx.fragment.app.Fragment,java.util.ArrayList)> ==> <androidx.fragment.app.FragmentTransitionCompat21: void scheduleHideFragmentView(java.lang.Object,android.view.View,java.util.ArrayList)>
SPECIAL edge: specialinvoke $r3.<androidx.fragment.app.FragmentTransitionCompat21$2: void <init>(androidx.fragment.app.FragmentTransitionCompat21,android.view.View,java.util.ArrayList)>(r0, $r1, $r2) in <androidx.fragment.app.FragmentTransitionCompat21: void scheduleHideFragmentView(java.lang.Object,android.view.View,java.util.ArrayList)> ==> <androidx.fragment.app.FragmentTransitionCompat21$2: void <init>(androidx.fragment.app.FragmentTransitionCompat21,android.view.View,java.util.ArrayList)>
VIRTUAL edge: $r2 = virtualinvoke $r0.<androidx.fragment.app.FragmentTransitionImpl: java.lang.Object cloneTransition(java.lang.Object)>($r2) in <androidx.fragment.app.FragmentTransition: java.lang.Object getEnterTransition(androidx.fragment.app.FragmentTransitionImpl,androidx.fragment.app.Fragment,boolean)> ==> <androidx.fragment.app.FragmentTransitionCompat21: java.lang.Object cloneTransition(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke $r0.<androidx.fragment.app.FragmentTransitionImpl: java.lang.Object cloneTransition(java.lang.Object)>($r2) in <androidx.fragment.app.FragmentTransition: java.lang.Object getExitTransition(androidx.fragment.app.FragmentTransitionImpl,androidx.fragment.app.Fragment,boolean)> ==> <androidx.fragment.app.FragmentTransitionCompat21: java.lang.Object cloneTransition(java.lang.Object)>
SPECIAL edge: specialinvoke $r16.<androidx.fragment.app.FragmentTransition$6: void <init>(androidx.fragment.app.FragmentTransitionImpl,androidx.collection.ArrayMap,java.lang.Object,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,java.util.ArrayList,android.view.View,androidx.fragment.app.Fragment,androidx.fragment.app.Fragment,boolean,java.util.ArrayList,java.lang.Object,android.graphics.Rect)>($r0, $r3, $r12, $r4, $r6, $r2, $r9, $r10, $z0, $r5, $r7, $r14) in <androidx.fragment.app.FragmentTransition: java.lang.Object configureSharedElementsOrdered(androidx.fragment.app.FragmentTransitionImpl,android.view.ViewGroup,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,java.util.ArrayList,java.util.ArrayList,java.lang.Object,java.lang.Object)> ==> <androidx.fragment.app.FragmentTransition$6: void <init>(androidx.fragment.app.FragmentTransitionImpl,androidx.collection.ArrayMap,java.lang.Object,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,java.util.ArrayList,android.view.View,androidx.fragment.app.Fragment,androidx.fragment.app.Fragment,boolean,java.util.ArrayList,java.lang.Object,android.graphics.Rect)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.fragment.app.FragmentTransition$6: void <init>(androidx.fragment.app.FragmentTransitionImpl,androidx.collection.ArrayMap,java.lang.Object,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,java.util.ArrayList,android.view.View,androidx.fragment.app.Fragment,androidx.fragment.app.Fragment,boolean,java.util.ArrayList,java.lang.Object,android.graphics.Rect)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r13 = virtualinvoke $r11.<androidx.collection.ArrayMap: java.util.Collection values()>() in <androidx.fragment.app.FragmentTransition: java.lang.Object configureSharedElementsOrdered(androidx.fragment.app.FragmentTransitionImpl,android.view.ViewGroup,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,java.util.ArrayList,java.util.ArrayList,java.lang.Object,java.lang.Object)> ==> <androidx.collection.ArrayMap: java.util.Collection values()>
SPECIAL edge: $r1 = specialinvoke r0.<androidx.collection.ArrayMap: androidx.collection.MapCollections getCollection()>() in <androidx.collection.ArrayMap: java.util.Collection values()> ==> <androidx.collection.ArrayMap: androidx.collection.MapCollections getCollection()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<androidx.collection.MapCollections: java.util.Collection getValues()>() in <androidx.collection.ArrayMap: java.util.Collection values()> ==> <androidx.collection.MapCollections: java.util.Collection getValues()>
SPECIAL edge: specialinvoke $r1.<androidx.collection.MapCollections$ValuesCollection: void <init>(androidx.collection.MapCollections)>(r0) in <androidx.collection.MapCollections: java.util.Collection getValues()> ==> <androidx.collection.MapCollections$ValuesCollection: void <init>(androidx.collection.MapCollections)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.collection.MapCollections$ValuesCollection: void <init>(androidx.collection.MapCollections)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r0.<androidx.collection.ArrayMap: boolean isEmpty()>() in <androidx.fragment.app.FragmentTransition: androidx.collection.ArrayMap captureOutSharedElements(androidx.fragment.app.FragmentTransitionImpl,androidx.collection.ArrayMap,java.lang.Object,androidx.fragment.app.FragmentTransition$FragmentContainerTransition)> ==> <androidx.collection.SimpleArrayMap: boolean isEmpty()>
VIRTUAL edge: virtualinvoke $r0.<androidx.collection.ArrayMap: java.lang.Object remove(java.lang.Object)>($r9) in <androidx.fragment.app.FragmentTransition: androidx.collection.ArrayMap captureOutSharedElements(androidx.fragment.app.FragmentTransitionImpl,androidx.collection.ArrayMap,java.lang.Object,androidx.fragment.app.FragmentTransition$FragmentContainerTransition)> ==> <androidx.collection.SimpleArrayMap: java.lang.Object remove(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r0.<androidx.collection.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, $r9) in <androidx.fragment.app.FragmentTransition: androidx.collection.ArrayMap captureOutSharedElements(androidx.fragment.app.FragmentTransitionImpl,androidx.collection.ArrayMap,java.lang.Object,androidx.fragment.app.FragmentTransition$FragmentContainerTransition)> ==> <androidx.collection.SimpleArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r0.<androidx.collection.ArrayMap: void clear()>() in <androidx.fragment.app.FragmentTransition: androidx.collection.ArrayMap captureOutSharedElements(androidx.fragment.app.FragmentTransitionImpl,androidx.collection.ArrayMap,java.lang.Object,androidx.fragment.app.FragmentTransition$FragmentContainerTransition)> ==> <androidx.collection.SimpleArrayMap: void clear()>
INTERFACE edge: $z0 = interfaceinvoke $r0.<java.util.Collection: boolean contains(java.lang.Object)>($r4) in <androidx.collection.MapCollections: boolean retainAllHelper(java.util.Map,java.util.Collection)> ==> <androidx.collection.MapCollections$KeySet: boolean contains(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<androidx.collection.MapCollections: int colIndexOfKey(java.lang.Object)>($r2) in <androidx.collection.MapCollections$KeySet: boolean contains(java.lang.Object)> ==> <androidx.collection.ArraySet$1: int colIndexOfKey(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<androidx.collection.ArraySet: int indexOf(java.lang.Object)>($r2) in <androidx.collection.ArraySet$1: int colIndexOfKey(java.lang.Object)> ==> <androidx.collection.ArraySet: int indexOf(java.lang.Object)>
SPECIAL edge: $i0 = specialinvoke r0.<androidx.collection.ArraySet: int indexOfNull()>() in <androidx.collection.ArraySet: int indexOf(java.lang.Object)> ==> <androidx.collection.ArraySet: int indexOfNull()>
SPECIAL edge: $i0 = specialinvoke r0.<androidx.collection.ArraySet: int indexOf(java.lang.Object,int)>($r1, $i0) in <androidx.collection.ArraySet: int indexOf(java.lang.Object)> ==> <androidx.collection.ArraySet: int indexOf(java.lang.Object,int)>
VIRTUAL edge: virtualinvoke $r0.<androidx.fragment.app.FragmentTransitionImpl: void setSharedElementTargets(java.lang.Object,android.view.View,java.util.ArrayList)>($r12, $r2, $r5) in <androidx.fragment.app.FragmentTransition: java.lang.Object configureSharedElementsOrdered(androidx.fragment.app.FragmentTransitionImpl,android.view.ViewGroup,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,java.util.ArrayList,java.util.ArrayList,java.lang.Object,java.lang.Object)> ==> <androidx.fragment.app.FragmentTransitionCompat21: void setSharedElementTargets(java.lang.Object,android.view.View,java.util.ArrayList)>
VIRTUAL edge: virtualinvoke $r0.<androidx.fragment.app.FragmentTransitionImpl: void setEpicenter(java.lang.Object,android.graphics.Rect)>($r7, $r14) in <androidx.fragment.app.FragmentTransition: java.lang.Object configureSharedElementsOrdered(androidx.fragment.app.FragmentTransitionImpl,android.view.ViewGroup,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,java.util.ArrayList,java.util.ArrayList,java.lang.Object,java.lang.Object)> ==> <androidx.fragment.app.FragmentTransitionCompat21: void setEpicenter(java.lang.Object,android.graphics.Rect)>
VIRTUAL edge: virtualinvoke $r0.<androidx.fragment.app.FragmentTransitionImpl: void captureTransitioningViews(java.util.ArrayList,android.view.View)>($r5, $r6) in <androidx.fragment.app.FragmentTransition: java.util.ArrayList configureEnteringExitingViews(androidx.fragment.app.FragmentTransitionImpl,java.lang.Object,androidx.fragment.app.Fragment,java.util.ArrayList,android.view.View)> ==> <androidx.fragment.app.FragmentTransitionImpl: void captureTransitioningViews(java.util.ArrayList,android.view.View)>
VIRTUAL edge: virtualinvoke $r0.<androidx.fragment.app.FragmentTransitionImpl: void addTargets(java.lang.Object,java.util.ArrayList)>($r1, $r5) in <androidx.fragment.app.FragmentTransition: java.util.ArrayList configureEnteringExitingViews(androidx.fragment.app.FragmentTransitionImpl,java.lang.Object,androidx.fragment.app.Fragment,java.util.ArrayList,android.view.View)> ==> <androidx.fragment.app.FragmentTransitionCompat21: void addTargets(java.lang.Object,java.util.ArrayList)>
STATIC edge: $z0 = staticinvoke <androidx.core.view.ViewGroupCompat: boolean isTransitionGroup(android.view.ViewGroup)>($r3) in <androidx.fragment.app.FragmentTransitionImpl: void captureTransitioningViews(java.util.ArrayList,android.view.View)> ==> <androidx.core.view.ViewGroupCompat: boolean isTransitionGroup(android.view.ViewGroup)>
STATIC edge: $z0 = staticinvoke <androidx.core.view.ViewGroupCompat$Api21Impl: boolean isTransitionGroup(android.view.ViewGroup)>($r0) in <androidx.core.view.ViewGroupCompat: boolean isTransitionGroup(android.view.ViewGroup)> ==> <androidx.core.view.ViewGroupCompat$Api21Impl: boolean isTransitionGroup(android.view.ViewGroup)>
VIRTUAL edge: virtualinvoke r0.<androidx.fragment.app.FragmentTransitionImpl: void captureTransitioningViews(java.util.ArrayList,android.view.View)>($r1, $r2) in <androidx.fragment.app.FragmentTransitionImpl: void captureTransitioningViews(java.util.ArrayList,android.view.View)> ==> <androidx.fragment.app.FragmentTransitionImpl: void captureTransitioningViews(java.util.ArrayList,android.view.View)>
VIRTUAL edge: $r0 = virtualinvoke $r3.<androidx.fragment.app.FragmentTransitionImpl: java.lang.Object mergeTransitionsTogether(java.lang.Object,java.lang.Object,java.lang.Object)>($r1, $r0, $r2) in <androidx.fragment.app.FragmentTransition: java.lang.Object mergeTransitions(androidx.fragment.app.FragmentTransitionImpl,java.lang.Object,java.lang.Object,java.lang.Object,androidx.fragment.app.Fragment,boolean)> ==> <androidx.fragment.app.FragmentTransitionCompat21: java.lang.Object mergeTransitionsTogether(java.lang.Object,java.lang.Object,java.lang.Object)>
VIRTUAL edge: $r0 = virtualinvoke $r3.<androidx.fragment.app.FragmentTransitionImpl: java.lang.Object mergeTransitionsInSequence(java.lang.Object,java.lang.Object,java.lang.Object)>($r1, $r0, $r2) in <androidx.fragment.app.FragmentTransition: java.lang.Object mergeTransitions(androidx.fragment.app.FragmentTransitionImpl,java.lang.Object,java.lang.Object,java.lang.Object,androidx.fragment.app.Fragment,boolean)> ==> <androidx.fragment.app.FragmentTransitionCompat21: java.lang.Object mergeTransitionsInSequence(java.lang.Object,java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r9.<androidx.fragment.app.FragmentTransition$4: void <init>(java.lang.Object,androidx.fragment.app.FragmentTransitionImpl,android.view.View,androidx.fragment.app.Fragment,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList,java.lang.Object)>($r5, $r0, $r3, $r2, $r4, $r6, $r8, $r7) in <androidx.fragment.app.FragmentTransition: void scheduleTargetChange(androidx.fragment.app.FragmentTransitionImpl,android.view.ViewGroup,androidx.fragment.app.Fragment,android.view.View,java.util.ArrayList,java.lang.Object,java.util.ArrayList,java.lang.Object,java.util.ArrayList)> ==> <androidx.fragment.app.FragmentTransition$4: void <init>(java.lang.Object,androidx.fragment.app.FragmentTransitionImpl,android.view.View,androidx.fragment.app.Fragment,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.fragment.app.FragmentTransition$4: void <init>(java.lang.Object,androidx.fragment.app.FragmentTransitionImpl,android.view.View,androidx.fragment.app.Fragment,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList,java.lang.Object)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r10.<androidx.collection.ArrayMap: void <init>()>() in <androidx.fragment.app.FragmentTransition: androidx.collection.ArrayMap calculateNameOverrides(int,java.util.ArrayList,java.util.ArrayList,int,int)> ==> <androidx.collection.ArrayMap: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r10.<androidx.collection.ArrayMap: java.lang.Object remove(java.lang.Object)>($r8) in <androidx.fragment.app.FragmentTransition: androidx.collection.ArrayMap calculateNameOverrides(int,java.util.ArrayList,java.util.ArrayList,int,int)> ==> <androidx.collection.SimpleArrayMap: java.lang.Object remove(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r10.<androidx.collection.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r9) in <androidx.fragment.app.FragmentTransition: androidx.collection.ArrayMap calculateNameOverrides(int,java.util.ArrayList,java.util.ArrayList,int,int)> ==> <androidx.collection.SimpleArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r17.<androidx.fragment.app.FragmentTransition$1: void <init>(androidx.fragment.app.FragmentTransition$Callback,androidx.fragment.app.Fragment,androidx.core.os.CancellationSignal)>($r3, $r7, $r16) in <androidx.fragment.app.FragmentTransition: void configureTransitionsReordered(android.view.ViewGroup,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$Callback)> ==> <androidx.fragment.app.FragmentTransition$1: void <init>(androidx.fragment.app.FragmentTransition$Callback,androidx.fragment.app.Fragment,androidx.core.os.CancellationSignal)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.fragment.app.FragmentTransition$1: void <init>(androidx.fragment.app.FragmentTransition$Callback,androidx.fragment.app.Fragment,androidx.core.os.CancellationSignal)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r16.<androidx.core.os.CancellationSignal: void <init>()>() in <androidx.fragment.app.FragmentTransition: void configureTransitionsReordered(android.view.ViewGroup,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$Callback)> ==> <androidx.core.os.CancellationSignal: void <init>()>
INTERFACE edge: $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r9) in <androidx.fragment.app.FragmentTransitionImpl: void setNameOverridesReordered(android.view.View,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList,java.util.Map)> ==> <androidx.collection.SimpleArrayMap: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r3.<androidx.collection.ArrayMap: boolean isEmpty()>() in <androidx.fragment.app.FragmentTransition: java.lang.Object configureSharedElementsReordered(androidx.fragment.app.FragmentTransitionImpl,android.view.ViewGroup,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,java.util.ArrayList,java.util.ArrayList,java.lang.Object,java.lang.Object)> ==> <androidx.collection.SimpleArrayMap: boolean isEmpty()>
VIRTUAL edge: $r15 = virtualinvoke $r3.<androidx.collection.ArrayMap: java.util.Set keySet()>() in <androidx.fragment.app.FragmentTransition: java.lang.Object configureSharedElementsReordered(androidx.fragment.app.FragmentTransitionImpl,android.view.ViewGroup,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,java.util.ArrayList,java.util.ArrayList,java.lang.Object,java.lang.Object)> ==> <androidx.collection.ArrayMap: java.util.Set keySet()>
VIRTUAL edge: $r16 = virtualinvoke $r3.<androidx.collection.ArrayMap: java.util.Collection values()>() in <androidx.fragment.app.FragmentTransition: java.lang.Object configureSharedElementsReordered(androidx.fragment.app.FragmentTransitionImpl,android.view.ViewGroup,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,java.util.ArrayList,java.util.ArrayList,java.lang.Object,java.lang.Object)> ==> <androidx.collection.ArrayMap: java.util.Collection values()>
VIRTUAL edge: $z0 = virtualinvoke $r0.<androidx.collection.ArrayMap: boolean isEmpty()>() in <androidx.fragment.app.FragmentTransition: androidx.collection.ArrayMap captureInSharedElements(androidx.fragment.app.FragmentTransitionImpl,androidx.collection.ArrayMap,java.lang.Object,androidx.fragment.app.FragmentTransition$FragmentContainerTransition)> ==> <androidx.collection.SimpleArrayMap: boolean isEmpty()>
VIRTUAL edge: $r9 = virtualinvoke $r0.<androidx.collection.ArrayMap: java.util.Collection values()>() in <androidx.fragment.app.FragmentTransition: androidx.collection.ArrayMap captureInSharedElements(androidx.fragment.app.FragmentTransitionImpl,androidx.collection.ArrayMap,java.lang.Object,androidx.fragment.app.FragmentTransition$FragmentContainerTransition)> ==> <androidx.collection.ArrayMap: java.util.Collection values()>
VIRTUAL edge: virtualinvoke $r0.<androidx.collection.ArrayMap: java.lang.Object remove(java.lang.Object)>($r10) in <androidx.fragment.app.FragmentTransition: androidx.collection.ArrayMap captureInSharedElements(androidx.fragment.app.FragmentTransitionImpl,androidx.collection.ArrayMap,java.lang.Object,androidx.fragment.app.FragmentTransition$FragmentContainerTransition)> ==> <androidx.collection.SimpleArrayMap: java.lang.Object remove(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r0.<androidx.collection.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, $r11) in <androidx.fragment.app.FragmentTransition: androidx.collection.ArrayMap captureInSharedElements(androidx.fragment.app.FragmentTransitionImpl,androidx.collection.ArrayMap,java.lang.Object,androidx.fragment.app.FragmentTransition$FragmentContainerTransition)> ==> <androidx.collection.SimpleArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r0.<androidx.collection.ArrayMap: void clear()>() in <androidx.fragment.app.FragmentTransition: androidx.collection.ArrayMap captureInSharedElements(androidx.fragment.app.FragmentTransitionImpl,androidx.collection.ArrayMap,java.lang.Object,androidx.fragment.app.FragmentTransition$FragmentContainerTransition)> ==> <androidx.collection.SimpleArrayMap: void clear()>
INTERFACE edge: $z0 = interfaceinvoke $r0.<java.util.Collection: boolean contains(java.lang.Object)>($r4) in <androidx.collection.MapCollections: boolean retainAllHelper(java.util.Map,java.util.Collection)> ==> <androidx.collection.MapCollections$ValuesCollection: boolean contains(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<androidx.collection.MapCollections: int colIndexOfValue(java.lang.Object)>($r2) in <androidx.collection.MapCollections$ValuesCollection: boolean contains(java.lang.Object)> ==> <androidx.collection.ArrayMap$1: int colIndexOfValue(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<androidx.collection.ArrayMap: int indexOfValue(java.lang.Object)>($r2) in <androidx.collection.ArrayMap$1: int colIndexOfValue(java.lang.Object)> ==> <androidx.collection.SimpleArrayMap: int indexOfValue(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <androidx.collection.SimpleArrayMap: int indexOfValue(java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <androidx.collection.SimpleArrayMap: int indexOfValue(java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<androidx.collection.ArrayMap: int size()>() in <androidx.fragment.app.FragmentTransition: java.lang.String findKeyForValue(androidx.collection.ArrayMap,java.lang.String)> ==> <androidx.collection.SimpleArrayMap: int size()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<androidx.collection.ArrayMap: java.lang.Object valueAt(int)>($i1) in <androidx.fragment.app.FragmentTransition: java.lang.String findKeyForValue(androidx.collection.ArrayMap,java.lang.String)> ==> <androidx.collection.SimpleArrayMap: java.lang.Object valueAt(int)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<androidx.collection.ArrayMap: java.lang.Object keyAt(int)>($i1) in <androidx.fragment.app.FragmentTransition: java.lang.String findKeyForValue(androidx.collection.ArrayMap,java.lang.String)> ==> <androidx.collection.SimpleArrayMap: java.lang.Object keyAt(int)>
VIRTUAL edge: $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>($r2) in <androidx.fragment.app.FragmentTransition: java.lang.String findKeyForValue(androidx.collection.ArrayMap,java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r0.<androidx.collection.ArrayMap: int size()>() in <androidx.fragment.app.FragmentTransition: void retainValues(androidx.collection.ArrayMap,androidx.collection.ArrayMap)> ==> <androidx.collection.SimpleArrayMap: int size()>
VIRTUAL edge: $r2 = virtualinvoke $r0.<androidx.collection.ArrayMap: java.lang.Object valueAt(int)>($i0) in <androidx.fragment.app.FragmentTransition: void retainValues(androidx.collection.ArrayMap,androidx.collection.ArrayMap)> ==> <androidx.collection.SimpleArrayMap: java.lang.Object valueAt(int)>
VIRTUAL edge: virtualinvoke $r0.<androidx.collection.ArrayMap: java.lang.Object removeAt(int)>($i0) in <androidx.fragment.app.FragmentTransition: void retainValues(androidx.collection.ArrayMap,androidx.collection.ArrayMap)> ==> <androidx.collection.SimpleArrayMap: java.lang.Object removeAt(int)>
VIRTUAL edge: $z0 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r11) in <androidx.fragment.app.FragmentTransition: androidx.collection.ArrayMap captureInSharedElements(androidx.fragment.app.FragmentTransitionImpl,androidx.collection.ArrayMap,java.lang.Object,androidx.fragment.app.FragmentTransition$FragmentContainerTransition)> ==> <java.lang.String: boolean equals(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.Collection: boolean contains(java.lang.Object)>($r5) in <androidx.fragment.app.FragmentTransition: void addSharedElementsWithMatchingNames(java.util.ArrayList,androidx.collection.ArrayMap,java.util.Collection)> ==> <androidx.collection.MapCollections$KeySet: boolean contains(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.Collection: boolean contains(java.lang.Object)>($r5) in <androidx.fragment.app.FragmentTransition: void addSharedElementsWithMatchingNames(java.util.ArrayList,androidx.collection.ArrayMap,java.util.Collection)> ==> <androidx.collection.MapCollections$ValuesCollection: boolean contains(java.lang.Object)>
SPECIAL edge: specialinvoke $r16.<androidx.fragment.app.FragmentTransition$3: void <init>(androidx.fragment.app.FragmentTransition$Callback,androidx.fragment.app.Fragment,androidx.core.os.CancellationSignal)>($r4, $r6, $r15) in <androidx.fragment.app.FragmentTransition: void configureTransitionsOrdered(android.view.ViewGroup,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$Callback)> ==> <androidx.fragment.app.FragmentTransition$3: void <init>(androidx.fragment.app.FragmentTransition$Callback,androidx.fragment.app.Fragment,androidx.core.os.CancellationSignal)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.fragment.app.FragmentTransition$3: void <init>(androidx.fragment.app.FragmentTransition$Callback,androidx.fragment.app.Fragment,androidx.core.os.CancellationSignal)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r15.<androidx.core.os.CancellationSignal: void <init>()>() in <androidx.fragment.app.FragmentTransition: void configureTransitionsOrdered(android.view.ViewGroup,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$Callback)> ==> <androidx.core.os.CancellationSignal: void <init>()>
VIRTUAL edge: $z1 = virtualinvoke $r3.<androidx.collection.ArrayMap: boolean isEmpty()>() in <androidx.fragment.app.FragmentTransition: java.lang.Object configureSharedElementsOrdered(androidx.fragment.app.FragmentTransitionImpl,android.view.ViewGroup,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,java.util.ArrayList,java.util.ArrayList,java.lang.Object,java.lang.Object)> ==> <androidx.collection.SimpleArrayMap: boolean isEmpty()>
VIRTUAL edge: $z1 = virtualinvoke $r3.<androidx.collection.ArrayMap: boolean isEmpty()>() in <androidx.fragment.app.FragmentTransition: java.lang.Object configureSharedElementsOrdered(androidx.fragment.app.FragmentTransitionImpl,android.view.ViewGroup,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,java.util.ArrayList,java.util.ArrayList,java.lang.Object,java.lang.Object)> ==> <androidx.collection.SimpleArrayMap: boolean isEmpty()>
SPECIAL edge: specialinvoke $r2.<androidx.fragment.app.FragmentTransitionCompat21: void <init>()>() in <androidx.fragment.app.FragmentTransition: void <clinit>()> ==> <androidx.fragment.app.FragmentTransitionCompat21: void <init>()>
SPECIAL edge: specialinvoke $r21.<androidx.collection.ArraySet: void <init>()>() in <androidx.fragment.app.FragmentManager: void executeOpsTogether(java.util.ArrayList,java.util.ArrayList,int,int)> ==> <androidx.collection.ArraySet: void <init>()>
VIRTUAL edge: $r8 = virtualinvoke r0.<androidx.fragment.app.FragmentManager: androidx.fragment.app.Fragment getPrimaryNavigationFragment()>() in <androidx.fragment.app.FragmentManager: void executeOpsTogether(java.util.ArrayList,java.util.ArrayList,int,int)> ==> <androidx.fragment.app.FragmentManager: androidx.fragment.app.Fragment getPrimaryNavigationFragment()>
VIRTUAL edge: $r13 = virtualinvoke r0.<androidx.fragment.app.FragmentManager: androidx.fragment.app.FragmentStateManager createOrGetFragmentStateManager(androidx.fragment.app.Fragment)>($r8) in <androidx.fragment.app.FragmentManager: void executeOpsTogether(java.util.ArrayList,java.util.ArrayList,int,int)> ==> <androidx.fragment.app.FragmentManager: androidx.fragment.app.FragmentStateManager createOrGetFragmentStateManager(androidx.fragment.app.Fragment)>
VIRTUAL edge: $r13 = virtualinvoke r0.<androidx.fragment.app.FragmentManager: androidx.fragment.app.FragmentStateManager createOrGetFragmentStateManager(androidx.fragment.app.Fragment)>($r8) in <androidx.fragment.app.FragmentManager: void executeOpsTogether(java.util.ArrayList,java.util.ArrayList,int,int)> ==> <androidx.fragment.app.FragmentManager: androidx.fragment.app.FragmentStateManager createOrGetFragmentStateManager(androidx.fragment.app.Fragment)>
VIRTUAL edge: virtualinvoke r0.<androidx.fragment.app.FragmentManager: void moveToState(int,boolean)>($i2, 1) in <androidx.fragment.app.FragmentManager: void executeOpsTogether(java.util.ArrayList,java.util.ArrayList,int,int)> ==> <androidx.fragment.app.FragmentManager: void moveToState(int,boolean)>
SPECIAL edge: $r18 = specialinvoke r0.<androidx.fragment.app.FragmentManager: java.util.Set collectChangedControllers(java.util.ArrayList,int,int)>($r1, $i0, $i1) in <androidx.fragment.app.FragmentManager: void executeOpsTogether(java.util.ArrayList,java.util.ArrayList,int,int)> ==> <androidx.fragment.app.FragmentManager: java.util.Set collectChangedControllers(java.util.ArrayList,int,int)>
SPECIAL edge: specialinvoke r0.<androidx.fragment.app.FragmentManager: void addAddedFragments(androidx.collection.ArraySet)>($r21) in <androidx.fragment.app.FragmentManager: void executeOpsTogether(java.util.ArrayList,java.util.ArrayList,int,int)> ==> <androidx.fragment.app.FragmentManager: void addAddedFragments(androidx.collection.ArraySet)>
SPECIAL edge: $i4 = specialinvoke r0.<androidx.fragment.app.FragmentManager: int postponePostponableTransactions(java.util.ArrayList,java.util.ArrayList,int,int,androidx.collection.ArraySet)>($r1, $r2, $i0, $i1, $r21) in <androidx.fragment.app.FragmentManager: void executeOpsTogether(java.util.ArrayList,java.util.ArrayList,int,int)> ==> <androidx.fragment.app.FragmentManager: int postponePostponableTransactions(java.util.ArrayList,java.util.ArrayList,int,int,androidx.collection.ArraySet)>
SPECIAL edge: specialinvoke r0.<androidx.fragment.app.FragmentManager: void makeRemovedFragmentsInvisible(androidx.collection.ArraySet)>($r21) in <androidx.fragment.app.FragmentManager: void executeOpsTogether(java.util.ArrayList,java.util.ArrayList,int,int)> ==> <androidx.fragment.app.FragmentManager: void makeRemovedFragmentsInvisible(androidx.collection.ArraySet)>
VIRTUAL edge: virtualinvoke r0.<androidx.fragment.app.FragmentManager: void moveToState(int,boolean)>($i2, 1) in <androidx.fragment.app.FragmentManager: void executeOpsTogether(java.util.ArrayList,java.util.ArrayList,int,int)> ==> <androidx.fragment.app.FragmentManager: void moveToState(int,boolean)>
SPECIAL edge: specialinvoke r0.<androidx.fragment.app.FragmentManager: void reportBackStackChanged()>() in <androidx.fragment.app.FragmentManager: void executeOpsTogether(java.util.ArrayList,java.util.ArrayList,int,int)> ==> <androidx.fragment.app.FragmentManager: void reportBackStackChanged()>
STATIC edge: $r10 = staticinvoke <androidx.fragment.app.SpecialEffectsController: androidx.fragment.app.SpecialEffectsController getOrCreateController(android.view.ViewGroup,androidx.fragment.app.FragmentManager)>($r9, r0) in <androidx.fragment.app.FragmentManager: java.util.Set collectChangedControllers(java.util.ArrayList,int,int)> ==> <androidx.fragment.app.SpecialEffectsController: androidx.fragment.app.SpecialEffectsController getOrCreateController(android.view.ViewGroup,androidx.fragment.app.FragmentManager)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<androidx.collection.ArraySet: int size()>() in <androidx.fragment.app.FragmentManager: void makeRemovedFragmentsInvisible(androidx.collection.ArraySet)> ==> <androidx.collection.ArraySet: int size()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<androidx.collection.ArraySet: java.lang.Object valueAt(int)>($i1) in <androidx.fragment.app.FragmentManager: void makeRemovedFragmentsInvisible(androidx.collection.ArraySet)> ==> <androidx.collection.ArraySet: java.lang.Object valueAt(int)>
SPECIAL edge: specialinvoke $r9.<androidx.fragment.app.FragmentManager$StartEnterTransitionListener: void <init>(androidx.fragment.app.BackStackRecord,boolean)>($r6, $z0) in <androidx.fragment.app.FragmentManager: int postponePostponableTransactions(java.util.ArrayList,java.util.ArrayList,int,int,androidx.collection.ArraySet)> ==> <androidx.fragment.app.FragmentManager$StartEnterTransitionListener: void <init>(androidx.fragment.app.BackStackRecord,boolean)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.fragment.app.FragmentManager$StartEnterTransitionListener: void <init>(androidx.fragment.app.BackStackRecord,boolean)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<androidx.fragment.app.FragmentManager: void addAddedFragments(androidx.collection.ArraySet)>($r3) in <androidx.fragment.app.FragmentManager: int postponePostponableTransactions(java.util.ArrayList,java.util.ArrayList,int,int,androidx.collection.ArraySet)> ==> <androidx.fragment.app.FragmentManager: void addAddedFragments(androidx.collection.ArraySet)>
VIRTUAL edge: virtualinvoke $r1.<androidx.collection.ArraySet: boolean add(java.lang.Object)>($r6) in <androidx.fragment.app.FragmentManager: void addAddedFragments(androidx.collection.ArraySet)> ==> <androidx.collection.ArraySet: boolean add(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<androidx.fragment.app.FragmentManager: void moveToState(androidx.fragment.app.Fragment,int)>($r6, $i0) in <androidx.fragment.app.FragmentManager: void addAddedFragments(androidx.collection.ArraySet)> ==> <androidx.fragment.app.FragmentManager: void moveToState(androidx.fragment.app.Fragment,int)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<androidx.fragment.app.FragmentStore: java.util.List getFragments()>() in <androidx.fragment.app.FragmentManager: void addAddedFragments(androidx.collection.ArraySet)> ==> <androidx.fragment.app.FragmentStore: java.util.List getFragments()>
SPECIAL edge: specialinvoke $r4.<androidx.fragment.app.FragmentStateManager: void <init>(androidx.fragment.app.FragmentLifecycleCallbacksDispatcher,androidx.fragment.app.FragmentStore,androidx.fragment.app.Fragment)>($r5, $r1, $r2) in <androidx.fragment.app.FragmentManager: androidx.fragment.app.FragmentStateManager createOrGetFragmentStateManager(androidx.fragment.app.Fragment)> ==> <androidx.fragment.app.FragmentStateManager: void <init>(androidx.fragment.app.FragmentLifecycleCallbacksDispatcher,androidx.fragment.app.FragmentStore,androidx.fragment.app.Fragment)>
VIRTUAL edge: virtualinvoke $r4.<androidx.fragment.app.FragmentStateManager: void restoreState(java.lang.ClassLoader)>($r8) in <androidx.fragment.app.FragmentManager: androidx.fragment.app.FragmentStateManager createOrGetFragmentStateManager(androidx.fragment.app.Fragment)> ==> <androidx.fragment.app.FragmentStateManager: void restoreState(java.lang.ClassLoader)>
VIRTUAL edge: virtualinvoke $r4.<androidx.fragment.app.FragmentStateManager: void setFragmentManagerState(int)>($i0) in <androidx.fragment.app.FragmentManager: androidx.fragment.app.FragmentStateManager createOrGetFragmentStateManager(androidx.fragment.app.Fragment)> ==> <androidx.fragment.app.FragmentStateManager: void setFragmentManagerState(int)>
VIRTUAL edge: virtualinvoke $r13.<androidx.fragment.app.FragmentStateManager: void moveToExpectedState()>() in <androidx.fragment.app.FragmentManager: void executeOpsTogether(java.util.ArrayList,java.util.ArrayList,int,int)> ==> <androidx.fragment.app.FragmentStateManager: void moveToExpectedState()>
VIRTUAL edge: $r7 = virtualinvoke $r6.<androidx.fragment.app.FragmentHostCallback: android.content.Context getContext()>() in <androidx.fragment.app.FragmentManager: androidx.fragment.app.FragmentStateManager createOrGetFragmentStateManager(androidx.fragment.app.Fragment)> ==> <androidx.fragment.app.FragmentHostCallback: android.content.Context getContext()>
VIRTUAL edge: $r4 = virtualinvoke $r1.<androidx.fragment.app.FragmentStore: androidx.fragment.app.FragmentStateManager getFragmentStateManager(java.lang.String)>($r3) in <androidx.fragment.app.FragmentManager: androidx.fragment.app.FragmentStateManager createOrGetFragmentStateManager(androidx.fragment.app.Fragment)> ==> <androidx.fragment.app.FragmentStore: androidx.fragment.app.FragmentStateManager getFragmentStateManager(java.lang.String)>
INTERFACE edge: interfaceinvoke $r3.<androidx.fragment.app.FragmentTransition$Callback: void onStart(androidx.fragment.app.Fragment,androidx.core.os.CancellationSignal)>($r7, $r16) in <androidx.fragment.app.FragmentTransition: void configureTransitionsReordered(android.view.ViewGroup,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$Callback)> ==> <androidx.fragment.app.FragmentManager$2: void onStart(androidx.fragment.app.Fragment,androidx.core.os.CancellationSignal)>
INTERFACE edge: interfaceinvoke $r4.<androidx.fragment.app.FragmentTransition$Callback: void onStart(androidx.fragment.app.Fragment,androidx.core.os.CancellationSignal)>($r6, $r15) in <androidx.fragment.app.FragmentTransition: void configureTransitionsOrdered(android.view.ViewGroup,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$Callback)> ==> <androidx.fragment.app.FragmentManager$2: void onStart(androidx.fragment.app.Fragment,androidx.core.os.CancellationSignal)>
VIRTUAL edge: $z1 = virtualinvoke $r0.<androidx.fragment.app.FragmentContainer: boolean onHasView()>() in <androidx.fragment.app.FragmentTransition: void startTransitions(android.content.Context,androidx.fragment.app.FragmentContainer,java.util.ArrayList,java.util.ArrayList,int,int,boolean,androidx.fragment.app.FragmentTransition$Callback)> ==> <androidx.fragment.app.FragmentActivity$HostCallbacks: boolean onHasView()>
VIRTUAL edge: $r12 = virtualinvoke $r0.<androidx.fragment.app.FragmentContainer: android.view.View onFindViewById(int)>($i4) in <androidx.fragment.app.FragmentTransition: void startTransitions(android.content.Context,androidx.fragment.app.FragmentContainer,java.util.ArrayList,java.util.ArrayList,int,int,boolean,androidx.fragment.app.FragmentTransition$Callback)> ==> <androidx.fragment.app.FragmentActivity$HostCallbacks: android.view.View onFindViewById(int)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<androidx.fragment.app.FragmentActivity: android.view.View findViewById(int)>($i0) in <androidx.fragment.app.FragmentActivity$HostCallbacks: android.view.View onFindViewById(int)> ==> <androidx.appcompat.app.AppCompatActivity: android.view.View findViewById(int)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<androidx.fragment.app.FragmentHostCallback: android.content.Context getContext()>() in <androidx.fragment.app.FragmentManager: void executeOpsTogether(java.util.ArrayList,java.util.ArrayList,int,int)> ==> <androidx.fragment.app.FragmentHostCallback: android.content.Context getContext()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<androidx.fragment.app.FragmentHostCallback: android.content.Context getContext()>() in <androidx.fragment.app.FragmentManager: void executeOpsTogether(java.util.ArrayList,java.util.ArrayList,int,int)> ==> <androidx.fragment.app.FragmentHostCallback: android.content.Context getContext()>
VIRTUAL edge: $r7 = virtualinvoke $r6.<androidx.fragment.app.FragmentStore: java.util.List getFragments()>() in <androidx.fragment.app.FragmentManager: void executeOpsTogether(java.util.ArrayList,java.util.ArrayList,int,int)> ==> <androidx.fragment.app.FragmentStore: java.util.List getFragments()>
VIRTUAL edge: virtualinvoke $r6.<androidx.fragment.app.FragmentStore: void makeActive(androidx.fragment.app.FragmentStateManager)>($r13) in <androidx.fragment.app.FragmentManager: void executeOpsTogether(java.util.ArrayList,java.util.ArrayList,int,int)> ==> <androidx.fragment.app.FragmentStore: void makeActive(androidx.fragment.app.FragmentStateManager)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<androidx.fragment.app.FragmentHostCallback: android.os.Handler getHandler()>() in <androidx.fragment.app.FragmentManager: boolean generateOpsForPendingActions(java.util.ArrayList,java.util.ArrayList)> ==> <androidx.fragment.app.FragmentHostCallback: android.os.Handler getHandler()>
SPECIAL edge: specialinvoke r0.<androidx.fragment.app.FragmentManager: void checkStateLoss()>() in <androidx.fragment.app.FragmentManager: void ensureExecReady(boolean)> ==> <androidx.fragment.app.FragmentManager: void checkStateLoss()>
SPECIAL edge: specialinvoke r0.<androidx.fragment.app.FragmentManager: void executePostponedTransaction(java.util.ArrayList,java.util.ArrayList)>(null, null) in <androidx.fragment.app.FragmentManager: void ensureExecReady(boolean)> ==> <androidx.fragment.app.FragmentManager: void executePostponedTransaction(java.util.ArrayList,java.util.ArrayList)>
VIRTUAL edge: $z0 = virtualinvoke r0.<androidx.fragment.app.FragmentManager: boolean isStateSaved()>() in <androidx.fragment.app.FragmentManager: void checkStateLoss()> ==> <androidx.fragment.app.FragmentManager: boolean isStateSaved()>
VIRTUAL edge: $r4 = virtualinvoke $r1.<androidx.fragment.app.FragmentHostCallback: android.os.Handler getHandler()>() in <androidx.fragment.app.FragmentManager: void ensureExecReady(boolean)> ==> <androidx.fragment.app.FragmentHostCallback: android.os.Handler getHandler()>
VIRTUAL edge: virtualinvoke $r4.<androidx.fragment.app.FragmentStore: void burpActive()>() in <androidx.fragment.app.FragmentManager: boolean execPendingActions(boolean)> ==> <androidx.fragment.app.FragmentStore: void burpActive()>
VIRTUAL edge: $r9 = virtualinvoke r0.<androidx.fragment.app.FragmentManager: androidx.fragment.app.SpecialEffectsControllerFactory getSpecialEffectsControllerFactory()>() in <androidx.fragment.app.FragmentManager: java.util.Set collectAllSpecialEffectsController()> ==> <androidx.fragment.app.FragmentManager: androidx.fragment.app.SpecialEffectsControllerFactory getSpecialEffectsControllerFactory()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<androidx.fragment.app.FragmentStore: java.util.List getActiveFragmentStateManagers()>() in <androidx.fragment.app.FragmentManager: java.util.Set collectAllSpecialEffectsController()> ==> <androidx.fragment.app.FragmentStore: java.util.List getActiveFragmentStateManagers()>
VIRTUAL edge: virtualinvoke r0.<androidx.fragment.app.FragmentManager: void moveFragmentToExpectedState(androidx.fragment.app.Fragment)>($r6) in <androidx.fragment.app.FragmentManager: void moveToState(int,boolean)> ==> <androidx.fragment.app.FragmentManager: void moveFragmentToExpectedState(androidx.fragment.app.Fragment)>
VIRTUAL edge: virtualinvoke r0.<androidx.fragment.app.FragmentManager: void moveFragmentToExpectedState(androidx.fragment.app.Fragment)>($r6) in <androidx.fragment.app.FragmentManager: void moveToState(int,boolean)> ==> <androidx.fragment.app.FragmentManager: void moveFragmentToExpectedState(androidx.fragment.app.Fragment)>
SPECIAL edge: specialinvoke r0.<androidx.fragment.app.FragmentManager: void startPendingDeferredFragments()>() in <androidx.fragment.app.FragmentManager: void moveToState(int,boolean)> ==> <androidx.fragment.app.FragmentManager: void startPendingDeferredFragments()>
CLINIT edge: $z0 = staticinvoke <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>(3) in <androidx.fragment.app.FragmentManager: void moveFragmentToExpectedState(androidx.fragment.app.Fragment)> ==> <androidx.fragment.app.FragmentManager: void <clinit>()>
STATIC edge: $r9 = staticinvoke <androidx.fragment.app.FragmentAnim: androidx.fragment.app.FragmentAnim$AnimationOrAnimator loadAnimation(android.content.Context,androidx.fragment.app.Fragment,boolean,boolean)>($r8, $r1, 1, $z0) in <androidx.fragment.app.FragmentManager: void moveFragmentToExpectedState(androidx.fragment.app.Fragment)> ==> <androidx.fragment.app.FragmentAnim: androidx.fragment.app.FragmentAnim$AnimationOrAnimator loadAnimation(android.content.Context,androidx.fragment.app.Fragment,boolean,boolean)>
STATIC edge: $z0 = staticinvoke <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>(3) in <androidx.fragment.app.FragmentManager: void moveFragmentToExpectedState(androidx.fragment.app.Fragment)> ==> <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>
VIRTUAL edge: virtualinvoke r0.<androidx.fragment.app.FragmentManager: void moveToState(androidx.fragment.app.Fragment)>($r1) in <androidx.fragment.app.FragmentManager: void moveFragmentToExpectedState(androidx.fragment.app.Fragment)> ==> <androidx.fragment.app.FragmentManager: void moveToState(androidx.fragment.app.Fragment)>
SPECIAL edge: specialinvoke r0.<androidx.fragment.app.FragmentManager: void completeShowHideFragment(androidx.fragment.app.Fragment)>($r1) in <androidx.fragment.app.FragmentManager: void moveFragmentToExpectedState(androidx.fragment.app.Fragment)> ==> <androidx.fragment.app.FragmentManager: void completeShowHideFragment(androidx.fragment.app.Fragment)>
STATIC edge: $r7 = staticinvoke <androidx.fragment.app.FragmentAnim: androidx.fragment.app.FragmentAnim$AnimationOrAnimator loadAnimation(android.content.Context,androidx.fragment.app.Fragment,boolean,boolean)>($r6, $r1, $z0, $z1) in <androidx.fragment.app.FragmentManager: void completeShowHideFragment(androidx.fragment.app.Fragment)> ==> <androidx.fragment.app.FragmentAnim: androidx.fragment.app.FragmentAnim$AnimationOrAnimator loadAnimation(android.content.Context,androidx.fragment.app.Fragment,boolean,boolean)>
SPECIAL edge: specialinvoke $r3.<androidx.fragment.app.FragmentManager$7: void <init>(androidx.fragment.app.FragmentManager,android.view.ViewGroup,android.view.View,androidx.fragment.app.Fragment)>(r0, $r8, $r4, $r1) in <androidx.fragment.app.FragmentManager: void completeShowHideFragment(androidx.fragment.app.Fragment)> ==> <androidx.fragment.app.FragmentManager$7: void <init>(androidx.fragment.app.FragmentManager,android.view.ViewGroup,android.view.View,androidx.fragment.app.Fragment)>
VIRTUAL edge: virtualinvoke r0.<androidx.fragment.app.FragmentManager: void invalidateMenuForFragment(androidx.fragment.app.Fragment)>($r1) in <androidx.fragment.app.FragmentManager: void completeShowHideFragment(androidx.fragment.app.Fragment)> ==> <androidx.fragment.app.FragmentManager: void invalidateMenuForFragment(androidx.fragment.app.Fragment)>
SPECIAL edge: $z0 = specialinvoke r0.<androidx.fragment.app.FragmentManager: boolean isMenuAvailable(androidx.fragment.app.Fragment)>($r1) in <androidx.fragment.app.FragmentManager: void invalidateMenuForFragment(androidx.fragment.app.Fragment)> ==> <androidx.fragment.app.FragmentManager: boolean isMenuAvailable(androidx.fragment.app.Fragment)>
VIRTUAL edge: $z0 = virtualinvoke r0.<androidx.fragment.app.FragmentManager: boolean checkForMenus()>() in <androidx.fragment.app.FragmentManager: boolean isMenuAvailable(androidx.fragment.app.Fragment)> ==> <androidx.fragment.app.FragmentManager: boolean checkForMenus()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<androidx.fragment.app.FragmentStore: java.util.List getActiveFragments()>() in <androidx.fragment.app.FragmentManager: boolean checkForMenus()> ==> <androidx.fragment.app.FragmentStore: java.util.List getActiveFragments()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<androidx.fragment.app.FragmentHostCallback: android.content.Context getContext()>() in <androidx.fragment.app.FragmentManager: void completeShowHideFragment(androidx.fragment.app.Fragment)> ==> <androidx.fragment.app.FragmentHostCallback: android.content.Context getContext()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<androidx.fragment.app.FragmentHostCallback: android.content.Context getContext()>() in <androidx.fragment.app.FragmentManager: void moveFragmentToExpectedState(androidx.fragment.app.Fragment)> ==> <androidx.fragment.app.FragmentHostCallback: android.content.Context getContext()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<androidx.fragment.app.FragmentStore: boolean containsActiveFragment(java.lang.String)>($r3) in <androidx.fragment.app.FragmentManager: void moveFragmentToExpectedState(androidx.fragment.app.Fragment)> ==> <androidx.fragment.app.FragmentStore: boolean containsActiveFragment(java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<androidx.fragment.app.FragmentStore: void moveToExpectedState()>() in <androidx.fragment.app.FragmentManager: void moveToState(int,boolean)> ==> <androidx.fragment.app.FragmentStore: void moveToExpectedState()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<androidx.fragment.app.FragmentStore: java.util.List getFragments()>() in <androidx.fragment.app.FragmentManager: void moveToState(int,boolean)> ==> <androidx.fragment.app.FragmentStore: java.util.List getFragments()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<androidx.fragment.app.FragmentStore: java.util.List getActiveFragmentStateManagers()>() in <androidx.fragment.app.FragmentManager: void moveToState(int,boolean)> ==> <androidx.fragment.app.FragmentStore: java.util.List getActiveFragmentStateManagers()>
VIRTUAL edge: virtualinvoke $r2.<androidx.fragment.app.FragmentStore: void makeInactive(androidx.fragment.app.FragmentStateManager)>($r7) in <androidx.fragment.app.FragmentManager: void moveToState(int,boolean)> ==> <androidx.fragment.app.FragmentStore: void makeInactive(androidx.fragment.app.FragmentStateManager)>
CLINIT edge: $z0 = staticinvoke <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>(2) in <androidx.fragment.app.FragmentStore: void makeInactive(androidx.fragment.app.FragmentStateManager)> ==> <androidx.fragment.app.FragmentManager: void <clinit>()>
STATIC edge: $z0 = staticinvoke <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>(2) in <androidx.fragment.app.FragmentStore: void makeInactive(androidx.fragment.app.FragmentStateManager)> ==> <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>
VIRTUAL edge: virtualinvoke $r3.<androidx.fragment.app.FragmentManagerViewModel: void removeRetainedFragment(androidx.fragment.app.Fragment)>($r2) in <androidx.fragment.app.FragmentStore: void makeInactive(androidx.fragment.app.FragmentStateManager)> ==> <androidx.fragment.app.FragmentManagerViewModel: void removeRetainedFragment(androidx.fragment.app.Fragment)>
CLINIT edge: $z0 = staticinvoke <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>(2) in <androidx.fragment.app.FragmentManagerViewModel: void removeRetainedFragment(androidx.fragment.app.Fragment)> ==> <androidx.fragment.app.FragmentManager: void <clinit>()>
STATIC edge: $z0 = staticinvoke <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>(2) in <androidx.fragment.app.FragmentManagerViewModel: void removeRetainedFragment(androidx.fragment.app.Fragment)> ==> <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>
CLINIT edge: $z0 = staticinvoke <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>(2) in <androidx.fragment.app.FragmentManagerViewModel: void removeRetainedFragment(androidx.fragment.app.Fragment)> ==> <androidx.fragment.app.FragmentManager: void <clinit>()>
VIRTUAL edge: virtualinvoke r0.<androidx.fragment.app.FragmentStore: void makeInactive(androidx.fragment.app.FragmentStateManager)>($r7) in <androidx.fragment.app.FragmentStore: void moveToExpectedState()> ==> <androidx.fragment.app.FragmentStore: void makeInactive(androidx.fragment.app.FragmentStateManager)>
VIRTUAL edge: virtualinvoke $r1.<androidx.fragment.app.FragmentHostCallback: void onSupportInvalidateOptionsMenu()>() in <androidx.fragment.app.FragmentManager: void moveToState(int,boolean)> ==> <androidx.fragment.app.FragmentActivity$HostCallbacks: void onSupportInvalidateOptionsMenu()>
VIRTUAL edge: virtualinvoke $r1.<androidx.fragment.app.FragmentActivity: void supportInvalidateOptionsMenu()>() in <androidx.fragment.app.FragmentActivity$HostCallbacks: void onSupportInvalidateOptionsMenu()> ==> <androidx.appcompat.app.AppCompatActivity: void supportInvalidateOptionsMenu()>
VIRTUAL edge: $r1 = virtualinvoke r0.<androidx.appcompat.app.AppCompatActivity: androidx.appcompat.app.AppCompatDelegate getDelegate()>() in <androidx.appcompat.app.AppCompatActivity: void supportInvalidateOptionsMenu()> ==> <androidx.appcompat.app.AppCompatActivity: androidx.appcompat.app.AppCompatDelegate getDelegate()>
VIRTUAL edge: virtualinvoke $r1.<androidx.appcompat.app.AppCompatDelegate: void invalidateOptionsMenu()>() in <androidx.appcompat.app.AppCompatActivity: void supportInvalidateOptionsMenu()> ==> <androidx.appcompat.app.AppCompatDelegateImpl: void invalidateOptionsMenu()>
VIRTUAL edge: $r1 = virtualinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.app.ActionBar peekSupportActionBar()>() in <androidx.appcompat.app.AppCompatDelegateImpl: void invalidateOptionsMenu()> ==> <androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.app.ActionBar peekSupportActionBar()>
VIRTUAL edge: $r1 = virtualinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.app.ActionBar getSupportActionBar()>() in <androidx.appcompat.app.AppCompatDelegateImpl: void invalidateOptionsMenu()> ==> <androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.app.ActionBar getSupportActionBar()>
SPECIAL edge: specialinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: void invalidatePanelMenu(int)>(0) in <androidx.appcompat.app.AppCompatDelegateImpl: void invalidateOptionsMenu()> ==> <androidx.appcompat.app.AppCompatDelegateImpl: void invalidatePanelMenu(int)>
VIRTUAL edge: virtualinvoke $r1.<androidx.fragment.app.FragmentStore: void dispatchStateChange(int)>($i0) in <androidx.fragment.app.FragmentManager: void dispatchStateChange(int)> ==> <androidx.fragment.app.FragmentStore: void dispatchStateChange(int)>
VIRTUAL edge: virtualinvoke $r1.<androidx.fragment.app.FragmentManagerViewModel: void setIsStateSaved(boolean)>(0) in <androidx.fragment.app.FragmentManager: void dispatchCreate()> ==> <androidx.fragment.app.FragmentManagerViewModel: void setIsStateSaved(boolean)>
INTERFACE edge: $r3 = interfaceinvoke $r1.<androidx.fragment.app.SpecialEffectsControllerFactory: androidx.fragment.app.SpecialEffectsController createController(android.view.ViewGroup)>($r0) in <androidx.fragment.app.SpecialEffectsController: androidx.fragment.app.SpecialEffectsController getOrCreateController(android.view.ViewGroup,androidx.fragment.app.SpecialEffectsControllerFactory)> ==> <androidx.fragment.app.FragmentManager$4: androidx.fragment.app.SpecialEffectsController createController(android.view.ViewGroup)>
SPECIAL edge: specialinvoke $r2.<androidx.fragment.app.DefaultSpecialEffectsController: void <init>(android.view.ViewGroup)>($r1) in <androidx.fragment.app.FragmentManager$4: androidx.fragment.app.SpecialEffectsController createController(android.view.ViewGroup)> ==> <androidx.fragment.app.DefaultSpecialEffectsController: void <init>(android.view.ViewGroup)>
SPECIAL edge: specialinvoke r0.<androidx.fragment.app.SpecialEffectsController: void <init>(android.view.ViewGroup)>($r1) in <androidx.fragment.app.DefaultSpecialEffectsController: void <init>(android.view.ViewGroup)> ==> <androidx.fragment.app.SpecialEffectsController: void <init>(android.view.ViewGroup)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.fragment.app.SpecialEffectsController: void <init>(android.view.ViewGroup)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r9 = virtualinvoke $r8.<androidx.fragment.app.SpecialEffectsController: androidx.fragment.app.SpecialEffectsController$Operation$LifecycleImpact getAwaitingCompletionLifecycleImpact(androidx.fragment.app.FragmentStateManager)>(r0) in <androidx.fragment.app.FragmentStateManager: int computeExpectedState()> ==> <androidx.fragment.app.SpecialEffectsController: androidx.fragment.app.SpecialEffectsController$Operation$LifecycleImpact getAwaitingCompletionLifecycleImpact(androidx.fragment.app.FragmentStateManager)>
CLINIT edge: $r1 = <androidx.fragment.app.SpecialEffectsController$Operation$LifecycleImpact: androidx.fragment.app.SpecialEffectsController$Operation$LifecycleImpact NONE> in <androidx.fragment.app.SpecialEffectsController: androidx.fragment.app.SpecialEffectsController$Operation$LifecycleImpact getAwaitingCompletionLifecycleImpact(androidx.fragment.app.FragmentStateManager)> ==> <androidx.fragment.app.SpecialEffectsController$Operation$LifecycleImpact: void <clinit>()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<androidx.fragment.app.FragmentStateManager: androidx.fragment.app.Fragment getFragment()>() in <androidx.fragment.app.SpecialEffectsController: androidx.fragment.app.SpecialEffectsController$Operation$LifecycleImpact getAwaitingCompletionLifecycleImpact(androidx.fragment.app.FragmentStateManager)> ==> <androidx.fragment.app.FragmentStateManager: androidx.fragment.app.Fragment getFragment()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<androidx.fragment.app.FragmentStateManager: androidx.fragment.app.Fragment getFragment()>() in <androidx.fragment.app.SpecialEffectsController: androidx.fragment.app.SpecialEffectsController$Operation$LifecycleImpact getAwaitingCompletionLifecycleImpact(androidx.fragment.app.FragmentStateManager)> ==> <androidx.fragment.app.FragmentStateManager: androidx.fragment.app.Fragment getFragment()>
SPECIAL edge: $r4 = specialinvoke r0.<androidx.fragment.app.SpecialEffectsController: androidx.fragment.app.SpecialEffectsController$Operation findPendingOperation(androidx.fragment.app.Fragment)>($r3) in <androidx.fragment.app.SpecialEffectsController: androidx.fragment.app.SpecialEffectsController$Operation$LifecycleImpact getAwaitingCompletionLifecycleImpact(androidx.fragment.app.FragmentStateManager)> ==> <androidx.fragment.app.SpecialEffectsController: androidx.fragment.app.SpecialEffectsController$Operation findPendingOperation(androidx.fragment.app.Fragment)>
SPECIAL edge: $r4 = specialinvoke r0.<androidx.fragment.app.SpecialEffectsController: androidx.fragment.app.SpecialEffectsController$Operation findRunningOperation(androidx.fragment.app.Fragment)>($r3) in <androidx.fragment.app.SpecialEffectsController: androidx.fragment.app.SpecialEffectsController$Operation$LifecycleImpact getAwaitingCompletionLifecycleImpact(androidx.fragment.app.FragmentStateManager)> ==> <androidx.fragment.app.SpecialEffectsController: androidx.fragment.app.SpecialEffectsController$Operation findRunningOperation(androidx.fragment.app.Fragment)>
VIRTUAL edge: virtualinvoke $r7.<androidx.fragment.app.SpecialEffectsController: void enqueueAdd(androidx.fragment.app.SpecialEffectsController$Operation$State,androidx.fragment.app.FragmentStateManager)>($r8, r0) in <androidx.fragment.app.FragmentStateManager: void moveToExpectedState()> ==> <androidx.fragment.app.SpecialEffectsController: void enqueueAdd(androidx.fragment.app.SpecialEffectsController$Operation$State,androidx.fragment.app.FragmentStateManager)>
VIRTUAL edge: virtualinvoke $r7.<androidx.fragment.app.SpecialEffectsController: void enqueueRemove(androidx.fragment.app.FragmentStateManager)>(r0) in <androidx.fragment.app.FragmentStateManager: void moveToExpectedState()> ==> <androidx.fragment.app.SpecialEffectsController: void enqueueRemove(androidx.fragment.app.FragmentStateManager)>
VIRTUAL edge: virtualinvoke $r7.<androidx.fragment.app.SpecialEffectsController: void enqueueHide(androidx.fragment.app.FragmentStateManager)>(r0) in <androidx.fragment.app.FragmentStateManager: void moveToExpectedState()> ==> <androidx.fragment.app.SpecialEffectsController: void enqueueHide(androidx.fragment.app.FragmentStateManager)>
VIRTUAL edge: virtualinvoke $r7.<androidx.fragment.app.SpecialEffectsController: void enqueueShow(androidx.fragment.app.FragmentStateManager)>(r0) in <androidx.fragment.app.FragmentStateManager: void moveToExpectedState()> ==> <androidx.fragment.app.SpecialEffectsController: void enqueueShow(androidx.fragment.app.FragmentStateManager)>
CLINIT edge: $z0 = staticinvoke <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>(2) in <androidx.fragment.app.SpecialEffectsController: void enqueueAdd(androidx.fragment.app.SpecialEffectsController$Operation$State,androidx.fragment.app.FragmentStateManager)> ==> <androidx.fragment.app.FragmentManager: void <clinit>()>
STATIC edge: $z0 = staticinvoke <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>(2) in <androidx.fragment.app.SpecialEffectsController: void enqueueAdd(androidx.fragment.app.SpecialEffectsController$Operation$State,androidx.fragment.app.FragmentStateManager)> ==> <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>
CLINIT edge: $r6 = <androidx.fragment.app.SpecialEffectsController$Operation$LifecycleImpact: androidx.fragment.app.SpecialEffectsController$Operation$LifecycleImpact ADDING> in <androidx.fragment.app.SpecialEffectsController: void enqueueAdd(androidx.fragment.app.SpecialEffectsController$Operation$State,androidx.fragment.app.FragmentStateManager)> ==> <androidx.fragment.app.SpecialEffectsController$Operation$LifecycleImpact: void <clinit>()>
CLINIT edge: $z0 = staticinvoke <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>(2) in <androidx.fragment.app.SpecialEffectsController: void enqueueRemove(androidx.fragment.app.FragmentStateManager)> ==> <androidx.fragment.app.FragmentManager: void <clinit>()>
STATIC edge: $z0 = staticinvoke <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>(2) in <androidx.fragment.app.SpecialEffectsController: void enqueueRemove(androidx.fragment.app.FragmentStateManager)> ==> <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>
CLINIT edge: $r6 = <androidx.fragment.app.SpecialEffectsController$Operation$LifecycleImpact: androidx.fragment.app.SpecialEffectsController$Operation$LifecycleImpact REMOVING> in <androidx.fragment.app.SpecialEffectsController: void enqueueRemove(androidx.fragment.app.FragmentStateManager)> ==> <androidx.fragment.app.SpecialEffectsController$Operation$LifecycleImpact: void <clinit>()>
CLINIT edge: $r5 = <androidx.fragment.app.SpecialEffectsController$Operation$State: androidx.fragment.app.SpecialEffectsController$Operation$State REMOVED> in <androidx.fragment.app.SpecialEffectsController: void enqueueRemove(androidx.fragment.app.FragmentStateManager)> ==> <androidx.fragment.app.SpecialEffectsController$Operation$State: void <clinit>()>
CLINIT edge: $z0 = staticinvoke <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>(2) in <androidx.fragment.app.SpecialEffectsController: void enqueueHide(androidx.fragment.app.FragmentStateManager)> ==> <androidx.fragment.app.FragmentManager: void <clinit>()>
STATIC edge: $z0 = staticinvoke <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>(2) in <androidx.fragment.app.SpecialEffectsController: void enqueueHide(androidx.fragment.app.FragmentStateManager)> ==> <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>
CLINIT edge: $r6 = <androidx.fragment.app.SpecialEffectsController$Operation$LifecycleImpact: androidx.fragment.app.SpecialEffectsController$Operation$LifecycleImpact NONE> in <androidx.fragment.app.SpecialEffectsController: void enqueueHide(androidx.fragment.app.FragmentStateManager)> ==> <androidx.fragment.app.SpecialEffectsController$Operation$LifecycleImpact: void <clinit>()>
CLINIT edge: $r5 = <androidx.fragment.app.SpecialEffectsController$Operation$State: androidx.fragment.app.SpecialEffectsController$Operation$State GONE> in <androidx.fragment.app.SpecialEffectsController: void enqueueHide(androidx.fragment.app.FragmentStateManager)> ==> <androidx.fragment.app.SpecialEffectsController$Operation$State: void <clinit>()>
CLINIT edge: $z0 = staticinvoke <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>(2) in <androidx.fragment.app.SpecialEffectsController: void enqueueShow(androidx.fragment.app.FragmentStateManager)> ==> <androidx.fragment.app.FragmentManager: void <clinit>()>
STATIC edge: $z0 = staticinvoke <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>(2) in <androidx.fragment.app.SpecialEffectsController: void enqueueShow(androidx.fragment.app.FragmentStateManager)> ==> <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>
CLINIT edge: $r6 = <androidx.fragment.app.SpecialEffectsController$Operation$LifecycleImpact: androidx.fragment.app.SpecialEffectsController$Operation$LifecycleImpact NONE> in <androidx.fragment.app.SpecialEffectsController: void enqueueShow(androidx.fragment.app.FragmentStateManager)> ==> <androidx.fragment.app.SpecialEffectsController$Operation$LifecycleImpact: void <clinit>()>
CLINIT edge: $r5 = <androidx.fragment.app.SpecialEffectsController$Operation$State: androidx.fragment.app.SpecialEffectsController$Operation$State VISIBLE> in <androidx.fragment.app.SpecialEffectsController: void enqueueShow(androidx.fragment.app.FragmentStateManager)> ==> <androidx.fragment.app.SpecialEffectsController$Operation$State: void <clinit>()>
VIRTUAL edge: $r3 = virtualinvoke $r1.<androidx.fragment.app.FragmentStateManager: androidx.fragment.app.Fragment getFragment()>() in <androidx.fragment.app.SpecialEffectsController: void enqueueShow(androidx.fragment.app.FragmentStateManager)> ==> <androidx.fragment.app.FragmentStateManager: androidx.fragment.app.Fragment getFragment()>
SPECIAL edge: specialinvoke r0.<androidx.fragment.app.SpecialEffectsController: void enqueue(androidx.fragment.app.SpecialEffectsController$Operation$State,androidx.fragment.app.SpecialEffectsController$Operation$LifecycleImpact,androidx.fragment.app.FragmentStateManager)>($r5, $r6, $r1) in <androidx.fragment.app.SpecialEffectsController: void enqueueShow(androidx.fragment.app.FragmentStateManager)> ==> <androidx.fragment.app.SpecialEffectsController: void enqueue(androidx.fragment.app.SpecialEffectsController$Operation$State,androidx.fragment.app.SpecialEffectsController$Operation$LifecycleImpact,androidx.fragment.app.FragmentStateManager)>
SPECIAL edge: specialinvoke $r11.<androidx.fragment.app.SpecialEffectsController$2: void <init>(androidx.fragment.app.SpecialEffectsController,androidx.fragment.app.SpecialEffectsController$FragmentStateManagerOperation)>(r0, $r8) in <androidx.fragment.app.SpecialEffectsController: void enqueue(androidx.fragment.app.SpecialEffectsController$Operation$State,androidx.fragment.app.SpecialEffectsController$Operation$LifecycleImpact,androidx.fragment.app.FragmentStateManager)> ==> <androidx.fragment.app.SpecialEffectsController$2: void <init>(androidx.fragment.app.SpecialEffectsController,androidx.fragment.app.SpecialEffectsController$FragmentStateManagerOperation)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.fragment.app.SpecialEffectsController$2: void <init>(androidx.fragment.app.SpecialEffectsController,androidx.fragment.app.SpecialEffectsController$FragmentStateManagerOperation)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r10.<androidx.fragment.app.SpecialEffectsController$1: void <init>(androidx.fragment.app.SpecialEffectsController,androidx.fragment.app.SpecialEffectsController$FragmentStateManagerOperation)>(r0, $r8) in <androidx.fragment.app.SpecialEffectsController: void enqueue(androidx.fragment.app.SpecialEffectsController$Operation$State,androidx.fragment.app.SpecialEffectsController$Operation$LifecycleImpact,androidx.fragment.app.FragmentStateManager)> ==> <androidx.fragment.app.SpecialEffectsController$1: void <init>(androidx.fragment.app.SpecialEffectsController,androidx.fragment.app.SpecialEffectsController$FragmentStateManagerOperation)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.fragment.app.SpecialEffectsController$1: void <init>(androidx.fragment.app.SpecialEffectsController,androidx.fragment.app.SpecialEffectsController$FragmentStateManagerOperation)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r8.<androidx.fragment.app.SpecialEffectsController$FragmentStateManagerOperation: void <init>(androidx.fragment.app.SpecialEffectsController$Operation$State,androidx.fragment.app.SpecialEffectsController$Operation$LifecycleImpact,androidx.fragment.app.FragmentStateManager,androidx.core.os.CancellationSignal)>($r5, $r1, $r2, $r4) in <androidx.fragment.app.SpecialEffectsController: void enqueue(androidx.fragment.app.SpecialEffectsController$Operation$State,androidx.fragment.app.SpecialEffectsController$Operation$LifecycleImpact,androidx.fragment.app.FragmentStateManager)> ==> <androidx.fragment.app.SpecialEffectsController$FragmentStateManagerOperation: void <init>(androidx.fragment.app.SpecialEffectsController$Operation$State,androidx.fragment.app.SpecialEffectsController$Operation$LifecycleImpact,androidx.fragment.app.FragmentStateManager,androidx.core.os.CancellationSignal)>
VIRTUAL edge: virtualinvoke $r8.<androidx.fragment.app.SpecialEffectsController$FragmentStateManagerOperation: void addCompletionListener(java.lang.Runnable)>($r10) in <androidx.fragment.app.SpecialEffectsController: void enqueue(androidx.fragment.app.SpecialEffectsController$Operation$State,androidx.fragment.app.SpecialEffectsController$Operation$LifecycleImpact,androidx.fragment.app.FragmentStateManager)> ==> <androidx.fragment.app.SpecialEffectsController$Operation: void addCompletionListener(java.lang.Runnable)>
SPECIAL edge: specialinvoke r0.<androidx.fragment.app.SpecialEffectsController$Operation: void <init>(androidx.fragment.app.SpecialEffectsController$Operation$State,androidx.fragment.app.SpecialEffectsController$Operation$LifecycleImpact,androidx.fragment.app.Fragment,androidx.core.os.CancellationSignal)>($r1, $r2, $r5, $r4) in <androidx.fragment.app.SpecialEffectsController$FragmentStateManagerOperation: void <init>(androidx.fragment.app.SpecialEffectsController$Operation$State,androidx.fragment.app.SpecialEffectsController$Operation$LifecycleImpact,androidx.fragment.app.FragmentStateManager,androidx.core.os.CancellationSignal)> ==> <androidx.fragment.app.SpecialEffectsController$Operation: void <init>(androidx.fragment.app.SpecialEffectsController$Operation$State,androidx.fragment.app.SpecialEffectsController$Operation$LifecycleImpact,androidx.fragment.app.Fragment,androidx.core.os.CancellationSignal)>
SPECIAL edge: specialinvoke $r7.<androidx.fragment.app.SpecialEffectsController$Operation$1: void <init>(androidx.fragment.app.SpecialEffectsController$Operation)>(r0) in <androidx.fragment.app.SpecialEffectsController$Operation: void <init>(androidx.fragment.app.SpecialEffectsController$Operation$State,androidx.fragment.app.SpecialEffectsController$Operation$LifecycleImpact,androidx.fragment.app.Fragment,androidx.core.os.CancellationSignal)> ==> <androidx.fragment.app.SpecialEffectsController$Operation$1: void <init>(androidx.fragment.app.SpecialEffectsController$Operation)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.fragment.app.SpecialEffectsController$Operation$1: void <init>(androidx.fragment.app.SpecialEffectsController$Operation)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r3.<androidx.core.os.CancellationSignal: void setOnCancelListener(androidx.core.os.CancellationSignal$OnCancelListener)>($r7) in <androidx.fragment.app.SpecialEffectsController$Operation: void <init>(androidx.fragment.app.SpecialEffectsController$Operation$State,androidx.fragment.app.SpecialEffectsController$Operation$LifecycleImpact,androidx.fragment.app.Fragment,androidx.core.os.CancellationSignal)> ==> <androidx.core.os.CancellationSignal: void setOnCancelListener(androidx.core.os.CancellationSignal$OnCancelListener)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.fragment.app.SpecialEffectsController$Operation: void <init>(androidx.fragment.app.SpecialEffectsController$Operation$State,androidx.fragment.app.SpecialEffectsController$Operation$LifecycleImpact,androidx.fragment.app.Fragment,androidx.core.os.CancellationSignal)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r4.<androidx.core.os.CancellationSignal: void <init>()>() in <androidx.fragment.app.SpecialEffectsController: void enqueue(androidx.fragment.app.SpecialEffectsController$Operation$State,androidx.fragment.app.SpecialEffectsController$Operation$LifecycleImpact,androidx.fragment.app.FragmentStateManager)> ==> <androidx.core.os.CancellationSignal: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r2.<androidx.fragment.app.FragmentStateManager: androidx.fragment.app.Fragment getFragment()>() in <androidx.fragment.app.SpecialEffectsController: void enqueue(androidx.fragment.app.SpecialEffectsController$Operation$State,androidx.fragment.app.SpecialEffectsController$Operation$LifecycleImpact,androidx.fragment.app.FragmentStateManager)> ==> <androidx.fragment.app.FragmentStateManager: androidx.fragment.app.Fragment getFragment()>
VIRTUAL edge: $r5 = virtualinvoke $r3.<androidx.fragment.app.FragmentStateManager: androidx.fragment.app.Fragment getFragment()>() in <androidx.fragment.app.SpecialEffectsController$FragmentStateManagerOperation: void <init>(androidx.fragment.app.SpecialEffectsController$Operation$State,androidx.fragment.app.SpecialEffectsController$Operation$LifecycleImpact,androidx.fragment.app.FragmentStateManager,androidx.core.os.CancellationSignal)> ==> <androidx.fragment.app.FragmentStateManager: androidx.fragment.app.Fragment getFragment()>
SPECIAL edge: $r7 = specialinvoke r0.<androidx.fragment.app.SpecialEffectsController: androidx.fragment.app.SpecialEffectsController$Operation findPendingOperation(androidx.fragment.app.Fragment)>($r6) in <androidx.fragment.app.SpecialEffectsController: void enqueue(androidx.fragment.app.SpecialEffectsController$Operation$State,androidx.fragment.app.SpecialEffectsController$Operation$LifecycleImpact,androidx.fragment.app.FragmentStateManager)> ==> <androidx.fragment.app.SpecialEffectsController: androidx.fragment.app.SpecialEffectsController$Operation findPendingOperation(androidx.fragment.app.Fragment)>
VIRTUAL edge: $r3 = virtualinvoke $r1.<androidx.fragment.app.FragmentStateManager: androidx.fragment.app.Fragment getFragment()>() in <androidx.fragment.app.SpecialEffectsController: void enqueueHide(androidx.fragment.app.FragmentStateManager)> ==> <androidx.fragment.app.FragmentStateManager: androidx.fragment.app.Fragment getFragment()>
SPECIAL edge: specialinvoke r0.<androidx.fragment.app.SpecialEffectsController: void enqueue(androidx.fragment.app.SpecialEffectsController$Operation$State,androidx.fragment.app.SpecialEffectsController$Operation$LifecycleImpact,androidx.fragment.app.FragmentStateManager)>($r5, $r6, $r1) in <androidx.fragment.app.SpecialEffectsController: void enqueueHide(androidx.fragment.app.FragmentStateManager)> ==> <androidx.fragment.app.SpecialEffectsController: void enqueue(androidx.fragment.app.SpecialEffectsController$Operation$State,androidx.fragment.app.SpecialEffectsController$Operation$LifecycleImpact,androidx.fragment.app.FragmentStateManager)>
VIRTUAL edge: $r3 = virtualinvoke $r1.<androidx.fragment.app.FragmentStateManager: androidx.fragment.app.Fragment getFragment()>() in <androidx.fragment.app.SpecialEffectsController: void enqueueRemove(androidx.fragment.app.FragmentStateManager)> ==> <androidx.fragment.app.FragmentStateManager: androidx.fragment.app.Fragment getFragment()>
SPECIAL edge: specialinvoke r0.<androidx.fragment.app.SpecialEffectsController: void enqueue(androidx.fragment.app.SpecialEffectsController$Operation$State,androidx.fragment.app.SpecialEffectsController$Operation$LifecycleImpact,androidx.fragment.app.FragmentStateManager)>($r5, $r6, $r1) in <androidx.fragment.app.SpecialEffectsController: void enqueueRemove(androidx.fragment.app.FragmentStateManager)> ==> <androidx.fragment.app.SpecialEffectsController: void enqueue(androidx.fragment.app.SpecialEffectsController$Operation$State,androidx.fragment.app.SpecialEffectsController$Operation$LifecycleImpact,androidx.fragment.app.FragmentStateManager)>
VIRTUAL edge: $r4 = virtualinvoke $r2.<androidx.fragment.app.FragmentStateManager: androidx.fragment.app.Fragment getFragment()>() in <androidx.fragment.app.SpecialEffectsController: void enqueueAdd(androidx.fragment.app.SpecialEffectsController$Operation$State,androidx.fragment.app.FragmentStateManager)> ==> <androidx.fragment.app.FragmentStateManager: androidx.fragment.app.Fragment getFragment()>
SPECIAL edge: specialinvoke r0.<androidx.fragment.app.SpecialEffectsController: void enqueue(androidx.fragment.app.SpecialEffectsController$Operation$State,androidx.fragment.app.SpecialEffectsController$Operation$LifecycleImpact,androidx.fragment.app.FragmentStateManager)>($r1, $r6, $r2) in <androidx.fragment.app.SpecialEffectsController: void enqueueAdd(androidx.fragment.app.SpecialEffectsController$Operation$State,androidx.fragment.app.FragmentStateManager)> ==> <androidx.fragment.app.SpecialEffectsController: void enqueue(androidx.fragment.app.SpecialEffectsController$Operation$State,androidx.fragment.app.SpecialEffectsController$Operation$LifecycleImpact,androidx.fragment.app.FragmentStateManager)>
INTERFACE edge: interfaceinvoke $r1.<androidx.core.os.CancellationSignal$OnCancelListener: void onCancel()>() in <androidx.core.os.CancellationSignal: void setOnCancelListener(androidx.core.os.CancellationSignal$OnCancelListener)> ==> <androidx.fragment.app.SpecialEffectsController$Operation$1: void onCancel()>
VIRTUAL edge: virtualinvoke $r1.<androidx.fragment.app.SpecialEffectsController$Operation: void cancel()>() in <androidx.fragment.app.SpecialEffectsController$Operation$1: void onCancel()> ==> <androidx.fragment.app.SpecialEffectsController$Operation: void cancel()>
VIRTUAL edge: $z0 = virtualinvoke r0.<androidx.fragment.app.SpecialEffectsController$Operation: boolean isCanceled()>() in <androidx.fragment.app.SpecialEffectsController$Operation: void cancel()> ==> <androidx.fragment.app.SpecialEffectsController$Operation: boolean isCanceled()>
VIRTUAL edge: virtualinvoke r0.<androidx.fragment.app.SpecialEffectsController$Operation: void complete()>() in <androidx.fragment.app.SpecialEffectsController$Operation: void cancel()> ==> <androidx.fragment.app.SpecialEffectsController$FragmentStateManagerOperation: void complete()>
SPECIAL edge: specialinvoke r0.<androidx.fragment.app.SpecialEffectsController$Operation: void complete()>() in <androidx.fragment.app.SpecialEffectsController$FragmentStateManagerOperation: void complete()> ==> <androidx.fragment.app.SpecialEffectsController$Operation: void complete()>
CLINIT edge: $z0 = staticinvoke <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>(2) in <androidx.fragment.app.SpecialEffectsController$Operation: void complete()> ==> <androidx.fragment.app.FragmentManager: void <clinit>()>
STATIC edge: $z0 = staticinvoke <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>(2) in <androidx.fragment.app.SpecialEffectsController$Operation: void complete()> ==> <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<androidx.fragment.app.FragmentManager: androidx.fragment.app.SpecialEffectsControllerFactory getSpecialEffectsControllerFactory()>() in <androidx.fragment.app.SpecialEffectsController: androidx.fragment.app.SpecialEffectsController getOrCreateController(android.view.ViewGroup,androidx.fragment.app.FragmentManager)> ==> <androidx.fragment.app.FragmentManager: androidx.fragment.app.SpecialEffectsControllerFactory getSpecialEffectsControllerFactory()>
VIRTUAL edge: virtualinvoke $r3.<androidx.lifecycle.LifecycleRegistry: void handleLifecycleEvent(androidx.lifecycle.Lifecycle$Event)>($r1) in <androidx.fragment.app.FragmentActivity: void onCreate(android.os.Bundle)> ==> <androidx.lifecycle.LifecycleRegistry: void handleLifecycleEvent(androidx.lifecycle.Lifecycle$Event)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "event") in <androidx.lifecycle.LifecycleRegistry: void handleLifecycleEvent(androidx.lifecycle.Lifecycle$Event)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke $r2.<androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$State getTargetState()>() in <androidx.lifecycle.LifecycleRegistry: void handleLifecycleEvent(androidx.lifecycle.Lifecycle$Event)> ==> <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$State getTargetState()>
SPECIAL edge: specialinvoke r0.<androidx.lifecycle.LifecycleRegistry: void enforceMainThreadIfNeeded(java.lang.String)>("handleLifecycleEvent") in <androidx.lifecycle.LifecycleRegistry: void handleLifecycleEvent(androidx.lifecycle.Lifecycle$Event)> ==> <androidx.lifecycle.LifecycleRegistry: void enforceMainThreadIfNeeded(java.lang.String)>
SPECIAL edge: specialinvoke r0.<androidx.lifecycle.LifecycleRegistry: void moveToState(androidx.lifecycle.Lifecycle$State)>($r1) in <androidx.lifecycle.LifecycleRegistry: void handleLifecycleEvent(androidx.lifecycle.Lifecycle$Event)> ==> <androidx.lifecycle.LifecycleRegistry: void moveToState(androidx.lifecycle.Lifecycle$State)>
CLINIT edge: $r1 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State INITIALIZED> in <androidx.lifecycle.LifecycleRegistry: void moveToState(androidx.lifecycle.Lifecycle$State)> ==> <androidx.lifecycle.Lifecycle$State: void <clinit>()>
SPECIAL edge: specialinvoke $r4.<androidx.arch.core.internal.FastSafeIterableMap: void <init>()>() in <androidx.lifecycle.LifecycleRegistry: void moveToState(androidx.lifecycle.Lifecycle$State)> ==> <androidx.arch.core.internal.FastSafeIterableMap: void <init>()>
SPECIAL edge: specialinvoke r0.<androidx.lifecycle.LifecycleRegistry: void sync()>() in <androidx.lifecycle.LifecycleRegistry: void moveToState(androidx.lifecycle.Lifecycle$State)> ==> <androidx.lifecycle.LifecycleRegistry: void sync()>
VIRTUAL edge: virtualinvoke $r2.<androidx.lifecycle.LifecycleRegistry: void markState(androidx.lifecycle.Lifecycle$State)>($r3) in <androidx.core.app.ComponentActivity: void onSaveInstanceState(android.os.Bundle)> ==> <androidx.lifecycle.LifecycleRegistry: void markState(androidx.lifecycle.Lifecycle$State)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "state") in <androidx.lifecycle.LifecycleRegistry: void markState(androidx.lifecycle.Lifecycle$State)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke r0.<androidx.lifecycle.LifecycleRegistry: void enforceMainThreadIfNeeded(java.lang.String)>("markState") in <androidx.lifecycle.LifecycleRegistry: void markState(androidx.lifecycle.Lifecycle$State)> ==> <androidx.lifecycle.LifecycleRegistry: void enforceMainThreadIfNeeded(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<androidx.lifecycle.LifecycleRegistry: void setCurrentState(androidx.lifecycle.Lifecycle$State)>($r1) in <androidx.lifecycle.LifecycleRegistry: void markState(androidx.lifecycle.Lifecycle$State)> ==> <androidx.lifecycle.LifecycleRegistry: void setCurrentState(androidx.lifecycle.Lifecycle$State)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "state") in <androidx.lifecycle.LifecycleRegistry: void setCurrentState(androidx.lifecycle.Lifecycle$State)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke r0.<androidx.lifecycle.LifecycleRegistry: void enforceMainThreadIfNeeded(java.lang.String)>("setCurrentState") in <androidx.lifecycle.LifecycleRegistry: void setCurrentState(androidx.lifecycle.Lifecycle$State)> ==> <androidx.lifecycle.LifecycleRegistry: void enforceMainThreadIfNeeded(java.lang.String)>
SPECIAL edge: specialinvoke r0.<androidx.lifecycle.LifecycleRegistry: void moveToState(androidx.lifecycle.Lifecycle$State)>($r1) in <androidx.lifecycle.LifecycleRegistry: void setCurrentState(androidx.lifecycle.Lifecycle$State)> ==> <androidx.lifecycle.LifecycleRegistry: void moveToState(androidx.lifecycle.Lifecycle$State)>
INTERFACE edge: interfaceinvoke target.<java.lang.Runnable: void run()>() in <java.lang.Thread: void run()> ==> <com.example.notificationtest.InfoRead$1: void run()>
INTERFACE edge: $r7 = interfaceinvoke $r5.<okhttp3.EventListener$Factory: okhttp3.EventListener create(okhttp3.Call)>($r6) in <okhttp3.internal.connection.RealCall: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean)> ==> <okhttp3.internal.Util$asFactory$1: okhttp3.EventListener create(okhttp3.Call)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "it") in <okhttp3.internal.Util$asFactory$1: okhttp3.EventListener create(okhttp3.Call)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<okhttp3.ConnectionPool: okhttp3.internal.connection.RealConnectionPool getDelegate$okhttp()>() in <okhttp3.internal.connection.RealCall: void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean)> ==> <okhttp3.ConnectionPool: okhttp3.internal.connection.RealConnectionPool getDelegate$okhttp()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<okhttp3.internal.connection.RealCall$timeout$1: boolean exit()>() in <okhttp3.internal.connection.RealCall: java.io.IOException timeoutExit(java.io.IOException)> ==> <okio.AsyncTimeout: boolean exit()>
CLINIT edge: $r1 = <okio.AsyncTimeout: okio.AsyncTimeout$Companion Companion> in <okio.AsyncTimeout: boolean exit()> ==> <okio.AsyncTimeout: void <clinit>()>
STATIC edge: $z0 = staticinvoke <okio.AsyncTimeout$Companion: boolean access$cancelScheduledTimeout(okio.AsyncTimeout$Companion,okio.AsyncTimeout)>($r1, r0) in <okio.AsyncTimeout: boolean exit()> ==> <okio.AsyncTimeout$Companion: boolean access$cancelScheduledTimeout(okio.AsyncTimeout$Companion,okio.AsyncTimeout)>
CLINIT edge: $r1 = <okio.AsyncTimeout: okio.AsyncTimeout$Companion Companion> in <okio.AsyncTimeout: boolean exit()> ==> <okio.Timeout: void <clinit>()>
SPECIAL edge: $z0 = specialinvoke $r1.<okio.AsyncTimeout$Companion: boolean cancelScheduledTimeout(okio.AsyncTimeout)>($r0) in <okio.AsyncTimeout$Companion: boolean access$cancelScheduledTimeout(okio.AsyncTimeout$Companion,okio.AsyncTimeout)> ==> <okio.AsyncTimeout$Companion: boolean cancelScheduledTimeout(okio.AsyncTimeout)>
CLINIT edge: $r2 = staticinvoke <okio.AsyncTimeout: okio.AsyncTimeout access$getHead$cp()>() in <okio.AsyncTimeout$Companion: boolean cancelScheduledTimeout(okio.AsyncTimeout)> ==> <okio.AsyncTimeout: void <clinit>()>
STATIC edge: $r2 = staticinvoke <okio.AsyncTimeout: okio.AsyncTimeout access$getNext$p(okio.AsyncTimeout)>($r2) in <okio.AsyncTimeout$Companion: boolean cancelScheduledTimeout(okio.AsyncTimeout)> ==> <okio.AsyncTimeout: okio.AsyncTimeout access$getNext$p(okio.AsyncTimeout)>
STATIC edge: staticinvoke <okio.AsyncTimeout: void access$setNext$p(okio.AsyncTimeout,okio.AsyncTimeout)>($r1, null) in <okio.AsyncTimeout$Companion: boolean cancelScheduledTimeout(okio.AsyncTimeout)> ==> <okio.AsyncTimeout: void access$setNext$p(okio.AsyncTimeout,okio.AsyncTimeout)>
STATIC edge: $r3 = staticinvoke <okio.AsyncTimeout: okio.AsyncTimeout access$getNext$p(okio.AsyncTimeout)>($r1) in <okio.AsyncTimeout$Companion: boolean cancelScheduledTimeout(okio.AsyncTimeout)> ==> <okio.AsyncTimeout: okio.AsyncTimeout access$getNext$p(okio.AsyncTimeout)>
STATIC edge: $r3 = staticinvoke <okio.AsyncTimeout: okio.AsyncTimeout access$getNext$p(okio.AsyncTimeout)>($r2) in <okio.AsyncTimeout$Companion: boolean cancelScheduledTimeout(okio.AsyncTimeout)> ==> <okio.AsyncTimeout: okio.AsyncTimeout access$getNext$p(okio.AsyncTimeout)>
STATIC edge: $r2 = staticinvoke <okio.AsyncTimeout: okio.AsyncTimeout access$getHead$cp()>() in <okio.AsyncTimeout$Companion: boolean cancelScheduledTimeout(okio.AsyncTimeout)> ==> <okio.AsyncTimeout: okio.AsyncTimeout access$getHead$cp()>
CLINIT edge: $r2 = staticinvoke <okio.AsyncTimeout: okio.AsyncTimeout access$getHead$cp()>() in <okio.AsyncTimeout$Companion: boolean cancelScheduledTimeout(okio.AsyncTimeout)> ==> <okio.Timeout: void <clinit>()>
CLINIT edge: r0 = <okio.AsyncTimeout: okio.AsyncTimeout head> in <okio.AsyncTimeout: okio.AsyncTimeout access$getHead$cp()> ==> <okio.AsyncTimeout: void <clinit>()>
CLINIT edge: r0 = <okio.AsyncTimeout: okio.AsyncTimeout head> in <okio.AsyncTimeout: okio.AsyncTimeout access$getHead$cp()> ==> <okio.Timeout: void <clinit>()>
VIRTUAL edge: $r5 = virtualinvoke $r1.<okhttp3.Request: okhttp3.HttpUrl url()>() in <okhttp3.internal.http.RealInterceptorChain: okhttp3.Response proceed(okhttp3.Request)> ==> <okhttp3.Request: okhttp3.HttpUrl url()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List interceptors()>() in <okhttp3.internal.connection.RealCall: okhttp3.Response getResponseWithInterceptorChain$okhttp()> ==> <okhttp3.OkHttpClient: java.util.List interceptors()>
VIRTUAL edge: $r7 = virtualinvoke $r4.<okhttp3.OkHttpClient: okhttp3.CookieJar cookieJar()>() in <okhttp3.internal.connection.RealCall: okhttp3.Response getResponseWithInterceptorChain$okhttp()> ==> <okhttp3.OkHttpClient: okhttp3.CookieJar cookieJar()>
VIRTUAL edge: $r8 = virtualinvoke $r4.<okhttp3.OkHttpClient: okhttp3.Cache cache()>() in <okhttp3.internal.connection.RealCall: okhttp3.Response getResponseWithInterceptorChain$okhttp()> ==> <okhttp3.OkHttpClient: okhttp3.Cache cache()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<okhttp3.OkHttpClient: java.util.List networkInterceptors()>() in <okhttp3.internal.connection.RealCall: okhttp3.Response getResponseWithInterceptorChain$okhttp()> ==> <okhttp3.OkHttpClient: java.util.List networkInterceptors()>
VIRTUAL edge: $i0 = virtualinvoke $r4.<okhttp3.OkHttpClient: int connectTimeoutMillis()>() in <okhttp3.internal.connection.RealCall: okhttp3.Response getResponseWithInterceptorChain$okhttp()> ==> <okhttp3.OkHttpClient: int connectTimeoutMillis()>
VIRTUAL edge: $i1 = virtualinvoke $r4.<okhttp3.OkHttpClient: int readTimeoutMillis()>() in <okhttp3.internal.connection.RealCall: okhttp3.Response getResponseWithInterceptorChain$okhttp()> ==> <okhttp3.OkHttpClient: int readTimeoutMillis()>
VIRTUAL edge: $i2 = virtualinvoke $r4.<okhttp3.OkHttpClient: int writeTimeoutMillis()>() in <okhttp3.internal.connection.RealCall: okhttp3.Response getResponseWithInterceptorChain$okhttp()> ==> <okhttp3.OkHttpClient: int writeTimeoutMillis()>
INTERFACE edge: $r3 = interfaceinvoke $r1.<java.lang.Iterable: java.util.Iterator iterator()>() in <kotlin.collections.CollectionsKt__MutableCollectionsKt: boolean addAll(java.util.Collection,java.lang.Iterable)> ==> <kotlin.collections.EmptyList: java.util.Iterator iterator()>
INTERFACE edge: $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>() in <kotlin.collections.CollectionsKt__MutableCollectionsKt: boolean addAll(java.util.Collection,java.lang.Iterable)> ==> <kotlin.collections.EmptyIterator: boolean hasNext()>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>() in <kotlin.collections.CollectionsKt__MutableCollectionsKt: boolean addAll(java.util.Collection,java.lang.Iterable)> ==> <kotlin.collections.EmptyIterator: java.lang.Void next()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<okhttp3.OkHttpClient: okhttp3.Dispatcher dispatcher()>() in <okhttp3.internal.connection.RealCall: okhttp3.Response execute()> ==> <okhttp3.OkHttpClient: okhttp3.Dispatcher dispatcher()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<okhttp3.OkHttpClient: okhttp3.Dispatcher dispatcher()>() in <okhttp3.internal.connection.RealCall: okhttp3.Response execute()> ==> <okhttp3.OkHttpClient: okhttp3.Dispatcher dispatcher()>
VIRTUAL edge: virtualinvoke $r4.<okhttp3.Dispatcher: void executed$okhttp(okhttp3.internal.connection.RealCall)>(r0) in <okhttp3.internal.connection.RealCall: okhttp3.Response execute()> ==> <okhttp3.Dispatcher: void executed$okhttp(okhttp3.internal.connection.RealCall)>
VIRTUAL edge: virtualinvoke $r4.<okhttp3.Dispatcher: void finished$okhttp(okhttp3.internal.connection.RealCall)>(r0) in <okhttp3.internal.connection.RealCall: okhttp3.Response execute()> ==> <okhttp3.Dispatcher: void finished$okhttp(okhttp3.internal.connection.RealCall)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "call") in <okhttp3.Dispatcher: void executed$okhttp(okhttp3.internal.connection.RealCall)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "call") in <okhttp3.Dispatcher: void finished$okhttp(okhttp3.internal.connection.RealCall)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke r0.<okhttp3.Dispatcher: void finished(java.util.Deque,java.lang.Object)>($r3, $r1) in <okhttp3.Dispatcher: void finished$okhttp(okhttp3.internal.connection.RealCall)> ==> <okhttp3.Dispatcher: void finished(java.util.Deque,java.lang.Object)>
CLINIT edge: $r4 = <kotlin.Unit: kotlin.Unit INSTANCE> in <okhttp3.Dispatcher: void finished(java.util.Deque,java.lang.Object)> ==> <kotlin.Unit: void <clinit>()>
SPECIAL edge: specialinvoke $r5.<java.lang.AssertionError: void <init>(java.lang.Object)>("Call wasn\'t in-flight!") in <okhttp3.Dispatcher: void finished(java.util.Deque,java.lang.Object)> ==> <java.lang.AssertionError: void <init>(java.lang.Object)>
SPECIAL edge: $z0 = specialinvoke r0.<okhttp3.Dispatcher: boolean promoteAndExecute()>() in <okhttp3.Dispatcher: void finished(java.util.Deque,java.lang.Object)> ==> <okhttp3.Dispatcher: boolean promoteAndExecute()>
CLINIT edge: $z0 = <okhttp3.internal.Util: boolean assertionsEnabled> in <okhttp3.Dispatcher: boolean promoteAndExecute()> ==> <okhttp3.internal.Util: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r11, "asyncCall") in <okhttp3.Dispatcher: boolean promoteAndExecute()> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r9, "readyAsyncCalls.iterator()") in <okhttp3.Dispatcher: boolean promoteAndExecute()> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
CLINIT edge: $r13 = <kotlin.Unit: kotlin.Unit INSTANCE> in <okhttp3.Dispatcher: boolean promoteAndExecute()> ==> <kotlin.Unit: void <clinit>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.Thread: java.lang.String getName()>() in <okhttp3.Dispatcher: boolean promoteAndExecute()> ==> <java.lang.Thread: java.lang.String getName()>
SPECIAL edge: specialinvoke $r1.<java.lang.AssertionError: void <init>(java.lang.Object)>($r4) in <okhttp3.Dispatcher: boolean promoteAndExecute()> ==> <java.lang.AssertionError: void <init>(java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke r0.<okhttp3.Dispatcher: int runningCallsCount()>() in <okhttp3.Dispatcher: boolean promoteAndExecute()> ==> <okhttp3.Dispatcher: int runningCallsCount()>
VIRTUAL edge: $r14 = virtualinvoke r0.<okhttp3.Dispatcher: java.util.concurrent.ExecutorService executorService()>() in <okhttp3.Dispatcher: boolean promoteAndExecute()> ==> <okhttp3.Dispatcher: java.util.concurrent.ExecutorService executorService()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r2) in <okhttp3.Dispatcher: java.util.concurrent.ExecutorService executorService()> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>
STATIC edge: $r8 = staticinvoke <okhttp3.internal.Util: java.util.concurrent.ThreadFactory threadFactory(java.lang.String,boolean)>($r7, 0) in <okhttp3.Dispatcher: java.util.concurrent.ExecutorService executorService()> ==> <okhttp3.internal.Util: java.util.concurrent.ThreadFactory threadFactory(java.lang.String,boolean)>
CLINIT edge: $r7 = <okhttp3.internal.Util: java.lang.String okHttpName> in <okhttp3.Dispatcher: java.util.concurrent.ExecutorService executorService()> ==> <okhttp3.internal.Util: void <clinit>()>
VIRTUAL edge: virtualinvoke $r2.<okhttp3.internal.connection.RealCall$timeout$1: void enter()>() in <okhttp3.internal.connection.RealCall: okhttp3.Response execute()> ==> <okio.AsyncTimeout: void enter()>
CLINIT edge: $r1 = <okio.AsyncTimeout: okio.AsyncTimeout$Companion Companion> in <okio.AsyncTimeout: void enter()> ==> <okio.AsyncTimeout: void <clinit>()>
STATIC edge: staticinvoke <okio.AsyncTimeout$Companion: void access$scheduleTimeout(okio.AsyncTimeout$Companion,okio.AsyncTimeout,long,boolean)>($r1, r0, $l0, $z0) in <okio.AsyncTimeout: void enter()> ==> <okio.AsyncTimeout$Companion: void access$scheduleTimeout(okio.AsyncTimeout$Companion,okio.AsyncTimeout,long,boolean)>
CLINIT edge: $r1 = <okio.AsyncTimeout: okio.AsyncTimeout$Companion Companion> in <okio.AsyncTimeout: void enter()> ==> <okio.Timeout: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<okio.AsyncTimeout$Companion: void scheduleTimeout(okio.AsyncTimeout,long,boolean)>($r1, $l0, $z0) in <okio.AsyncTimeout$Companion: void access$scheduleTimeout(okio.AsyncTimeout$Companion,okio.AsyncTimeout,long,boolean)> ==> <okio.AsyncTimeout$Companion: void scheduleTimeout(okio.AsyncTimeout,long,boolean)>
CLINIT edge: $r2 = staticinvoke <okio.AsyncTimeout: okio.AsyncTimeout access$getHead$cp()>() in <okio.AsyncTimeout$Companion: void scheduleTimeout(okio.AsyncTimeout,long,boolean)> ==> <okio.AsyncTimeout: void <clinit>()>
STATIC edge: $r1 = staticinvoke <okio.AsyncTimeout: okio.AsyncTimeout access$getHead$cp()>() in <okio.AsyncTimeout$Companion: void scheduleTimeout(okio.AsyncTimeout,long,boolean)> ==> <okio.AsyncTimeout: okio.AsyncTimeout access$getHead$cp()>
STATIC edge: staticinvoke <okio.AsyncTimeout: void access$setNext$p(okio.AsyncTimeout,okio.AsyncTimeout)>($r2, $r1) in <okio.AsyncTimeout$Companion: void scheduleTimeout(okio.AsyncTimeout,long,boolean)> ==> <okio.AsyncTimeout: void access$setNext$p(okio.AsyncTimeout,okio.AsyncTimeout)>
STATIC edge: staticinvoke <okio.AsyncTimeout: void access$setNext$p(okio.AsyncTimeout,okio.AsyncTimeout)>($r1, $r3) in <okio.AsyncTimeout$Companion: void scheduleTimeout(okio.AsyncTimeout,long,boolean)> ==> <okio.AsyncTimeout: void access$setNext$p(okio.AsyncTimeout,okio.AsyncTimeout)>
STATIC edge: $r3 = staticinvoke <okio.AsyncTimeout: okio.AsyncTimeout access$getNext$p(okio.AsyncTimeout)>($r2) in <okio.AsyncTimeout$Companion: void scheduleTimeout(okio.AsyncTimeout,long,boolean)> ==> <okio.AsyncTimeout: okio.AsyncTimeout access$getNext$p(okio.AsyncTimeout)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r3) in <okio.AsyncTimeout$Companion: void scheduleTimeout(okio.AsyncTimeout,long,boolean)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>
STATIC edge: $l3 = staticinvoke <okio.AsyncTimeout: long access$remainingNanos(okio.AsyncTimeout,long)>($r3, $l1) in <okio.AsyncTimeout$Companion: void scheduleTimeout(okio.AsyncTimeout,long,boolean)> ==> <okio.AsyncTimeout: long access$remainingNanos(okio.AsyncTimeout,long)>
STATIC edge: $r3 = staticinvoke <okio.AsyncTimeout: okio.AsyncTimeout access$getNext$p(okio.AsyncTimeout)>($r2) in <okio.AsyncTimeout$Companion: void scheduleTimeout(okio.AsyncTimeout,long,boolean)> ==> <okio.AsyncTimeout: okio.AsyncTimeout access$getNext$p(okio.AsyncTimeout)>
STATIC edge: $r3 = staticinvoke <okio.AsyncTimeout: okio.AsyncTimeout access$getHead$cp()>() in <okio.AsyncTimeout$Companion: void scheduleTimeout(okio.AsyncTimeout,long,boolean)> ==> <okio.AsyncTimeout: okio.AsyncTimeout access$getHead$cp()>
STATIC edge: staticinvoke <okio.AsyncTimeout: void access$setTimeoutAt$p(okio.AsyncTimeout,long)>($r1, $l0) in <okio.AsyncTimeout$Companion: void scheduleTimeout(okio.AsyncTimeout,long,boolean)> ==> <okio.AsyncTimeout: void access$setTimeoutAt$p(okio.AsyncTimeout,long)>
STATIC edge: staticinvoke <okio.AsyncTimeout: void access$setHead$cp(okio.AsyncTimeout)>($r3) in <okio.AsyncTimeout$Companion: void scheduleTimeout(okio.AsyncTimeout,long,boolean)> ==> <okio.AsyncTimeout: void access$setHead$cp(okio.AsyncTimeout)>
CLINIT edge: $r5 = <kotlin.Unit: kotlin.Unit INSTANCE> in <okio.AsyncTimeout$Companion: void scheduleTimeout(okio.AsyncTimeout,long,boolean)> ==> <kotlin.Unit: void <clinit>()>
CLINIT edge: $r2 = staticinvoke <okio.AsyncTimeout: okio.AsyncTimeout access$getHead$cp()>() in <okio.AsyncTimeout$Companion: void scheduleTimeout(okio.AsyncTimeout,long,boolean)> ==> <okio.Timeout: void <clinit>()>
CLINIT edge: <okio.AsyncTimeout: okio.AsyncTimeout head> = $r0 in <okio.AsyncTimeout: void access$setHead$cp(okio.AsyncTimeout)> ==> <okio.AsyncTimeout: void <clinit>()>
CLINIT edge: <okio.AsyncTimeout: okio.AsyncTimeout head> = $r0 in <okio.AsyncTimeout: void access$setHead$cp(okio.AsyncTimeout)> ==> <okio.Timeout: void <clinit>()>
SPECIAL edge: $l0 = specialinvoke $r0.<okio.AsyncTimeout: long remainingNanos(long)>($l0) in <okio.AsyncTimeout: long access$remainingNanos(okio.AsyncTimeout,long)> ==> <okio.AsyncTimeout: long remainingNanos(long)>
SPECIAL edge: specialinvoke $r8.<java.lang.AssertionError: void <init>()>() in <okio.AsyncTimeout$Companion: void scheduleTimeout(okio.AsyncTimeout,long,boolean)> ==> <java.lang.AssertionError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>()> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r7.<okio.AsyncTimeout$Watchdog: void <init>()>() in <okio.AsyncTimeout$Companion: void scheduleTimeout(okio.AsyncTimeout,long,boolean)> ==> <okio.AsyncTimeout$Watchdog: void <init>()>
VIRTUAL edge: virtualinvoke $r7.<okio.AsyncTimeout$Watchdog: void start()>() in <okio.AsyncTimeout$Companion: void scheduleTimeout(okio.AsyncTimeout,long,boolean)> ==> <java.lang.Thread: void start()>
GENERIC_FAKE edge: virtualinvoke $r7.<okio.AsyncTimeout$Watchdog: void start()>() in <okio.AsyncTimeout$Companion: void scheduleTimeout(okio.AsyncTimeout,long,boolean)> ==> <okio.AsyncTimeout$Watchdog: void run()>
CLINIT edge: $r2 = <okio.AsyncTimeout: okio.AsyncTimeout$Companion Companion> in <okio.AsyncTimeout$Watchdog: void run()> ==> <okio.AsyncTimeout: void <clinit>()>
STATIC edge: staticinvoke <okio.AsyncTimeout: void access$setHead$cp(okio.AsyncTimeout)>(null) in <okio.AsyncTimeout$Watchdog: void run()> ==> <okio.AsyncTimeout: void access$setHead$cp(okio.AsyncTimeout)>
STATIC edge: $r4 = staticinvoke <okio.AsyncTimeout: okio.AsyncTimeout access$getHead$cp()>() in <okio.AsyncTimeout$Watchdog: void run()> ==> <okio.AsyncTimeout: okio.AsyncTimeout access$getHead$cp()>
CLINIT edge: $r5 = <kotlin.Unit: kotlin.Unit INSTANCE> in <okio.AsyncTimeout$Watchdog: void run()> ==> <kotlin.Unit: void <clinit>()>
CLINIT edge: $r2 = <okio.AsyncTimeout: okio.AsyncTimeout$Companion Companion> in <okio.AsyncTimeout$Watchdog: void run()> ==> <okio.Timeout: void <clinit>()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<okio.AsyncTimeout$Companion: okio.AsyncTimeout awaitTimeout$okio()>() in <okio.AsyncTimeout$Watchdog: void run()> ==> <okio.AsyncTimeout$Companion: okio.AsyncTimeout awaitTimeout$okio()>
CLINIT edge: $r1 = staticinvoke <okio.AsyncTimeout: okio.AsyncTimeout access$getHead$cp()>() in <okio.AsyncTimeout$Companion: okio.AsyncTimeout awaitTimeout$okio()> ==> <okio.AsyncTimeout: void <clinit>()>
STATIC edge: staticinvoke <okio.AsyncTimeout: void access$setNext$p(okio.AsyncTimeout,okio.AsyncTimeout)>($r1, null) in <okio.AsyncTimeout$Companion: okio.AsyncTimeout awaitTimeout$okio()> ==> <okio.AsyncTimeout: void access$setNext$p(okio.AsyncTimeout,okio.AsyncTimeout)>
STATIC edge: $r4 = staticinvoke <okio.AsyncTimeout: okio.AsyncTimeout access$getNext$p(okio.AsyncTimeout)>($r1) in <okio.AsyncTimeout$Companion: okio.AsyncTimeout awaitTimeout$okio()> ==> <okio.AsyncTimeout: okio.AsyncTimeout access$getNext$p(okio.AsyncTimeout)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r3) in <okio.AsyncTimeout$Companion: okio.AsyncTimeout awaitTimeout$okio()> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>
STATIC edge: $r3 = staticinvoke <okio.AsyncTimeout: okio.AsyncTimeout access$getHead$cp()>() in <okio.AsyncTimeout$Companion: okio.AsyncTimeout awaitTimeout$okio()> ==> <okio.AsyncTimeout: okio.AsyncTimeout access$getHead$cp()>
STATIC edge: $l1 = staticinvoke <okio.AsyncTimeout: long access$remainingNanos(okio.AsyncTimeout,long)>($r1, $l0) in <okio.AsyncTimeout$Companion: okio.AsyncTimeout awaitTimeout$okio()> ==> <okio.AsyncTimeout: long access$remainingNanos(okio.AsyncTimeout,long)>
STATIC edge: $l1 = staticinvoke <okio.AsyncTimeout: long access$getIDLE_TIMEOUT_NANOS$cp()>() in <okio.AsyncTimeout$Companion: okio.AsyncTimeout awaitTimeout$okio()> ==> <okio.AsyncTimeout: long access$getIDLE_TIMEOUT_NANOS$cp()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r1) in <okio.AsyncTimeout$Companion: okio.AsyncTimeout awaitTimeout$okio()> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>
STATIC edge: $l1 = staticinvoke <okio.AsyncTimeout: long access$getIDLE_TIMEOUT_MILLIS$cp()>() in <okio.AsyncTimeout$Companion: okio.AsyncTimeout awaitTimeout$okio()> ==> <okio.AsyncTimeout: long access$getIDLE_TIMEOUT_MILLIS$cp()>
STATIC edge: $r1 = staticinvoke <okio.AsyncTimeout: okio.AsyncTimeout access$getNext$p(okio.AsyncTimeout)>($r1) in <okio.AsyncTimeout$Companion: okio.AsyncTimeout awaitTimeout$okio()> ==> <okio.AsyncTimeout: okio.AsyncTimeout access$getNext$p(okio.AsyncTimeout)>
CLINIT edge: $r1 = staticinvoke <okio.AsyncTimeout: okio.AsyncTimeout access$getHead$cp()>() in <okio.AsyncTimeout$Companion: okio.AsyncTimeout awaitTimeout$okio()> ==> <okio.Timeout: void <clinit>()>
CLINIT edge: l0 = <okio.AsyncTimeout: long IDLE_TIMEOUT_NANOS> in <okio.AsyncTimeout: long access$getIDLE_TIMEOUT_NANOS$cp()> ==> <okio.AsyncTimeout: void <clinit>()>
CLINIT edge: l0 = <okio.AsyncTimeout: long IDLE_TIMEOUT_NANOS> in <okio.AsyncTimeout: long access$getIDLE_TIMEOUT_NANOS$cp()> ==> <okio.Timeout: void <clinit>()>
CLINIT edge: l0 = <okio.AsyncTimeout: long IDLE_TIMEOUT_MILLIS> in <okio.AsyncTimeout: long access$getIDLE_TIMEOUT_MILLIS$cp()> ==> <okio.AsyncTimeout: void <clinit>()>
CLINIT edge: l0 = <okio.AsyncTimeout: long IDLE_TIMEOUT_MILLIS> in <okio.AsyncTimeout: long access$getIDLE_TIMEOUT_MILLIS$cp()> ==> <okio.Timeout: void <clinit>()>
VIRTUAL edge: virtualinvoke $r2.<java.lang.Object: void wait(long)>($l1) in <okio.AsyncTimeout$Companion: okio.AsyncTimeout awaitTimeout$okio()> ==> <java.lang.Object: void wait(long)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: void wait(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r3.<okio.AsyncTimeout: void timedOut()>() in <okio.AsyncTimeout$Watchdog: void run()> ==> <okhttp3.internal.connection.RealCall$timeout$1: void timedOut()>
VIRTUAL edge: virtualinvoke $r1.<okhttp3.internal.connection.RealCall: void cancel()>() in <okhttp3.internal.connection.RealCall$timeout$1: void timedOut()> ==> <okhttp3.internal.connection.RealCall: void cancel()>
VIRTUAL edge: virtualinvoke $r3.<okhttp3.EventListener: void canceled(okhttp3.Call)>($r4) in <okhttp3.internal.connection.RealCall: void cancel()> ==> <okhttp3.EventListener: void canceled(okhttp3.Call)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "call") in <okhttp3.EventListener: void canceled(okhttp3.Call)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Thread: void <init>(java.lang.String)>("Okio Watchdog") in <okio.AsyncTimeout$Watchdog: void <init>()> ==> <java.lang.Thread: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<okio.AsyncTimeout$Watchdog: void setDaemon(boolean)>(1) in <okio.AsyncTimeout$Watchdog: void <init>()> ==> <java.lang.Thread: void setDaemon(boolean)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void setDaemon(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r3.<okio.AsyncTimeout: void <init>()>() in <okio.AsyncTimeout$Companion: void scheduleTimeout(okio.AsyncTimeout,long,boolean)> ==> <okio.AsyncTimeout: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>() in <okio.AsyncTimeout: void enter()> ==> <java.lang.String: java.lang.String toString()>
VIRTUAL edge: $l0 = virtualinvoke r0.<okio.AsyncTimeout: long timeoutNanos()>() in <okio.AsyncTimeout: void enter()> ==> <okio.Timeout: long timeoutNanos()>
VIRTUAL edge: $z0 = virtualinvoke r0.<okio.AsyncTimeout: boolean hasDeadline()>() in <okio.AsyncTimeout: void enter()> ==> <okio.Timeout: boolean hasDeadline()>
VIRTUAL edge: $l3 = virtualinvoke $r1.<okio.AsyncTimeout: long deadlineNanoTime()>() in <okio.AsyncTimeout$Companion: void scheduleTimeout(okio.AsyncTimeout,long,boolean)> ==> <okio.Timeout: long deadlineNanoTime()>
VIRTUAL edge: $l0 = virtualinvoke $r1.<okio.AsyncTimeout: long deadlineNanoTime()>() in <okio.AsyncTimeout$Companion: void scheduleTimeout(okio.AsyncTimeout,long,boolean)> ==> <okio.Timeout: long deadlineNanoTime()>
VIRTUAL edge: $r1 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>() in <okio.Timeout: long deadlineNanoTime()> ==> <java.lang.String: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r3.<okio.AsyncTimeout: void timedOut()>() in <okio.AsyncTimeout$Watchdog: void run()> ==> <okio.AsyncTimeout: void timedOut()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<okhttp3.Headers$Builder: okhttp3.Headers build()>() in <okhttp3.Request$Builder: okhttp3.Request build()> ==> <okhttp3.Headers$Builder: okhttp3.Headers build()>
CLINIT edge: $r2 = new okhttp3.Headers in <okhttp3.Headers$Builder: okhttp3.Headers build()> ==> <okhttp3.Headers: void <clinit>()>
CLINIT edge: $r5 = newarray (java.lang.String)[0] in <okhttp3.Headers$Builder: okhttp3.Headers build()> ==> <java.lang.String: void <clinit>()>
SPECIAL edge: specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("null cannot be cast to non-null type kotlin.Array<T>") in <okhttp3.Headers$Builder: okhttp3.Headers build()> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r2.<okhttp3.Headers: void <init>(java.lang.String[],kotlin.jvm.internal.DefaultConstructorMarker)>($r5, null) in <okhttp3.Headers$Builder: okhttp3.Headers build()> ==> <okhttp3.Headers: void <init>(java.lang.String[],kotlin.jvm.internal.DefaultConstructorMarker)>
INTERFACE edge: $i0 = interfaceinvoke $r2.<java.lang.CharSequence: int length()>() in <okhttp3.HttpUrl$Builder: java.lang.String toString()> ==> <java.lang.String: int length()>
VIRTUAL edge: $r4 = virtualinvoke $r2.<okio.Segment: okio.Segment pop()>() in <okio.Buffer: int read(byte[],int,int)> ==> <okio.Segment: okio.Segment pop()>
VIRTUAL edge: $r5 = virtualinvoke $r3.<okio.Segment: okio.Segment pop()>() in <okio.Buffer: java.lang.String readString(long,java.nio.charset.Charset)> ==> <okio.Segment: okio.Segment pop()>
VIRTUAL edge: virtualinvoke $r3.<okio.Segment: void writeTo(okio.Segment,int)>($r2, $i0) in <okio.Buffer: void write(okio.Buffer,long)> ==> <okio.Segment: void writeTo(okio.Segment,int)>
VIRTUAL edge: $r2 = virtualinvoke $r3.<okio.Segment: okio.Segment push(okio.Segment)>($r2) in <okio.Buffer: void write(okio.Buffer,long)> ==> <okio.Segment: okio.Segment push(okio.Segment)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "sink") in <okio.Segment: void writeTo(okio.Segment,int)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.collections.ArraysKt: byte[] copyInto(byte[],byte[],int,int,int)>($r3, $r6, $i0, $i2, $i3) in <okio.Segment: void writeTo(okio.Segment,int)> ==> <kotlin.collections.ArraysKt___ArraysJvmKt: byte[] copyInto(byte[],byte[],int,int,int)>
STATIC edge: staticinvoke <kotlin.collections.ArraysKt: byte[] copyInto$default(byte[],byte[],int,int,int,int,java.lang.Object)>($r3, $r3, 0, $i2, $i0, 2, null) in <okio.Segment: void writeTo(okio.Segment,int)> ==> <kotlin.collections.ArraysKt___ArraysJvmKt: byte[] copyInto$default(byte[],byte[],int,int,int,int,java.lang.Object)>
STATIC edge: $r1 = staticinvoke <kotlin.collections.ArraysKt: byte[] copyInto(byte[],byte[],int,int,int)>($r1, $r0, $i0, $i1, $i2) in <kotlin.collections.ArraysKt___ArraysJvmKt: byte[] copyInto$default(byte[],byte[],int,int,int,int,java.lang.Object)> ==> <kotlin.collections.ArraysKt___ArraysJvmKt: byte[] copyInto(byte[],byte[],int,int,int)>
VIRTUAL edge: $r1 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>() in <okio.Segment: void writeTo(okio.Segment,int)> ==> <java.lang.String: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke $r2.<okio.Segment: okio.Segment split(int)>($i0) in <okio.Buffer: void write(okio.Buffer,long)> ==> <okio.Segment: okio.Segment split(int)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<okio.Segment: okio.Segment pop()>() in <okio.Buffer: void write(okio.Buffer,long)> ==> <okio.Segment: okio.Segment pop()>
VIRTUAL edge: virtualinvoke $r2.<okio.Segment: void compact()>() in <okio.Buffer: void write(okio.Buffer,long)> ==> <okio.Segment: void compact()>
CLINIT edge: $r3 = staticinvoke <okio.SegmentPool: okio.Segment take()>() in <okio.Segment: okio.Segment split(int)> ==> <okio.SegmentPool: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>(r0) in <okio.Segment: okio.Segment split(int)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>
STATIC edge: staticinvoke <kotlin.collections.ArraysKt: byte[] copyInto$default(byte[],byte[],int,int,int,int,java.lang.Object)>($r4, $r1, 0, $i0, $i1, 2, null) in <okio.Segment: okio.Segment split(int)> ==> <kotlin.collections.ArraysKt___ArraysJvmKt: byte[] copyInto$default(byte[],byte[],int,int,int,int,java.lang.Object)>
STATIC edge: $r3 = staticinvoke <okio.SegmentPool: okio.Segment take()>() in <okio.Segment: okio.Segment split(int)> ==> <okio.SegmentPool: okio.Segment take()>
CLINIT edge: staticinvoke <okio.SegmentPool: void recycle(okio.Segment)>(r0) in <okio.Segment: void compact()> ==> <okio.SegmentPool: void <clinit>()>
STATIC edge: staticinvoke <okio.SegmentPool: void recycle(okio.Segment)>(r0) in <okio.Segment: void compact()> ==> <okio.SegmentPool: void recycle(okio.Segment)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r2) in <okio.Segment: void compact()> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r2) in <okio.Segment: void compact()> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r2) in <okio.Segment: void compact()> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>
VIRTUAL edge: $r1 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>() in <okio.Segment: void compact()> ==> <java.lang.String: java.lang.String toString()>
VIRTUAL edge: virtualinvoke r0.<okio.Segment: void writeTo(okio.Segment,int)>($r2, $i1) in <okio.Segment: void compact()> ==> <okio.Segment: void writeTo(okio.Segment,int)>
VIRTUAL edge: virtualinvoke r0.<okio.Segment: okio.Segment pop()>() in <okio.Segment: void compact()> ==> <okio.Segment: okio.Segment pop()>
VIRTUAL edge: $r6 = virtualinvoke $r6.<java.lang.Object: java.lang.String toString()>() in <okio.Segment: okio.Segment split(int)> ==> <java.lang.String: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r0.<okio.Segment: okio.Segment sharedCopy()>() in <okio.Segment: okio.Segment split(int)> ==> <okio.Segment: okio.Segment sharedCopy()>
VIRTUAL edge: virtualinvoke r0.<okio.Segment: okio.Segment push(okio.Segment)>($r2) in <okio.Segment: okio.Segment split(int)> ==> <okio.Segment: okio.Segment push(okio.Segment)>
CLINIT edge: $r2 = new okio.Segment in <okio.Segment: okio.Segment sharedCopy()> ==> <okio.Segment: void <clinit>()>
SPECIAL edge: specialinvoke $r2.<okio.Segment: void <init>(byte[],int,int,boolean,boolean)>($r1, $i0, $i1, 1, 0) in <okio.Segment: okio.Segment sharedCopy()> ==> <okio.Segment: void <init>(byte[],int,int,boolean,boolean)>
VIRTUAL edge: $r3 = virtualinvoke $r1.<okio.Segment: okio.Segment pop()>() in <okio.Buffer: int readInt()> ==> <okio.Segment: okio.Segment pop()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<okhttp3.CipherSuite: java.lang.String javaName()>() in <okhttp3.ConnectionSpec$Builder: okhttp3.ConnectionSpec$Builder cipherSuites(okhttp3.CipherSuite[])> ==> <okhttp3.CipherSuite: java.lang.String javaName()>
VIRTUAL edge: virtualinvoke $r5.<androidx.savedstate.SavedStateRegistryController: void performSave(android.os.Bundle)>($r1) in <androidx.activity.ComponentActivity: void onSaveInstanceState(android.os.Bundle)> ==> <androidx.savedstate.SavedStateRegistryController: void performSave(android.os.Bundle)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "outBundle") in <androidx.savedstate.SavedStateRegistryController: void performSave(android.os.Bundle)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<androidx.savedstate.SavedStateRegistry: void performSave(android.os.Bundle)>($r1) in <androidx.savedstate.SavedStateRegistryController: void performSave(android.os.Bundle)> ==> <androidx.savedstate.SavedStateRegistry: void performSave(android.os.Bundle)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r5, "this.components.iteratorWithAdditions()") in <androidx.savedstate.SavedStateRegistry: void performSave(android.os.Bundle)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "outBundle") in <androidx.savedstate.SavedStateRegistry: void performSave(android.os.Bundle)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<androidx.arch.core.internal.SafeIterableMap: androidx.arch.core.internal.SafeIterableMap$IteratorWithAdditions iteratorWithAdditions()>() in <androidx.savedstate.SavedStateRegistry: void performSave(android.os.Bundle)> ==> <androidx.arch.core.internal.SafeIterableMap: androidx.arch.core.internal.SafeIterableMap$IteratorWithAdditions iteratorWithAdditions()>
INTERFACE edge: $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>() in <androidx.savedstate.SavedStateRegistry: void performSave(android.os.Bundle)> ==> <androidx.arch.core.internal.SafeIterableMap$IteratorWithAdditions: boolean hasNext()>
INTERFACE edge: $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>() in <androidx.savedstate.SavedStateRegistry: void performSave(android.os.Bundle)> ==> <androidx.arch.core.internal.SafeIterableMap$IteratorWithAdditions: java.util.Map$Entry next()>
INTERFACE edge: $r7 = interfaceinvoke $r8.<java.util.Map$Entry: java.lang.Object getKey()>() in <androidx.savedstate.SavedStateRegistry: void performSave(android.os.Bundle)> ==> <androidx.arch.core.internal.SafeIterableMap$Entry: java.lang.Object getKey()>
INTERFACE edge: $r7 = interfaceinvoke $r8.<java.util.Map$Entry: java.lang.Object getValue()>() in <androidx.savedstate.SavedStateRegistry: void performSave(android.os.Bundle)> ==> <androidx.arch.core.internal.SafeIterableMap$Entry: java.lang.Object getValue()>
VIRTUAL edge: virtualinvoke $r3.<androidx.lifecycle.LifecycleRegistry: void handleLifecycleEvent(androidx.lifecycle.Lifecycle$Event)>($r1) in <androidx.fragment.app.FragmentActivity: void onPause()> ==> <androidx.lifecycle.LifecycleRegistry: void handleLifecycleEvent(androidx.lifecycle.Lifecycle$Event)>
VIRTUAL edge: virtualinvoke $r2.<androidx.fragment.app.FragmentController: void dispatchPause()>() in <androidx.fragment.app.FragmentActivity: void onPause()> ==> <androidx.fragment.app.FragmentController: void dispatchPause()>
VIRTUAL edge: virtualinvoke $r2.<androidx.fragment.app.FragmentManager: void dispatchPause()>() in <androidx.fragment.app.FragmentController: void dispatchPause()> ==> <androidx.fragment.app.FragmentManager: void dispatchPause()>
SPECIAL edge: specialinvoke r0.<androidx.fragment.app.FragmentManager: void dispatchStateChange(int)>(5) in <androidx.fragment.app.FragmentManager: void dispatchPause()> ==> <androidx.fragment.app.FragmentManager: void dispatchStateChange(int)>
VIRTUAL edge: virtualinvoke $r1.<androidx.fragment.app.FragmentController: void noteStateNotSaved()>() in <androidx.fragment.app.FragmentActivity: void onResume()> ==> <androidx.fragment.app.FragmentController: void noteStateNotSaved()>
VIRTUAL edge: virtualinvoke $r1.<androidx.fragment.app.FragmentController: boolean execPendingActions()>() in <androidx.fragment.app.FragmentActivity: void onResume()> ==> <androidx.fragment.app.FragmentController: boolean execPendingActions()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<androidx.fragment.app.FragmentManager: boolean execPendingActions(boolean)>(1) in <androidx.fragment.app.FragmentController: boolean execPendingActions()> ==> <androidx.fragment.app.FragmentManager: boolean execPendingActions(boolean)>
SPECIAL edge: specialinvoke $r0.<com.example.notificationtest.MainActivity: void requestPermissionListenser()>() in <com.example.notificationtest.MainActivity: void access$000(com.example.notificationtest.MainActivity)> ==> <com.example.notificationtest.MainActivity: void requestPermissionListenser()>
CLINIT edge: $r1 = staticinvoke <androidx.core.app.NotificationManagerCompat: java.util.Set getEnabledListenerPackages(android.content.Context)>(r0) in <com.example.notificationtest.MainActivity: void requestPermissionListenser()> ==> <androidx.core.app.NotificationManagerCompat: void <clinit>()>
STATIC edge: $r1 = staticinvoke <androidx.core.app.NotificationManagerCompat: java.util.Set getEnabledListenerPackages(android.content.Context)>(r0) in <com.example.notificationtest.MainActivity: void requestPermissionListenser()> ==> <androidx.core.app.NotificationManagerCompat: java.util.Set getEnabledListenerPackages(android.content.Context)>
CLINIT edge: <androidx.core.app.NotificationManagerCompat: java.util.Set sEnabledNotificationListenerPackages> = $r9 in <androidx.core.app.NotificationManagerCompat: java.util.Set getEnabledListenerPackages(android.content.Context)> ==> <androidx.core.app.NotificationManagerCompat: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <androidx.core.app.NotificationManagerCompat: void <clinit>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <androidx.core.app.NotificationManagerCompat: void <clinit>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<com.example.notificationtest.MainActivity: void viewPrint(java.lang.String)>("\u901a\u77e5\u670d\u52a1\u5df2\u5f00\u542f") in <com.example.notificationtest.MainActivity: void requestPermissionListenser()> ==> <com.example.notificationtest.MainActivity: void viewPrint(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke $r3.<androidx.fragment.app.Fragment: android.view.View getAnimatingAway()>() in <androidx.fragment.app.FragmentAnim$2$1: void run()> ==> <androidx.fragment.app.Fragment: android.view.View getAnimatingAway()>
VIRTUAL edge: virtualinvoke $r3.<androidx.fragment.app.Fragment: void setAnimatingAway(android.view.View)>(null) in <androidx.fragment.app.FragmentAnim$2$1: void run()> ==> <androidx.fragment.app.Fragment: void setAnimatingAway(android.view.View)>
SPECIAL edge: $r2 = specialinvoke r0.<androidx.fragment.app.Fragment: androidx.fragment.app.Fragment$AnimationInfo ensureAnimationInfo()>() in <androidx.fragment.app.Fragment: void setAnimatingAway(android.view.View)> ==> <androidx.fragment.app.Fragment: androidx.fragment.app.Fragment$AnimationInfo ensureAnimationInfo()>
SPECIAL edge: specialinvoke $r1.<androidx.fragment.app.Fragment$AnimationInfo: void <init>()>() in <androidx.fragment.app.Fragment: androidx.fragment.app.Fragment$AnimationInfo ensureAnimationInfo()> ==> <androidx.fragment.app.Fragment$AnimationInfo: void <init>()>
CLINIT edge: $r1 = <androidx.fragment.app.Fragment: java.lang.Object USE_DEFAULT_TRANSITION> in <androidx.fragment.app.Fragment$AnimationInfo: void <init>()> ==> <androidx.fragment.app.Fragment: void <clinit>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.fragment.app.Fragment$AnimationInfo: void <init>()> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $z0 = interfaceinvoke $r2.<android.view.Window$Callback: boolean onMenuItemSelected(int,android.view.MenuItem)>($i0, $r1) in <androidx.appcompat.view.WindowCallbackWrapper: boolean onMenuItemSelected(int,android.view.MenuItem)> ==> <androidx.appcompat.app.AppCompatActivity: boolean onMenuItemSelected(int,android.view.MenuItem)>
SPECIAL edge: $z0 = specialinvoke r0.<androidx.fragment.app.FragmentActivity: boolean onMenuItemSelected(int,android.view.MenuItem)>($i0, $r1) in <androidx.appcompat.app.AppCompatActivity: boolean onMenuItemSelected(int,android.view.MenuItem)> ==> <androidx.fragment.app.FragmentActivity: boolean onMenuItemSelected(int,android.view.MenuItem)>
VIRTUAL edge: $r2 = virtualinvoke r0.<androidx.appcompat.app.AppCompatActivity: androidx.appcompat.app.ActionBar getSupportActionBar()>() in <androidx.appcompat.app.AppCompatActivity: boolean onMenuItemSelected(int,android.view.MenuItem)> ==> <androidx.appcompat.app.AppCompatActivity: androidx.appcompat.app.ActionBar getSupportActionBar()>
VIRTUAL edge: $z0 = virtualinvoke r0.<androidx.appcompat.app.AppCompatActivity: boolean onSupportNavigateUp()>() in <androidx.appcompat.app.AppCompatActivity: boolean onMenuItemSelected(int,android.view.MenuItem)> ==> <androidx.appcompat.app.AppCompatActivity: boolean onSupportNavigateUp()>
CLINIT edge: staticinvoke <androidx.core.app.ActivityCompat: void finishAffinity(android.app.Activity)>(r0) in <androidx.appcompat.app.AppCompatActivity: boolean onSupportNavigateUp()> ==> <androidx.core.content.ContextCompat: void <clinit>()>
STATIC edge: staticinvoke <androidx.core.app.ActivityCompat: void finishAffinity(android.app.Activity)>(r0) in <androidx.appcompat.app.AppCompatActivity: boolean onSupportNavigateUp()> ==> <androidx.core.app.ActivityCompat: void finishAffinity(android.app.Activity)>
STATIC edge: $r3 = staticinvoke <androidx.core.app.TaskStackBuilder: androidx.core.app.TaskStackBuilder create(android.content.Context)>(r0) in <androidx.appcompat.app.AppCompatActivity: boolean onSupportNavigateUp()> ==> <androidx.core.app.TaskStackBuilder: androidx.core.app.TaskStackBuilder create(android.content.Context)>
STATIC edge: staticinvoke <androidx.core.app.ActivityCompat$Api16Impl: void finishAffinity(android.app.Activity)>($r0) in <androidx.core.app.ActivityCompat: void finishAffinity(android.app.Activity)> ==> <androidx.core.app.ActivityCompat$Api16Impl: void finishAffinity(android.app.Activity)>
VIRTUAL edge: virtualinvoke $r3.<androidx.core.app.TaskStackBuilder: void startActivities()>() in <androidx.appcompat.app.AppCompatActivity: boolean onSupportNavigateUp()> ==> <androidx.core.app.TaskStackBuilder: void startActivities()>
VIRTUAL edge: virtualinvoke r0.<androidx.core.app.TaskStackBuilder: void startActivities(android.os.Bundle)>(null) in <androidx.core.app.TaskStackBuilder: void startActivities()> ==> <androidx.core.app.TaskStackBuilder: void startActivities(android.os.Bundle)>
STATIC edge: $z0 = staticinvoke <androidx.core.content.ContextCompat: boolean startActivities(android.content.Context,android.content.Intent[],android.os.Bundle)>($r7, $r3, $r1) in <androidx.core.app.TaskStackBuilder: void startActivities(android.os.Bundle)> ==> <androidx.core.content.ContextCompat: boolean startActivities(android.content.Context,android.content.Intent[],android.os.Bundle)>
CLINIT edge: $z0 = staticinvoke <androidx.core.content.ContextCompat: boolean startActivities(android.content.Context,android.content.Intent[],android.os.Bundle)>($r7, $r3, $r1) in <androidx.core.app.TaskStackBuilder: void startActivities(android.os.Bundle)> ==> <androidx.core.content.ContextCompat: void <clinit>()>
STATIC edge: staticinvoke <androidx.core.content.ContextCompat$Api16Impl: void startActivities(android.content.Context,android.content.Intent[],android.os.Bundle)>($r2, $r0, $r1) in <androidx.core.content.ContextCompat: boolean startActivities(android.content.Context,android.content.Intent[],android.os.Bundle)> ==> <androidx.core.content.ContextCompat$Api16Impl: void startActivities(android.content.Context,android.content.Intent[],android.os.Bundle)>
SPECIAL edge: specialinvoke $r1.<androidx.core.app.TaskStackBuilder: void <init>(android.content.Context)>($r0) in <androidx.core.app.TaskStackBuilder: androidx.core.app.TaskStackBuilder create(android.content.Context)> ==> <androidx.core.app.TaskStackBuilder: void <init>(android.content.Context)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.core.app.TaskStackBuilder: void <init>(android.content.Context)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke r0.<androidx.appcompat.app.AppCompatActivity: android.content.Intent getSupportParentActivityIntent()>() in <androidx.appcompat.app.AppCompatActivity: boolean onSupportNavigateUp()> ==> <androidx.appcompat.app.AppCompatActivity: android.content.Intent getSupportParentActivityIntent()>
VIRTUAL edge: $z0 = virtualinvoke r0.<androidx.appcompat.app.AppCompatActivity: boolean supportShouldUpRecreateTask(android.content.Intent)>($r2) in <androidx.appcompat.app.AppCompatActivity: boolean onSupportNavigateUp()> ==> <androidx.appcompat.app.AppCompatActivity: boolean supportShouldUpRecreateTask(android.content.Intent)>
VIRTUAL edge: virtualinvoke r0.<androidx.appcompat.app.AppCompatActivity: void onCreateSupportNavigateUpTaskStack(androidx.core.app.TaskStackBuilder)>($r3) in <androidx.appcompat.app.AppCompatActivity: boolean onSupportNavigateUp()> ==> <androidx.appcompat.app.AppCompatActivity: void onCreateSupportNavigateUpTaskStack(androidx.core.app.TaskStackBuilder)>
VIRTUAL edge: virtualinvoke r0.<androidx.appcompat.app.AppCompatActivity: void onPrepareSupportNavigateUpTaskStack(androidx.core.app.TaskStackBuilder)>($r3) in <androidx.appcompat.app.AppCompatActivity: boolean onSupportNavigateUp()> ==> <androidx.appcompat.app.AppCompatActivity: void onPrepareSupportNavigateUpTaskStack(androidx.core.app.TaskStackBuilder)>
VIRTUAL edge: virtualinvoke r0.<androidx.appcompat.app.AppCompatActivity: void supportNavigateUpTo(android.content.Intent)>($r2) in <androidx.appcompat.app.AppCompatActivity: boolean onSupportNavigateUp()> ==> <androidx.appcompat.app.AppCompatActivity: void supportNavigateUpTo(android.content.Intent)>
STATIC edge: $r1 = staticinvoke <androidx.core.app.NavUtils: android.content.Intent getParentActivityIntent(android.app.Activity)>(r0) in <androidx.appcompat.app.AppCompatActivity: android.content.Intent getSupportParentActivityIntent()> ==> <androidx.core.app.NavUtils: android.content.Intent getParentActivityIntent(android.app.Activity)>
STATIC edge: $z0 = staticinvoke <androidx.core.app.NavUtils: boolean shouldUpRecreateTask(android.app.Activity,android.content.Intent)>(r0, $r1) in <androidx.appcompat.app.AppCompatActivity: boolean supportShouldUpRecreateTask(android.content.Intent)> ==> <androidx.core.app.NavUtils: boolean shouldUpRecreateTask(android.app.Activity,android.content.Intent)>
STATIC edge: staticinvoke <androidx.core.app.NavUtils: void navigateUpTo(android.app.Activity,android.content.Intent)>(r0, $r1) in <androidx.appcompat.app.AppCompatActivity: void supportNavigateUpTo(android.content.Intent)> ==> <androidx.core.app.NavUtils: void navigateUpTo(android.app.Activity,android.content.Intent)>
STATIC edge: $r5 = staticinvoke <androidx.core.app.NavUtils: java.lang.String getParentActivityName(android.content.Context,android.content.ComponentName)>($r1, $r4) in <androidx.core.app.NavUtils: android.content.Intent getParentActivityIntent(android.app.Activity)> ==> <androidx.core.app.NavUtils: java.lang.String getParentActivityName(android.content.Context,android.content.ComponentName)>
STATIC edge: $r3 = staticinvoke <androidx.core.app.NavUtils: java.lang.String getParentActivityName(android.app.Activity)>($r1) in <androidx.core.app.NavUtils: android.content.Intent getParentActivityIntent(android.app.Activity)> ==> <androidx.core.app.NavUtils: java.lang.String getParentActivityName(android.app.Activity)>
STATIC edge: $r2 = staticinvoke <androidx.core.app.NavUtils$Api16Impl: android.content.Intent getParentActivityIntent(android.app.Activity)>($r1) in <androidx.core.app.NavUtils: android.content.Intent getParentActivityIntent(android.app.Activity)> ==> <androidx.core.app.NavUtils$Api16Impl: android.content.Intent getParentActivityIntent(android.app.Activity)>
STATIC edge: $z0 = staticinvoke <androidx.core.app.NavUtils$Api16Impl: boolean shouldUpRecreateTask(android.app.Activity,android.content.Intent)>($r1, $r0) in <androidx.core.app.NavUtils: boolean shouldUpRecreateTask(android.app.Activity,android.content.Intent)> ==> <androidx.core.app.NavUtils$Api16Impl: boolean shouldUpRecreateTask(android.app.Activity,android.content.Intent)>
STATIC edge: staticinvoke <androidx.core.app.NavUtils$Api16Impl: boolean navigateUpTo(android.app.Activity,android.content.Intent)>($r0, $r1) in <androidx.core.app.NavUtils: void navigateUpTo(android.app.Activity,android.content.Intent)> ==> <androidx.core.app.NavUtils$Api16Impl: boolean navigateUpTo(android.app.Activity,android.content.Intent)>
VIRTUAL edge: virtualinvoke $r1.<androidx.core.app.TaskStackBuilder: androidx.core.app.TaskStackBuilder addParentStack(android.app.Activity)>(r0) in <androidx.appcompat.app.AppCompatActivity: void onCreateSupportNavigateUpTaskStack(androidx.core.app.TaskStackBuilder)> ==> <androidx.core.app.TaskStackBuilder: androidx.core.app.TaskStackBuilder addParentStack(android.app.Activity)>
STATIC edge: $r3 = staticinvoke <androidx.core.app.NavUtils: android.content.Intent getParentActivityIntent(android.app.Activity)>($r1) in <androidx.core.app.TaskStackBuilder: androidx.core.app.TaskStackBuilder addParentStack(android.app.Activity)> ==> <androidx.core.app.NavUtils: android.content.Intent getParentActivityIntent(android.app.Activity)>
VIRTUAL edge: virtualinvoke r0.<androidx.core.app.TaskStackBuilder: androidx.core.app.TaskStackBuilder addParentStack(android.content.ComponentName)>($r5) in <androidx.core.app.TaskStackBuilder: androidx.core.app.TaskStackBuilder addParentStack(android.app.Activity)> ==> <androidx.core.app.TaskStackBuilder: androidx.core.app.TaskStackBuilder addParentStack(android.content.ComponentName)>
VIRTUAL edge: virtualinvoke r0.<androidx.core.app.TaskStackBuilder: androidx.core.app.TaskStackBuilder addNextIntent(android.content.Intent)>($r3) in <androidx.core.app.TaskStackBuilder: androidx.core.app.TaskStackBuilder addParentStack(android.app.Activity)> ==> <androidx.core.app.TaskStackBuilder: androidx.core.app.TaskStackBuilder addNextIntent(android.content.Intent)>
STATIC edge: $r4 = staticinvoke <androidx.core.app.NavUtils: android.content.Intent getParentActivityIntent(android.content.Context,android.content.ComponentName)>($r3, $r1) in <androidx.core.app.TaskStackBuilder: androidx.core.app.TaskStackBuilder addParentStack(android.content.ComponentName)> ==> <androidx.core.app.NavUtils: android.content.Intent getParentActivityIntent(android.content.Context,android.content.ComponentName)>
STATIC edge: $r3 = staticinvoke <androidx.core.app.NavUtils: java.lang.String getParentActivityName(android.content.Context,android.content.ComponentName)>($r1, $r0) in <androidx.core.app.NavUtils: android.content.Intent getParentActivityIntent(android.content.Context,android.content.ComponentName)> ==> <androidx.core.app.NavUtils: java.lang.String getParentActivityName(android.content.Context,android.content.ComponentName)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<androidx.core.app.TaskStackBuilder$SupportParentable: android.content.Intent getSupportParentActivityIntent()>() in <androidx.core.app.TaskStackBuilder: androidx.core.app.TaskStackBuilder addParentStack(android.app.Activity)> ==> <androidx.appcompat.app.AppCompatActivity: android.content.Intent getSupportParentActivityIntent()>
VIRTUAL edge: $r1 = virtualinvoke r0.<androidx.appcompat.app.AppCompatActivity: androidx.appcompat.app.AppCompatDelegate getDelegate()>() in <androidx.appcompat.app.AppCompatActivity: androidx.appcompat.app.ActionBar getSupportActionBar()> ==> <androidx.appcompat.app.AppCompatActivity: androidx.appcompat.app.AppCompatDelegate getDelegate()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<androidx.appcompat.app.AppCompatDelegate: androidx.appcompat.app.ActionBar getSupportActionBar()>() in <androidx.appcompat.app.AppCompatActivity: androidx.appcompat.app.ActionBar getSupportActionBar()> ==> <androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.app.ActionBar getSupportActionBar()>
SPECIAL edge: $z0 = specialinvoke r0.<androidx.activity.ComponentActivity: boolean onMenuItemSelected(int,android.view.MenuItem)>($i0, $r1) in <androidx.fragment.app.FragmentActivity: boolean onMenuItemSelected(int,android.view.MenuItem)> ==> <androidx.activity.ComponentActivity: boolean onMenuItemSelected(int,android.view.MenuItem)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<androidx.core.view.MenuHostHelper: boolean onMenuItemSelected(android.view.MenuItem)>($r1) in <androidx.activity.ComponentActivity: boolean onMenuItemSelected(int,android.view.MenuItem)> ==> <androidx.core.view.MenuHostHelper: boolean onMenuItemSelected(android.view.MenuItem)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<androidx.fragment.app.FragmentController: boolean dispatchContextItemSelected(android.view.MenuItem)>($r1) in <androidx.fragment.app.FragmentActivity: boolean onMenuItemSelected(int,android.view.MenuItem)> ==> <androidx.fragment.app.FragmentController: boolean dispatchContextItemSelected(android.view.MenuItem)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<androidx.fragment.app.FragmentController: boolean dispatchOptionsItemSelected(android.view.MenuItem)>($r1) in <androidx.fragment.app.FragmentActivity: boolean onMenuItemSelected(int,android.view.MenuItem)> ==> <androidx.fragment.app.FragmentController: boolean dispatchOptionsItemSelected(android.view.MenuItem)>
VIRTUAL edge: $z0 = virtualinvoke $r3.<androidx.fragment.app.FragmentManager: boolean dispatchOptionsItemSelected(android.view.MenuItem)>($r1) in <androidx.fragment.app.FragmentController: boolean dispatchOptionsItemSelected(android.view.MenuItem)> ==> <androidx.fragment.app.FragmentManager: boolean dispatchOptionsItemSelected(android.view.MenuItem)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<androidx.fragment.app.FragmentStore: java.util.List getFragments()>() in <androidx.fragment.app.FragmentManager: boolean dispatchOptionsItemSelected(android.view.MenuItem)> ==> <androidx.fragment.app.FragmentStore: java.util.List getFragments()>
VIRTUAL edge: $z0 = virtualinvoke $r3.<androidx.fragment.app.FragmentManager: boolean dispatchContextItemSelected(android.view.MenuItem)>($r1) in <androidx.fragment.app.FragmentController: boolean dispatchContextItemSelected(android.view.MenuItem)> ==> <androidx.fragment.app.FragmentManager: boolean dispatchContextItemSelected(android.view.MenuItem)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<androidx.fragment.app.FragmentStore: java.util.List getFragments()>() in <androidx.fragment.app.FragmentManager: boolean dispatchContextItemSelected(android.view.MenuItem)> ==> <androidx.fragment.app.FragmentStore: java.util.List getFragments()>
VIRTUAL edge: virtualinvoke $r3.<androidx.fragment.app.FragmentTransitionCompat21: void replaceTargets(java.lang.Object,java.util.ArrayList,java.util.ArrayList)>($r2, $r4, null) in <androidx.fragment.app.FragmentTransitionCompat21$3: void onTransitionStart(android.transition.Transition)> ==> <androidx.fragment.app.FragmentTransitionCompat21: void replaceTargets(java.lang.Object,java.util.ArrayList,java.util.ArrayList)>
VIRTUAL edge: virtualinvoke $r3.<androidx.fragment.app.FragmentTransitionCompat21: void replaceTargets(java.lang.Object,java.util.ArrayList,java.util.ArrayList)>($r2, $r4, null) in <androidx.fragment.app.FragmentTransitionCompat21$3: void onTransitionStart(android.transition.Transition)> ==> <androidx.fragment.app.FragmentTransitionCompat21: void replaceTargets(java.lang.Object,java.util.ArrayList,java.util.ArrayList)>
VIRTUAL edge: $r1 = virtualinvoke $r0.<android.content.Context: android.content.res.Resources getResources()>() in <androidx.core.content.ContextCompat: android.content.res.ColorStateList getColorStateList(android.content.Context,int)> ==> <androidx.appcompat.app.AppCompatActivity: android.content.res.Resources getResources()>
VIRTUAL edge: $r2 = virtualinvoke $r0.<android.content.res.Resources: android.content.res.XmlResourceParser getXml(int)>($i0) in <androidx.core.content.res.ResourcesCompat: android.content.res.ColorStateList inflateColorStateList(android.content.res.Resources,int,android.content.res.Resources$Theme)> ==> <androidx.appcompat.widget.VectorEnabledTintResources: android.content.res.XmlResourceParser getXml(int)>
SPECIAL edge: $r1 = specialinvoke r0.<androidx.appcompat.widget.ResourcesWrapper: android.content.res.XmlResourceParser getXml(int)>($i0) in <androidx.appcompat.widget.VectorEnabledTintResources: android.content.res.XmlResourceParser getXml(int)> ==> <androidx.appcompat.widget.ResourcesWrapper: android.content.res.XmlResourceParser getXml(int)>
VIRTUAL edge: virtualinvoke $r1.<android.content.res.Resources: void getValue(int,android.util.TypedValue,boolean)>($i0, $r0, 1) in <androidx.core.content.res.ResourcesCompat: boolean isColorInt(android.content.res.Resources,int)> ==> <androidx.appcompat.widget.VectorEnabledTintResources: void getValue(int,android.util.TypedValue,boolean)>
SPECIAL edge: specialinvoke r0.<androidx.appcompat.widget.ResourcesWrapper: void getValue(int,android.util.TypedValue,boolean)>($i0, $r1, $z0) in <androidx.appcompat.widget.VectorEnabledTintResources: void getValue(int,android.util.TypedValue,boolean)> ==> <androidx.appcompat.widget.ResourcesWrapper: void getValue(int,android.util.TypedValue,boolean)>
VIRTUAL edge: $r11 = virtualinvoke $r5.<android.content.res.Resources: android.content.res.XmlResourceParser getXml(int)>($i2) in <androidx.core.content.res.ColorStateListInflaterCompat: android.content.res.ColorStateList inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)> ==> <androidx.appcompat.widget.VectorEnabledTintResources: android.content.res.XmlResourceParser getXml(int)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<android.content.res.Resources: android.content.res.TypedArray obtainAttributes(android.util.AttributeSet,int[])>($r1, $r2) in <androidx.core.content.res.ColorStateListInflaterCompat: android.content.res.TypedArray obtainAttributes(android.content.res.Resources,android.content.res.Resources$Theme,android.util.AttributeSet,int[])> ==> <androidx.appcompat.widget.VectorEnabledTintResources: android.content.res.TypedArray obtainAttributes(android.util.AttributeSet,int[])>
SPECIAL edge: $r2 = specialinvoke r0.<androidx.appcompat.widget.ResourcesWrapper: android.content.res.TypedArray obtainAttributes(android.util.AttributeSet,int[])>($r3, $r1) in <androidx.appcompat.widget.VectorEnabledTintResources: android.content.res.TypedArray obtainAttributes(android.util.AttributeSet,int[])> ==> <androidx.appcompat.widget.ResourcesWrapper: android.content.res.TypedArray obtainAttributes(android.util.AttributeSet,int[])>
VIRTUAL edge: virtualinvoke $r1.<android.content.res.Resources: void getValue(int,android.util.TypedValue,boolean)>($i0, $r0, 1) in <androidx.core.content.res.ColorStateListInflaterCompat: boolean isColorInt(android.content.res.Resources,int)> ==> <androidx.appcompat.widget.VectorEnabledTintResources: void getValue(int,android.util.TypedValue,boolean)>
VIRTUAL edge: $r3 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>() in <androidx.appcompat.widget.ResourceManagerInternal: android.graphics.drawable.Drawable createDrawableIfNeeded(android.content.Context,int)> ==> <androidx.appcompat.app.AppCompatActivity: android.content.res.Resources getResources()>
VIRTUAL edge: virtualinvoke $r3.<android.content.res.Resources: void getValue(int,android.util.TypedValue,boolean)>($i0, $r2, 1) in <androidx.appcompat.widget.ResourceManagerInternal: android.graphics.drawable.Drawable createDrawableIfNeeded(android.content.Context,int)> ==> <androidx.appcompat.widget.VectorEnabledTintResources: void getValue(int,android.util.TypedValue,boolean)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<android.content.Context: android.content.res.Resources getResources()>() in <androidx.appcompat.widget.AppCompatDrawableManager$1: android.graphics.drawable.LayerDrawable getRatingBarLayerDrawable(androidx.appcompat.widget.ResourceManagerInternal,android.content.Context,int)> ==> <androidx.appcompat.app.AppCompatActivity: android.content.res.Resources getResources()>
VIRTUAL edge: $i0 = virtualinvoke $r3.<android.content.res.Resources: int getDimensionPixelSize(int)>($i0) in <androidx.appcompat.widget.AppCompatDrawableManager$1: android.graphics.drawable.LayerDrawable getRatingBarLayerDrawable(androidx.appcompat.widget.ResourceManagerInternal,android.content.Context,int)> ==> <androidx.appcompat.widget.VectorEnabledTintResources: int getDimensionPixelSize(int)>
SPECIAL edge: $i0 = specialinvoke r0.<androidx.appcompat.widget.ResourcesWrapper: int getDimensionPixelSize(int)>($i0) in <androidx.appcompat.widget.VectorEnabledTintResources: int getDimensionPixelSize(int)> ==> <androidx.appcompat.widget.ResourcesWrapper: int getDimensionPixelSize(int)>
VIRTUAL edge: $r7 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>() in <androidx.appcompat.widget.ResourceManagerInternal: android.graphics.drawable.Drawable getCachedDrawable(android.content.Context,long)> ==> <androidx.appcompat.app.AppCompatActivity: android.content.res.Resources getResources()>
VIRTUAL edge: $r8 = virtualinvoke $r2.<android.content.Context: android.content.res.Resources getResources()>() in <androidx.appcompat.widget.ResourceManagerInternal: android.graphics.drawable.Drawable loadDrawableFromDelegates(android.content.Context,int)> ==> <androidx.appcompat.app.AppCompatActivity: android.content.res.Resources getResources()>
VIRTUAL edge: virtualinvoke $r8.<android.content.res.Resources: void getValue(int,android.util.TypedValue,boolean)>($i0, $r7, 1) in <androidx.appcompat.widget.ResourceManagerInternal: android.graphics.drawable.Drawable loadDrawableFromDelegates(android.content.Context,int)> ==> <androidx.appcompat.widget.VectorEnabledTintResources: void getValue(int,android.util.TypedValue,boolean)>
VIRTUAL edge: $r12 = virtualinvoke $r8.<android.content.res.Resources: android.content.res.XmlResourceParser getXml(int)>($i0) in <androidx.appcompat.widget.ResourceManagerInternal: android.graphics.drawable.Drawable loadDrawableFromDelegates(android.content.Context,int)> ==> <androidx.appcompat.widget.VectorEnabledTintResources: android.content.res.XmlResourceParser getXml(int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <androidx.collection.SimpleArrayMap: int indexOf(java.lang.Object,int)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <androidx.collection.SimpleArrayMap: int indexOfKey(java.lang.Object)> ==> <java.lang.String: int hashCode()>
VIRTUAL edge: $z0 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r10) in <androidx.fragment.app.FragmentTransition: androidx.collection.ArrayMap captureOutSharedElements(androidx.fragment.app.FragmentTransitionImpl,androidx.collection.ArrayMap,java.lang.Object,androidx.fragment.app.FragmentTransition$FragmentContainerTransition)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r7) in <androidx.fragment.app.FragmentTransitionImpl: void setNameOverridesReordered(android.view.View,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList,java.util.Map)> ==> <java.lang.String: boolean equals(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<android.view.Window$Callback: void onPanelClosed(int,android.view.Menu)>($i0, $r1) in <androidx.appcompat.view.WindowCallbackWrapper: void onPanelClosed(int,android.view.Menu)> ==> <androidx.appcompat.app.AppCompatActivity: void onPanelClosed(int,android.view.Menu)>
SPECIAL edge: specialinvoke r0.<androidx.fragment.app.FragmentActivity: void onPanelClosed(int,android.view.Menu)>($i0, $r1) in <androidx.appcompat.app.AppCompatActivity: void onPanelClosed(int,android.view.Menu)> ==> <androidx.fragment.app.FragmentActivity: void onPanelClosed(int,android.view.Menu)>
SPECIAL edge: specialinvoke r0.<androidx.activity.ComponentActivity: void onPanelClosed(int,android.view.Menu)>($i0, $r1) in <androidx.fragment.app.FragmentActivity: void onPanelClosed(int,android.view.Menu)> ==> <androidx.activity.ComponentActivity: void onPanelClosed(int,android.view.Menu)>
VIRTUAL edge: virtualinvoke $r2.<androidx.core.view.MenuHostHelper: void onMenuClosed(android.view.Menu)>($r1) in <androidx.activity.ComponentActivity: void onPanelClosed(int,android.view.Menu)> ==> <androidx.core.view.MenuHostHelper: void onMenuClosed(android.view.Menu)>
VIRTUAL edge: virtualinvoke $r2.<androidx.fragment.app.FragmentController: void dispatchOptionsMenuClosed(android.view.Menu)>($r1) in <androidx.fragment.app.FragmentActivity: void onPanelClosed(int,android.view.Menu)> ==> <androidx.fragment.app.FragmentController: void dispatchOptionsMenuClosed(android.view.Menu)>
VIRTUAL edge: virtualinvoke $r3.<androidx.fragment.app.FragmentManager: void dispatchOptionsMenuClosed(android.view.Menu)>($r1) in <androidx.fragment.app.FragmentController: void dispatchOptionsMenuClosed(android.view.Menu)> ==> <androidx.fragment.app.FragmentManager: void dispatchOptionsMenuClosed(android.view.Menu)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<androidx.fragment.app.FragmentStore: java.util.List getFragments()>() in <androidx.fragment.app.FragmentManager: void dispatchOptionsMenuClosed(android.view.Menu)> ==> <androidx.fragment.app.FragmentStore: java.util.List getFragments()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<android.view.Window$Callback: boolean dispatchKeyShortcutEvent(android.view.KeyEvent)>($r2) in <androidx.appcompat.view.WindowCallbackWrapper: boolean dispatchKeyShortcutEvent(android.view.KeyEvent)> ==> <androidx.core.app.ComponentActivity: boolean dispatchKeyShortcutEvent(android.view.KeyEvent)>
CLINIT edge: $z0 = staticinvoke <androidx.core.view.KeyEventDispatcher: boolean dispatchBeforeHierarchy(android.view.View,android.view.KeyEvent)>($r3, $r1) in <androidx.core.app.ComponentActivity: boolean dispatchKeyShortcutEvent(android.view.KeyEvent)> ==> <androidx.core.view.KeyEventDispatcher: void <clinit>()>
STATIC edge: $z0 = staticinvoke <androidx.core.view.KeyEventDispatcher: boolean dispatchBeforeHierarchy(android.view.View,android.view.KeyEvent)>($r3, $r1) in <androidx.core.app.ComponentActivity: boolean dispatchKeyShortcutEvent(android.view.KeyEvent)> ==> <androidx.core.view.KeyEventDispatcher: boolean dispatchBeforeHierarchy(android.view.View,android.view.KeyEvent)>
CLINIT edge: $z0 = staticinvoke <androidx.core.view.ViewCompat: boolean dispatchUnhandledKeyEventBeforeHierarchy(android.view.View,android.view.KeyEvent)>($r1, $r0) in <androidx.core.view.KeyEventDispatcher: boolean dispatchBeforeHierarchy(android.view.View,android.view.KeyEvent)> ==> <androidx.core.view.ViewCompat: void <clinit>()>
STATIC edge: $z0 = staticinvoke <androidx.core.view.ViewCompat: boolean dispatchUnhandledKeyEventBeforeHierarchy(android.view.View,android.view.KeyEvent)>($r1, $r0) in <androidx.core.view.KeyEventDispatcher: boolean dispatchBeforeHierarchy(android.view.View,android.view.KeyEvent)> ==> <androidx.core.view.ViewCompat: boolean dispatchUnhandledKeyEventBeforeHierarchy(android.view.View,android.view.KeyEvent)>
STATIC edge: $r2 = staticinvoke <androidx.core.view.ViewCompat$UnhandledKeyEventManager: androidx.core.view.ViewCompat$UnhandledKeyEventManager at(android.view.View)>($r1) in <androidx.core.view.ViewCompat: boolean dispatchUnhandledKeyEventBeforeHierarchy(android.view.View,android.view.KeyEvent)> ==> <androidx.core.view.ViewCompat$UnhandledKeyEventManager: androidx.core.view.ViewCompat$UnhandledKeyEventManager at(android.view.View)>
CLINIT edge: $r2 = staticinvoke <androidx.core.view.ViewCompat$UnhandledKeyEventManager: androidx.core.view.ViewCompat$UnhandledKeyEventManager at(android.view.View)>($r1) in <androidx.core.view.ViewCompat: boolean dispatchUnhandledKeyEventBeforeHierarchy(android.view.View,android.view.KeyEvent)> ==> <androidx.core.view.ViewCompat$UnhandledKeyEventManager: void <clinit>()>
CLINIT edge: $r2 = new androidx.core.view.ViewCompat$UnhandledKeyEventManager in <androidx.core.view.ViewCompat$UnhandledKeyEventManager: androidx.core.view.ViewCompat$UnhandledKeyEventManager at(android.view.View)> ==> <androidx.core.view.ViewCompat$UnhandledKeyEventManager: void <clinit>()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<androidx.core.view.ViewCompat$UnhandledKeyEventManager: boolean preDispatch(android.view.KeyEvent)>($r0) in <androidx.core.view.ViewCompat: boolean dispatchUnhandledKeyEventBeforeHierarchy(android.view.View,android.view.KeyEvent)> ==> <androidx.core.view.ViewCompat$UnhandledKeyEventManager: boolean preDispatch(android.view.KeyEvent)>
CLINIT edge: $z0 = staticinvoke <androidx.core.view.ViewCompat: boolean isAttachedToWindow(android.view.View)>($r5) in <androidx.core.view.ViewCompat$UnhandledKeyEventManager: boolean preDispatch(android.view.KeyEvent)> ==> <androidx.core.view.ViewCompat: void <clinit>()>
STATIC edge: $z0 = staticinvoke <androidx.core.view.ViewCompat: boolean isAttachedToWindow(android.view.View)>($r5) in <androidx.core.view.ViewCompat$UnhandledKeyEventManager: boolean preDispatch(android.view.KeyEvent)> ==> <androidx.core.view.ViewCompat: boolean isAttachedToWindow(android.view.View)>
SPECIAL edge: $r4 = specialinvoke r0.<androidx.core.view.ViewCompat$UnhandledKeyEventManager: android.util.SparseArray getCapturedKeys()>() in <androidx.core.view.ViewCompat$UnhandledKeyEventManager: boolean preDispatch(android.view.KeyEvent)> ==> <androidx.core.view.ViewCompat$UnhandledKeyEventManager: android.util.SparseArray getCapturedKeys()>
SPECIAL edge: specialinvoke r0.<androidx.core.view.ViewCompat$UnhandledKeyEventManager: boolean onUnhandledKeyEvent(android.view.View,android.view.KeyEvent)>($r5, $r1) in <androidx.core.view.ViewCompat$UnhandledKeyEventManager: boolean preDispatch(android.view.KeyEvent)> ==> <androidx.core.view.ViewCompat$UnhandledKeyEventManager: boolean onUnhandledKeyEvent(android.view.View,android.view.KeyEvent)>
SPECIAL edge: specialinvoke $r2.<androidx.core.view.ViewCompat$UnhandledKeyEventManager: void <init>()>() in <androidx.core.view.ViewCompat$UnhandledKeyEventManager: androidx.core.view.ViewCompat$UnhandledKeyEventManager at(android.view.View)> ==> <androidx.core.view.ViewCompat$UnhandledKeyEventManager: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.core.view.ViewCompat$UnhandledKeyEventManager: void <init>()> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $z0 = interfaceinvoke $r2.<android.view.Window$Callback: boolean onCreatePanelMenu(int,android.view.Menu)>($i0, $r1) in <androidx.appcompat.view.WindowCallbackWrapper: boolean onCreatePanelMenu(int,android.view.Menu)> ==> <androidx.fragment.app.FragmentActivity: boolean onCreatePanelMenu(int,android.view.Menu)>
SPECIAL edge: $z0 = specialinvoke r0.<androidx.activity.ComponentActivity: boolean onCreatePanelMenu(int,android.view.Menu)>($i0, $r2) in <androidx.fragment.app.FragmentActivity: boolean onCreatePanelMenu(int,android.view.Menu)> ==> <androidx.activity.ComponentActivity: boolean onCreatePanelMenu(int,android.view.Menu)>
VIRTUAL edge: $r3 = virtualinvoke r0.<androidx.fragment.app.FragmentActivity: android.view.MenuInflater getMenuInflater()>() in <androidx.fragment.app.FragmentActivity: boolean onCreatePanelMenu(int,android.view.Menu)> ==> <androidx.appcompat.app.AppCompatActivity: android.view.MenuInflater getMenuInflater()>
VIRTUAL edge: $r1 = virtualinvoke r0.<androidx.appcompat.app.AppCompatActivity: androidx.appcompat.app.AppCompatDelegate getDelegate()>() in <androidx.appcompat.app.AppCompatActivity: android.view.MenuInflater getMenuInflater()> ==> <androidx.appcompat.app.AppCompatActivity: androidx.appcompat.app.AppCompatDelegate getDelegate()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<androidx.appcompat.app.AppCompatDelegate: android.view.MenuInflater getMenuInflater()>() in <androidx.appcompat.app.AppCompatActivity: android.view.MenuInflater getMenuInflater()> ==> <androidx.appcompat.app.AppCompatDelegateImpl: android.view.MenuInflater getMenuInflater()>
CLINIT edge: $r3 = new androidx.appcompat.view.SupportMenuInflater in <androidx.appcompat.app.AppCompatDelegateImpl: android.view.MenuInflater getMenuInflater()> ==> <androidx.appcompat.view.SupportMenuInflater: void <clinit>()>
SPECIAL edge: specialinvoke $r3.<androidx.appcompat.view.SupportMenuInflater: void <init>(android.content.Context)>($r1) in <androidx.appcompat.app.AppCompatDelegateImpl: android.view.MenuInflater getMenuInflater()> ==> <androidx.appcompat.view.SupportMenuInflater: void <init>(android.content.Context)>
SPECIAL edge: specialinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: void initWindowDecorActionBar()>() in <androidx.appcompat.app.AppCompatDelegateImpl: android.view.MenuInflater getMenuInflater()> ==> <androidx.appcompat.app.AppCompatDelegateImpl: void initWindowDecorActionBar()>
VIRTUAL edge: $r1 = virtualinvoke $r4.<androidx.appcompat.app.ActionBar: android.content.Context getThemedContext()>() in <androidx.appcompat.app.AppCompatDelegateImpl: android.view.MenuInflater getMenuInflater()> ==> <androidx.appcompat.app.WindowDecorActionBar: android.content.Context getThemedContext()>
VIRTUAL edge: $r2 = virtualinvoke r0.<androidx.activity.ComponentActivity: android.view.MenuInflater getMenuInflater()>() in <androidx.activity.ComponentActivity: boolean onCreatePanelMenu(int,android.view.Menu)> ==> <androidx.appcompat.app.AppCompatActivity: android.view.MenuInflater getMenuInflater()>
VIRTUAL edge: virtualinvoke $r3.<androidx.core.view.MenuHostHelper: void onCreateMenu(android.view.Menu,android.view.MenuInflater)>($r1, $r2) in <androidx.activity.ComponentActivity: boolean onCreatePanelMenu(int,android.view.Menu)> ==> <androidx.core.view.MenuHostHelper: void onCreateMenu(android.view.Menu,android.view.MenuInflater)>
VIRTUAL edge: $z1 = virtualinvoke $r1.<androidx.fragment.app.FragmentController: boolean dispatchCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)>($r2, $r3) in <androidx.fragment.app.FragmentActivity: boolean onCreatePanelMenu(int,android.view.Menu)> ==> <androidx.fragment.app.FragmentController: boolean dispatchCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)>
VIRTUAL edge: $z0 = virtualinvoke $r4.<androidx.fragment.app.FragmentManager: boolean dispatchCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)>($r2, $r1) in <androidx.fragment.app.FragmentController: boolean dispatchCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> ==> <androidx.fragment.app.FragmentManager: boolean dispatchCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)>
VIRTUAL edge: $z1 = virtualinvoke r0.<androidx.fragment.app.FragmentManager: boolean isParentMenuVisible(androidx.fragment.app.Fragment)>($r8) in <androidx.fragment.app.FragmentManager: boolean dispatchCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> ==> <androidx.fragment.app.FragmentManager: boolean isParentMenuVisible(androidx.fragment.app.Fragment)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<androidx.fragment.app.FragmentStore: java.util.List getFragments()>() in <androidx.fragment.app.FragmentManager: boolean dispatchCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> ==> <androidx.fragment.app.FragmentStore: java.util.List getFragments()>
INTERFACE edge: $z0 = interfaceinvoke $r2.<android.view.Window$Callback: boolean onMenuOpened(int,android.view.Menu)>($i0, $r1) in <androidx.appcompat.view.WindowCallbackWrapper: boolean onMenuOpened(int,android.view.Menu)> ==> <androidx.appcompat.app.AppCompatActivity: boolean onMenuOpened(int,android.view.Menu)>
VIRTUAL edge: $r5 = virtualinvoke $r3.<androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.view.ActionMode startSupportActionMode(androidx.appcompat.view.ActionMode$Callback)>($r1) in <androidx.appcompat.app.AppCompatDelegateImpl$AppCompatWindowCallback: android.view.ActionMode startAsSupportActionMode(android.view.ActionMode$Callback)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.view.ActionMode startSupportActionMode(androidx.appcompat.view.ActionMode$Callback)>
SPECIAL edge: specialinvoke $r4.<androidx.appcompat.app.AppCompatDelegateImpl$ActionModeCallbackWrapperV9: void <init>(androidx.appcompat.app.AppCompatDelegateImpl,androidx.appcompat.view.ActionMode$Callback)>(r0, $r2) in <androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.view.ActionMode startSupportActionMode(androidx.appcompat.view.ActionMode$Callback)> ==> <androidx.appcompat.app.AppCompatDelegateImpl$ActionModeCallbackWrapperV9: void <init>(androidx.appcompat.app.AppCompatDelegateImpl,androidx.appcompat.view.ActionMode$Callback)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.appcompat.app.AppCompatDelegateImpl$ActionModeCallbackWrapperV9: void <init>(androidx.appcompat.app.AppCompatDelegateImpl,androidx.appcompat.view.ActionMode$Callback)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r5 = virtualinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.app.ActionBar getSupportActionBar()>() in <androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.view.ActionMode startSupportActionMode(androidx.appcompat.view.ActionMode$Callback)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.app.ActionBar getSupportActionBar()>
VIRTUAL edge: $r3 = virtualinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.view.ActionMode startSupportActionModeFromWindow(androidx.appcompat.view.ActionMode$Callback)>($r4) in <androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.view.ActionMode startSupportActionMode(androidx.appcompat.view.ActionMode$Callback)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.view.ActionMode startSupportActionModeFromWindow(androidx.appcompat.view.ActionMode$Callback)>
VIRTUAL edge: virtualinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: void updateBackInvokedCallbackState()>() in <androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.view.ActionMode startSupportActionMode(androidx.appcompat.view.ActionMode$Callback)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: void updateBackInvokedCallbackState()>
STATIC edge: staticinvoke <androidx.core.view.ViewCompat: void requestApplyInsets(android.view.View)>($r14) in <androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.view.ActionMode startSupportActionModeFromWindow(androidx.appcompat.view.ActionMode$Callback)> ==> <androidx.core.view.ViewCompat: void requestApplyInsets(android.view.View)>
STATIC edge: $r18 = staticinvoke <androidx.core.view.ViewCompat: androidx.core.view.ViewPropertyAnimatorCompat animate(android.view.View)>($r5) in <androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.view.ActionMode startSupportActionModeFromWindow(androidx.appcompat.view.ActionMode$Callback)> ==> <androidx.core.view.ViewCompat: androidx.core.view.ViewPropertyAnimatorCompat animate(android.view.View)>
STATIC edge: staticinvoke <androidx.core.widget.PopupWindowCompat: void setWindowLayoutType(android.widget.PopupWindow,int)>($r26, 2) in <androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.view.ActionMode startSupportActionModeFromWindow(androidx.appcompat.view.ActionMode$Callback)> ==> <androidx.core.widget.PopupWindowCompat: void setWindowLayoutType(android.widget.PopupWindow,int)>
CLINIT edge: staticinvoke <androidx.core.view.ViewCompat: void requestApplyInsets(android.view.View)>($r14) in <androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.view.ActionMode startSupportActionModeFromWindow(androidx.appcompat.view.ActionMode$Callback)> ==> <androidx.core.view.ViewCompat: void <clinit>()>
CLINIT edge: $r18 = staticinvoke <androidx.core.view.ViewCompat: androidx.core.view.ViewPropertyAnimatorCompat animate(android.view.View)>($r5) in <androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.view.ActionMode startSupportActionModeFromWindow(androidx.appcompat.view.ActionMode$Callback)> ==> <androidx.core.view.ViewCompat: void <clinit>()>
CLINIT edge: $r1 = <androidx.core.view.ViewCompat: java.util.WeakHashMap sViewPropertyAnimatorMap> in <androidx.core.view.ViewCompat: androidx.core.view.ViewPropertyAnimatorCompat animate(android.view.View)> ==> <androidx.core.view.ViewCompat: void <clinit>()>
STATIC edge: staticinvoke <androidx.core.widget.PopupWindowCompat$Api23Impl: void setWindowLayoutType(android.widget.PopupWindow,int)>($r0, $i0) in <androidx.core.widget.PopupWindowCompat: void setWindowLayoutType(android.widget.PopupWindow,int)> ==> <androidx.core.widget.PopupWindowCompat$Api23Impl: void setWindowLayoutType(android.widget.PopupWindow,int)>
SPECIAL edge: specialinvoke $r3.<androidx.core.view.ViewPropertyAnimatorCompat: void <init>(android.view.View)>($r0) in <androidx.core.view.ViewCompat: androidx.core.view.ViewPropertyAnimatorCompat animate(android.view.View)> ==> <androidx.core.view.ViewPropertyAnimatorCompat: void <init>(android.view.View)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.core.view.ViewPropertyAnimatorCompat: void <init>(android.view.View)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r29.<androidx.appcompat.app.AppCompatDelegateImpl$7: void <init>(androidx.appcompat.app.AppCompatDelegateImpl)>(r0) in <androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.view.ActionMode startSupportActionModeFromWindow(androidx.appcompat.view.ActionMode$Callback)> ==> <androidx.appcompat.app.AppCompatDelegateImpl$7: void <init>(androidx.appcompat.app.AppCompatDelegateImpl)>
SPECIAL edge: specialinvoke r0.<androidx.core.view.ViewPropertyAnimatorListenerAdapter: void <init>()>() in <androidx.appcompat.app.AppCompatDelegateImpl$7: void <init>(androidx.appcompat.app.AppCompatDelegateImpl)> ==> <androidx.core.view.ViewPropertyAnimatorListenerAdapter: void <init>()>
VIRTUAL edge: $r18 = virtualinvoke $r18.<androidx.core.view.ViewPropertyAnimatorCompat: androidx.core.view.ViewPropertyAnimatorCompat alpha(float)>(1.0F) in <androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.view.ActionMode startSupportActionModeFromWindow(androidx.appcompat.view.ActionMode$Callback)> ==> <androidx.core.view.ViewPropertyAnimatorCompat: androidx.core.view.ViewPropertyAnimatorCompat alpha(float)>
VIRTUAL edge: virtualinvoke $r18.<androidx.core.view.ViewPropertyAnimatorCompat: androidx.core.view.ViewPropertyAnimatorCompat setListener(androidx.core.view.ViewPropertyAnimatorListener)>($r29) in <androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.view.ActionMode startSupportActionModeFromWindow(androidx.appcompat.view.ActionMode$Callback)> ==> <androidx.core.view.ViewPropertyAnimatorCompat: androidx.core.view.ViewPropertyAnimatorCompat setListener(androidx.core.view.ViewPropertyAnimatorListener)>
SPECIAL edge: specialinvoke r0.<androidx.core.view.ViewPropertyAnimatorCompat: void setListenerInternal(android.view.View,androidx.core.view.ViewPropertyAnimatorListener)>($r4, $r1) in <androidx.core.view.ViewPropertyAnimatorCompat: androidx.core.view.ViewPropertyAnimatorCompat setListener(androidx.core.view.ViewPropertyAnimatorListener)> ==> <androidx.core.view.ViewPropertyAnimatorCompat: void setListenerInternal(android.view.View,androidx.core.view.ViewPropertyAnimatorListener)>
SPECIAL edge: specialinvoke $r1.<androidx.core.view.ViewPropertyAnimatorCompat$1: void <init>(androidx.core.view.ViewPropertyAnimatorCompat,androidx.core.view.ViewPropertyAnimatorListener,android.view.View)>(r0, $r3, $r2) in <androidx.core.view.ViewPropertyAnimatorCompat: void setListenerInternal(android.view.View,androidx.core.view.ViewPropertyAnimatorListener)> ==> <androidx.core.view.ViewPropertyAnimatorCompat$1: void <init>(androidx.core.view.ViewPropertyAnimatorCompat,androidx.core.view.ViewPropertyAnimatorListener,android.view.View)>
SPECIAL edge: specialinvoke $r28.<androidx.appcompat.view.StandaloneActionMode: void <init>(android.content.Context,androidx.appcompat.widget.ActionBarContextView,androidx.appcompat.view.ActionMode$Callback,boolean)>($r6, $r5, $r2, $z0) in <androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.view.ActionMode startSupportActionModeFromWindow(androidx.appcompat.view.ActionMode$Callback)> ==> <androidx.appcompat.view.StandaloneActionMode: void <init>(android.content.Context,androidx.appcompat.widget.ActionBarContextView,androidx.appcompat.view.ActionMode$Callback,boolean)>
VIRTUAL edge: $r17 = virtualinvoke $r28.<androidx.appcompat.view.ActionMode: android.view.Menu getMenu()>() in <androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.view.ActionMode startSupportActionModeFromWindow(androidx.appcompat.view.ActionMode$Callback)> ==> <androidx.appcompat.view.StandaloneActionMode: android.view.Menu getMenu()>
VIRTUAL edge: virtualinvoke $r28.<androidx.appcompat.view.ActionMode: void invalidate()>() in <androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.view.ActionMode startSupportActionModeFromWindow(androidx.appcompat.view.ActionMode$Callback)> ==> <androidx.appcompat.view.StandaloneActionMode: void invalidate()>
CLINIT edge: $r4 = new androidx.appcompat.view.menu.MenuBuilder in <androidx.appcompat.view.StandaloneActionMode: void <init>(android.content.Context,androidx.appcompat.widget.ActionBarContextView,androidx.appcompat.view.ActionMode$Callback,boolean)> ==> <androidx.appcompat.view.menu.MenuBuilder: void <clinit>()>
SPECIAL edge: specialinvoke $r4.<androidx.appcompat.view.menu.MenuBuilder: void <init>(android.content.Context)>($r2) in <androidx.appcompat.view.StandaloneActionMode: void <init>(android.content.Context,androidx.appcompat.widget.ActionBarContextView,androidx.appcompat.view.ActionMode$Callback,boolean)> ==> <androidx.appcompat.view.menu.MenuBuilder: void <init>(android.content.Context)>
VIRTUAL edge: $r4 = virtualinvoke $r4.<androidx.appcompat.view.menu.MenuBuilder: androidx.appcompat.view.menu.MenuBuilder setDefaultShowAsAction(int)>(1) in <androidx.appcompat.view.StandaloneActionMode: void <init>(android.content.Context,androidx.appcompat.widget.ActionBarContextView,androidx.appcompat.view.ActionMode$Callback,boolean)> ==> <androidx.appcompat.view.menu.MenuBuilder: androidx.appcompat.view.menu.MenuBuilder setDefaultShowAsAction(int)>
VIRTUAL edge: virtualinvoke $r4.<androidx.appcompat.view.menu.MenuBuilder: void setCallback(androidx.appcompat.view.menu.MenuBuilder$Callback)>(r0) in <androidx.appcompat.view.StandaloneActionMode: void <init>(android.content.Context,androidx.appcompat.widget.ActionBarContextView,androidx.appcompat.view.ActionMode$Callback,boolean)> ==> <androidx.appcompat.view.menu.MenuBuilder: void setCallback(androidx.appcompat.view.menu.MenuBuilder$Callback)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.appcompat.view.menu.MenuBuilder: void <init>(android.content.Context)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<androidx.appcompat.view.menu.MenuBuilder: void setShortcutsVisibleInner(boolean)>(1) in <androidx.appcompat.view.menu.MenuBuilder: void <init>(android.content.Context)> ==> <androidx.appcompat.view.menu.MenuBuilder: void setShortcutsVisibleInner(boolean)>
CLINIT edge: $z1 = staticinvoke <androidx.core.view.ViewConfigurationCompat: boolean shouldShowMenuShortcutsWhenKeyboardPresent(android.view.ViewConfiguration,android.content.Context)>($r4, $r1) in <androidx.appcompat.view.menu.MenuBuilder: void setShortcutsVisibleInner(boolean)> ==> <androidx.core.view.ViewConfigurationCompat: void <clinit>()>
STATIC edge: $z1 = staticinvoke <androidx.core.view.ViewConfigurationCompat: boolean shouldShowMenuShortcutsWhenKeyboardPresent(android.view.ViewConfiguration,android.content.Context)>($r4, $r1) in <androidx.appcompat.view.menu.MenuBuilder: void setShortcutsVisibleInner(boolean)> ==> <androidx.core.view.ViewConfigurationCompat: boolean shouldShowMenuShortcutsWhenKeyboardPresent(android.view.ViewConfiguration,android.content.Context)>
STATIC edge: $z0 = staticinvoke <androidx.core.view.ViewConfigurationCompat$Api28Impl: boolean shouldShowMenuShortcutsWhenKeyboardPresent(android.view.ViewConfiguration)>($r0) in <androidx.core.view.ViewConfigurationCompat: boolean shouldShowMenuShortcutsWhenKeyboardPresent(android.view.ViewConfiguration,android.content.Context)> ==> <androidx.core.view.ViewConfigurationCompat$Api28Impl: boolean shouldShowMenuShortcutsWhenKeyboardPresent(android.view.ViewConfiguration)>
VIRTUAL edge: $r0 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("getScaledScrollFactor", $r3) in <androidx.core.view.ViewConfigurationCompat: void <clinit>()> ==> <java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>
VIRTUAL edge: $r1 = virtualinvoke $r2.<android.content.Context: android.content.res.Resources getResources()>() in <androidx.appcompat.view.menu.MenuBuilder: void <init>(android.content.Context)> ==> <androidx.appcompat.view.ContextThemeWrapper: android.content.res.Resources getResources()>
SPECIAL edge: specialinvoke r0.<androidx.appcompat.view.ActionMode: void <init>()>() in <androidx.appcompat.view.StandaloneActionMode: void <init>(android.content.Context,androidx.appcompat.widget.ActionBarContextView,androidx.appcompat.view.ActionMode$Callback,boolean)> ==> <androidx.appcompat.view.ActionMode: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.appcompat.view.ActionMode: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r27.<androidx.appcompat.app.AppCompatDelegateImpl$6: void <init>(androidx.appcompat.app.AppCompatDelegateImpl)>(r0) in <androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.view.ActionMode startSupportActionModeFromWindow(androidx.appcompat.view.ActionMode$Callback)> ==> <androidx.appcompat.app.AppCompatDelegateImpl$6: void <init>(androidx.appcompat.app.AppCompatDelegateImpl)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.appcompat.app.AppCompatDelegateImpl$6: void <init>(androidx.appcompat.app.AppCompatDelegateImpl)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r25.<androidx.appcompat.widget.ActionBarContextView: void <init>(android.content.Context)>($r6) in <androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.view.ActionMode startSupportActionModeFromWindow(androidx.appcompat.view.ActionMode$Callback)> ==> <androidx.appcompat.widget.ActionBarContextView: void <init>(android.content.Context)>
SPECIAL edge: specialinvoke $r24.<androidx.appcompat.view.ContextThemeWrapper: void <init>(android.content.Context,int)>($r6, 0) in <androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.view.ActionMode startSupportActionModeFromWindow(androidx.appcompat.view.ActionMode$Callback)> ==> <androidx.appcompat.view.ContextThemeWrapper: void <init>(android.content.Context,int)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<android.content.Context: android.content.res.Resources$Theme getTheme()>() in <androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.view.ActionMode startSupportActionModeFromWindow(androidx.appcompat.view.ActionMode$Callback)> ==> <androidx.appcompat.view.ContextThemeWrapper: android.content.res.Resources$Theme getTheme()>
VIRTUAL edge: $r8 = virtualinvoke $r6.<android.content.Context: android.content.res.Resources getResources()>() in <androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.view.ActionMode startSupportActionModeFromWindow(androidx.appcompat.view.ActionMode$Callback)> ==> <androidx.appcompat.view.ContextThemeWrapper: android.content.res.Resources getResources()>
VIRTUAL edge: $r8 = virtualinvoke $r6.<android.content.Context: android.content.res.Resources getResources()>() in <androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.view.ActionMode startSupportActionModeFromWindow(androidx.appcompat.view.ActionMode$Callback)> ==> <androidx.appcompat.view.ContextThemeWrapper: android.content.res.Resources getResources()>
SPECIAL edge: specialinvoke $r22.<androidx.appcompat.app.AppCompatDelegateImpl$ActionModeCallbackWrapperV9: void <init>(androidx.appcompat.app.AppCompatDelegateImpl,androidx.appcompat.view.ActionMode$Callback)>(r0, $r2) in <androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.view.ActionMode startSupportActionModeFromWindow(androidx.appcompat.view.ActionMode$Callback)> ==> <androidx.appcompat.app.AppCompatDelegateImpl$ActionModeCallbackWrapperV9: void <init>(androidx.appcompat.app.AppCompatDelegateImpl,androidx.appcompat.view.ActionMode$Callback)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<androidx.appcompat.view.ActionMode$Callback: boolean onCreateActionMode(androidx.appcompat.view.ActionMode,android.view.Menu)>($r28, $r17) in <androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.view.ActionMode startSupportActionModeFromWindow(androidx.appcompat.view.ActionMode$Callback)> ==> <androidx.appcompat.app.AppCompatDelegateImpl$ActionModeCallbackWrapperV9: boolean onCreateActionMode(androidx.appcompat.view.ActionMode,android.view.Menu)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<androidx.appcompat.view.ActionMode$Callback: boolean onCreateActionMode(androidx.appcompat.view.ActionMode,android.view.Menu)>($r3, $r1) in <androidx.appcompat.app.AppCompatDelegateImpl$ActionModeCallbackWrapperV9: boolean onCreateActionMode(androidx.appcompat.view.ActionMode,android.view.Menu)> ==> <androidx.appcompat.view.SupportActionModeWrapper$CallbackWrapper: boolean onCreateActionMode(androidx.appcompat.view.ActionMode,android.view.Menu)>
VIRTUAL edge: $r4 = virtualinvoke r0.<androidx.appcompat.view.SupportActionModeWrapper$CallbackWrapper: android.view.ActionMode getActionModeWrapper(androidx.appcompat.view.ActionMode)>($r2) in <androidx.appcompat.view.SupportActionModeWrapper$CallbackWrapper: boolean onCreateActionMode(androidx.appcompat.view.ActionMode,android.view.Menu)> ==> <androidx.appcompat.view.SupportActionModeWrapper$CallbackWrapper: android.view.ActionMode getActionModeWrapper(androidx.appcompat.view.ActionMode)>
SPECIAL edge: $r3 = specialinvoke r0.<androidx.appcompat.view.SupportActionModeWrapper$CallbackWrapper: android.view.Menu getMenuWrapper(android.view.Menu)>($r3) in <androidx.appcompat.view.SupportActionModeWrapper$CallbackWrapper: boolean onCreateActionMode(androidx.appcompat.view.ActionMode,android.view.Menu)> ==> <androidx.appcompat.view.SupportActionModeWrapper$CallbackWrapper: android.view.Menu getMenuWrapper(android.view.Menu)>
SPECIAL edge: specialinvoke $r5.<androidx.appcompat.view.menu.MenuWrapperICS: void <init>(android.content.Context,androidx.core.internal.view.SupportMenu)>($r6, $r7) in <androidx.appcompat.view.SupportActionModeWrapper$CallbackWrapper: android.view.Menu getMenuWrapper(android.view.Menu)> ==> <androidx.appcompat.view.menu.MenuWrapperICS: void <init>(android.content.Context,androidx.core.internal.view.SupportMenu)>
SPECIAL edge: specialinvoke r0.<androidx.appcompat.view.menu.BaseMenuWrapper: void <init>(android.content.Context)>($r1) in <androidx.appcompat.view.menu.MenuWrapperICS: void <init>(android.content.Context,androidx.core.internal.view.SupportMenu)> ==> <androidx.appcompat.view.menu.BaseMenuWrapper: void <init>(android.content.Context)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.appcompat.view.menu.BaseMenuWrapper: void <init>(android.content.Context)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r3.<androidx.collection.SimpleArrayMap: java.lang.Object get(java.lang.Object)>($r1) in <androidx.appcompat.view.SupportActionModeWrapper$CallbackWrapper: android.view.Menu getMenuWrapper(android.view.Menu)> ==> <androidx.collection.SimpleArrayMap: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r3.<androidx.collection.SimpleArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r5) in <androidx.appcompat.view.SupportActionModeWrapper$CallbackWrapper: android.view.Menu getMenuWrapper(android.view.Menu)> ==> <androidx.collection.SimpleArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: void endOnGoingFadeAnimation()>() in <androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.view.ActionMode startSupportActionModeFromWindow(androidx.appcompat.view.ActionMode$Callback)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: void endOnGoingFadeAnimation()>
VIRTUAL edge: $r6 = virtualinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: android.content.Context getActionBarThemedContext()>() in <androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.view.ActionMode startSupportActionModeFromWindow(androidx.appcompat.view.ActionMode$Callback)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: android.content.Context getActionBarThemedContext()>
VIRTUAL edge: $z0 = virtualinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: boolean shouldAnimateActionModeView()>() in <androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.view.ActionMode startSupportActionModeFromWindow(androidx.appcompat.view.ActionMode$Callback)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: boolean shouldAnimateActionModeView()>
VIRTUAL edge: virtualinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: void updateBackInvokedCallbackState()>() in <androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.view.ActionMode startSupportActionModeFromWindow(androidx.appcompat.view.ActionMode$Callback)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: void updateBackInvokedCallbackState()>
CLINIT edge: $z0 = staticinvoke <androidx.core.view.ViewCompat: boolean isLaidOut(android.view.View)>($r1) in <androidx.appcompat.app.AppCompatDelegateImpl: boolean shouldAnimateActionModeView()> ==> <androidx.core.view.ViewCompat: void <clinit>()>
STATIC edge: $z0 = staticinvoke <androidx.core.view.ViewCompat: boolean isLaidOut(android.view.View)>($r1) in <androidx.appcompat.app.AppCompatDelegateImpl: boolean shouldAnimateActionModeView()> ==> <androidx.core.view.ViewCompat: boolean isLaidOut(android.view.View)>
STATIC edge: $z0 = staticinvoke <androidx.core.view.ViewCompat$Api19Impl: boolean isLaidOut(android.view.View)>($r0) in <androidx.core.view.ViewCompat: boolean isLaidOut(android.view.View)> ==> <androidx.core.view.ViewCompat$Api19Impl: boolean isLaidOut(android.view.View)>
VIRTUAL edge: $r1 = virtualinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.app.ActionBar getSupportActionBar()>() in <androidx.appcompat.app.AppCompatDelegateImpl: android.content.Context getActionBarThemedContext()> ==> <androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.app.ActionBar getSupportActionBar()>
VIRTUAL edge: virtualinvoke $r1.<androidx.core.view.ViewPropertyAnimatorCompat: void cancel()>() in <androidx.appcompat.app.AppCompatDelegateImpl: void endOnGoingFadeAnimation()> ==> <androidx.core.view.ViewPropertyAnimatorCompat: void cancel()>
EXECUTOR edge: virtualinvoke $r14.<android.view.View: boolean post(java.lang.Runnable)>($r21) in <androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.view.ActionMode startSupportActionModeFromWindow(androidx.appcompat.view.ActionMode$Callback)> ==> <androidx.appcompat.app.AppCompatDelegateImpl$6: void run()>
CLINIT edge: $r4 = staticinvoke <androidx.core.view.ViewCompat: androidx.core.view.ViewPropertyAnimatorCompat animate(android.view.View)>($r3) in <androidx.appcompat.app.AppCompatDelegateImpl$6: void run()> ==> <androidx.core.view.ViewCompat: void <clinit>()>
STATIC edge: $r4 = staticinvoke <androidx.core.view.ViewCompat: androidx.core.view.ViewPropertyAnimatorCompat animate(android.view.View)>($r3) in <androidx.appcompat.app.AppCompatDelegateImpl$6: void run()> ==> <androidx.core.view.ViewCompat: androidx.core.view.ViewPropertyAnimatorCompat animate(android.view.View)>
SPECIAL edge: specialinvoke $r5.<androidx.appcompat.app.AppCompatDelegateImpl$6$1: void <init>(androidx.appcompat.app.AppCompatDelegateImpl$6)>(r0) in <androidx.appcompat.app.AppCompatDelegateImpl$6: void run()> ==> <androidx.appcompat.app.AppCompatDelegateImpl$6$1: void <init>(androidx.appcompat.app.AppCompatDelegateImpl$6)>
SPECIAL edge: specialinvoke r0.<androidx.core.view.ViewPropertyAnimatorListenerAdapter: void <init>()>() in <androidx.appcompat.app.AppCompatDelegateImpl$6$1: void <init>(androidx.appcompat.app.AppCompatDelegateImpl$6)> ==> <androidx.core.view.ViewPropertyAnimatorListenerAdapter: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r4.<androidx.core.view.ViewPropertyAnimatorCompat: androidx.core.view.ViewPropertyAnimatorCompat alpha(float)>(1.0F) in <androidx.appcompat.app.AppCompatDelegateImpl$6: void run()> ==> <androidx.core.view.ViewPropertyAnimatorCompat: androidx.core.view.ViewPropertyAnimatorCompat alpha(float)>
VIRTUAL edge: virtualinvoke $r4.<androidx.core.view.ViewPropertyAnimatorCompat: androidx.core.view.ViewPropertyAnimatorCompat setListener(androidx.core.view.ViewPropertyAnimatorListener)>($r5) in <androidx.appcompat.app.AppCompatDelegateImpl$6: void run()> ==> <androidx.core.view.ViewPropertyAnimatorCompat: androidx.core.view.ViewPropertyAnimatorCompat setListener(androidx.core.view.ViewPropertyAnimatorListener)>
VIRTUAL edge: virtualinvoke $r1.<androidx.appcompat.app.AppCompatDelegateImpl: void endOnGoingFadeAnimation()>() in <androidx.appcompat.app.AppCompatDelegateImpl$6: void run()> ==> <androidx.appcompat.app.AppCompatDelegateImpl: void endOnGoingFadeAnimation()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<androidx.appcompat.app.AppCompatDelegateImpl: boolean shouldAnimateActionModeView()>() in <androidx.appcompat.app.AppCompatDelegateImpl$6: void run()> ==> <androidx.appcompat.app.AppCompatDelegateImpl: boolean shouldAnimateActionModeView()>
VIRTUAL edge: virtualinvoke $r3.<androidx.appcompat.widget.ActionBarContextView: void setVisibility(int)>(0) in <androidx.appcompat.app.AppCompatDelegateImpl$6: void run()> ==> <androidx.appcompat.widget.ActionBarContextView: void setVisibility(int)>
SPECIAL edge: specialinvoke r0.<androidx.appcompat.widget.AbsActionBarView: void setVisibility(int)>($i0) in <androidx.appcompat.widget.ActionBarContextView: void setVisibility(int)> ==> <androidx.appcompat.widget.AbsActionBarView: void setVisibility(int)>
VIRTUAL edge: $r8 = virtualinvoke $r6.<android.content.Context: android.content.res.Resources getResources()>() in <androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.view.ActionMode startSupportActionModeFromWindow(androidx.appcompat.view.ActionMode$Callback)> ==> <androidx.appcompat.app.AppCompatActivity: android.content.res.Resources getResources()>
VIRTUAL edge: $r8 = virtualinvoke $r6.<android.content.Context: android.content.res.Resources getResources()>() in <androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.view.ActionMode startSupportActionModeFromWindow(androidx.appcompat.view.ActionMode$Callback)> ==> <androidx.appcompat.app.AppCompatActivity: android.content.res.Resources getResources()>
VIRTUAL edge: $r12 = virtualinvoke $r8.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>() in <androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.view.ActionMode startSupportActionModeFromWindow(androidx.appcompat.view.ActionMode$Callback)> ==> <androidx.appcompat.widget.VectorEnabledTintResources: android.util.DisplayMetrics getDisplayMetrics()>
VIRTUAL edge: $r1 = virtualinvoke $r2.<android.content.Context: android.content.res.Resources getResources()>() in <androidx.appcompat.view.menu.MenuBuilder: void <init>(android.content.Context)> ==> <androidx.appcompat.app.AppCompatActivity: android.content.res.Resources getResources()>
VIRTUAL edge: virtualinvoke $r5.<androidx.appcompat.widget.ActionBarContextView: void setContentHeight(int)>($i0) in <androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.view.ActionMode startSupportActionModeFromWindow(androidx.appcompat.view.ActionMode$Callback)> ==> <androidx.appcompat.widget.ActionBarContextView: void setContentHeight(int)>
VIRTUAL edge: virtualinvoke $r5.<androidx.appcompat.widget.ActionBarContextView: void killMode()>() in <androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.view.ActionMode startSupportActionModeFromWindow(androidx.appcompat.view.ActionMode$Callback)> ==> <androidx.appcompat.widget.ActionBarContextView: void killMode()>
VIRTUAL edge: virtualinvoke $r5.<androidx.appcompat.widget.ActionBarContextView: void initForMode(androidx.appcompat.view.ActionMode)>($r28) in <androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.view.ActionMode startSupportActionModeFromWindow(androidx.appcompat.view.ActionMode$Callback)> ==> <androidx.appcompat.widget.ActionBarContextView: void initForMode(androidx.appcompat.view.ActionMode)>
VIRTUAL edge: virtualinvoke $r5.<androidx.appcompat.widget.ActionBarContextView: void setVisibility(int)>(0) in <androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.view.ActionMode startSupportActionModeFromWindow(androidx.appcompat.view.ActionMode$Callback)> ==> <androidx.appcompat.widget.ActionBarContextView: void setVisibility(int)>
CLINIT edge: staticinvoke <androidx.core.view.ViewCompat: void setBackground(android.view.View,android.graphics.drawable.Drawable)>($r10, null) in <androidx.appcompat.widget.ActionBarContextView: void initForMode(androidx.appcompat.view.ActionMode)> ==> <androidx.core.view.ViewCompat: void <clinit>()>
STATIC edge: staticinvoke <androidx.core.view.ViewCompat: void setBackground(android.view.View,android.graphics.drawable.Drawable)>($r10, null) in <androidx.appcompat.widget.ActionBarContextView: void initForMode(androidx.appcompat.view.ActionMode)> ==> <androidx.core.view.ViewCompat: void setBackground(android.view.View,android.graphics.drawable.Drawable)>
SPECIAL edge: specialinvoke $r12.<androidx.appcompat.widget.ActionMenuPresenter: void <init>(android.content.Context)>($r3) in <androidx.appcompat.widget.ActionBarContextView: void initForMode(androidx.appcompat.view.ActionMode)> ==> <androidx.appcompat.widget.ActionMenuPresenter: void <init>(android.content.Context)>
SPECIAL edge: specialinvoke $r3.<androidx.appcompat.widget.ActionMenuPresenter$PopupPresenterCallback: void <init>(androidx.appcompat.widget.ActionMenuPresenter)>(r0) in <androidx.appcompat.widget.ActionMenuPresenter: void <init>(android.content.Context)> ==> <androidx.appcompat.widget.ActionMenuPresenter$PopupPresenterCallback: void <init>(androidx.appcompat.widget.ActionMenuPresenter)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.appcompat.widget.ActionMenuPresenter$PopupPresenterCallback: void <init>(androidx.appcompat.widget.ActionMenuPresenter)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<androidx.appcompat.view.menu.BaseMenuPresenter: void <init>(android.content.Context,int,int)>($r1, $i0, $i1) in <androidx.appcompat.widget.ActionMenuPresenter: void <init>(android.content.Context)> ==> <androidx.appcompat.view.menu.BaseMenuPresenter: void <init>(android.content.Context,int,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.appcompat.view.menu.BaseMenuPresenter: void <init>(android.content.Context,int,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r11.<androidx.appcompat.widget.ActionBarContextView$1: void <init>(androidx.appcompat.widget.ActionBarContextView,androidx.appcompat.view.ActionMode)>(r0, $r1) in <androidx.appcompat.widget.ActionBarContextView: void initForMode(androidx.appcompat.view.ActionMode)> ==> <androidx.appcompat.widget.ActionBarContextView$1: void <init>(androidx.appcompat.widget.ActionBarContextView,androidx.appcompat.view.ActionMode)>
VIRTUAL edge: $r6 = virtualinvoke $r1.<androidx.appcompat.view.ActionMode: android.view.Menu getMenu()>() in <androidx.appcompat.widget.ActionBarContextView: void initForMode(androidx.appcompat.view.ActionMode)> ==> <androidx.appcompat.view.StandaloneActionMode: android.view.Menu getMenu()>
VIRTUAL edge: virtualinvoke $r8.<androidx.appcompat.widget.ActionMenuPresenter: boolean dismissPopupMenus()>() in <androidx.appcompat.widget.ActionBarContextView: void initForMode(androidx.appcompat.view.ActionMode)> ==> <androidx.appcompat.widget.ActionMenuPresenter: boolean dismissPopupMenus()>
VIRTUAL edge: virtualinvoke $r8.<androidx.appcompat.widget.ActionMenuPresenter: void setReserveOverflow(boolean)>(1) in <androidx.appcompat.widget.ActionBarContextView: void initForMode(androidx.appcompat.view.ActionMode)> ==> <androidx.appcompat.widget.ActionMenuPresenter: void setReserveOverflow(boolean)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<androidx.appcompat.widget.ActionMenuPresenter: androidx.appcompat.view.menu.MenuView getMenuView(android.view.ViewGroup)>(r0) in <androidx.appcompat.widget.ActionBarContextView: void initForMode(androidx.appcompat.view.ActionMode)> ==> <androidx.appcompat.widget.ActionMenuPresenter: androidx.appcompat.view.menu.MenuView getMenuView(android.view.ViewGroup)>
SPECIAL edge: $r1 = specialinvoke r0.<androidx.appcompat.view.menu.BaseMenuPresenter: androidx.appcompat.view.menu.MenuView getMenuView(android.view.ViewGroup)>($r2) in <androidx.appcompat.widget.ActionMenuPresenter: androidx.appcompat.view.menu.MenuView getMenuView(android.view.ViewGroup)> ==> <androidx.appcompat.view.menu.BaseMenuPresenter: androidx.appcompat.view.menu.MenuView getMenuView(android.view.ViewGroup)>
VIRTUAL edge: virtualinvoke r0.<androidx.appcompat.view.menu.BaseMenuPresenter: void updateMenuView(boolean)>(1) in <androidx.appcompat.view.menu.BaseMenuPresenter: androidx.appcompat.view.menu.MenuView getMenuView(android.view.ViewGroup)> ==> <androidx.appcompat.widget.ActionMenuPresenter: void updateMenuView(boolean)>
SPECIAL edge: specialinvoke $r8.<androidx.appcompat.widget.ActionMenuPresenter$OverflowMenuButton: void <init>(androidx.appcompat.widget.ActionMenuPresenter,android.content.Context)>(r0, $r9) in <androidx.appcompat.widget.ActionMenuPresenter: void updateMenuView(boolean)> ==> <androidx.appcompat.widget.ActionMenuPresenter$OverflowMenuButton: void <init>(androidx.appcompat.widget.ActionMenuPresenter,android.content.Context)>
STATIC edge: staticinvoke <androidx.appcompat.widget.TooltipCompat: void setTooltipText(android.view.View,java.lang.CharSequence)>(r0, $r2) in <androidx.appcompat.widget.ActionMenuPresenter$OverflowMenuButton: void <init>(androidx.appcompat.widget.ActionMenuPresenter,android.content.Context)> ==> <androidx.appcompat.widget.TooltipCompat: void setTooltipText(android.view.View,java.lang.CharSequence)>
STATIC edge: staticinvoke <androidx.appcompat.widget.TooltipCompatHandler: void setTooltipText(android.view.View,java.lang.CharSequence)>($r0, $r1) in <androidx.appcompat.widget.TooltipCompat: void setTooltipText(android.view.View,java.lang.CharSequence)> ==> <androidx.appcompat.widget.TooltipCompatHandler: void setTooltipText(android.view.View,java.lang.CharSequence)>
STATIC edge: staticinvoke <androidx.appcompat.widget.TooltipCompat$Api26Impl: void setTooltipText(android.view.View,java.lang.CharSequence)>($r0, $r1) in <androidx.appcompat.widget.TooltipCompat: void setTooltipText(android.view.View,java.lang.CharSequence)> ==> <androidx.appcompat.widget.TooltipCompat$Api26Impl: void setTooltipText(android.view.View,java.lang.CharSequence)>
STATIC edge: staticinvoke <androidx.appcompat.widget.TooltipCompatHandler: void setPendingHandler(androidx.appcompat.widget.TooltipCompatHandler)>(null) in <androidx.appcompat.widget.TooltipCompatHandler: void setTooltipText(android.view.View,java.lang.CharSequence)> ==> <androidx.appcompat.widget.TooltipCompatHandler: void setPendingHandler(androidx.appcompat.widget.TooltipCompatHandler)>
VIRTUAL edge: virtualinvoke $r2.<androidx.appcompat.widget.TooltipCompatHandler: void hide()>() in <androidx.appcompat.widget.TooltipCompatHandler: void setTooltipText(android.view.View,java.lang.CharSequence)> ==> <androidx.appcompat.widget.TooltipCompatHandler: void hide()>
SPECIAL edge: specialinvoke $r2.<androidx.appcompat.widget.TooltipCompatHandler: void <init>(android.view.View,java.lang.CharSequence)>($r0, $r1) in <androidx.appcompat.widget.TooltipCompatHandler: void setTooltipText(android.view.View,java.lang.CharSequence)> ==> <androidx.appcompat.widget.TooltipCompatHandler: void <init>(android.view.View,java.lang.CharSequence)>
STATIC edge: staticinvoke <androidx.appcompat.widget.TooltipCompatHandler: void setPendingHandler(androidx.appcompat.widget.TooltipCompatHandler)>(null) in <androidx.appcompat.widget.TooltipCompatHandler: void hide()> ==> <androidx.appcompat.widget.TooltipCompatHandler: void setPendingHandler(androidx.appcompat.widget.TooltipCompatHandler)>
CLINIT edge: $i0 = staticinvoke <androidx.core.view.ViewConfigurationCompat: int getScaledHoverSlop(android.view.ViewConfiguration)>($r6) in <androidx.appcompat.widget.TooltipCompatHandler: void <init>(android.view.View,java.lang.CharSequence)> ==> <androidx.core.view.ViewConfigurationCompat: void <clinit>()>
STATIC edge: $i0 = staticinvoke <androidx.core.view.ViewConfigurationCompat: int getScaledHoverSlop(android.view.ViewConfiguration)>($r6) in <androidx.appcompat.widget.TooltipCompatHandler: void <init>(android.view.View,java.lang.CharSequence)> ==> <androidx.core.view.ViewConfigurationCompat: int getScaledHoverSlop(android.view.ViewConfiguration)>
STATIC edge: $i0 = staticinvoke <androidx.core.view.ViewConfigurationCompat$Api28Impl: int getScaledHoverSlop(android.view.ViewConfiguration)>($r0) in <androidx.core.view.ViewConfigurationCompat: int getScaledHoverSlop(android.view.ViewConfiguration)> ==> <androidx.core.view.ViewConfigurationCompat$Api28Impl: int getScaledHoverSlop(android.view.ViewConfiguration)>
SPECIAL edge: specialinvoke $r4.<androidx.appcompat.widget.TooltipCompatHandler$$ExternalSyntheticLambda1: void <init>(androidx.appcompat.widget.TooltipCompatHandler)>(r0) in <androidx.appcompat.widget.TooltipCompatHandler: void <init>(android.view.View,java.lang.CharSequence)> ==> <androidx.appcompat.widget.TooltipCompatHandler$$ExternalSyntheticLambda1: void <init>(androidx.appcompat.widget.TooltipCompatHandler)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.appcompat.widget.TooltipCompatHandler$$ExternalSyntheticLambda1: void <init>(androidx.appcompat.widget.TooltipCompatHandler)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r3.<androidx.appcompat.widget.TooltipCompatHandler$$ExternalSyntheticLambda0: void <init>(androidx.appcompat.widget.TooltipCompatHandler)>(r0) in <androidx.appcompat.widget.TooltipCompatHandler: void <init>(android.view.View,java.lang.CharSequence)> ==> <androidx.appcompat.widget.TooltipCompatHandler$$ExternalSyntheticLambda0: void <init>(androidx.appcompat.widget.TooltipCompatHandler)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.appcompat.widget.TooltipCompatHandler$$ExternalSyntheticLambda0: void <init>(androidx.appcompat.widget.TooltipCompatHandler)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.appcompat.widget.TooltipCompatHandler: void <init>(android.view.View,java.lang.CharSequence)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<androidx.appcompat.widget.TooltipCompatHandler: void forceNextChangeSignificant()>() in <androidx.appcompat.widget.TooltipCompatHandler: void <init>(android.view.View,java.lang.CharSequence)> ==> <androidx.appcompat.widget.TooltipCompatHandler: void forceNextChangeSignificant()>
SPECIAL edge: specialinvoke r0.<androidx.appcompat.widget.TooltipCompatHandler: void forceNextChangeSignificant()>() in <androidx.appcompat.widget.TooltipCompatHandler: void hide()> ==> <androidx.appcompat.widget.TooltipCompatHandler: void forceNextChangeSignificant()>
SPECIAL edge: specialinvoke $r4.<androidx.appcompat.widget.ActionMenuPresenter$OverflowMenuButton$1: void <init>(androidx.appcompat.widget.ActionMenuPresenter$OverflowMenuButton,android.view.View,androidx.appcompat.widget.ActionMenuPresenter)>(r0, r0, $r1) in <androidx.appcompat.widget.ActionMenuPresenter$OverflowMenuButton: void <init>(androidx.appcompat.widget.ActionMenuPresenter,android.content.Context)> ==> <androidx.appcompat.widget.ActionMenuPresenter$OverflowMenuButton$1: void <init>(androidx.appcompat.widget.ActionMenuPresenter$OverflowMenuButton,android.view.View,androidx.appcompat.widget.ActionMenuPresenter)>
SPECIAL edge: specialinvoke r0.<androidx.appcompat.widget.ForwardingListener: void <init>(android.view.View)>($r2) in <androidx.appcompat.widget.ActionMenuPresenter$OverflowMenuButton$1: void <init>(androidx.appcompat.widget.ActionMenuPresenter$OverflowMenuButton,android.view.View,androidx.appcompat.widget.ActionMenuPresenter)> ==> <androidx.appcompat.widget.ForwardingListener: void <init>(android.view.View)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.appcompat.widget.ForwardingListener: void <init>(android.view.View)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<androidx.appcompat.widget.AppCompatImageView: void <init>(android.content.Context,android.util.AttributeSet,int)>($r3, null, $i0) in <androidx.appcompat.widget.ActionMenuPresenter$OverflowMenuButton: void <init>(androidx.appcompat.widget.ActionMenuPresenter,android.content.Context)> ==> <androidx.appcompat.widget.AppCompatImageView: void <init>(android.content.Context,android.util.AttributeSet,int)>
CLINIT edge: $r2 = staticinvoke <androidx.appcompat.widget.TintContextWrapper: android.content.Context wrap(android.content.Context)>($r2) in <androidx.appcompat.widget.AppCompatImageView: void <init>(android.content.Context,android.util.AttributeSet,int)> ==> <androidx.appcompat.widget.TintContextWrapper: void <clinit>()>
STATIC edge: staticinvoke <androidx.appcompat.widget.ThemeUtils: void checkAppCompatTheme(android.view.View,android.content.Context)>(r0, $r2) in <androidx.appcompat.widget.AppCompatImageView: void <init>(android.content.Context,android.util.AttributeSet,int)> ==> <androidx.appcompat.widget.ThemeUtils: void checkAppCompatTheme(android.view.View,android.content.Context)>
STATIC edge: $r2 = staticinvoke <androidx.appcompat.widget.TintContextWrapper: android.content.Context wrap(android.content.Context)>($r2) in <androidx.appcompat.widget.AppCompatImageView: void <init>(android.content.Context,android.util.AttributeSet,int)> ==> <androidx.appcompat.widget.TintContextWrapper: android.content.Context wrap(android.content.Context)>
CLINIT edge: staticinvoke <androidx.appcompat.widget.ThemeUtils: void checkAppCompatTheme(android.view.View,android.content.Context)>(r0, $r2) in <androidx.appcompat.widget.AppCompatImageView: void <init>(android.content.Context,android.util.AttributeSet,int)> ==> <androidx.appcompat.widget.ThemeUtils: void <clinit>()>
CLINIT edge: $r3 = <androidx.appcompat.R$styleable: int[] AppCompatTheme> in <androidx.appcompat.widget.ThemeUtils: void checkAppCompatTheme(android.view.View,android.content.Context)> ==> <androidx.appcompat.R$styleable: void <clinit>()>
CLINIT edge: $z0 = staticinvoke <androidx.appcompat.widget.TintContextWrapper: boolean shouldWrap(android.content.Context)>($r0) in <androidx.appcompat.widget.TintContextWrapper: android.content.Context wrap(android.content.Context)> ==> <androidx.appcompat.widget.TintContextWrapper: void <clinit>()>
STATIC edge: $z0 = staticinvoke <androidx.appcompat.widget.TintContextWrapper: boolean shouldWrap(android.content.Context)>($r0) in <androidx.appcompat.widget.TintContextWrapper: android.content.Context wrap(android.content.Context)> ==> <androidx.appcompat.widget.TintContextWrapper: boolean shouldWrap(android.content.Context)>
CLINIT edge: $z0 = staticinvoke <androidx.appcompat.widget.VectorEnabledTintResources: boolean shouldBeUsed()>() in <androidx.appcompat.widget.TintContextWrapper: boolean shouldWrap(android.content.Context)> ==> <androidx.appcompat.widget.VectorEnabledTintResources: void <clinit>()>
STATIC edge: $z0 = staticinvoke <androidx.appcompat.widget.VectorEnabledTintResources: boolean shouldBeUsed()>() in <androidx.appcompat.widget.TintContextWrapper: boolean shouldWrap(android.content.Context)> ==> <androidx.appcompat.widget.VectorEnabledTintResources: boolean shouldBeUsed()>
SPECIAL edge: specialinvoke $r9.<androidx.appcompat.widget.TintContextWrapper: void <init>(android.content.Context)>($r0) in <androidx.appcompat.widget.TintContextWrapper: android.content.Context wrap(android.content.Context)> ==> <androidx.appcompat.widget.TintContextWrapper: void <init>(android.content.Context)>
CLINIT edge: $z0 = staticinvoke <androidx.appcompat.widget.VectorEnabledTintResources: boolean shouldBeUsed()>() in <androidx.appcompat.widget.TintContextWrapper: void <init>(android.content.Context)> ==> <androidx.appcompat.widget.VectorEnabledTintResources: void <clinit>()>
STATIC edge: $z0 = staticinvoke <androidx.appcompat.widget.VectorEnabledTintResources: boolean shouldBeUsed()>() in <androidx.appcompat.widget.TintContextWrapper: void <init>(android.content.Context)> ==> <androidx.appcompat.widget.VectorEnabledTintResources: boolean shouldBeUsed()>
SPECIAL edge: specialinvoke $r6.<androidx.appcompat.widget.TintResources: void <init>(android.content.Context,android.content.res.Resources)>(r0, $r3) in <androidx.appcompat.widget.TintContextWrapper: void <init>(android.content.Context)> ==> <androidx.appcompat.widget.TintResources: void <init>(android.content.Context,android.content.res.Resources)>
SPECIAL edge: specialinvoke r0.<androidx.appcompat.widget.ResourcesWrapper: void <init>(android.content.res.Resources)>($r2) in <androidx.appcompat.widget.TintResources: void <init>(android.content.Context,android.content.res.Resources)> ==> <androidx.appcompat.widget.ResourcesWrapper: void <init>(android.content.res.Resources)>
SPECIAL edge: specialinvoke $r2.<androidx.appcompat.widget.VectorEnabledTintResources: void <init>(android.content.Context,android.content.res.Resources)>(r0, $r3) in <androidx.appcompat.widget.TintContextWrapper: void <init>(android.content.Context)> ==> <androidx.appcompat.widget.VectorEnabledTintResources: void <init>(android.content.Context,android.content.res.Resources)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <androidx.appcompat.widget.TintContextWrapper: void <clinit>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r4.<androidx.appcompat.widget.AppCompatImageHelper: void <init>(android.widget.ImageView)>(r0) in <androidx.appcompat.widget.AppCompatImageView: void <init>(android.content.Context,android.util.AttributeSet,int)> ==> <androidx.appcompat.widget.AppCompatImageHelper: void <init>(android.widget.ImageView)>
VIRTUAL edge: virtualinvoke $r4.<androidx.appcompat.widget.AppCompatImageHelper: void loadFromAttributes(android.util.AttributeSet,int)>($r1, $i0) in <androidx.appcompat.widget.AppCompatImageView: void <init>(android.content.Context,android.util.AttributeSet,int)> ==> <androidx.appcompat.widget.AppCompatImageHelper: void loadFromAttributes(android.util.AttributeSet,int)>
CLINIT edge: $r1 = <androidx.appcompat.R$styleable: int[] AppCompatImageView> in <androidx.appcompat.widget.AppCompatImageHelper: void loadFromAttributes(android.util.AttributeSet,int)> ==> <androidx.appcompat.R$styleable: void <clinit>()>
STATIC edge: staticinvoke <androidx.core.widget.ImageViewCompat: void setImageTintMode(android.widget.ImageView,android.graphics.PorterDuff$Mode)>($r3, $r10) in <androidx.appcompat.widget.AppCompatImageHelper: void loadFromAttributes(android.util.AttributeSet,int)> ==> <androidx.core.widget.ImageViewCompat: void setImageTintMode(android.widget.ImageView,android.graphics.PorterDuff$Mode)>
STATIC edge: $r10 = staticinvoke <androidx.appcompat.widget.DrawableUtils: android.graphics.PorterDuff$Mode parseTintMode(int,android.graphics.PorterDuff$Mode)>($i0, null) in <androidx.appcompat.widget.AppCompatImageHelper: void loadFromAttributes(android.util.AttributeSet,int)> ==> <androidx.appcompat.widget.DrawableUtils: android.graphics.PorterDuff$Mode parseTintMode(int,android.graphics.PorterDuff$Mode)>
STATIC edge: staticinvoke <androidx.core.widget.ImageViewCompat: void setImageTintList(android.widget.ImageView,android.content.res.ColorStateList)>($r3, $r9) in <androidx.appcompat.widget.AppCompatImageHelper: void loadFromAttributes(android.util.AttributeSet,int)> ==> <androidx.core.widget.ImageViewCompat: void setImageTintList(android.widget.ImageView,android.content.res.ColorStateList)>
STATIC edge: staticinvoke <androidx.appcompat.widget.DrawableUtils: void fixDrawable(android.graphics.drawable.Drawable)>($r8) in <androidx.appcompat.widget.AppCompatImageHelper: void loadFromAttributes(android.util.AttributeSet,int)> ==> <androidx.appcompat.widget.DrawableUtils: void fixDrawable(android.graphics.drawable.Drawable)>
STATIC edge: $r7 = staticinvoke <androidx.appcompat.content.res.AppCompatResources: android.graphics.drawable.Drawable getDrawable(android.content.Context,int)>($r4, $i0) in <androidx.appcompat.widget.AppCompatImageHelper: void loadFromAttributes(android.util.AttributeSet,int)> ==> <androidx.appcompat.content.res.AppCompatResources: android.graphics.drawable.Drawable getDrawable(android.content.Context,int)>
STATIC edge: staticinvoke <androidx.core.view.ViewCompat: void saveAttributeDataForStyleable(android.view.View,android.content.Context,int[],android.util.AttributeSet,android.content.res.TypedArray,int,int)>($r3, $r4, $r1, $r2, $r6, $i0, 0) in <androidx.appcompat.widget.AppCompatImageHelper: void loadFromAttributes(android.util.AttributeSet,int)> ==> <androidx.core.view.ViewCompat: void saveAttributeDataForStyleable(android.view.View,android.content.Context,int[],android.util.AttributeSet,android.content.res.TypedArray,int,int)>
STATIC edge: $r5 = staticinvoke <androidx.appcompat.widget.TintTypedArray: androidx.appcompat.widget.TintTypedArray obtainStyledAttributes(android.content.Context,android.util.AttributeSet,int[],int,int)>($r4, $r2, $r1, $i0, 0) in <androidx.appcompat.widget.AppCompatImageHelper: void loadFromAttributes(android.util.AttributeSet,int)> ==> <androidx.appcompat.widget.TintTypedArray: androidx.appcompat.widget.TintTypedArray obtainStyledAttributes(android.content.Context,android.util.AttributeSet,int[],int,int)>
CLINIT edge: $r10 = staticinvoke <androidx.appcompat.widget.DrawableUtils: android.graphics.PorterDuff$Mode parseTintMode(int,android.graphics.PorterDuff$Mode)>($i0, null) in <androidx.appcompat.widget.AppCompatImageHelper: void loadFromAttributes(android.util.AttributeSet,int)> ==> <androidx.appcompat.widget.DrawableUtils: void <clinit>()>
CLINIT edge: staticinvoke <androidx.core.view.ViewCompat: void saveAttributeDataForStyleable(android.view.View,android.content.Context,int[],android.util.AttributeSet,android.content.res.TypedArray,int,int)>($r3, $r4, $r1, $r2, $r6, $i0, 0) in <androidx.appcompat.widget.AppCompatImageHelper: void loadFromAttributes(android.util.AttributeSet,int)> ==> <androidx.core.view.ViewCompat: void <clinit>()>
STATIC edge: staticinvoke <androidx.core.widget.ImageViewCompat$Api21Impl: void setImageTintMode(android.widget.ImageView,android.graphics.PorterDuff$Mode)>($r0, $r1) in <androidx.core.widget.ImageViewCompat: void setImageTintMode(android.widget.ImageView,android.graphics.PorterDuff$Mode)> ==> <androidx.core.widget.ImageViewCompat$Api21Impl: void setImageTintMode(android.widget.ImageView,android.graphics.PorterDuff$Mode)>
STATIC edge: staticinvoke <androidx.core.widget.ImageViewCompat$Api21Impl: void setImageTintList(android.widget.ImageView,android.content.res.ColorStateList)>($r0, $r1) in <androidx.core.widget.ImageViewCompat: void setImageTintList(android.widget.ImageView,android.content.res.ColorStateList)> ==> <androidx.core.widget.ImageViewCompat$Api21Impl: void setImageTintList(android.widget.ImageView,android.content.res.ColorStateList)>
STATIC edge: staticinvoke <androidx.core.view.ViewCompat$Api29Impl: void saveAttributeDataForStyleable(android.view.View,android.content.Context,int[],android.util.AttributeSet,android.content.res.TypedArray,int,int)>($r0, $r1, $r2, $r3, $r4, $i0, $i1) in <androidx.core.view.ViewCompat: void saveAttributeDataForStyleable(android.view.View,android.content.Context,int[],android.util.AttributeSet,android.content.res.TypedArray,int,int)> ==> <androidx.core.view.ViewCompat$Api29Impl: void saveAttributeDataForStyleable(android.view.View,android.content.Context,int[],android.util.AttributeSet,android.content.res.TypedArray,int,int)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<androidx.appcompat.widget.TintTypedArray: android.content.res.TypedArray getWrappedTypeArray()>() in <androidx.appcompat.widget.AppCompatImageHelper: void loadFromAttributes(android.util.AttributeSet,int)> ==> <androidx.appcompat.widget.TintTypedArray: android.content.res.TypedArray getWrappedTypeArray()>
VIRTUAL edge: $i0 = virtualinvoke $r5.<androidx.appcompat.widget.TintTypedArray: int getResourceId(int,int)>($i0, -1) in <androidx.appcompat.widget.AppCompatImageHelper: void loadFromAttributes(android.util.AttributeSet,int)> ==> <androidx.appcompat.widget.TintTypedArray: int getResourceId(int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r5.<androidx.appcompat.widget.TintTypedArray: boolean hasValue(int)>($i0) in <androidx.appcompat.widget.AppCompatImageHelper: void loadFromAttributes(android.util.AttributeSet,int)> ==> <androidx.appcompat.widget.TintTypedArray: boolean hasValue(int)>
VIRTUAL edge: $r9 = virtualinvoke $r5.<androidx.appcompat.widget.TintTypedArray: android.content.res.ColorStateList getColorStateList(int)>($i0) in <androidx.appcompat.widget.AppCompatImageHelper: void loadFromAttributes(android.util.AttributeSet,int)> ==> <androidx.appcompat.widget.TintTypedArray: android.content.res.ColorStateList getColorStateList(int)>
VIRTUAL edge: $i0 = virtualinvoke $r5.<androidx.appcompat.widget.TintTypedArray: int getInt(int,int)>($i0, -1) in <androidx.appcompat.widget.AppCompatImageHelper: void loadFromAttributes(android.util.AttributeSet,int)> ==> <androidx.appcompat.widget.TintTypedArray: int getInt(int,int)>
VIRTUAL edge: virtualinvoke $r5.<androidx.appcompat.widget.TintTypedArray: void recycle()>() in <androidx.appcompat.widget.AppCompatImageHelper: void loadFromAttributes(android.util.AttributeSet,int)> ==> <androidx.appcompat.widget.TintTypedArray: void recycle()>
VIRTUAL edge: virtualinvoke $r5.<androidx.appcompat.widget.TintTypedArray: void recycle()>() in <androidx.appcompat.widget.AppCompatImageHelper: void loadFromAttributes(android.util.AttributeSet,int)> ==> <androidx.appcompat.widget.TintTypedArray: void recycle()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.appcompat.widget.AppCompatImageHelper: void <init>(android.widget.ImageView)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r3.<androidx.appcompat.widget.AppCompatBackgroundHelper: void <init>(android.view.View)>(r0) in <androidx.appcompat.widget.AppCompatImageView: void <init>(android.content.Context,android.util.AttributeSet,int)> ==> <androidx.appcompat.widget.AppCompatBackgroundHelper: void <init>(android.view.View)>
VIRTUAL edge: virtualinvoke $r3.<androidx.appcompat.widget.AppCompatBackgroundHelper: void loadFromAttributes(android.util.AttributeSet,int)>($r1, $i0) in <androidx.appcompat.widget.AppCompatImageView: void <init>(android.content.Context,android.util.AttributeSet,int)> ==> <androidx.appcompat.widget.AppCompatBackgroundHelper: void loadFromAttributes(android.util.AttributeSet,int)>
CLINIT edge: $r1 = staticinvoke <androidx.appcompat.widget.AppCompatDrawableManager: androidx.appcompat.widget.AppCompatDrawableManager get()>() in <androidx.appcompat.widget.AppCompatBackgroundHelper: void <init>(android.view.View)> ==> <androidx.appcompat.widget.AppCompatDrawableManager: void <clinit>()>
STATIC edge: $r1 = staticinvoke <androidx.appcompat.widget.AppCompatDrawableManager: androidx.appcompat.widget.AppCompatDrawableManager get()>() in <androidx.appcompat.widget.AppCompatBackgroundHelper: void <init>(android.view.View)> ==> <androidx.appcompat.widget.AppCompatDrawableManager: androidx.appcompat.widget.AppCompatDrawableManager get()>
CLINIT edge: $r1 = <androidx.appcompat.R$styleable: int[] ViewBackgroundHelper> in <androidx.appcompat.widget.AppCompatBackgroundHelper: void loadFromAttributes(android.util.AttributeSet,int)> ==> <androidx.appcompat.R$styleable: void <clinit>()>
STATIC edge: staticinvoke <androidx.core.view.ViewCompat: void setBackgroundTintMode(android.view.View,android.graphics.PorterDuff$Mode)>($r3, $r9) in <androidx.appcompat.widget.AppCompatBackgroundHelper: void loadFromAttributes(android.util.AttributeSet,int)> ==> <androidx.core.view.ViewCompat: void setBackgroundTintMode(android.view.View,android.graphics.PorterDuff$Mode)>
STATIC edge: $r9 = staticinvoke <androidx.appcompat.widget.DrawableUtils: android.graphics.PorterDuff$Mode parseTintMode(int,android.graphics.PorterDuff$Mode)>($i0, null) in <androidx.appcompat.widget.AppCompatBackgroundHelper: void loadFromAttributes(android.util.AttributeSet,int)> ==> <androidx.appcompat.widget.DrawableUtils: android.graphics.PorterDuff$Mode parseTintMode(int,android.graphics.PorterDuff$Mode)>
STATIC edge: staticinvoke <androidx.core.view.ViewCompat: void setBackgroundTintList(android.view.View,android.content.res.ColorStateList)>($r3, $r8) in <androidx.appcompat.widget.AppCompatBackgroundHelper: void loadFromAttributes(android.util.AttributeSet,int)> ==> <androidx.core.view.ViewCompat: void setBackgroundTintList(android.view.View,android.content.res.ColorStateList)>
STATIC edge: staticinvoke <androidx.core.view.ViewCompat: void saveAttributeDataForStyleable(android.view.View,android.content.Context,int[],android.util.AttributeSet,android.content.res.TypedArray,int,int)>($r3, $r4, $r1, $r2, $r6, $i0, 0) in <androidx.appcompat.widget.AppCompatBackgroundHelper: void loadFromAttributes(android.util.AttributeSet,int)> ==> <androidx.core.view.ViewCompat: void saveAttributeDataForStyleable(android.view.View,android.content.Context,int[],android.util.AttributeSet,android.content.res.TypedArray,int,int)>
STATIC edge: $r5 = staticinvoke <androidx.appcompat.widget.TintTypedArray: androidx.appcompat.widget.TintTypedArray obtainStyledAttributes(android.content.Context,android.util.AttributeSet,int[],int,int)>($r4, $r2, $r1, $i0, 0) in <androidx.appcompat.widget.AppCompatBackgroundHelper: void loadFromAttributes(android.util.AttributeSet,int)> ==> <androidx.appcompat.widget.TintTypedArray: androidx.appcompat.widget.TintTypedArray obtainStyledAttributes(android.content.Context,android.util.AttributeSet,int[],int,int)>
CLINIT edge: $r9 = staticinvoke <androidx.appcompat.widget.DrawableUtils: android.graphics.PorterDuff$Mode parseTintMode(int,android.graphics.PorterDuff$Mode)>($i0, null) in <androidx.appcompat.widget.AppCompatBackgroundHelper: void loadFromAttributes(android.util.AttributeSet,int)> ==> <androidx.appcompat.widget.DrawableUtils: void <clinit>()>
CLINIT edge: staticinvoke <androidx.core.view.ViewCompat: void saveAttributeDataForStyleable(android.view.View,android.content.Context,int[],android.util.AttributeSet,android.content.res.TypedArray,int,int)>($r3, $r4, $r1, $r2, $r6, $i0, 0) in <androidx.appcompat.widget.AppCompatBackgroundHelper: void loadFromAttributes(android.util.AttributeSet,int)> ==> <androidx.core.view.ViewCompat: void <clinit>()>
STATIC edge: staticinvoke <androidx.core.view.ViewCompat$Api21Impl: void setBackgroundTintMode(android.view.View,android.graphics.PorterDuff$Mode)>($r0, $r1) in <androidx.core.view.ViewCompat: void setBackgroundTintMode(android.view.View,android.graphics.PorterDuff$Mode)> ==> <androidx.core.view.ViewCompat$Api21Impl: void setBackgroundTintMode(android.view.View,android.graphics.PorterDuff$Mode)>
STATIC edge: staticinvoke <androidx.core.view.ViewCompat$Api21Impl: void setBackgroundTintList(android.view.View,android.content.res.ColorStateList)>($r0, $r1) in <androidx.core.view.ViewCompat: void setBackgroundTintList(android.view.View,android.content.res.ColorStateList)> ==> <androidx.core.view.ViewCompat$Api21Impl: void setBackgroundTintList(android.view.View,android.content.res.ColorStateList)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<androidx.appcompat.widget.TintTypedArray: android.content.res.TypedArray getWrappedTypeArray()>() in <androidx.appcompat.widget.AppCompatBackgroundHelper: void loadFromAttributes(android.util.AttributeSet,int)> ==> <androidx.appcompat.widget.TintTypedArray: android.content.res.TypedArray getWrappedTypeArray()>
VIRTUAL edge: $z0 = virtualinvoke $r5.<androidx.appcompat.widget.TintTypedArray: boolean hasValue(int)>($i0) in <androidx.appcompat.widget.AppCompatBackgroundHelper: void loadFromAttributes(android.util.AttributeSet,int)> ==> <androidx.appcompat.widget.TintTypedArray: boolean hasValue(int)>
VIRTUAL edge: $i0 = virtualinvoke $r5.<androidx.appcompat.widget.TintTypedArray: int getResourceId(int,int)>($i0, -1) in <androidx.appcompat.widget.AppCompatBackgroundHelper: void loadFromAttributes(android.util.AttributeSet,int)> ==> <androidx.appcompat.widget.TintTypedArray: int getResourceId(int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r5.<androidx.appcompat.widget.TintTypedArray: boolean hasValue(int)>($i0) in <androidx.appcompat.widget.AppCompatBackgroundHelper: void loadFromAttributes(android.util.AttributeSet,int)> ==> <androidx.appcompat.widget.TintTypedArray: boolean hasValue(int)>
VIRTUAL edge: $r8 = virtualinvoke $r5.<androidx.appcompat.widget.TintTypedArray: android.content.res.ColorStateList getColorStateList(int)>($i0) in <androidx.appcompat.widget.AppCompatBackgroundHelper: void loadFromAttributes(android.util.AttributeSet,int)> ==> <androidx.appcompat.widget.TintTypedArray: android.content.res.ColorStateList getColorStateList(int)>
VIRTUAL edge: $z0 = virtualinvoke $r5.<androidx.appcompat.widget.TintTypedArray: boolean hasValue(int)>($i0) in <androidx.appcompat.widget.AppCompatBackgroundHelper: void loadFromAttributes(android.util.AttributeSet,int)> ==> <androidx.appcompat.widget.TintTypedArray: boolean hasValue(int)>
VIRTUAL edge: $i0 = virtualinvoke $r5.<androidx.appcompat.widget.TintTypedArray: int getInt(int,int)>($i0, -1) in <androidx.appcompat.widget.AppCompatBackgroundHelper: void loadFromAttributes(android.util.AttributeSet,int)> ==> <androidx.appcompat.widget.TintTypedArray: int getInt(int,int)>
VIRTUAL edge: virtualinvoke $r5.<androidx.appcompat.widget.TintTypedArray: void recycle()>() in <androidx.appcompat.widget.AppCompatBackgroundHelper: void loadFromAttributes(android.util.AttributeSet,int)> ==> <androidx.appcompat.widget.TintTypedArray: void recycle()>
VIRTUAL edge: virtualinvoke r0.<androidx.appcompat.widget.AppCompatBackgroundHelper: void setInternalBackgroundTint(android.content.res.ColorStateList)>($r8) in <androidx.appcompat.widget.AppCompatBackgroundHelper: void loadFromAttributes(android.util.AttributeSet,int)> ==> <androidx.appcompat.widget.AppCompatBackgroundHelper: void setInternalBackgroundTint(android.content.res.ColorStateList)>
SPECIAL edge: specialinvoke $r2.<androidx.appcompat.widget.TintInfo: void <init>()>() in <androidx.appcompat.widget.AppCompatBackgroundHelper: void setInternalBackgroundTint(android.content.res.ColorStateList)> ==> <androidx.appcompat.widget.TintInfo: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.appcompat.widget.TintInfo: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke r0.<androidx.appcompat.widget.AppCompatBackgroundHelper: void applySupportBackgroundTint()>() in <androidx.appcompat.widget.AppCompatBackgroundHelper: void setInternalBackgroundTint(android.content.res.ColorStateList)> ==> <androidx.appcompat.widget.AppCompatBackgroundHelper: void applySupportBackgroundTint()>
CLINIT edge: staticinvoke <androidx.appcompat.widget.AppCompatDrawableManager: void tintDrawable(android.graphics.drawable.Drawable,androidx.appcompat.widget.TintInfo,int[])>($r2, $r3, $r4) in <androidx.appcompat.widget.AppCompatBackgroundHelper: void applySupportBackgroundTint()> ==> <androidx.appcompat.widget.AppCompatDrawableManager: void <clinit>()>
STATIC edge: staticinvoke <androidx.appcompat.widget.AppCompatDrawableManager: void tintDrawable(android.graphics.drawable.Drawable,androidx.appcompat.widget.TintInfo,int[])>($r2, $r3, $r4) in <androidx.appcompat.widget.AppCompatBackgroundHelper: void applySupportBackgroundTint()> ==> <androidx.appcompat.widget.AppCompatDrawableManager: void tintDrawable(android.graphics.drawable.Drawable,androidx.appcompat.widget.TintInfo,int[])>
STATIC edge: staticinvoke <androidx.appcompat.widget.AppCompatDrawableManager: void tintDrawable(android.graphics.drawable.Drawable,androidx.appcompat.widget.TintInfo,int[])>($r2, $r3, $r4) in <androidx.appcompat.widget.AppCompatBackgroundHelper: void applySupportBackgroundTint()> ==> <androidx.appcompat.widget.AppCompatDrawableManager: void tintDrawable(android.graphics.drawable.Drawable,androidx.appcompat.widget.TintInfo,int[])>
CLINIT edge: staticinvoke <androidx.appcompat.widget.ResourceManagerInternal: void tintDrawable(android.graphics.drawable.Drawable,androidx.appcompat.widget.TintInfo,int[])>($r0, $r1, $r2) in <androidx.appcompat.widget.AppCompatDrawableManager: void tintDrawable(android.graphics.drawable.Drawable,androidx.appcompat.widget.TintInfo,int[])> ==> <androidx.appcompat.widget.ResourceManagerInternal: void <clinit>()>
STATIC edge: staticinvoke <androidx.appcompat.widget.ResourceManagerInternal: void tintDrawable(android.graphics.drawable.Drawable,androidx.appcompat.widget.TintInfo,int[])>($r0, $r1, $r2) in <androidx.appcompat.widget.AppCompatDrawableManager: void tintDrawable(android.graphics.drawable.Drawable,androidx.appcompat.widget.TintInfo,int[])> ==> <androidx.appcompat.widget.ResourceManagerInternal: void tintDrawable(android.graphics.drawable.Drawable,androidx.appcompat.widget.TintInfo,int[])>
CLINIT edge: $z0 = staticinvoke <androidx.appcompat.widget.DrawableUtils: boolean canSafelyMutateDrawable(android.graphics.drawable.Drawable)>($r1) in <androidx.appcompat.widget.ResourceManagerInternal: void tintDrawable(android.graphics.drawable.Drawable,androidx.appcompat.widget.TintInfo,int[])> ==> <androidx.appcompat.widget.DrawableUtils: void <clinit>()>
STATIC edge: $r8 = staticinvoke <androidx.appcompat.widget.ResourceManagerInternal: android.graphics.PorterDuffColorFilter createTintFilter(android.content.res.ColorStateList,android.graphics.PorterDuff$Mode,int[])>($r6, $r7, $r0) in <androidx.appcompat.widget.ResourceManagerInternal: void tintDrawable(android.graphics.drawable.Drawable,androidx.appcompat.widget.TintInfo,int[])> ==> <androidx.appcompat.widget.ResourceManagerInternal: android.graphics.PorterDuffColorFilter createTintFilter(android.content.res.ColorStateList,android.graphics.PorterDuff$Mode,int[])>
STATIC edge: $z0 = staticinvoke <androidx.appcompat.widget.DrawableUtils: boolean canSafelyMutateDrawable(android.graphics.drawable.Drawable)>($r1) in <androidx.appcompat.widget.ResourceManagerInternal: void tintDrawable(android.graphics.drawable.Drawable,androidx.appcompat.widget.TintInfo,int[])> ==> <androidx.appcompat.widget.DrawableUtils: boolean canSafelyMutateDrawable(android.graphics.drawable.Drawable)>
CLINIT edge: $r8 = staticinvoke <androidx.appcompat.widget.ResourceManagerInternal: android.graphics.PorterDuffColorFilter createTintFilter(android.content.res.ColorStateList,android.graphics.PorterDuff$Mode,int[])>($r6, $r7, $r0) in <androidx.appcompat.widget.ResourceManagerInternal: void tintDrawable(android.graphics.drawable.Drawable,androidx.appcompat.widget.TintInfo,int[])> ==> <androidx.appcompat.widget.ResourceManagerInternal: void <clinit>()>
CLINIT edge: $r7 = <androidx.appcompat.widget.ResourceManagerInternal: android.graphics.PorterDuff$Mode DEFAULT_MODE> in <androidx.appcompat.widget.ResourceManagerInternal: void tintDrawable(android.graphics.drawable.Drawable,androidx.appcompat.widget.TintInfo,int[])> ==> <androidx.appcompat.widget.ResourceManagerInternal: void <clinit>()>
CLINIT edge: $r3 = staticinvoke <androidx.appcompat.widget.ResourceManagerInternal: android.graphics.PorterDuffColorFilter getPorterDuffColorFilter(int,android.graphics.PorterDuff$Mode)>($i0, $r0) in <androidx.appcompat.widget.ResourceManagerInternal: android.graphics.PorterDuffColorFilter createTintFilter(android.content.res.ColorStateList,android.graphics.PorterDuff$Mode,int[])> ==> <androidx.appcompat.widget.ResourceManagerInternal: void <clinit>()>
STATIC edge: $r3 = staticinvoke <androidx.appcompat.widget.ResourceManagerInternal: android.graphics.PorterDuffColorFilter getPorterDuffColorFilter(int,android.graphics.PorterDuff$Mode)>($i0, $r0) in <androidx.appcompat.widget.ResourceManagerInternal: android.graphics.PorterDuffColorFilter createTintFilter(android.content.res.ColorStateList,android.graphics.PorterDuff$Mode,int[])> ==> <androidx.appcompat.widget.ResourceManagerInternal: android.graphics.PorterDuffColorFilter getPorterDuffColorFilter(int,android.graphics.PorterDuff$Mode)>
SPECIAL edge: $z0 = specialinvoke r0.<androidx.appcompat.widget.AppCompatBackgroundHelper: boolean shouldApplyFrameworkTintUsingColorFilter()>() in <androidx.appcompat.widget.AppCompatBackgroundHelper: void applySupportBackgroundTint()> ==> <androidx.appcompat.widget.AppCompatBackgroundHelper: boolean shouldApplyFrameworkTintUsingColorFilter()>
SPECIAL edge: $z0 = specialinvoke r0.<androidx.appcompat.widget.AppCompatBackgroundHelper: boolean applyFrameworkTintUsingColorFilter(android.graphics.drawable.Drawable)>($r2) in <androidx.appcompat.widget.AppCompatBackgroundHelper: void applySupportBackgroundTint()> ==> <androidx.appcompat.widget.AppCompatBackgroundHelper: boolean applyFrameworkTintUsingColorFilter(android.graphics.drawable.Drawable)>
CLINIT edge: $r4 = staticinvoke <androidx.core.view.ViewCompat: android.content.res.ColorStateList getBackgroundTintList(android.view.View)>($r3) in <androidx.appcompat.widget.AppCompatBackgroundHelper: boolean applyFrameworkTintUsingColorFilter(android.graphics.drawable.Drawable)> ==> <androidx.core.view.ViewCompat: void <clinit>()>
STATIC edge: staticinvoke <androidx.appcompat.widget.AppCompatDrawableManager: void tintDrawable(android.graphics.drawable.Drawable,androidx.appcompat.widget.TintInfo,int[])>($r1, $r2, $r6) in <androidx.appcompat.widget.AppCompatBackgroundHelper: boolean applyFrameworkTintUsingColorFilter(android.graphics.drawable.Drawable)> ==> <androidx.appcompat.widget.AppCompatDrawableManager: void tintDrawable(android.graphics.drawable.Drawable,androidx.appcompat.widget.TintInfo,int[])>
STATIC edge: $r5 = staticinvoke <androidx.core.view.ViewCompat: android.graphics.PorterDuff$Mode getBackgroundTintMode(android.view.View)>($r3) in <androidx.appcompat.widget.AppCompatBackgroundHelper: boolean applyFrameworkTintUsingColorFilter(android.graphics.drawable.Drawable)> ==> <androidx.core.view.ViewCompat: android.graphics.PorterDuff$Mode getBackgroundTintMode(android.view.View)>
STATIC edge: $r4 = staticinvoke <androidx.core.view.ViewCompat: android.content.res.ColorStateList getBackgroundTintList(android.view.View)>($r3) in <androidx.appcompat.widget.AppCompatBackgroundHelper: boolean applyFrameworkTintUsingColorFilter(android.graphics.drawable.Drawable)> ==> <androidx.core.view.ViewCompat: android.content.res.ColorStateList getBackgroundTintList(android.view.View)>
CLINIT edge: staticinvoke <androidx.appcompat.widget.AppCompatDrawableManager: void tintDrawable(android.graphics.drawable.Drawable,androidx.appcompat.widget.TintInfo,int[])>($r1, $r2, $r6) in <androidx.appcompat.widget.AppCompatBackgroundHelper: boolean applyFrameworkTintUsingColorFilter(android.graphics.drawable.Drawable)> ==> <androidx.appcompat.widget.AppCompatDrawableManager: void <clinit>()>
STATIC edge: $r0 = staticinvoke <androidx.core.view.ViewCompat$Api21Impl: android.graphics.PorterDuff$Mode getBackgroundTintMode(android.view.View)>($r1) in <androidx.core.view.ViewCompat: android.graphics.PorterDuff$Mode getBackgroundTintMode(android.view.View)> ==> <androidx.core.view.ViewCompat$Api21Impl: android.graphics.PorterDuff$Mode getBackgroundTintMode(android.view.View)>
STATIC edge: $r0 = staticinvoke <androidx.core.view.ViewCompat$Api21Impl: android.content.res.ColorStateList getBackgroundTintList(android.view.View)>($r1) in <androidx.core.view.ViewCompat: android.content.res.ColorStateList getBackgroundTintList(android.view.View)> ==> <androidx.core.view.ViewCompat$Api21Impl: android.content.res.ColorStateList getBackgroundTintList(android.view.View)>
SPECIAL edge: specialinvoke $r2.<androidx.appcompat.widget.TintInfo: void <init>()>() in <androidx.appcompat.widget.AppCompatBackgroundHelper: boolean applyFrameworkTintUsingColorFilter(android.graphics.drawable.Drawable)> ==> <androidx.appcompat.widget.TintInfo: void <init>()>
VIRTUAL edge: virtualinvoke $r2.<androidx.appcompat.widget.TintInfo: void clear()>() in <androidx.appcompat.widget.AppCompatBackgroundHelper: boolean applyFrameworkTintUsingColorFilter(android.graphics.drawable.Drawable)> ==> <androidx.appcompat.widget.TintInfo: void clear()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.appcompat.widget.AppCompatBackgroundHelper: void <init>(android.view.View)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>() in <androidx.appcompat.widget.TintContextWrapper: void <init>(android.content.Context)> ==> <androidx.appcompat.widget.TintContextWrapper: android.content.res.Resources getResources()>
VIRTUAL edge: $r5 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources$Theme getTheme()>() in <androidx.appcompat.widget.TintContextWrapper: void <init>(android.content.Context)> ==> <androidx.appcompat.widget.TintContextWrapper: android.content.res.Resources$Theme getTheme()>
VIRTUAL edge: $r3 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>() in <androidx.appcompat.widget.TintContextWrapper: void <init>(android.content.Context)> ==> <androidx.appcompat.widget.TintContextWrapper: android.content.res.Resources getResources()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<android.content.Context: android.content.res.Resources getResources()>() in <androidx.appcompat.widget.TintContextWrapper: boolean shouldWrap(android.content.Context)> ==> <androidx.appcompat.widget.TintContextWrapper: android.content.res.Resources getResources()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<android.content.Context: android.content.res.Resources getResources()>() in <androidx.appcompat.widget.TintContextWrapper: boolean shouldWrap(android.content.Context)> ==> <androidx.appcompat.widget.TintContextWrapper: android.content.res.Resources getResources()>
VIRTUAL edge: $r5 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>() in <androidx.appcompat.widget.ThemeUtils: void checkAppCompatTheme(android.view.View,android.content.Context)> ==> <java.lang.Object: java.lang.Class getClass()>
SPECIAL edge: specialinvoke r0.<androidx.appcompat.view.menu.BaseMenuPresenter: void updateMenuView(boolean)>($z0) in <androidx.appcompat.widget.ActionMenuPresenter: void updateMenuView(boolean)> ==> <androidx.appcompat.view.menu.BaseMenuPresenter: void updateMenuView(boolean)>
VIRTUAL edge: $z0 = virtualinvoke r0.<androidx.appcompat.view.menu.BaseMenuPresenter: boolean shouldIncludeItem(int,androidx.appcompat.view.menu.MenuItemImpl)>($i2, $r6) in <androidx.appcompat.view.menu.BaseMenuPresenter: void updateMenuView(boolean)> ==> <androidx.appcompat.widget.ActionMenuPresenter: boolean shouldIncludeItem(int,androidx.appcompat.view.menu.MenuItemImpl)>
VIRTUAL edge: $r10 = virtualinvoke r0.<androidx.appcompat.view.menu.BaseMenuPresenter: android.view.View getItemView(androidx.appcompat.view.menu.MenuItemImpl,android.view.View,android.view.ViewGroup)>($r6, $r7, $r2) in <androidx.appcompat.view.menu.BaseMenuPresenter: void updateMenuView(boolean)> ==> <androidx.appcompat.widget.ActionMenuPresenter: android.view.View getItemView(androidx.appcompat.view.menu.MenuItemImpl,android.view.View,android.view.ViewGroup)>
VIRTUAL edge: virtualinvoke r0.<androidx.appcompat.view.menu.BaseMenuPresenter: void addItemView(android.view.View,int)>($r10, $i2) in <androidx.appcompat.view.menu.BaseMenuPresenter: void updateMenuView(boolean)> ==> <androidx.appcompat.view.menu.BaseMenuPresenter: void addItemView(android.view.View,int)>
VIRTUAL edge: $z0 = virtualinvoke r0.<androidx.appcompat.view.menu.BaseMenuPresenter: boolean filterLeftoverView(android.view.ViewGroup,int)>($r2, $i0) in <androidx.appcompat.view.menu.BaseMenuPresenter: void updateMenuView(boolean)> ==> <androidx.appcompat.widget.ActionMenuPresenter: boolean filterLeftoverView(android.view.ViewGroup,int)>
SPECIAL edge: $z0 = specialinvoke r0.<androidx.appcompat.view.menu.BaseMenuPresenter: boolean filterLeftoverView(android.view.ViewGroup,int)>($r2, $i0) in <androidx.appcompat.widget.ActionMenuPresenter: boolean filterLeftoverView(android.view.ViewGroup,int)> ==> <androidx.appcompat.view.menu.BaseMenuPresenter: boolean filterLeftoverView(android.view.ViewGroup,int)>
SPECIAL edge: $r5 = specialinvoke r0.<androidx.appcompat.view.menu.BaseMenuPresenter: android.view.View getItemView(androidx.appcompat.view.menu.MenuItemImpl,android.view.View,android.view.ViewGroup)>($r1, $r2, $r3) in <androidx.appcompat.widget.ActionMenuPresenter: android.view.View getItemView(androidx.appcompat.view.menu.MenuItemImpl,android.view.View,android.view.ViewGroup)> ==> <androidx.appcompat.view.menu.BaseMenuPresenter: android.view.View getItemView(androidx.appcompat.view.menu.MenuItemImpl,android.view.View,android.view.ViewGroup)>
VIRTUAL edge: $r3 = virtualinvoke r0.<androidx.appcompat.view.menu.BaseMenuPresenter: androidx.appcompat.view.menu.MenuView$ItemView createItemView(android.view.ViewGroup)>($r2) in <androidx.appcompat.view.menu.BaseMenuPresenter: android.view.View getItemView(androidx.appcompat.view.menu.MenuItemImpl,android.view.View,android.view.ViewGroup)> ==> <androidx.appcompat.view.menu.BaseMenuPresenter: androidx.appcompat.view.menu.MenuView$ItemView createItemView(android.view.ViewGroup)>
VIRTUAL edge: virtualinvoke r0.<androidx.appcompat.view.menu.BaseMenuPresenter: void bindItemView(androidx.appcompat.view.menu.MenuItemImpl,androidx.appcompat.view.menu.MenuView$ItemView)>($r1, $r3) in <androidx.appcompat.view.menu.BaseMenuPresenter: android.view.View getItemView(androidx.appcompat.view.menu.MenuItemImpl,android.view.View,android.view.ViewGroup)> ==> <androidx.appcompat.widget.ActionMenuPresenter: void bindItemView(androidx.appcompat.view.menu.MenuItemImpl,androidx.appcompat.view.menu.MenuView$ItemView)>
SPECIAL edge: specialinvoke $r6.<androidx.appcompat.widget.ActionMenuPresenter$ActionMenuPopupCallback: void <init>(androidx.appcompat.widget.ActionMenuPresenter)>(r0) in <androidx.appcompat.widget.ActionMenuPresenter: void bindItemView(androidx.appcompat.view.menu.MenuItemImpl,androidx.appcompat.view.menu.MenuView$ItemView)> ==> <androidx.appcompat.widget.ActionMenuPresenter$ActionMenuPopupCallback: void <init>(androidx.appcompat.widget.ActionMenuPresenter)>
SPECIAL edge: specialinvoke r0.<androidx.appcompat.view.menu.ActionMenuItemView$PopupCallback: void <init>()>() in <androidx.appcompat.widget.ActionMenuPresenter$ActionMenuPopupCallback: void <init>(androidx.appcompat.widget.ActionMenuPresenter)> ==> <androidx.appcompat.view.menu.ActionMenuItemView$PopupCallback: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.appcompat.view.menu.ActionMenuItemView$PopupCallback: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke r0.<androidx.appcompat.widget.ActionMenuPresenter: boolean hideOverflowMenu()>() in <androidx.appcompat.widget.ActionMenuPresenter: boolean dismissPopupMenus()> ==> <androidx.appcompat.widget.ActionMenuPresenter: boolean hideOverflowMenu()>
VIRTUAL edge: $z1 = virtualinvoke r0.<androidx.appcompat.widget.ActionMenuPresenter: boolean hideSubMenus()>() in <androidx.appcompat.widget.ActionMenuPresenter: boolean dismissPopupMenus()> ==> <androidx.appcompat.widget.ActionMenuPresenter: boolean hideSubMenus()>
INTERFACE edge: $r3 = interfaceinvoke $r4.<androidx.appcompat.app.AppCompatCallback: androidx.appcompat.view.ActionMode onWindowStartingSupportActionMode(androidx.appcompat.view.ActionMode$Callback)>($r2) in <androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.view.ActionMode startSupportActionModeFromWindow(androidx.appcompat.view.ActionMode$Callback)> ==> <androidx.appcompat.app.AppCompatActivity: androidx.appcompat.view.ActionMode onWindowStartingSupportActionMode(androidx.appcompat.view.ActionMode$Callback)>
INTERFACE edge: interfaceinvoke $r4.<androidx.appcompat.app.AppCompatCallback: void onSupportActionModeStarted(androidx.appcompat.view.ActionMode)>($r3) in <androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.view.ActionMode startSupportActionModeFromWindow(androidx.appcompat.view.ActionMode$Callback)> ==> <androidx.appcompat.app.AppCompatActivity: void onSupportActionModeStarted(androidx.appcompat.view.ActionMode)>
VIRTUAL edge: virtualinvoke $r3.<androidx.appcompat.view.ActionMode: void finish()>() in <androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.view.ActionMode startSupportActionModeFromWindow(androidx.appcompat.view.ActionMode$Callback)> ==> <androidx.appcompat.view.StandaloneActionMode: void finish()>
INTERFACE edge: interfaceinvoke $r1.<androidx.appcompat.view.ActionMode$Callback: void onDestroyActionMode(androidx.appcompat.view.ActionMode)>(r0) in <androidx.appcompat.view.StandaloneActionMode: void finish()> ==> <androidx.appcompat.app.AppCompatDelegateImpl$ActionModeCallbackWrapperV9: void onDestroyActionMode(androidx.appcompat.view.ActionMode)>
CLINIT edge: $r9 = staticinvoke <androidx.core.view.ViewCompat: androidx.core.view.ViewPropertyAnimatorCompat animate(android.view.View)>($r8) in <androidx.appcompat.app.AppCompatDelegateImpl$ActionModeCallbackWrapperV9: void onDestroyActionMode(androidx.appcompat.view.ActionMode)> ==> <androidx.core.view.ViewCompat: void <clinit>()>
STATIC edge: staticinvoke <androidx.core.view.ViewCompat: void requestApplyInsets(android.view.View)>($r12) in <androidx.appcompat.app.AppCompatDelegateImpl$ActionModeCallbackWrapperV9: void onDestroyActionMode(androidx.appcompat.view.ActionMode)> ==> <androidx.core.view.ViewCompat: void requestApplyInsets(android.view.View)>
STATIC edge: $r9 = staticinvoke <androidx.core.view.ViewCompat: androidx.core.view.ViewPropertyAnimatorCompat animate(android.view.View)>($r8) in <androidx.appcompat.app.AppCompatDelegateImpl$ActionModeCallbackWrapperV9: void onDestroyActionMode(androidx.appcompat.view.ActionMode)> ==> <androidx.core.view.ViewCompat: androidx.core.view.ViewPropertyAnimatorCompat animate(android.view.View)>
SPECIAL edge: specialinvoke $r10.<androidx.appcompat.app.AppCompatDelegateImpl$ActionModeCallbackWrapperV9$1: void <init>(androidx.appcompat.app.AppCompatDelegateImpl$ActionModeCallbackWrapperV9)>(r0) in <androidx.appcompat.app.AppCompatDelegateImpl$ActionModeCallbackWrapperV9: void onDestroyActionMode(androidx.appcompat.view.ActionMode)> ==> <androidx.appcompat.app.AppCompatDelegateImpl$ActionModeCallbackWrapperV9$1: void <init>(androidx.appcompat.app.AppCompatDelegateImpl$ActionModeCallbackWrapperV9)>
SPECIAL edge: specialinvoke r0.<androidx.core.view.ViewPropertyAnimatorListenerAdapter: void <init>()>() in <androidx.appcompat.app.AppCompatDelegateImpl$ActionModeCallbackWrapperV9$1: void <init>(androidx.appcompat.app.AppCompatDelegateImpl$ActionModeCallbackWrapperV9)> ==> <androidx.core.view.ViewPropertyAnimatorListenerAdapter: void <init>()>
VIRTUAL edge: $r9 = virtualinvoke $r9.<androidx.core.view.ViewPropertyAnimatorCompat: androidx.core.view.ViewPropertyAnimatorCompat alpha(float)>(0.0F) in <androidx.appcompat.app.AppCompatDelegateImpl$ActionModeCallbackWrapperV9: void onDestroyActionMode(androidx.appcompat.view.ActionMode)> ==> <androidx.core.view.ViewPropertyAnimatorCompat: androidx.core.view.ViewPropertyAnimatorCompat alpha(float)>
VIRTUAL edge: virtualinvoke $r9.<androidx.core.view.ViewPropertyAnimatorCompat: androidx.core.view.ViewPropertyAnimatorCompat setListener(androidx.core.view.ViewPropertyAnimatorListener)>($r10) in <androidx.appcompat.app.AppCompatDelegateImpl$ActionModeCallbackWrapperV9: void onDestroyActionMode(androidx.appcompat.view.ActionMode)> ==> <androidx.core.view.ViewPropertyAnimatorCompat: androidx.core.view.ViewPropertyAnimatorCompat setListener(androidx.core.view.ViewPropertyAnimatorListener)>
INTERFACE edge: interfaceinvoke $r2.<androidx.appcompat.view.ActionMode$Callback: void onDestroyActionMode(androidx.appcompat.view.ActionMode)>($r1) in <androidx.appcompat.app.AppCompatDelegateImpl$ActionModeCallbackWrapperV9: void onDestroyActionMode(androidx.appcompat.view.ActionMode)> ==> <androidx.appcompat.view.SupportActionModeWrapper$CallbackWrapper: void onDestroyActionMode(androidx.appcompat.view.ActionMode)>
VIRTUAL edge: $r2 = virtualinvoke r0.<androidx.appcompat.view.SupportActionModeWrapper$CallbackWrapper: android.view.ActionMode getActionModeWrapper(androidx.appcompat.view.ActionMode)>($r3) in <androidx.appcompat.view.SupportActionModeWrapper$CallbackWrapper: void onDestroyActionMode(androidx.appcompat.view.ActionMode)> ==> <androidx.appcompat.view.SupportActionModeWrapper$CallbackWrapper: android.view.ActionMode getActionModeWrapper(androidx.appcompat.view.ActionMode)>
INTERFACE edge: interfaceinvoke $r1.<androidx.appcompat.app.AppCompatCallback: void onSupportActionModeStarted(androidx.appcompat.view.ActionMode)>($r3) in <androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.view.ActionMode startSupportActionMode(androidx.appcompat.view.ActionMode$Callback)> ==> <androidx.appcompat.app.AppCompatActivity: void onSupportActionModeStarted(androidx.appcompat.view.ActionMode)>
VIRTUAL edge: virtualinvoke $r3.<androidx.appcompat.view.ActionMode: void finish()>() in <androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.view.ActionMode startSupportActionMode(androidx.appcompat.view.ActionMode$Callback)> ==> <androidx.appcompat.view.StandaloneActionMode: void finish()>
VIRTUAL edge: $r3 = virtualinvoke $r1.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>() in <androidx.appcompat.widget.ResourcesWrapper: void <init>(android.content.res.Resources)> ==> <androidx.appcompat.widget.ResourcesWrapper: android.util.DisplayMetrics getDisplayMetrics()>
VIRTUAL edge: $r4 = virtualinvoke $r1.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>() in <androidx.appcompat.widget.ResourcesWrapper: void <init>(android.content.res.Resources)> ==> <androidx.appcompat.widget.ResourcesWrapper: android.content.res.Configuration getConfiguration()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<androidx.appcompat.app.ActionBar: boolean invalidateOptionsMenu()>() in <androidx.appcompat.app.AppCompatDelegateImpl: void invalidateOptionsMenu()> ==> <androidx.appcompat.app.ActionBar: boolean invalidateOptionsMenu()>
VIRTUAL edge: virtualinvoke $r6.<androidx.appcompat.app.ActionBar: void setDefaultDisplayHomeAsUpEnabled(boolean)>(1) in <androidx.appcompat.app.AppCompatDelegateImpl: void onCreate(android.os.Bundle)> ==> <androidx.appcompat.app.WindowDecorActionBar: void setDefaultDisplayHomeAsUpEnabled(boolean)>
VIRTUAL edge: virtualinvoke $r4.<androidx.appcompat.app.ActionBar: void setWindowTitle(java.lang.CharSequence)>($r2) in <androidx.appcompat.app.AppCompatDelegateImpl: void ensureSubDecor()> ==> <androidx.appcompat.app.WindowDecorActionBar: void setWindowTitle(java.lang.CharSequence)>
VIRTUAL edge: $r5 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources$Theme getTheme()>() in <androidx.appcompat.widget.AbsActionBarView: void <init>(android.content.Context,android.util.AttributeSet,int)> ==> <androidx.appcompat.view.ContextThemeWrapper: android.content.res.Resources$Theme getTheme()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<android.content.Context: android.content.res.Resources getResources()>() in <androidx.core.content.ContextCompat: android.content.res.ColorStateList getColorStateList(android.content.Context,int)> ==> <androidx.appcompat.view.ContextThemeWrapper: android.content.res.Resources getResources()>
VIRTUAL edge: $r2 = virtualinvoke $r0.<android.content.Context: android.content.res.Resources$Theme getTheme()>() in <androidx.core.content.ContextCompat: android.content.res.ColorStateList getColorStateList(android.content.Context,int)> ==> <androidx.appcompat.view.ContextThemeWrapper: android.content.res.Resources$Theme getTheme()>
INTERFACE edge: $z0 = interfaceinvoke $r3.<android.view.Window$Callback: boolean onPreparePanel(int,android.view.View,android.view.Menu)>($i0, $r1, $r2) in <androidx.appcompat.view.WindowCallbackWrapper: boolean onPreparePanel(int,android.view.View,android.view.Menu)> ==> <androidx.fragment.app.FragmentActivity: boolean onPreparePanel(int,android.view.View,android.view.Menu)>
VIRTUAL edge: $z0 = virtualinvoke r0.<androidx.fragment.app.FragmentActivity: boolean onPrepareOptionsPanel(android.view.View,android.view.Menu)>($r2, $r1) in <androidx.fragment.app.FragmentActivity: boolean onPreparePanel(int,android.view.View,android.view.Menu)> ==> <androidx.fragment.app.FragmentActivity: boolean onPrepareOptionsPanel(android.view.View,android.view.Menu)>
SPECIAL edge: $z0 = specialinvoke r0.<androidx.activity.ComponentActivity: boolean onPreparePanel(int,android.view.View,android.view.Menu)>($i0, $r2, $r1) in <androidx.fragment.app.FragmentActivity: boolean onPreparePanel(int,android.view.View,android.view.Menu)> ==> <androidx.activity.ComponentActivity: boolean onPreparePanel(int,android.view.View,android.view.Menu)>
VIRTUAL edge: virtualinvoke $r3.<androidx.core.view.MenuHostHelper: void onPrepareMenu(android.view.Menu)>($r2) in <androidx.activity.ComponentActivity: boolean onPreparePanel(int,android.view.View,android.view.Menu)> ==> <androidx.core.view.MenuHostHelper: void onPrepareMenu(android.view.Menu)>
SPECIAL edge: $z0 = specialinvoke r0.<androidx.activity.ComponentActivity: boolean onPreparePanel(int,android.view.View,android.view.Menu)>(0, $r2, $r1) in <androidx.fragment.app.FragmentActivity: boolean onPrepareOptionsPanel(android.view.View,android.view.Menu)> ==> <androidx.activity.ComponentActivity: boolean onPreparePanel(int,android.view.View,android.view.Menu)>
VIRTUAL edge: $z1 = virtualinvoke $r3.<androidx.fragment.app.FragmentController: boolean dispatchPrepareOptionsMenu(android.view.Menu)>($r1) in <androidx.fragment.app.FragmentActivity: boolean onPreparePanel(int,android.view.View,android.view.Menu)> ==> <androidx.fragment.app.FragmentController: boolean dispatchPrepareOptionsMenu(android.view.Menu)>
VIRTUAL edge: $z0 = virtualinvoke $r3.<androidx.fragment.app.FragmentManager: boolean dispatchPrepareOptionsMenu(android.view.Menu)>($r1) in <androidx.fragment.app.FragmentController: boolean dispatchPrepareOptionsMenu(android.view.Menu)> ==> <androidx.fragment.app.FragmentManager: boolean dispatchPrepareOptionsMenu(android.view.Menu)>
VIRTUAL edge: $z1 = virtualinvoke r0.<androidx.fragment.app.FragmentManager: boolean isParentMenuVisible(androidx.fragment.app.Fragment)>($r6) in <androidx.fragment.app.FragmentManager: boolean dispatchPrepareOptionsMenu(android.view.Menu)> ==> <androidx.fragment.app.FragmentManager: boolean isParentMenuVisible(androidx.fragment.app.Fragment)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<androidx.fragment.app.FragmentStore: java.util.List getFragments()>() in <androidx.fragment.app.FragmentManager: boolean dispatchPrepareOptionsMenu(android.view.Menu)> ==> <androidx.fragment.app.FragmentStore: java.util.List getFragments()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<android.view.Window$Callback: boolean dispatchKeyEvent(android.view.KeyEvent)>($r2) in <androidx.appcompat.view.WindowCallbackWrapper: boolean dispatchKeyEvent(android.view.KeyEvent)> ==> <androidx.appcompat.app.AppCompatActivity: boolean dispatchKeyEvent(android.view.KeyEvent)>
VIRTUAL edge: $r2 = virtualinvoke r0.<androidx.appcompat.app.AppCompatActivity: androidx.appcompat.app.ActionBar getSupportActionBar()>() in <androidx.appcompat.app.AppCompatActivity: boolean dispatchKeyEvent(android.view.KeyEvent)> ==> <androidx.appcompat.app.AppCompatActivity: androidx.appcompat.app.ActionBar getSupportActionBar()>
SPECIAL edge: $z0 = specialinvoke r0.<androidx.fragment.app.FragmentActivity: boolean dispatchKeyEvent(android.view.KeyEvent)>($r1) in <androidx.appcompat.app.AppCompatActivity: boolean dispatchKeyEvent(android.view.KeyEvent)> ==> <androidx.core.app.ComponentActivity: boolean dispatchKeyEvent(android.view.KeyEvent)>
CLINIT edge: $z0 = staticinvoke <androidx.core.view.KeyEventDispatcher: boolean dispatchBeforeHierarchy(android.view.View,android.view.KeyEvent)>($r3, $r1) in <androidx.core.app.ComponentActivity: boolean dispatchKeyEvent(android.view.KeyEvent)> ==> <androidx.core.view.KeyEventDispatcher: void <clinit>()>
STATIC edge: $z0 = staticinvoke <androidx.core.view.KeyEventDispatcher: boolean dispatchKeyEvent(androidx.core.view.KeyEventDispatcher$Component,android.view.View,android.view.Window$Callback,android.view.KeyEvent)>(r0, $r3, r0, $r1) in <androidx.core.app.ComponentActivity: boolean dispatchKeyEvent(android.view.KeyEvent)> ==> <androidx.core.view.KeyEventDispatcher: boolean dispatchKeyEvent(androidx.core.view.KeyEventDispatcher$Component,android.view.View,android.view.Window$Callback,android.view.KeyEvent)>
STATIC edge: $z0 = staticinvoke <androidx.core.view.KeyEventDispatcher: boolean dispatchBeforeHierarchy(android.view.View,android.view.KeyEvent)>($r3, $r1) in <androidx.core.app.ComponentActivity: boolean dispatchKeyEvent(android.view.KeyEvent)> ==> <androidx.core.view.KeyEventDispatcher: boolean dispatchBeforeHierarchy(android.view.View,android.view.KeyEvent)>
STATIC edge: $z0 = staticinvoke <androidx.core.view.ViewCompat: boolean dispatchUnhandledKeyEventBeforeCallback(android.view.View,android.view.KeyEvent)>($r2, $r0) in <androidx.core.view.KeyEventDispatcher: boolean dispatchKeyEvent(androidx.core.view.KeyEventDispatcher$Component,android.view.View,android.view.Window$Callback,android.view.KeyEvent)> ==> <androidx.core.view.ViewCompat: boolean dispatchUnhandledKeyEventBeforeCallback(android.view.View,android.view.KeyEvent)>
STATIC edge: $z0 = staticinvoke <androidx.core.view.KeyEventDispatcher: boolean dialogSuperDispatchKeyEventPre28(android.app.Dialog,android.view.KeyEvent)>($r5, $r0) in <androidx.core.view.KeyEventDispatcher: boolean dispatchKeyEvent(androidx.core.view.KeyEventDispatcher$Component,android.view.View,android.view.Window$Callback,android.view.KeyEvent)> ==> <androidx.core.view.KeyEventDispatcher: boolean dialogSuperDispatchKeyEventPre28(android.app.Dialog,android.view.KeyEvent)>
STATIC edge: $z0 = staticinvoke <androidx.core.view.KeyEventDispatcher: boolean activitySuperDispatchKeyEventPre28(android.app.Activity,android.view.KeyEvent)>($r4, $r0) in <androidx.core.view.KeyEventDispatcher: boolean dispatchKeyEvent(androidx.core.view.KeyEventDispatcher$Component,android.view.View,android.view.Window$Callback,android.view.KeyEvent)> ==> <androidx.core.view.KeyEventDispatcher: boolean activitySuperDispatchKeyEventPre28(android.app.Activity,android.view.KeyEvent)>
CLINIT edge: $z0 = staticinvoke <androidx.core.view.ViewCompat: boolean dispatchUnhandledKeyEventBeforeCallback(android.view.View,android.view.KeyEvent)>($r2, $r0) in <androidx.core.view.KeyEventDispatcher: boolean dispatchKeyEvent(androidx.core.view.KeyEventDispatcher$Component,android.view.View,android.view.Window$Callback,android.view.KeyEvent)> ==> <androidx.core.view.ViewCompat: void <clinit>()>
CLINIT edge: $z0 = staticinvoke <androidx.core.view.KeyEventDispatcher: boolean dialogSuperDispatchKeyEventPre28(android.app.Dialog,android.view.KeyEvent)>($r5, $r0) in <androidx.core.view.KeyEventDispatcher: boolean dispatchKeyEvent(androidx.core.view.KeyEventDispatcher$Component,android.view.View,android.view.Window$Callback,android.view.KeyEvent)> ==> <androidx.core.view.KeyEventDispatcher: void <clinit>()>
CLINIT edge: $z0 = staticinvoke <androidx.core.view.KeyEventDispatcher: boolean activitySuperDispatchKeyEventPre28(android.app.Activity,android.view.KeyEvent)>($r4, $r0) in <androidx.core.view.KeyEventDispatcher: boolean dispatchKeyEvent(androidx.core.view.KeyEventDispatcher$Component,android.view.View,android.view.Window$Callback,android.view.KeyEvent)> ==> <androidx.core.view.KeyEventDispatcher: void <clinit>()>
STATIC edge: $r2 = staticinvoke <androidx.core.view.ViewCompat$UnhandledKeyEventManager: androidx.core.view.ViewCompat$UnhandledKeyEventManager at(android.view.View)>($r1) in <androidx.core.view.ViewCompat: boolean dispatchUnhandledKeyEventBeforeCallback(android.view.View,android.view.KeyEvent)> ==> <androidx.core.view.ViewCompat$UnhandledKeyEventManager: androidx.core.view.ViewCompat$UnhandledKeyEventManager at(android.view.View)>
CLINIT edge: $r2 = staticinvoke <androidx.core.view.ViewCompat$UnhandledKeyEventManager: androidx.core.view.ViewCompat$UnhandledKeyEventManager at(android.view.View)>($r1) in <androidx.core.view.ViewCompat: boolean dispatchUnhandledKeyEventBeforeCallback(android.view.View,android.view.KeyEvent)> ==> <androidx.core.view.ViewCompat$UnhandledKeyEventManager: void <clinit>()>
CLINIT edge: $r2 = staticinvoke <androidx.core.view.KeyEventDispatcher: android.content.DialogInterface$OnKeyListener getDialogKeyListenerPre28(android.app.Dialog)>($r1) in <androidx.core.view.KeyEventDispatcher: boolean dialogSuperDispatchKeyEventPre28(android.app.Dialog,android.view.KeyEvent)> ==> <androidx.core.view.KeyEventDispatcher: void <clinit>()>
STATIC edge: $z0 = staticinvoke <androidx.core.view.ViewCompat: boolean dispatchUnhandledKeyEventBeforeCallback(android.view.View,android.view.KeyEvent)>($r4, $r0) in <androidx.core.view.KeyEventDispatcher: boolean dialogSuperDispatchKeyEventPre28(android.app.Dialog,android.view.KeyEvent)> ==> <androidx.core.view.ViewCompat: boolean dispatchUnhandledKeyEventBeforeCallback(android.view.View,android.view.KeyEvent)>
STATIC edge: $r2 = staticinvoke <androidx.core.view.KeyEventDispatcher: android.content.DialogInterface$OnKeyListener getDialogKeyListenerPre28(android.app.Dialog)>($r1) in <androidx.core.view.KeyEventDispatcher: boolean dialogSuperDispatchKeyEventPre28(android.app.Dialog,android.view.KeyEvent)> ==> <androidx.core.view.KeyEventDispatcher: android.content.DialogInterface$OnKeyListener getDialogKeyListenerPre28(android.app.Dialog)>
CLINIT edge: $z0 = staticinvoke <androidx.core.view.ViewCompat: boolean dispatchUnhandledKeyEventBeforeCallback(android.view.View,android.view.KeyEvent)>($r4, $r0) in <androidx.core.view.KeyEventDispatcher: boolean dialogSuperDispatchKeyEventPre28(android.app.Dialog,android.view.KeyEvent)> ==> <androidx.core.view.ViewCompat: void <clinit>()>
CLINIT edge: $z0 = staticinvoke <androidx.core.view.KeyEventDispatcher: boolean actionBarOnMenuKeyEventPre28(android.app.ActionBar,android.view.KeyEvent)>($r3, $r0) in <androidx.core.view.KeyEventDispatcher: boolean activitySuperDispatchKeyEventPre28(android.app.Activity,android.view.KeyEvent)> ==> <androidx.core.view.KeyEventDispatcher: void <clinit>()>
STATIC edge: $z0 = staticinvoke <androidx.core.view.ViewCompat: boolean dispatchUnhandledKeyEventBeforeCallback(android.view.View,android.view.KeyEvent)>($r4, $r0) in <androidx.core.view.KeyEventDispatcher: boolean activitySuperDispatchKeyEventPre28(android.app.Activity,android.view.KeyEvent)> ==> <androidx.core.view.ViewCompat: boolean dispatchUnhandledKeyEventBeforeCallback(android.view.View,android.view.KeyEvent)>
STATIC edge: $z0 = staticinvoke <androidx.core.view.KeyEventDispatcher: boolean actionBarOnMenuKeyEventPre28(android.app.ActionBar,android.view.KeyEvent)>($r3, $r0) in <androidx.core.view.KeyEventDispatcher: boolean activitySuperDispatchKeyEventPre28(android.app.Activity,android.view.KeyEvent)> ==> <androidx.core.view.KeyEventDispatcher: boolean actionBarOnMenuKeyEventPre28(android.app.ActionBar,android.view.KeyEvent)>
CLINIT edge: $z0 = staticinvoke <androidx.core.view.ViewCompat: boolean dispatchUnhandledKeyEventBeforeCallback(android.view.View,android.view.KeyEvent)>($r4, $r0) in <androidx.core.view.KeyEventDispatcher: boolean activitySuperDispatchKeyEventPre28(android.app.Activity,android.view.KeyEvent)> ==> <androidx.core.view.ViewCompat: void <clinit>()>
CLINIT edge: $z0 = <androidx.core.view.KeyEventDispatcher: boolean sDialogFieldsFetched> in <androidx.core.view.KeyEventDispatcher: android.content.DialogInterface$OnKeyListener getDialogKeyListenerPre28(android.app.Dialog)> ==> <androidx.core.view.KeyEventDispatcher: void <clinit>()>
CLINIT edge: $z0 = <androidx.core.view.KeyEventDispatcher: boolean sActionBarFieldsFetched> in <androidx.core.view.KeyEventDispatcher: boolean actionBarOnMenuKeyEventPre28(android.app.ActionBar,android.view.KeyEvent)> ==> <androidx.core.view.KeyEventDispatcher: void <clinit>()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<androidx.core.view.ViewCompat$UnhandledKeyEventManager: boolean dispatch(android.view.View,android.view.KeyEvent)>($r1, $r0) in <androidx.core.view.ViewCompat: boolean dispatchUnhandledKeyEventBeforeCallback(android.view.View,android.view.KeyEvent)> ==> <androidx.core.view.ViewCompat$UnhandledKeyEventManager: boolean dispatch(android.view.View,android.view.KeyEvent)>
SPECIAL edge: specialinvoke r0.<androidx.core.view.ViewCompat$UnhandledKeyEventManager: void recalcViewsWithUnhandled()>() in <androidx.core.view.ViewCompat$UnhandledKeyEventManager: boolean dispatch(android.view.View,android.view.KeyEvent)> ==> <androidx.core.view.ViewCompat$UnhandledKeyEventManager: void recalcViewsWithUnhandled()>
SPECIAL edge: $r2 = specialinvoke r0.<androidx.core.view.ViewCompat$UnhandledKeyEventManager: android.view.View dispatchInOrder(android.view.View,android.view.KeyEvent)>($r2, $r3) in <androidx.core.view.ViewCompat$UnhandledKeyEventManager: boolean dispatch(android.view.View,android.view.KeyEvent)> ==> <androidx.core.view.ViewCompat$UnhandledKeyEventManager: android.view.View dispatchInOrder(android.view.View,android.view.KeyEvent)>
SPECIAL edge: $r4 = specialinvoke r0.<androidx.core.view.ViewCompat$UnhandledKeyEventManager: android.util.SparseArray getCapturedKeys()>() in <androidx.core.view.ViewCompat$UnhandledKeyEventManager: boolean dispatch(android.view.View,android.view.KeyEvent)> ==> <androidx.core.view.ViewCompat$UnhandledKeyEventManager: android.util.SparseArray getCapturedKeys()>
CLINIT edge: $r3 = <androidx.core.view.ViewCompat$UnhandledKeyEventManager: java.util.ArrayList sViewsWithListeners> in <androidx.core.view.ViewCompat$UnhandledKeyEventManager: void recalcViewsWithUnhandled()> ==> <androidx.core.view.ViewCompat$UnhandledKeyEventManager: void <clinit>()>
CLINIT edge: $r1 = <java.lang.Boolean: java.lang.Boolean TRUE> in <androidx.core.view.ViewCompat$UnhandledKeyEventManager: void recalcViewsWithUnhandled()> ==> <java.lang.Boolean: void <clinit>()>
CLINIT edge: $r4 = <androidx.core.view.ViewCompat$UnhandledKeyEventManager: java.util.ArrayList sViewsWithListeners> in <androidx.core.view.ViewCompat$UnhandledKeyEventManager: void recalcViewsWithUnhandled()> ==> <androidx.core.view.ViewCompat$UnhandledKeyEventManager: void <clinit>()>
SPECIAL edge: $r5 = specialinvoke r0.<androidx.core.view.ViewCompat$UnhandledKeyEventManager: android.view.View dispatchInOrder(android.view.View,android.view.KeyEvent)>($r5, $r2) in <androidx.core.view.ViewCompat$UnhandledKeyEventManager: android.view.View dispatchInOrder(android.view.View,android.view.KeyEvent)> ==> <androidx.core.view.ViewCompat$UnhandledKeyEventManager: android.view.View dispatchInOrder(android.view.View,android.view.KeyEvent)>
SPECIAL edge: $z0 = specialinvoke r0.<androidx.core.view.ViewCompat$UnhandledKeyEventManager: boolean onUnhandledKeyEvent(android.view.View,android.view.KeyEvent)>($r1, $r2) in <androidx.core.view.ViewCompat$UnhandledKeyEventManager: android.view.View dispatchInOrder(android.view.View,android.view.KeyEvent)> ==> <androidx.core.view.ViewCompat$UnhandledKeyEventManager: boolean onUnhandledKeyEvent(android.view.View,android.view.KeyEvent)>
INTERFACE edge: $z0 = interfaceinvoke $r1.<androidx.core.view.KeyEventDispatcher$Component: boolean superDispatchKeyEvent(android.view.KeyEvent)>($r0) in <androidx.core.view.KeyEventDispatcher: boolean dispatchKeyEvent(androidx.core.view.KeyEventDispatcher$Component,android.view.View,android.view.Window$Callback,android.view.KeyEvent)> ==> <androidx.core.app.ComponentActivity: boolean superDispatchKeyEvent(android.view.KeyEvent)>
INTERFACE edge: $z0 = interfaceinvoke $r1.<androidx.core.view.KeyEventDispatcher$Component: boolean superDispatchKeyEvent(android.view.KeyEvent)>($r0) in <androidx.core.view.KeyEventDispatcher: boolean dispatchKeyEvent(androidx.core.view.KeyEventDispatcher$Component,android.view.View,android.view.Window$Callback,android.view.KeyEvent)> ==> <androidx.core.app.ComponentActivity: boolean superDispatchKeyEvent(android.view.KeyEvent)>
INTERFACE edge: interfaceinvoke $r1.<android.view.Window$Callback: void onContentChanged()>() in <androidx.appcompat.app.AppCompatDelegateImpl$AppCompatWindowCallback: void onContentChanged()> ==> <androidx.appcompat.app.AppCompatActivity: void onContentChanged()>
VIRTUAL edge: virtualinvoke r0.<androidx.appcompat.app.AppCompatActivity: void onSupportContentChanged()>() in <androidx.appcompat.app.AppCompatActivity: void onContentChanged()> ==> <androidx.appcompat.app.AppCompatActivity: void onSupportContentChanged()>
INTERFACE edge: interfaceinvoke $r1.<android.view.Window$Callback: void onPanelClosed(int,android.view.Menu)>($i0, $r2) in <androidx.appcompat.app.AppCompatDelegateImpl$AppCompatWindowCallback: void onPanelClosed(int,android.view.Menu)> ==> <androidx.appcompat.app.AppCompatActivity: void onPanelClosed(int,android.view.Menu)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<android.view.Window$Callback: boolean dispatchKeyEvent(android.view.KeyEvent)>($r1) in <androidx.appcompat.app.AppCompatDelegateImpl$AppCompatWindowCallback: boolean dispatchKeyEvent(android.view.KeyEvent)> ==> <androidx.appcompat.app.AppCompatActivity: boolean dispatchKeyEvent(android.view.KeyEvent)>
VIRTUAL edge: $z0 = virtualinvoke $r3.<androidx.appcompat.app.AppCompatDelegateImpl: boolean dispatchKeyEvent(android.view.KeyEvent)>($r1) in <androidx.appcompat.app.AppCompatDelegateImpl$AppCompatWindowCallback: boolean dispatchKeyEvent(android.view.KeyEvent)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: boolean dispatchKeyEvent(android.view.KeyEvent)>
CLINIT edge: $z0 = staticinvoke <androidx.core.view.KeyEventDispatcher: boolean dispatchBeforeHierarchy(android.view.View,android.view.KeyEvent)>($r4, $r1) in <androidx.appcompat.app.AppCompatDelegateImpl: boolean dispatchKeyEvent(android.view.KeyEvent)> ==> <androidx.core.view.KeyEventDispatcher: void <clinit>()>
STATIC edge: $z0 = staticinvoke <androidx.core.view.KeyEventDispatcher: boolean dispatchBeforeHierarchy(android.view.View,android.view.KeyEvent)>($r4, $r1) in <androidx.appcompat.app.AppCompatDelegateImpl: boolean dispatchKeyEvent(android.view.KeyEvent)> ==> <androidx.core.view.KeyEventDispatcher: boolean dispatchBeforeHierarchy(android.view.View,android.view.KeyEvent)>
VIRTUAL edge: $z1 = virtualinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: boolean onKeyDown(int,android.view.KeyEvent)>($i0, $r1) in <androidx.appcompat.app.AppCompatDelegateImpl: boolean dispatchKeyEvent(android.view.KeyEvent)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: boolean onKeyDown(int,android.view.KeyEvent)>
VIRTUAL edge: $z1 = virtualinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: boolean onKeyUp(int,android.view.KeyEvent)>($i0, $r1) in <androidx.appcompat.app.AppCompatDelegateImpl: boolean dispatchKeyEvent(android.view.KeyEvent)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: boolean onKeyUp(int,android.view.KeyEvent)>
SPECIAL edge: specialinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: boolean onKeyUpPanel(int,android.view.KeyEvent)>(0, $r1) in <androidx.appcompat.app.AppCompatDelegateImpl: boolean onKeyUp(int,android.view.KeyEvent)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: boolean onKeyUpPanel(int,android.view.KeyEvent)>
VIRTUAL edge: $z0 = virtualinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: boolean onBackPressed()>() in <androidx.appcompat.app.AppCompatDelegateImpl: boolean onKeyUp(int,android.view.KeyEvent)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: boolean onBackPressed()>
VIRTUAL edge: $r1 = virtualinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState getPanelState(int,boolean)>(0, 0) in <androidx.appcompat.app.AppCompatDelegateImpl: boolean onBackPressed()> ==> <androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState getPanelState(int,boolean)>
VIRTUAL edge: virtualinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: void closePanel(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,boolean)>($r1, 1) in <androidx.appcompat.app.AppCompatDelegateImpl: boolean onBackPressed()> ==> <androidx.appcompat.app.AppCompatDelegateImpl: void closePanel(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,boolean)>
VIRTUAL edge: $r3 = virtualinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.app.ActionBar getSupportActionBar()>() in <androidx.appcompat.app.AppCompatDelegateImpl: boolean onBackPressed()> ==> <androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.app.ActionBar getSupportActionBar()>
VIRTUAL edge: virtualinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: void checkCloseActionMenu(androidx.appcompat.view.menu.MenuBuilder)>($r3) in <androidx.appcompat.app.AppCompatDelegateImpl: void closePanel(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,boolean)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: void checkCloseActionMenu(androidx.appcompat.view.menu.MenuBuilder)>
VIRTUAL edge: virtualinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: void callOnPanelClosed(int,androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,android.view.Menu)>($i0, $r1, null) in <androidx.appcompat.app.AppCompatDelegateImpl: void closePanel(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,boolean)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: void callOnPanelClosed(int,androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,android.view.Menu)>
VIRTUAL edge: virtualinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: void updateBackInvokedCallbackState()>() in <androidx.appcompat.app.AppCompatDelegateImpl: void closePanel(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,boolean)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: void updateBackInvokedCallbackState()>
VIRTUAL edge: virtualinvoke $r5.<androidx.appcompat.app.AppCompatDelegateImpl$AppCompatWindowCallback: void bypassOnPanelClosed(android.view.Window$Callback,int,android.view.Menu)>($r1, $i0, $r7) in <androidx.appcompat.app.AppCompatDelegateImpl: void callOnPanelClosed(int,androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,android.view.Menu)> ==> <androidx.appcompat.app.AppCompatDelegateImpl$AppCompatWindowCallback: void bypassOnPanelClosed(android.view.Window$Callback,int,android.view.Menu)>
VIRTUAL edge: $r1 = virtualinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: android.view.Window$Callback getWindowCallback()>() in <androidx.appcompat.app.AppCompatDelegateImpl: void checkCloseActionMenu(androidx.appcompat.view.menu.MenuBuilder)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: android.view.Window$Callback getWindowCallback()>
VIRTUAL edge: virtualinvoke $r2.<androidx.appcompat.view.ActionMode: void finish()>() in <androidx.appcompat.app.AppCompatDelegateImpl: boolean onBackPressed()> ==> <androidx.appcompat.view.StandaloneActionMode: void finish()>
VIRTUAL edge: $r3 = virtualinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState getPanelState(int,boolean)>($i0, 1) in <androidx.appcompat.app.AppCompatDelegateImpl: boolean onKeyUpPanel(int,android.view.KeyEvent)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState getPanelState(int,boolean)>
SPECIAL edge: $z0 = specialinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: boolean preparePanel(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,android.view.KeyEvent)>($r3, $r1) in <androidx.appcompat.app.AppCompatDelegateImpl: boolean onKeyUpPanel(int,android.view.KeyEvent)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: boolean preparePanel(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,android.view.KeyEvent)>
SPECIAL edge: specialinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: void openPanel(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,android.view.KeyEvent)>($r3, $r1) in <androidx.appcompat.app.AppCompatDelegateImpl: boolean onKeyUpPanel(int,android.view.KeyEvent)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: void openPanel(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,android.view.KeyEvent)>
VIRTUAL edge: virtualinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: void closePanel(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,boolean)>($r3, 1) in <androidx.appcompat.app.AppCompatDelegateImpl: boolean onKeyUpPanel(int,android.view.KeyEvent)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: void closePanel(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,boolean)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState: boolean hasPanelItems()>() in <androidx.appcompat.app.AppCompatDelegateImpl: void openPanel(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,android.view.KeyEvent)> ==> <androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState: boolean hasPanelItems()>
VIRTUAL edge: $r6 = virtualinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: android.view.Window$Callback getWindowCallback()>() in <androidx.appcompat.app.AppCompatDelegateImpl: void openPanel(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,android.view.KeyEvent)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: android.view.Window$Callback getWindowCallback()>
VIRTUAL edge: virtualinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: void closePanel(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,boolean)>($r1, 1) in <androidx.appcompat.app.AppCompatDelegateImpl: void openPanel(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,android.view.KeyEvent)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: void closePanel(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,boolean)>
SPECIAL edge: $z0 = specialinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: boolean preparePanel(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,android.view.KeyEvent)>($r1, $r2) in <androidx.appcompat.app.AppCompatDelegateImpl: void openPanel(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,android.view.KeyEvent)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: boolean preparePanel(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,android.view.KeyEvent)>
SPECIAL edge: $z0 = specialinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: boolean initializePanelDecor(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState)>($r1) in <androidx.appcompat.app.AppCompatDelegateImpl: void openPanel(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,android.view.KeyEvent)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: boolean initializePanelDecor(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState)>
SPECIAL edge: $z0 = specialinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: boolean initializePanelContent(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState)>($r1) in <androidx.appcompat.app.AppCompatDelegateImpl: void openPanel(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,android.view.KeyEvent)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: boolean initializePanelContent(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState)>
VIRTUAL edge: virtualinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: void updateBackInvokedCallbackState()>() in <androidx.appcompat.app.AppCompatDelegateImpl: void openPanel(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,android.view.KeyEvent)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: void updateBackInvokedCallbackState()>
SPECIAL edge: specialinvoke $r5.<androidx.appcompat.app.AppCompatDelegateImpl$PanelMenuPresenterCallback: void <init>(androidx.appcompat.app.AppCompatDelegateImpl)>(r0) in <androidx.appcompat.app.AppCompatDelegateImpl: boolean initializePanelContent(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState)> ==> <androidx.appcompat.app.AppCompatDelegateImpl$PanelMenuPresenterCallback: void <init>(androidx.appcompat.app.AppCompatDelegateImpl)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.appcompat.app.AppCompatDelegateImpl$PanelMenuPresenterCallback: void <init>(androidx.appcompat.app.AppCompatDelegateImpl)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r2.<androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState: androidx.appcompat.view.menu.MenuView getListMenuView(androidx.appcompat.view.menu.MenuPresenter$Callback)>($r5) in <androidx.appcompat.app.AppCompatDelegateImpl: boolean initializePanelContent(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState)> ==> <androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState: androidx.appcompat.view.menu.MenuView getListMenuView(androidx.appcompat.view.menu.MenuPresenter$Callback)>
SPECIAL edge: specialinvoke $r5.<androidx.appcompat.view.menu.ListMenuPresenter: void <init>(android.content.Context,int)>($r1, $i0) in <androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState: androidx.appcompat.view.menu.MenuView getListMenuView(androidx.appcompat.view.menu.MenuPresenter$Callback)> ==> <androidx.appcompat.view.menu.ListMenuPresenter: void <init>(android.content.Context,int)>
VIRTUAL edge: virtualinvoke $r5.<androidx.appcompat.view.menu.ListMenuPresenter: void setCallback(androidx.appcompat.view.menu.MenuPresenter$Callback)>($r3) in <androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState: androidx.appcompat.view.menu.MenuView getListMenuView(androidx.appcompat.view.menu.MenuPresenter$Callback)> ==> <androidx.appcompat.view.menu.ListMenuPresenter: void setCallback(androidx.appcompat.view.menu.MenuPresenter$Callback)>
VIRTUAL edge: $r2 = virtualinvoke $r5.<androidx.appcompat.view.menu.ListMenuPresenter: androidx.appcompat.view.menu.MenuView getMenuView(android.view.ViewGroup)>($r6) in <androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState: androidx.appcompat.view.menu.MenuView getListMenuView(androidx.appcompat.view.menu.MenuPresenter$Callback)> ==> <androidx.appcompat.view.menu.ListMenuPresenter: androidx.appcompat.view.menu.MenuView getMenuView(android.view.ViewGroup)>
SPECIAL edge: specialinvoke $r5.<androidx.appcompat.view.menu.ListMenuPresenter$MenuAdapter: void <init>(androidx.appcompat.view.menu.ListMenuPresenter)>(r0) in <androidx.appcompat.view.menu.ListMenuPresenter: androidx.appcompat.view.menu.MenuView getMenuView(android.view.ViewGroup)> ==> <androidx.appcompat.view.menu.ListMenuPresenter$MenuAdapter: void <init>(androidx.appcompat.view.menu.ListMenuPresenter)>
VIRTUAL edge: virtualinvoke r0.<androidx.appcompat.view.menu.ListMenuPresenter$MenuAdapter: void findExpandedIndex()>() in <androidx.appcompat.view.menu.ListMenuPresenter$MenuAdapter: void <init>(androidx.appcompat.view.menu.ListMenuPresenter)> ==> <androidx.appcompat.view.menu.ListMenuPresenter$MenuAdapter: void findExpandedIndex()>
SPECIAL edge: specialinvoke $r3.<androidx.appcompat.app.AppCompatDelegateImpl$ListMenuDecorView: void <init>(androidx.appcompat.app.AppCompatDelegateImpl,android.content.Context)>(r0, $r1) in <androidx.appcompat.app.AppCompatDelegateImpl: boolean initializePanelDecor(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState)> ==> <androidx.appcompat.app.AppCompatDelegateImpl$ListMenuDecorView: void <init>(androidx.appcompat.app.AppCompatDelegateImpl,android.content.Context)>
SPECIAL edge: specialinvoke r0.<androidx.appcompat.widget.ContentFrameLayout: void <init>(android.content.Context)>($r2) in <androidx.appcompat.app.AppCompatDelegateImpl$ListMenuDecorView: void <init>(androidx.appcompat.app.AppCompatDelegateImpl,android.content.Context)> ==> <androidx.appcompat.widget.ContentFrameLayout: void <init>(android.content.Context)>
SPECIAL edge: specialinvoke r0.<androidx.appcompat.widget.ContentFrameLayout: void <init>(android.content.Context,android.util.AttributeSet)>($r1, null) in <androidx.appcompat.widget.ContentFrameLayout: void <init>(android.content.Context)> ==> <androidx.appcompat.widget.ContentFrameLayout: void <init>(android.content.Context,android.util.AttributeSet)>
SPECIAL edge: specialinvoke r0.<androidx.appcompat.widget.ContentFrameLayout: void <init>(android.content.Context,android.util.AttributeSet,int)>($r1, $r2, 0) in <androidx.appcompat.widget.ContentFrameLayout: void <init>(android.content.Context,android.util.AttributeSet)> ==> <androidx.appcompat.widget.ContentFrameLayout: void <init>(android.content.Context,android.util.AttributeSet,int)>
VIRTUAL edge: virtualinvoke $r2.<androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState: void setStyle(android.content.Context)>($r1) in <androidx.appcompat.app.AppCompatDelegateImpl: boolean initializePanelDecor(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState)> ==> <androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState: void setStyle(android.content.Context)>
CLINIT edge: $r7 = <androidx.appcompat.R$styleable: int[] AppCompatTheme> in <androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState: void setStyle(android.content.Context)> ==> <androidx.appcompat.R$styleable: void <clinit>()>
SPECIAL edge: specialinvoke $r6.<androidx.appcompat.view.ContextThemeWrapper: void <init>(android.content.Context,int)>($r1, 0) in <androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState: void setStyle(android.content.Context)> ==> <androidx.appcompat.view.ContextThemeWrapper: void <init>(android.content.Context,int)>
VIRTUAL edge: $r5 = virtualinvoke $r6.<android.content.Context: android.content.res.Resources$Theme getTheme()>() in <androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState: void setStyle(android.content.Context)> ==> <androidx.appcompat.view.ContextThemeWrapper: android.content.res.Resources$Theme getTheme()>
VIRTUAL edge: $r1 = virtualinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: android.content.Context getActionBarThemedContext()>() in <androidx.appcompat.app.AppCompatDelegateImpl: boolean initializePanelDecor(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: android.content.Context getActionBarThemedContext()>
VIRTUAL edge: $r3 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>() in <androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState: void setStyle(android.content.Context)> ==> <androidx.appcompat.app.AppCompatActivity: android.content.res.Resources getResources()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<android.content.Context: android.content.res.Resources getResources()>() in <androidx.appcompat.app.AppCompatDelegateImpl: void openPanel(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,android.view.KeyEvent)> ==> <androidx.appcompat.app.AppCompatActivity: android.content.res.Resources getResources()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>() in <androidx.appcompat.app.AppCompatDelegateImpl: void openPanel(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,android.view.KeyEvent)> ==> <androidx.appcompat.widget.VectorEnabledTintResources: android.content.res.Configuration getConfiguration()>
SPECIAL edge: specialinvoke $r12.<androidx.appcompat.app.AppCompatDelegateImpl$ActionMenuPresenterCallback: void <init>(androidx.appcompat.app.AppCompatDelegateImpl)>(r0) in <androidx.appcompat.app.AppCompatDelegateImpl: boolean preparePanel(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,android.view.KeyEvent)> ==> <androidx.appcompat.app.AppCompatDelegateImpl$ActionMenuPresenterCallback: void <init>(androidx.appcompat.app.AppCompatDelegateImpl)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.appcompat.app.AppCompatDelegateImpl$ActionMenuPresenterCallback: void <init>(androidx.appcompat.app.AppCompatDelegateImpl)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r2.<androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState: void setMenu(androidx.appcompat.view.menu.MenuBuilder)>(null) in <androidx.appcompat.app.AppCompatDelegateImpl: boolean preparePanel(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,android.view.KeyEvent)> ==> <androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState: void setMenu(androidx.appcompat.view.menu.MenuBuilder)>
VIRTUAL edge: virtualinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: void closePanel(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,boolean)>($r4, 0) in <androidx.appcompat.app.AppCompatDelegateImpl: boolean preparePanel(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,android.view.KeyEvent)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: void closePanel(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,boolean)>
VIRTUAL edge: $r5 = virtualinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: android.view.Window$Callback getWindowCallback()>() in <androidx.appcompat.app.AppCompatDelegateImpl: boolean preparePanel(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,android.view.KeyEvent)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: android.view.Window$Callback getWindowCallback()>
VIRTUAL edge: $r8 = virtualinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.app.ActionBar peekSupportActionBar()>() in <androidx.appcompat.app.AppCompatDelegateImpl: boolean preparePanel(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,android.view.KeyEvent)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.app.ActionBar peekSupportActionBar()>
SPECIAL edge: $z1 = specialinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: boolean initializePanelMenu(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState)>($r2) in <androidx.appcompat.app.AppCompatDelegateImpl: boolean preparePanel(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,android.view.KeyEvent)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: boolean initializePanelMenu(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState)>
CLINIT edge: $r10 = new androidx.appcompat.view.menu.MenuBuilder in <androidx.appcompat.app.AppCompatDelegateImpl: boolean initializePanelMenu(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState)> ==> <androidx.appcompat.view.menu.MenuBuilder: void <clinit>()>
SPECIAL edge: specialinvoke $r10.<androidx.appcompat.view.menu.MenuBuilder: void <init>(android.content.Context)>($r11) in <androidx.appcompat.app.AppCompatDelegateImpl: boolean initializePanelMenu(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState)> ==> <androidx.appcompat.view.menu.MenuBuilder: void <init>(android.content.Context)>
VIRTUAL edge: virtualinvoke $r10.<androidx.appcompat.view.menu.MenuBuilder: void setCallback(androidx.appcompat.view.menu.MenuBuilder$Callback)>(r0) in <androidx.appcompat.app.AppCompatDelegateImpl: boolean initializePanelMenu(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState)> ==> <androidx.appcompat.view.menu.MenuBuilder: void setCallback(androidx.appcompat.view.menu.MenuBuilder$Callback)>
SPECIAL edge: specialinvoke $r9.<androidx.appcompat.view.ContextThemeWrapper: void <init>(android.content.Context,int)>($r11, 0) in <androidx.appcompat.app.AppCompatDelegateImpl: boolean initializePanelMenu(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState)> ==> <androidx.appcompat.view.ContextThemeWrapper: void <init>(android.content.Context,int)>
VIRTUAL edge: $r4 = virtualinvoke $r9.<android.content.Context: android.content.res.Resources$Theme getTheme()>() in <androidx.appcompat.app.AppCompatDelegateImpl: boolean initializePanelMenu(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState)> ==> <androidx.appcompat.view.ContextThemeWrapper: android.content.res.Resources$Theme getTheme()>
VIRTUAL edge: $r5 = virtualinvoke $r11.<android.content.Context: android.content.res.Resources getResources()>() in <androidx.appcompat.app.AppCompatDelegateImpl: boolean initializePanelMenu(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState)> ==> <androidx.appcompat.view.ContextThemeWrapper: android.content.res.Resources getResources()>
VIRTUAL edge: $r5 = virtualinvoke $r11.<android.content.Context: android.content.res.Resources getResources()>() in <androidx.appcompat.app.AppCompatDelegateImpl: boolean initializePanelMenu(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState)> ==> <androidx.appcompat.view.ContextThemeWrapper: android.content.res.Resources getResources()>
VIRTUAL edge: virtualinvoke $r1.<androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState: void setMenu(androidx.appcompat.view.menu.MenuBuilder)>($r10) in <androidx.appcompat.app.AppCompatDelegateImpl: boolean initializePanelMenu(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState)> ==> <androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState: void setMenu(androidx.appcompat.view.menu.MenuBuilder)>
VIRTUAL edge: $r5 = virtualinvoke $r11.<android.content.Context: android.content.res.Resources getResources()>() in <androidx.appcompat.app.AppCompatDelegateImpl: boolean initializePanelMenu(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState)> ==> <androidx.appcompat.app.AppCompatActivity: android.content.res.Resources getResources()>
VIRTUAL edge: virtualinvoke $r1.<androidx.appcompat.view.menu.MenuBuilder: void addMenuPresenter(androidx.appcompat.view.menu.MenuPresenter)>($r2) in <androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState: void setMenu(androidx.appcompat.view.menu.MenuBuilder)> ==> <androidx.appcompat.view.menu.MenuBuilder: void addMenuPresenter(androidx.appcompat.view.menu.MenuPresenter)>
VIRTUAL edge: virtualinvoke r0.<androidx.appcompat.view.menu.MenuBuilder: void addMenuPresenter(androidx.appcompat.view.menu.MenuPresenter,android.content.Context)>($r1, $r2) in <androidx.appcompat.view.menu.MenuBuilder: void addMenuPresenter(androidx.appcompat.view.menu.MenuPresenter)> ==> <androidx.appcompat.view.menu.MenuBuilder: void addMenuPresenter(androidx.appcompat.view.menu.MenuPresenter,android.content.Context)>
INTERFACE edge: interfaceinvoke $r4.<androidx.appcompat.view.menu.MenuPresenter: void initForMenu(android.content.Context,androidx.appcompat.view.menu.MenuBuilder)>($r1, r0) in <androidx.appcompat.view.menu.MenuBuilder: void addMenuPresenter(androidx.appcompat.view.menu.MenuPresenter,android.content.Context)> ==> <androidx.appcompat.view.menu.ListMenuPresenter: void initForMenu(android.content.Context,androidx.appcompat.view.menu.MenuBuilder)>
VIRTUAL edge: virtualinvoke $r6.<androidx.appcompat.view.menu.ListMenuPresenter$MenuAdapter: void notifyDataSetChanged()>() in <androidx.appcompat.view.menu.ListMenuPresenter: void initForMenu(android.content.Context,androidx.appcompat.view.menu.MenuBuilder)> ==> <androidx.appcompat.view.menu.ListMenuPresenter$MenuAdapter: void notifyDataSetChanged()>
VIRTUAL edge: virtualinvoke r0.<androidx.appcompat.view.menu.ListMenuPresenter$MenuAdapter: void findExpandedIndex()>() in <androidx.appcompat.view.menu.ListMenuPresenter$MenuAdapter: void notifyDataSetChanged()> ==> <androidx.appcompat.view.menu.ListMenuPresenter$MenuAdapter: void findExpandedIndex()>
SPECIAL edge: specialinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: boolean onKeyDownPanel(int,android.view.KeyEvent)>(0, $r1) in <androidx.appcompat.app.AppCompatDelegateImpl: boolean onKeyDown(int,android.view.KeyEvent)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: boolean onKeyDownPanel(int,android.view.KeyEvent)>
VIRTUAL edge: $r2 = virtualinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState getPanelState(int,boolean)>($i0, 1) in <androidx.appcompat.app.AppCompatDelegateImpl: boolean onKeyDownPanel(int,android.view.KeyEvent)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState getPanelState(int,boolean)>
SPECIAL edge: $z0 = specialinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: boolean preparePanel(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,android.view.KeyEvent)>($r2, $r1) in <androidx.appcompat.app.AppCompatDelegateImpl: boolean onKeyDownPanel(int,android.view.KeyEvent)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: boolean preparePanel(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,android.view.KeyEvent)>
VIRTUAL edge: $z0 = virtualinvoke $r5.<androidx.appcompat.app.AppCompatDelegateImpl$AppCompatWindowCallback: boolean bypassDispatchKeyEvent(android.view.Window$Callback,android.view.KeyEvent)>($r6, $r1) in <androidx.appcompat.app.AppCompatDelegateImpl: boolean dispatchKeyEvent(android.view.KeyEvent)> ==> <androidx.appcompat.app.AppCompatDelegateImpl$AppCompatWindowCallback: boolean bypassDispatchKeyEvent(android.view.Window$Callback,android.view.KeyEvent)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>() in <androidx.core.view.ViewConfigurationCompat: boolean shouldShowMenuShortcutsWhenKeyboardPresent(android.view.ViewConfiguration,android.content.Context)> ==> <androidx.appcompat.view.ContextThemeWrapper: android.content.res.Resources getResources()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>() in <androidx.core.view.ViewConfigurationCompat: boolean shouldShowMenuShortcutsWhenKeyboardPresent(android.view.ViewConfiguration,android.content.Context)> ==> <androidx.appcompat.app.AppCompatActivity: android.content.res.Resources getResources()>
VIRTUAL edge: $i0 = virtualinvoke $r2.<android.content.res.Resources: int getIdentifier(java.lang.String,java.lang.String,java.lang.String)>("config_showMenuShortcutsWhenKeyboardPresent", "bool", "android") in <androidx.core.view.ViewConfigurationCompat: boolean shouldShowMenuShortcutsWhenKeyboardPresent(android.view.ViewConfiguration,android.content.Context)> ==> <androidx.appcompat.widget.VectorEnabledTintResources: int getIdentifier(java.lang.String,java.lang.String,java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<android.content.res.Resources: boolean getBoolean(int)>($i0) in <androidx.core.view.ViewConfigurationCompat: boolean shouldShowMenuShortcutsWhenKeyboardPresent(android.view.ViewConfiguration,android.content.Context)> ==> <androidx.appcompat.widget.VectorEnabledTintResources: boolean getBoolean(int)>
SPECIAL edge: $z0 = specialinvoke r0.<androidx.appcompat.widget.ResourcesWrapper: boolean getBoolean(int)>($i0) in <androidx.appcompat.widget.VectorEnabledTintResources: boolean getBoolean(int)> ==> <androidx.appcompat.widget.ResourcesWrapper: boolean getBoolean(int)>
SPECIAL edge: $i0 = specialinvoke r0.<androidx.appcompat.widget.ResourcesWrapper: int getIdentifier(java.lang.String,java.lang.String,java.lang.String)>($r3, $r1, $r2) in <androidx.appcompat.widget.VectorEnabledTintResources: int getIdentifier(java.lang.String,java.lang.String,java.lang.String)> ==> <androidx.appcompat.widget.ResourcesWrapper: int getIdentifier(java.lang.String,java.lang.String,java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r3.<android.content.res.Resources: int getIdentifier(java.lang.String,java.lang.String,java.lang.String)>($r4, $r1, $r2) in <androidx.appcompat.widget.ResourcesWrapper: int getIdentifier(java.lang.String,java.lang.String,java.lang.String)> ==> <androidx.appcompat.widget.ResourcesWrapper: int getIdentifier(java.lang.String,java.lang.String,java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>() in <androidx.appcompat.view.menu.MenuBuilder: void setShortcutsVisibleInner(boolean)> ==> <androidx.appcompat.widget.VectorEnabledTintResources: android.content.res.Configuration getConfiguration()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<androidx.appcompat.app.AppCompatDelegateImpl: boolean isHandleNativeActionModesEnabled()>() in <androidx.appcompat.app.AppCompatDelegateImpl$AppCompatWindowCallback: android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback,int)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: boolean isHandleNativeActionModesEnabled()>
VIRTUAL edge: virtualinvoke $r2.<androidx.appcompat.app.AppCompatDelegateImpl: void onMenuOpened(int)>($i0) in <androidx.appcompat.app.AppCompatDelegateImpl$AppCompatWindowCallback: boolean onMenuOpened(int,android.view.Menu)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: void onMenuOpened(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.app.ActionBar getSupportActionBar()>() in <androidx.appcompat.app.AppCompatDelegateImpl: void onMenuOpened(int)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.app.ActionBar getSupportActionBar()>
VIRTUAL edge: $r2 = virtualinvoke $r4.<androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState getPanelState(int,boolean)>(0, 1) in <androidx.appcompat.app.AppCompatDelegateImpl$AppCompatWindowCallback: void onProvideKeyboardShortcuts(java.util.List,android.view.Menu,int)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState getPanelState(int,boolean)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<androidx.appcompat.app.AppCompatDelegateImpl: boolean onKeyShortcut(int,android.view.KeyEvent)>($i0, $r1) in <androidx.appcompat.app.AppCompatDelegateImpl$AppCompatWindowCallback: boolean dispatchKeyShortcutEvent(android.view.KeyEvent)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: boolean onKeyShortcut(int,android.view.KeyEvent)>
VIRTUAL edge: $r2 = virtualinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.app.ActionBar getSupportActionBar()>() in <androidx.appcompat.app.AppCompatDelegateImpl: boolean onKeyShortcut(int,android.view.KeyEvent)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.app.ActionBar getSupportActionBar()>
SPECIAL edge: $z0 = specialinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: boolean performPanelShortcut(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,int,android.view.KeyEvent,int)>($r3, $i0, $r1, 1) in <androidx.appcompat.app.AppCompatDelegateImpl: boolean onKeyShortcut(int,android.view.KeyEvent)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: boolean performPanelShortcut(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,int,android.view.KeyEvent,int)>
VIRTUAL edge: $r3 = virtualinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState getPanelState(int,boolean)>(0, 1) in <androidx.appcompat.app.AppCompatDelegateImpl: boolean onKeyShortcut(int,android.view.KeyEvent)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState getPanelState(int,boolean)>
SPECIAL edge: specialinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: boolean preparePanel(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,android.view.KeyEvent)>($r3, $r1) in <androidx.appcompat.app.AppCompatDelegateImpl: boolean onKeyShortcut(int,android.view.KeyEvent)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: boolean preparePanel(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,android.view.KeyEvent)>
SPECIAL edge: $z0 = specialinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: boolean preparePanel(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,android.view.KeyEvent)>($r1, $r2) in <androidx.appcompat.app.AppCompatDelegateImpl: boolean performPanelShortcut(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,int,android.view.KeyEvent,int)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: boolean preparePanel(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,android.view.KeyEvent)>
VIRTUAL edge: virtualinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: void closePanel(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,boolean)>($r1, 1) in <androidx.appcompat.app.AppCompatDelegateImpl: boolean performPanelShortcut(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,int,android.view.KeyEvent,int)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: void closePanel(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,boolean)>
VIRTUAL edge: $z1 = virtualinvoke $r3.<androidx.appcompat.view.menu.MenuBuilder: boolean performShortcut(int,android.view.KeyEvent,int)>($i1, $r2, $i0) in <androidx.appcompat.app.AppCompatDelegateImpl: boolean performPanelShortcut(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,int,android.view.KeyEvent,int)> ==> <androidx.appcompat.view.menu.MenuBuilder: boolean performShortcut(int,android.view.KeyEvent,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<androidx.appcompat.view.menu.MenuBuilder: androidx.appcompat.view.menu.MenuItemImpl findItemWithShortcutForKey(int,android.view.KeyEvent)>($i1, $r1) in <androidx.appcompat.view.menu.MenuBuilder: boolean performShortcut(int,android.view.KeyEvent,int)> ==> <androidx.appcompat.view.menu.MenuBuilder: androidx.appcompat.view.menu.MenuItemImpl findItemWithShortcutForKey(int,android.view.KeyEvent)>
VIRTUAL edge: $z0 = virtualinvoke r0.<androidx.appcompat.view.menu.MenuBuilder: boolean performItemAction(android.view.MenuItem,int)>($r2, $i0) in <androidx.appcompat.view.menu.MenuBuilder: boolean performShortcut(int,android.view.KeyEvent,int)> ==> <androidx.appcompat.view.menu.MenuBuilder: boolean performItemAction(android.view.MenuItem,int)>
VIRTUAL edge: virtualinvoke r0.<androidx.appcompat.view.menu.MenuBuilder: void close(boolean)>(1) in <androidx.appcompat.view.menu.MenuBuilder: boolean performShortcut(int,android.view.KeyEvent,int)> ==> <androidx.appcompat.view.menu.MenuBuilder: void close(boolean)>
VIRTUAL edge: $z0 = virtualinvoke r0.<androidx.appcompat.view.menu.MenuBuilder: boolean performItemAction(android.view.MenuItem,androidx.appcompat.view.menu.MenuPresenter,int)>($r1, null, $i0) in <androidx.appcompat.view.menu.MenuBuilder: boolean performItemAction(android.view.MenuItem,int)> ==> <androidx.appcompat.view.menu.MenuBuilder: boolean performItemAction(android.view.MenuItem,androidx.appcompat.view.menu.MenuPresenter,int)>
CLINIT edge: $r5 = new androidx.appcompat.view.menu.SubMenuBuilder in <androidx.appcompat.view.menu.MenuBuilder: boolean performItemAction(android.view.MenuItem,androidx.appcompat.view.menu.MenuPresenter,int)> ==> <androidx.appcompat.view.menu.MenuBuilder: void <clinit>()>
SPECIAL edge: specialinvoke $r5.<androidx.appcompat.view.menu.SubMenuBuilder: void <init>(android.content.Context,androidx.appcompat.view.menu.MenuBuilder,androidx.appcompat.view.menu.MenuItemImpl)>($r6, r0, $r3) in <androidx.appcompat.view.menu.MenuBuilder: boolean performItemAction(android.view.MenuItem,androidx.appcompat.view.menu.MenuPresenter,int)> ==> <androidx.appcompat.view.menu.SubMenuBuilder: void <init>(android.content.Context,androidx.appcompat.view.menu.MenuBuilder,androidx.appcompat.view.menu.MenuItemImpl)>
SPECIAL edge: specialinvoke r0.<androidx.appcompat.view.menu.MenuBuilder: void <init>(android.content.Context)>($r1) in <androidx.appcompat.view.menu.SubMenuBuilder: void <init>(android.content.Context,androidx.appcompat.view.menu.MenuBuilder,androidx.appcompat.view.menu.MenuItemImpl)> ==> <androidx.appcompat.view.menu.MenuBuilder: void <init>(android.content.Context)>
VIRTUAL edge: virtualinvoke r0.<androidx.appcompat.view.menu.MenuBuilder: void close(boolean)>(1) in <androidx.appcompat.view.menu.MenuBuilder: boolean performItemAction(android.view.MenuItem,androidx.appcompat.view.menu.MenuPresenter,int)> ==> <androidx.appcompat.view.menu.MenuBuilder: void close(boolean)>
VIRTUAL edge: virtualinvoke r0.<androidx.appcompat.view.menu.MenuBuilder: void close(boolean)>(1) in <androidx.appcompat.view.menu.MenuBuilder: boolean performItemAction(android.view.MenuItem,androidx.appcompat.view.menu.MenuPresenter,int)> ==> <androidx.appcompat.view.menu.MenuBuilder: void close(boolean)>
VIRTUAL edge: $r6 = virtualinvoke r0.<androidx.appcompat.view.menu.MenuBuilder: android.content.Context getContext()>() in <androidx.appcompat.view.menu.MenuBuilder: boolean performItemAction(android.view.MenuItem,androidx.appcompat.view.menu.MenuPresenter,int)> ==> <androidx.appcompat.view.menu.MenuBuilder: android.content.Context getContext()>
SPECIAL edge: $z1 = specialinvoke r0.<androidx.appcompat.view.menu.MenuBuilder: boolean dispatchSubMenuSelected(androidx.appcompat.view.menu.SubMenuBuilder,androidx.appcompat.view.menu.MenuPresenter)>($r5, $r1) in <androidx.appcompat.view.menu.MenuBuilder: boolean performItemAction(android.view.MenuItem,androidx.appcompat.view.menu.MenuPresenter,int)> ==> <androidx.appcompat.view.menu.MenuBuilder: boolean dispatchSubMenuSelected(androidx.appcompat.view.menu.SubMenuBuilder,androidx.appcompat.view.menu.MenuPresenter)>
VIRTUAL edge: virtualinvoke r0.<androidx.appcompat.view.menu.MenuBuilder: void findItemsWithShortcutForKey(java.util.List,int,android.view.KeyEvent)>($r1, $i0, $r2) in <androidx.appcompat.view.menu.MenuBuilder: androidx.appcompat.view.menu.MenuItemImpl findItemWithShortcutForKey(int,android.view.KeyEvent)> ==> <androidx.appcompat.view.menu.MenuBuilder: void findItemsWithShortcutForKey(java.util.List,int,android.view.KeyEvent)>
VIRTUAL edge: $z0 = virtualinvoke r0.<androidx.appcompat.view.menu.MenuBuilder: boolean isQwertyMode()>() in <androidx.appcompat.view.menu.MenuBuilder: androidx.appcompat.view.menu.MenuItemImpl findItemWithShortcutForKey(int,android.view.KeyEvent)> ==> <androidx.appcompat.view.menu.MenuBuilder: boolean isQwertyMode()>
VIRTUAL edge: $z0 = virtualinvoke r0.<androidx.appcompat.view.menu.MenuBuilder: boolean isQwertyMode()>() in <androidx.appcompat.view.menu.MenuBuilder: void findItemsWithShortcutForKey(java.util.List,int,android.view.KeyEvent)> ==> <androidx.appcompat.view.menu.MenuBuilder: boolean isQwertyMode()>
VIRTUAL edge: virtualinvoke $r3.<androidx.appcompat.app.AppCompatDelegateImpl: void onPanelClosed(int)>($i0) in <androidx.appcompat.app.AppCompatDelegateImpl$AppCompatWindowCallback: void onPanelClosed(int,android.view.Menu)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: void onPanelClosed(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.app.ActionBar getSupportActionBar()>() in <androidx.appcompat.app.AppCompatDelegateImpl: void onPanelClosed(int)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.app.ActionBar getSupportActionBar()>
VIRTUAL edge: $r2 = virtualinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState getPanelState(int,boolean)>($i0, 1) in <androidx.appcompat.app.AppCompatDelegateImpl: void onPanelClosed(int)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState getPanelState(int,boolean)>
VIRTUAL edge: virtualinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: void closePanel(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,boolean)>($r2, 0) in <androidx.appcompat.app.AppCompatDelegateImpl: void onPanelClosed(int)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: void closePanel(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,boolean)>
VIRTUAL edge: $r1 = virtualinvoke $r2.<androidx.core.view.WindowInsetsCompat$BuilderImpl: androidx.core.view.WindowInsetsCompat build()>() in <androidx.core.view.WindowInsetsCompat$Builder: androidx.core.view.WindowInsetsCompat build()> ==> <androidx.core.view.WindowInsetsCompat$BuilderImpl29: androidx.core.view.WindowInsetsCompat build()>
VIRTUAL edge: $r1 = virtualinvoke $r2.<androidx.core.view.WindowInsetsCompat$BuilderImpl: androidx.core.view.WindowInsetsCompat build()>() in <androidx.core.view.WindowInsetsCompat$Builder: androidx.core.view.WindowInsetsCompat build()> ==> <androidx.core.view.WindowInsetsCompat$BuilderImpl20: androidx.core.view.WindowInsetsCompat build()>
STATIC edge: $r4 = staticinvoke <androidx.core.view.WindowInsetsCompat: androidx.core.view.WindowInsetsCompat toWindowInsetsCompat(android.view.WindowInsets)>($r3) in <androidx.core.view.WindowInsetsCompat$BuilderImpl29: androidx.core.view.WindowInsetsCompat build()> ==> <androidx.core.view.WindowInsetsCompat: androidx.core.view.WindowInsetsCompat toWindowInsetsCompat(android.view.WindowInsets)>
CLINIT edge: $r1 = staticinvoke <androidx.core.view.WindowInsetsCompat: androidx.core.view.WindowInsetsCompat toWindowInsetsCompat(android.view.WindowInsets)>($r2) in <androidx.core.view.WindowInsetsCompat$BuilderImpl20: androidx.core.view.WindowInsetsCompat build()> ==> <androidx.core.view.WindowInsetsCompat: void <clinit>()>
STATIC edge: $r1 = staticinvoke <androidx.core.view.WindowInsetsCompat: androidx.core.view.WindowInsetsCompat toWindowInsetsCompat(android.view.WindowInsets)>($r2) in <androidx.core.view.WindowInsetsCompat$BuilderImpl20: androidx.core.view.WindowInsetsCompat build()> ==> <androidx.core.view.WindowInsetsCompat: androidx.core.view.WindowInsetsCompat toWindowInsetsCompat(android.view.WindowInsets)>
VIRTUAL edge: virtualinvoke $r1.<androidx.core.view.WindowInsetsCompat: void setOverriddenInsets(androidx.core.graphics.Insets[])>($r3) in <androidx.core.view.WindowInsetsCompat$BuilderImpl20: androidx.core.view.WindowInsetsCompat build()> ==> <androidx.core.view.WindowInsetsCompat: void setOverriddenInsets(androidx.core.graphics.Insets[])>
VIRTUAL edge: virtualinvoke $r1.<androidx.core.view.WindowInsetsCompat: void setStableInsets(androidx.core.graphics.Insets)>($r4) in <androidx.core.view.WindowInsetsCompat$BuilderImpl20: androidx.core.view.WindowInsetsCompat build()> ==> <androidx.core.view.WindowInsetsCompat: void setStableInsets(androidx.core.graphics.Insets)>
VIRTUAL edge: virtualinvoke $r2.<androidx.core.view.WindowInsetsCompat$Impl: void setStableInsets(androidx.core.graphics.Insets)>($r1) in <androidx.core.view.WindowInsetsCompat: void setStableInsets(androidx.core.graphics.Insets)> ==> <androidx.core.view.WindowInsetsCompat$Impl21: void setStableInsets(androidx.core.graphics.Insets)>
VIRTUAL edge: virtualinvoke $r2.<androidx.core.view.WindowInsetsCompat$Impl: void setStableInsets(androidx.core.graphics.Insets)>($r1) in <androidx.core.view.WindowInsetsCompat: void setStableInsets(androidx.core.graphics.Insets)> ==> <androidx.core.view.WindowInsetsCompat$Impl29: void setStableInsets(androidx.core.graphics.Insets)>
VIRTUAL edge: virtualinvoke $r2.<androidx.core.view.WindowInsetsCompat$Impl: void setOverriddenInsets(androidx.core.graphics.Insets[])>($r1) in <androidx.core.view.WindowInsetsCompat: void setOverriddenInsets(androidx.core.graphics.Insets[])> ==> <androidx.core.view.WindowInsetsCompat$Impl20: void setOverriddenInsets(androidx.core.graphics.Insets[])>
VIRTUAL edge: virtualinvoke r0.<androidx.core.view.WindowInsetsCompat$BuilderImpl20: void applyInsetTypes()>() in <androidx.core.view.WindowInsetsCompat$BuilderImpl20: androidx.core.view.WindowInsetsCompat build()> ==> <androidx.core.view.WindowInsetsCompat$BuilderImpl: void applyInsetTypes()>
CLINIT edge: $r2 = staticinvoke <androidx.core.graphics.Insets: androidx.core.graphics.Insets max(androidx.core.graphics.Insets,androidx.core.graphics.Insets)>($r2, $r3) in <androidx.core.view.WindowInsetsCompat$BuilderImpl: void applyInsetTypes()> ==> <androidx.core.graphics.Insets: void <clinit>()>
STATIC edge: $i0 = staticinvoke <androidx.core.view.WindowInsetsCompat$Type: int indexOf(int)>(64) in <androidx.core.view.WindowInsetsCompat$BuilderImpl: void applyInsetTypes()> ==> <androidx.core.view.WindowInsetsCompat$Type: int indexOf(int)>
STATIC edge: $i0 = staticinvoke <androidx.core.view.WindowInsetsCompat$Type: int indexOf(int)>(32) in <androidx.core.view.WindowInsetsCompat$BuilderImpl: void applyInsetTypes()> ==> <androidx.core.view.WindowInsetsCompat$Type: int indexOf(int)>
STATIC edge: $i0 = staticinvoke <androidx.core.view.WindowInsetsCompat$Type: int indexOf(int)>(16) in <androidx.core.view.WindowInsetsCompat$BuilderImpl: void applyInsetTypes()> ==> <androidx.core.view.WindowInsetsCompat$Type: int indexOf(int)>
STATIC edge: $r2 = staticinvoke <androidx.core.graphics.Insets: androidx.core.graphics.Insets max(androidx.core.graphics.Insets,androidx.core.graphics.Insets)>($r2, $r3) in <androidx.core.view.WindowInsetsCompat$BuilderImpl: void applyInsetTypes()> ==> <androidx.core.graphics.Insets: androidx.core.graphics.Insets max(androidx.core.graphics.Insets,androidx.core.graphics.Insets)>
STATIC edge: $i0 = staticinvoke <androidx.core.view.WindowInsetsCompat$Type: int indexOf(int)>(1) in <androidx.core.view.WindowInsetsCompat$BuilderImpl: void applyInsetTypes()> ==> <androidx.core.view.WindowInsetsCompat$Type: int indexOf(int)>
CLINIT edge: $r0 = staticinvoke <androidx.core.graphics.Insets: androidx.core.graphics.Insets of(int,int,int,int)>($i1, $i2, $i0, $i3) in <androidx.core.graphics.Insets: androidx.core.graphics.Insets max(androidx.core.graphics.Insets,androidx.core.graphics.Insets)> ==> <androidx.core.graphics.Insets: void <clinit>()>
STATIC edge: $r0 = staticinvoke <androidx.core.graphics.Insets: androidx.core.graphics.Insets of(int,int,int,int)>($i1, $i2, $i0, $i3) in <androidx.core.graphics.Insets: androidx.core.graphics.Insets max(androidx.core.graphics.Insets,androidx.core.graphics.Insets)> ==> <androidx.core.graphics.Insets: androidx.core.graphics.Insets of(int,int,int,int)>
CLINIT edge: $r0 = <androidx.core.graphics.Insets: androidx.core.graphics.Insets NONE> in <androidx.core.graphics.Insets: androidx.core.graphics.Insets of(int,int,int,int)> ==> <androidx.core.graphics.Insets: void <clinit>()>
CLINIT edge: $r0 = new androidx.core.graphics.Insets in <androidx.core.graphics.Insets: androidx.core.graphics.Insets of(int,int,int,int)> ==> <androidx.core.graphics.Insets: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<androidx.core.graphics.Insets: void <init>(int,int,int,int)>($i3, $i0, $i1, $i2) in <androidx.core.graphics.Insets: androidx.core.graphics.Insets of(int,int,int,int)> ==> <androidx.core.graphics.Insets: void <init>(int,int,int,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.core.graphics.Insets: void <init>(int,int,int,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<androidx.core.graphics.Insets: void <init>(int,int,int,int)>(0, 0, 0, 0) in <androidx.core.graphics.Insets: void <clinit>()> ==> <androidx.core.graphics.Insets: void <init>(int,int,int,int)>
VIRTUAL edge: virtualinvoke r0.<androidx.core.view.WindowInsetsCompat$BuilderImpl: void setSystemWindowInsets(androidx.core.graphics.Insets)>($r2) in <androidx.core.view.WindowInsetsCompat$BuilderImpl: void applyInsetTypes()> ==> <androidx.core.view.WindowInsetsCompat$BuilderImpl20: void setSystemWindowInsets(androidx.core.graphics.Insets)>
VIRTUAL edge: virtualinvoke r0.<androidx.core.view.WindowInsetsCompat$BuilderImpl: void setSystemGestureInsets(androidx.core.graphics.Insets)>($r2) in <androidx.core.view.WindowInsetsCompat$BuilderImpl: void applyInsetTypes()> ==> <androidx.core.view.WindowInsetsCompat$BuilderImpl: void setSystemGestureInsets(androidx.core.graphics.Insets)>
VIRTUAL edge: virtualinvoke r0.<androidx.core.view.WindowInsetsCompat$BuilderImpl: void setMandatorySystemGestureInsets(androidx.core.graphics.Insets)>($r2) in <androidx.core.view.WindowInsetsCompat$BuilderImpl: void applyInsetTypes()> ==> <androidx.core.view.WindowInsetsCompat$BuilderImpl: void setMandatorySystemGestureInsets(androidx.core.graphics.Insets)>
VIRTUAL edge: virtualinvoke r0.<androidx.core.view.WindowInsetsCompat$BuilderImpl: void setTappableElementInsets(androidx.core.graphics.Insets)>($r2) in <androidx.core.view.WindowInsetsCompat$BuilderImpl: void applyInsetTypes()> ==> <androidx.core.view.WindowInsetsCompat$BuilderImpl: void setTappableElementInsets(androidx.core.graphics.Insets)>
VIRTUAL edge: $r3 = virtualinvoke $r4.<androidx.core.view.WindowInsetsCompat: androidx.core.graphics.Insets getInsets(int)>(2) in <androidx.core.view.WindowInsetsCompat$BuilderImpl: void applyInsetTypes()> ==> <androidx.core.view.WindowInsetsCompat: androidx.core.graphics.Insets getInsets(int)>
VIRTUAL edge: $r2 = virtualinvoke $r4.<androidx.core.view.WindowInsetsCompat: androidx.core.graphics.Insets getInsets(int)>(1) in <androidx.core.view.WindowInsetsCompat$BuilderImpl: void applyInsetTypes()> ==> <androidx.core.view.WindowInsetsCompat: androidx.core.graphics.Insets getInsets(int)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<androidx.core.view.WindowInsetsCompat$Impl: androidx.core.graphics.Insets getInsets(int)>($i0) in <androidx.core.view.WindowInsetsCompat: androidx.core.graphics.Insets getInsets(int)> ==> <androidx.core.view.WindowInsetsCompat$Impl30: androidx.core.graphics.Insets getInsets(int)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<androidx.core.view.WindowInsetsCompat$Impl: androidx.core.graphics.Insets getInsets(int)>($i0) in <androidx.core.view.WindowInsetsCompat: androidx.core.graphics.Insets getInsets(int)> ==> <androidx.core.view.WindowInsetsCompat$Impl: androidx.core.graphics.Insets getInsets(int)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<androidx.core.view.WindowInsetsCompat$Impl: androidx.core.graphics.Insets getInsets(int)>($i0) in <androidx.core.view.WindowInsetsCompat: androidx.core.graphics.Insets getInsets(int)> ==> <androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getInsets(int)>
CLINIT edge: $r3 = staticinvoke <androidx.core.graphics.Insets: androidx.core.graphics.Insets toCompatInsets(android.graphics.Insets)>($r2) in <androidx.core.view.WindowInsetsCompat$Impl30: androidx.core.graphics.Insets getInsets(int)> ==> <androidx.core.graphics.Insets: void <clinit>()>
STATIC edge: $r3 = staticinvoke <androidx.core.graphics.Insets: androidx.core.graphics.Insets toCompatInsets(android.graphics.Insets)>($r2) in <androidx.core.view.WindowInsetsCompat$Impl30: androidx.core.graphics.Insets getInsets(int)> ==> <androidx.core.graphics.Insets: androidx.core.graphics.Insets toCompatInsets(android.graphics.Insets)>
STATIC edge: $i0 = staticinvoke <androidx.core.view.WindowInsetsCompat$TypeImpl30: int toPlatformType(int)>($i0) in <androidx.core.view.WindowInsetsCompat$Impl30: androidx.core.graphics.Insets getInsets(int)> ==> <androidx.core.view.WindowInsetsCompat$TypeImpl30: int toPlatformType(int)>
CLINIT edge: r1 = <androidx.core.graphics.Insets: androidx.core.graphics.Insets NONE> in <androidx.core.view.WindowInsetsCompat$Impl: androidx.core.graphics.Insets getInsets(int)> ==> <androidx.core.graphics.Insets: void <clinit>()>
CLINIT edge: $r0 = staticinvoke <androidx.core.graphics.Insets: androidx.core.graphics.Insets of(int,int,int,int)>($i0, $i1, $i2, $i3) in <androidx.core.graphics.Insets: androidx.core.graphics.Insets toCompatInsets(android.graphics.Insets)> ==> <androidx.core.graphics.Insets: void <clinit>()>
STATIC edge: $r0 = staticinvoke <androidx.core.graphics.Insets: androidx.core.graphics.Insets of(int,int,int,int)>($i0, $i1, $i2, $i3) in <androidx.core.graphics.Insets: androidx.core.graphics.Insets toCompatInsets(android.graphics.Insets)> ==> <androidx.core.graphics.Insets: androidx.core.graphics.Insets of(int,int,int,int)>
SPECIAL edge: $r1 = specialinvoke r0.<androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getInsets(int,boolean)>($i0, 0) in <androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getInsets(int)> ==> <androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getInsets(int,boolean)>
CLINIT edge: $r1 = <androidx.core.graphics.Insets: androidx.core.graphics.Insets NONE> in <androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getInsets(int,boolean)> ==> <androidx.core.graphics.Insets: void <clinit>()>
STATIC edge: $r1 = staticinvoke <androidx.core.graphics.Insets: androidx.core.graphics.Insets max(androidx.core.graphics.Insets,androidx.core.graphics.Insets)>($r1, $r2) in <androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getInsets(int,boolean)> ==> <androidx.core.graphics.Insets: androidx.core.graphics.Insets max(androidx.core.graphics.Insets,androidx.core.graphics.Insets)>
CLINIT edge: $r1 = staticinvoke <androidx.core.graphics.Insets: androidx.core.graphics.Insets max(androidx.core.graphics.Insets,androidx.core.graphics.Insets)>($r1, $r2) in <androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getInsets(int,boolean)> ==> <androidx.core.graphics.Insets: void <clinit>()>
VIRTUAL edge: $r2 = virtualinvoke r0.<androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getInsetsForType(int,boolean)>($i1, $z0) in <androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getInsets(int,boolean)> ==> <androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getInsetsForType(int,boolean)>
CLINIT edge: $r4 = <androidx.core.graphics.Insets: androidx.core.graphics.Insets NONE> in <androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getInsetsForType(int,boolean)> ==> <androidx.core.graphics.Insets: void <clinit>()>
STATIC edge: $r4 = staticinvoke <androidx.core.graphics.Insets: androidx.core.graphics.Insets of(int,int,int,int)>(0, $i1, 0, 0) in <androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getInsetsForType(int,boolean)> ==> <androidx.core.graphics.Insets: androidx.core.graphics.Insets of(int,int,int,int)>
STATIC edge: $i1 = staticinvoke <androidx.core.view.WindowInsetsCompat$Type: int indexOf(int)>(8) in <androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getInsetsForType(int,boolean)> ==> <androidx.core.view.WindowInsetsCompat$Type: int indexOf(int)>
CLINIT edge: $r4 = staticinvoke <androidx.core.graphics.Insets: androidx.core.graphics.Insets of(int,int,int,int)>($i0, 0, $i2, $i1) in <androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getInsetsForType(int,boolean)> ==> <androidx.core.graphics.Insets: void <clinit>()>
CLINIT edge: $r4 = <androidx.core.graphics.Insets: androidx.core.graphics.Insets NONE> in <androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getInsetsForType(int,boolean)> ==> <androidx.core.graphics.Insets: void <clinit>()>
CLINIT edge: $r6 = <androidx.core.graphics.Insets: androidx.core.graphics.Insets NONE> in <androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getInsetsForType(int,boolean)> ==> <androidx.core.graphics.Insets: void <clinit>()>
CLINIT edge: $r4 = staticinvoke <androidx.core.graphics.Insets: androidx.core.graphics.Insets of(int,int,int,int)>($i1, $i0, $i2, $i3) in <androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getInsetsForType(int,boolean)> ==> <androidx.core.graphics.Insets: void <clinit>()>
VIRTUAL edge: $r3 = virtualinvoke r0.<androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.view.DisplayCutoutCompat getDisplayCutout()>() in <androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getInsetsForType(int,boolean)> ==> <androidx.core.view.WindowInsetsCompat$Impl28: androidx.core.view.DisplayCutoutCompat getDisplayCutout()>
VIRTUAL edge: $r4 = virtualinvoke r0.<androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getTappableElementInsets()>() in <androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getInsetsForType(int,boolean)> ==> <androidx.core.view.WindowInsetsCompat$Impl29: androidx.core.graphics.Insets getTappableElementInsets()>
VIRTUAL edge: $r4 = virtualinvoke r0.<androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getMandatorySystemGestureInsets()>() in <androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getInsetsForType(int,boolean)> ==> <androidx.core.view.WindowInsetsCompat$Impl29: androidx.core.graphics.Insets getMandatorySystemGestureInsets()>
VIRTUAL edge: $r4 = virtualinvoke r0.<androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getSystemGestureInsets()>() in <androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getInsetsForType(int,boolean)> ==> <androidx.core.view.WindowInsetsCompat$Impl29: androidx.core.graphics.Insets getSystemGestureInsets()>
VIRTUAL edge: $r1 = virtualinvoke r0.<androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getSystemWindowInsets()>() in <androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getInsetsForType(int,boolean)> ==> <androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getSystemWindowInsets()>
SPECIAL edge: $r4 = specialinvoke r0.<androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getRootStableInsets()>() in <androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getInsetsForType(int,boolean)> ==> <androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getRootStableInsets()>
VIRTUAL edge: $r1 = virtualinvoke r0.<androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getStableInsets()>() in <androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getInsetsForType(int,boolean)> ==> <androidx.core.view.WindowInsetsCompat$Impl21: androidx.core.graphics.Insets getStableInsets()>
SPECIAL edge: $r4 = specialinvoke r0.<androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getRootStableInsets()>() in <androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getInsetsForType(int,boolean)> ==> <androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getRootStableInsets()>
VIRTUAL edge: $r4 = virtualinvoke r0.<androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getSystemWindowInsets()>() in <androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getInsetsForType(int,boolean)> ==> <androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getSystemWindowInsets()>
VIRTUAL edge: $r4 = virtualinvoke r0.<androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getSystemWindowInsets()>() in <androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getInsetsForType(int,boolean)> ==> <androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getSystemWindowInsets()>
VIRTUAL edge: $r3 = virtualinvoke r0.<androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.view.DisplayCutoutCompat getDisplayCutout()>() in <androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getInsetsForType(int,boolean)> ==> <androidx.core.view.WindowInsetsCompat$Impl: androidx.core.view.DisplayCutoutCompat getDisplayCutout()>
VIRTUAL edge: $r4 = virtualinvoke r0.<androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getTappableElementInsets()>() in <androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getInsetsForType(int,boolean)> ==> <androidx.core.view.WindowInsetsCompat$Impl: androidx.core.graphics.Insets getTappableElementInsets()>
VIRTUAL edge: $r4 = virtualinvoke r0.<androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getMandatorySystemGestureInsets()>() in <androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getInsetsForType(int,boolean)> ==> <androidx.core.view.WindowInsetsCompat$Impl: androidx.core.graphics.Insets getMandatorySystemGestureInsets()>
VIRTUAL edge: $r4 = virtualinvoke r0.<androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getSystemGestureInsets()>() in <androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getInsetsForType(int,boolean)> ==> <androidx.core.view.WindowInsetsCompat$Impl: androidx.core.graphics.Insets getSystemGestureInsets()>
VIRTUAL edge: $r1 = virtualinvoke r0.<androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getStableInsets()>() in <androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getInsetsForType(int,boolean)> ==> <androidx.core.view.WindowInsetsCompat$Impl: androidx.core.graphics.Insets getStableInsets()>
STATIC edge: $r3 = staticinvoke <androidx.core.view.DisplayCutoutCompat: androidx.core.view.DisplayCutoutCompat wrap(android.view.DisplayCutout)>($r2) in <androidx.core.view.WindowInsetsCompat$Impl28: androidx.core.view.DisplayCutoutCompat getDisplayCutout()> ==> <androidx.core.view.DisplayCutoutCompat: androidx.core.view.DisplayCutoutCompat wrap(android.view.DisplayCutout)>
CLINIT edge: $r1 = staticinvoke <androidx.core.graphics.Insets: androidx.core.graphics.Insets toCompatInsets(android.graphics.Insets)>($r3) in <androidx.core.view.WindowInsetsCompat$Impl29: androidx.core.graphics.Insets getTappableElementInsets()> ==> <androidx.core.graphics.Insets: void <clinit>()>
STATIC edge: $r1 = staticinvoke <androidx.core.graphics.Insets: androidx.core.graphics.Insets toCompatInsets(android.graphics.Insets)>($r3) in <androidx.core.view.WindowInsetsCompat$Impl29: androidx.core.graphics.Insets getTappableElementInsets()> ==> <androidx.core.graphics.Insets: androidx.core.graphics.Insets toCompatInsets(android.graphics.Insets)>
CLINIT edge: $r1 = staticinvoke <androidx.core.graphics.Insets: androidx.core.graphics.Insets toCompatInsets(android.graphics.Insets)>($r3) in <androidx.core.view.WindowInsetsCompat$Impl29: androidx.core.graphics.Insets getMandatorySystemGestureInsets()> ==> <androidx.core.graphics.Insets: void <clinit>()>
STATIC edge: $r1 = staticinvoke <androidx.core.graphics.Insets: androidx.core.graphics.Insets toCompatInsets(android.graphics.Insets)>($r3) in <androidx.core.view.WindowInsetsCompat$Impl29: androidx.core.graphics.Insets getMandatorySystemGestureInsets()> ==> <androidx.core.graphics.Insets: androidx.core.graphics.Insets toCompatInsets(android.graphics.Insets)>
CLINIT edge: $r1 = staticinvoke <androidx.core.graphics.Insets: androidx.core.graphics.Insets toCompatInsets(android.graphics.Insets)>($r3) in <androidx.core.view.WindowInsetsCompat$Impl29: androidx.core.graphics.Insets getSystemGestureInsets()> ==> <androidx.core.graphics.Insets: void <clinit>()>
STATIC edge: $r1 = staticinvoke <androidx.core.graphics.Insets: androidx.core.graphics.Insets toCompatInsets(android.graphics.Insets)>($r3) in <androidx.core.view.WindowInsetsCompat$Impl29: androidx.core.graphics.Insets getSystemGestureInsets()> ==> <androidx.core.graphics.Insets: androidx.core.graphics.Insets toCompatInsets(android.graphics.Insets)>
CLINIT edge: $r1 = staticinvoke <androidx.core.graphics.Insets: androidx.core.graphics.Insets of(int,int,int,int)>($i0, $i1, $i2, $i3) in <androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getSystemWindowInsets()> ==> <androidx.core.graphics.Insets: void <clinit>()>
STATIC edge: $r1 = staticinvoke <androidx.core.graphics.Insets: androidx.core.graphics.Insets of(int,int,int,int)>($i0, $i1, $i2, $i3) in <androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getSystemWindowInsets()> ==> <androidx.core.graphics.Insets: androidx.core.graphics.Insets of(int,int,int,int)>
CLINIT edge: $r1 = <androidx.core.graphics.Insets: androidx.core.graphics.Insets NONE> in <androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getRootStableInsets()> ==> <androidx.core.graphics.Insets: void <clinit>()>
CLINIT edge: $r1 = staticinvoke <androidx.core.graphics.Insets: androidx.core.graphics.Insets of(int,int,int,int)>($i0, $i1, $i2, $i3) in <androidx.core.view.WindowInsetsCompat$Impl21: androidx.core.graphics.Insets getStableInsets()> ==> <androidx.core.graphics.Insets: void <clinit>()>
STATIC edge: $r1 = staticinvoke <androidx.core.graphics.Insets: androidx.core.graphics.Insets of(int,int,int,int)>($i0, $i1, $i2, $i3) in <androidx.core.view.WindowInsetsCompat$Impl21: androidx.core.graphics.Insets getStableInsets()> ==> <androidx.core.graphics.Insets: androidx.core.graphics.Insets of(int,int,int,int)>
CLINIT edge: r1 = <androidx.core.graphics.Insets: androidx.core.graphics.Insets NONE> in <androidx.core.view.WindowInsetsCompat$Impl: androidx.core.graphics.Insets getStableInsets()> ==> <androidx.core.graphics.Insets: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<androidx.core.view.DisplayCutoutCompat: void <init>(android.view.DisplayCutout)>($r1) in <androidx.core.view.DisplayCutoutCompat: androidx.core.view.DisplayCutoutCompat wrap(android.view.DisplayCutout)> ==> <androidx.core.view.DisplayCutoutCompat: void <init>(android.view.DisplayCutout)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.core.view.DisplayCutoutCompat: void <init>(android.view.DisplayCutout)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke r0.<androidx.core.view.WindowInsetsCompat$Impl: androidx.core.graphics.Insets getSystemWindowInsets()>() in <androidx.core.view.WindowInsetsCompat$Impl: androidx.core.graphics.Insets getSystemGestureInsets()> ==> <androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getSystemWindowInsets()>
VIRTUAL edge: $r1 = virtualinvoke r0.<androidx.core.view.WindowInsetsCompat$Impl: androidx.core.graphics.Insets getSystemWindowInsets()>() in <androidx.core.view.WindowInsetsCompat$Impl: androidx.core.graphics.Insets getMandatorySystemGestureInsets()> ==> <androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getSystemWindowInsets()>
VIRTUAL edge: $r1 = virtualinvoke r0.<androidx.core.view.WindowInsetsCompat$Impl: androidx.core.graphics.Insets getSystemWindowInsets()>() in <androidx.core.view.WindowInsetsCompat$Impl: androidx.core.graphics.Insets getTappableElementInsets()> ==> <androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getSystemWindowInsets()>
VIRTUAL edge: $i1 = virtualinvoke $r3.<androidx.core.view.DisplayCutoutCompat: int getSafeInsetLeft()>() in <androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getInsetsForType(int,boolean)> ==> <androidx.core.view.DisplayCutoutCompat: int getSafeInsetLeft()>
VIRTUAL edge: $i0 = virtualinvoke $r3.<androidx.core.view.DisplayCutoutCompat: int getSafeInsetTop()>() in <androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getInsetsForType(int,boolean)> ==> <androidx.core.view.DisplayCutoutCompat: int getSafeInsetTop()>
VIRTUAL edge: $i2 = virtualinvoke $r3.<androidx.core.view.DisplayCutoutCompat: int getSafeInsetRight()>() in <androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getInsetsForType(int,boolean)> ==> <androidx.core.view.DisplayCutoutCompat: int getSafeInsetRight()>
VIRTUAL edge: $i3 = virtualinvoke $r3.<androidx.core.view.DisplayCutoutCompat: int getSafeInsetBottom()>() in <androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getInsetsForType(int,boolean)> ==> <androidx.core.view.DisplayCutoutCompat: int getSafeInsetBottom()>
STATIC edge: $i0 = staticinvoke <androidx.core.view.DisplayCutoutCompat$Api28Impl: int getSafeInsetLeft(android.view.DisplayCutout)>($r1) in <androidx.core.view.DisplayCutoutCompat: int getSafeInsetLeft()> ==> <androidx.core.view.DisplayCutoutCompat$Api28Impl: int getSafeInsetLeft(android.view.DisplayCutout)>
STATIC edge: $i0 = staticinvoke <androidx.core.view.DisplayCutoutCompat$Api28Impl: int getSafeInsetTop(android.view.DisplayCutout)>($r1) in <androidx.core.view.DisplayCutoutCompat: int getSafeInsetTop()> ==> <androidx.core.view.DisplayCutoutCompat$Api28Impl: int getSafeInsetTop(android.view.DisplayCutout)>
STATIC edge: $i0 = staticinvoke <androidx.core.view.DisplayCutoutCompat$Api28Impl: int getSafeInsetRight(android.view.DisplayCutout)>($r1) in <androidx.core.view.DisplayCutoutCompat: int getSafeInsetRight()> ==> <androidx.core.view.DisplayCutoutCompat$Api28Impl: int getSafeInsetRight(android.view.DisplayCutout)>
STATIC edge: $i0 = staticinvoke <androidx.core.view.DisplayCutoutCompat$Api28Impl: int getSafeInsetBottom(android.view.DisplayCutout)>($r1) in <androidx.core.view.DisplayCutoutCompat: int getSafeInsetBottom()> ==> <androidx.core.view.DisplayCutoutCompat$Api28Impl: int getSafeInsetBottom(android.view.DisplayCutout)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<androidx.core.graphics.Insets: boolean equals(java.lang.Object)>($r6) in <androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getInsetsForType(int,boolean)> ==> <androidx.core.graphics.Insets: boolean equals(java.lang.Object)>
VIRTUAL edge: $r3 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>() in <androidx.core.graphics.Insets: boolean equals(java.lang.Object)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: virtualinvoke $r4.<androidx.core.view.WindowInsetsCompat: void setOverriddenInsets(androidx.core.graphics.Insets[])>($r1) in <androidx.core.view.WindowInsetsCompat$BuilderImpl29: androidx.core.view.WindowInsetsCompat build()> ==> <androidx.core.view.WindowInsetsCompat: void setOverriddenInsets(androidx.core.graphics.Insets[])>
VIRTUAL edge: virtualinvoke r0.<androidx.core.view.WindowInsetsCompat$BuilderImpl29: void applyInsetTypes()>() in <androidx.core.view.WindowInsetsCompat$BuilderImpl29: androidx.core.view.WindowInsetsCompat build()> ==> <androidx.core.view.WindowInsetsCompat$BuilderImpl: void applyInsetTypes()>
VIRTUAL edge: virtualinvoke r0.<androidx.core.view.WindowInsetsCompat$BuilderImpl: void setSystemWindowInsets(androidx.core.graphics.Insets)>($r2) in <androidx.core.view.WindowInsetsCompat$BuilderImpl: void applyInsetTypes()> ==> <androidx.core.view.WindowInsetsCompat$BuilderImpl29: void setSystemWindowInsets(androidx.core.graphics.Insets)>
VIRTUAL edge: virtualinvoke r0.<androidx.core.view.WindowInsetsCompat$BuilderImpl: void setSystemGestureInsets(androidx.core.graphics.Insets)>($r2) in <androidx.core.view.WindowInsetsCompat$BuilderImpl: void applyInsetTypes()> ==> <androidx.core.view.WindowInsetsCompat$BuilderImpl29: void setSystemGestureInsets(androidx.core.graphics.Insets)>
VIRTUAL edge: virtualinvoke r0.<androidx.core.view.WindowInsetsCompat$BuilderImpl: void setMandatorySystemGestureInsets(androidx.core.graphics.Insets)>($r2) in <androidx.core.view.WindowInsetsCompat$BuilderImpl: void applyInsetTypes()> ==> <androidx.core.view.WindowInsetsCompat$BuilderImpl29: void setMandatorySystemGestureInsets(androidx.core.graphics.Insets)>
VIRTUAL edge: virtualinvoke r0.<androidx.core.view.WindowInsetsCompat$BuilderImpl: void setTappableElementInsets(androidx.core.graphics.Insets)>($r2) in <androidx.core.view.WindowInsetsCompat$BuilderImpl: void applyInsetTypes()> ==> <androidx.core.view.WindowInsetsCompat$BuilderImpl29: void setTappableElementInsets(androidx.core.graphics.Insets)>
VIRTUAL edge: $r2 = virtualinvoke $r3.<androidx.core.graphics.Insets: android.graphics.Insets toPlatformInsets()>() in <androidx.core.view.WindowInsetsCompat$BuilderImpl29: void setTappableElementInsets(androidx.core.graphics.Insets)> ==> <androidx.core.graphics.Insets: android.graphics.Insets toPlatformInsets()>
STATIC edge: $r1 = staticinvoke <androidx.core.graphics.Insets$Api29Impl: android.graphics.Insets of(int,int,int,int)>($i3, $i0, $i1, $i2) in <androidx.core.graphics.Insets: android.graphics.Insets toPlatformInsets()> ==> <androidx.core.graphics.Insets$Api29Impl: android.graphics.Insets of(int,int,int,int)>
VIRTUAL edge: $r2 = virtualinvoke $r3.<androidx.core.graphics.Insets: android.graphics.Insets toPlatformInsets()>() in <androidx.core.view.WindowInsetsCompat$BuilderImpl29: void setMandatorySystemGestureInsets(androidx.core.graphics.Insets)> ==> <androidx.core.graphics.Insets: android.graphics.Insets toPlatformInsets()>
VIRTUAL edge: $r2 = virtualinvoke $r3.<androidx.core.graphics.Insets: android.graphics.Insets toPlatformInsets()>() in <androidx.core.view.WindowInsetsCompat$BuilderImpl29: void setSystemGestureInsets(androidx.core.graphics.Insets)> ==> <androidx.core.graphics.Insets: android.graphics.Insets toPlatformInsets()>
VIRTUAL edge: $r2 = virtualinvoke $r3.<androidx.core.graphics.Insets: android.graphics.Insets toPlatformInsets()>() in <androidx.core.view.WindowInsetsCompat$BuilderImpl29: void setSystemWindowInsets(androidx.core.graphics.Insets)> ==> <androidx.core.graphics.Insets: android.graphics.Insets toPlatformInsets()>
VIRTUAL edge: virtualinvoke $r2.<androidx.core.view.WindowInsetsCompat$Impl: void copyRootViewBounds(android.view.View)>($r1) in <androidx.core.view.WindowInsetsCompat: void copyRootViewBounds(android.view.View)> ==> <androidx.core.view.WindowInsetsCompat$Impl20: void copyRootViewBounds(android.view.View)>
VIRTUAL edge: virtualinvoke $r2.<androidx.core.view.WindowInsetsCompat$Impl: void copyRootViewBounds(android.view.View)>($r1) in <androidx.core.view.WindowInsetsCompat: void copyRootViewBounds(android.view.View)> ==> <androidx.core.view.WindowInsetsCompat$Impl30: void copyRootViewBounds(android.view.View)>
CLINIT edge: $r3 = <androidx.core.graphics.Insets: androidx.core.graphics.Insets NONE> in <androidx.core.view.WindowInsetsCompat$Impl20: void copyRootViewBounds(android.view.View)> ==> <androidx.core.graphics.Insets: void <clinit>()>
SPECIAL edge: $r1 = specialinvoke r0.<androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getVisibleInsets(android.view.View)>($r2) in <androidx.core.view.WindowInsetsCompat$Impl20: void copyRootViewBounds(android.view.View)> ==> <androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getVisibleInsets(android.view.View)>
VIRTUAL edge: virtualinvoke r0.<androidx.core.view.WindowInsetsCompat$Impl20: void setRootViewData(androidx.core.graphics.Insets)>($r3) in <androidx.core.view.WindowInsetsCompat$Impl20: void copyRootViewBounds(android.view.View)> ==> <androidx.core.view.WindowInsetsCompat$Impl20: void setRootViewData(androidx.core.graphics.Insets)>
STATIC edge: $r9 = staticinvoke <androidx.core.graphics.Insets: androidx.core.graphics.Insets of(android.graphics.Rect)>($r8) in <androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getVisibleInsets(android.view.View)> ==> <androidx.core.graphics.Insets: androidx.core.graphics.Insets of(android.graphics.Rect)>
STATIC edge: staticinvoke <androidx.core.view.WindowInsetsCompat$Impl20: void loadReflectionField()>() in <androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getVisibleInsets(android.view.View)> ==> <androidx.core.view.WindowInsetsCompat$Impl20: void loadReflectionField()>
CLINIT edge: $r9 = staticinvoke <androidx.core.graphics.Insets: androidx.core.graphics.Insets of(android.graphics.Rect)>($r8) in <androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getVisibleInsets(android.view.View)> ==> <androidx.core.graphics.Insets: void <clinit>()>
CLINIT edge: $z0 = <androidx.core.view.WindowInsetsCompat$Impl20: boolean sVisibleRectReflectionFetched> in <androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getVisibleInsets(android.view.View)> ==> <androidx.core.view.WindowInsetsCompat$Impl20: void <clinit>()>
CLINIT edge: $r0 = staticinvoke <androidx.core.graphics.Insets: androidx.core.graphics.Insets of(int,int,int,int)>($i0, $i1, $i2, $i3) in <androidx.core.graphics.Insets: androidx.core.graphics.Insets of(android.graphics.Rect)> ==> <androidx.core.graphics.Insets: void <clinit>()>
STATIC edge: $r0 = staticinvoke <androidx.core.graphics.Insets: androidx.core.graphics.Insets of(int,int,int,int)>($i0, $i1, $i2, $i3) in <androidx.core.graphics.Insets: androidx.core.graphics.Insets of(android.graphics.Rect)> ==> <androidx.core.graphics.Insets: androidx.core.graphics.Insets of(int,int,int,int)>
CLINIT edge: <androidx.core.view.WindowInsetsCompat$Impl20: java.lang.reflect.Method sGetViewRootImplMethod> = $r2 in <androidx.core.view.WindowInsetsCompat$Impl20: void loadReflectionField()> ==> <androidx.core.view.WindowInsetsCompat$Impl20: void <clinit>()>
STATIC edge: $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("android.view.ViewRootImpl") in <androidx.core.view.WindowInsetsCompat$Impl20: void loadReflectionField()> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
STATIC edge: $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("android.view.View$AttachInfo") in <androidx.core.view.WindowInsetsCompat$Impl20: void loadReflectionField()> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r4.<java.lang.ReflectiveOperationException: java.lang.String getMessage()>() in <androidx.core.view.WindowInsetsCompat$Impl20: void loadReflectionField()> ==> <java.lang.Throwable: java.lang.String getMessage()>
VIRTUAL edge: $r2 = virtualinvoke $r0.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("getViewRootImpl", $r1) in <androidx.core.view.WindowInsetsCompat$Impl20: void loadReflectionField()> ==> <java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>
VIRTUAL edge: $r12 = virtualinvoke $r10.<java.lang.ReflectiveOperationException: java.lang.String getMessage()>() in <androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getVisibleInsets(android.view.View)> ==> <java.lang.Throwable: java.lang.String getMessage()>
SPECIAL edge: specialinvoke $r7.<java.lang.NullPointerException: void <init>()>() in <androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getVisibleInsets(android.view.View)> ==> <java.lang.NullPointerException: void <init>()>
VIRTUAL edge: virtualinvoke $r2.<androidx.core.view.WindowInsetsCompat$Impl: void setRootWindowInsets(androidx.core.view.WindowInsetsCompat)>($r1) in <androidx.core.view.WindowInsetsCompat: void setRootWindowInsets(androidx.core.view.WindowInsetsCompat)> ==> <androidx.core.view.WindowInsetsCompat$Impl20: void setRootWindowInsets(androidx.core.view.WindowInsetsCompat)>
VIRTUAL edge: $r1 = virtualinvoke $r1.<androidx.core.view.WindowInsetsCompat: androidx.core.view.WindowInsetsCompat consumeDisplayCutout()>() in <androidx.core.view.WindowInsetsCompat$Impl: void <clinit>()> ==> <androidx.core.view.WindowInsetsCompat: androidx.core.view.WindowInsetsCompat consumeDisplayCutout()>
VIRTUAL edge: $r1 = virtualinvoke $r1.<androidx.core.view.WindowInsetsCompat: androidx.core.view.WindowInsetsCompat consumeStableInsets()>() in <androidx.core.view.WindowInsetsCompat$Impl: void <clinit>()> ==> <androidx.core.view.WindowInsetsCompat: androidx.core.view.WindowInsetsCompat consumeStableInsets()>
VIRTUAL edge: $r1 = virtualinvoke $r1.<androidx.core.view.WindowInsetsCompat: androidx.core.view.WindowInsetsCompat consumeSystemWindowInsets()>() in <androidx.core.view.WindowInsetsCompat$Impl: void <clinit>()> ==> <androidx.core.view.WindowInsetsCompat: androidx.core.view.WindowInsetsCompat consumeSystemWindowInsets()>
VIRTUAL edge: r0 = virtualinvoke $r1.<androidx.core.view.WindowInsetsCompat$Impl: androidx.core.view.WindowInsetsCompat consumeSystemWindowInsets()>() in <androidx.core.view.WindowInsetsCompat: androidx.core.view.WindowInsetsCompat consumeSystemWindowInsets()> ==> <androidx.core.view.WindowInsetsCompat$Impl21: androidx.core.view.WindowInsetsCompat consumeSystemWindowInsets()>
STATIC edge: $r2 = staticinvoke <androidx.core.view.WindowInsetsCompat: androidx.core.view.WindowInsetsCompat toWindowInsetsCompat(android.view.WindowInsets)>($r1) in <androidx.core.view.WindowInsetsCompat$Impl21: androidx.core.view.WindowInsetsCompat consumeSystemWindowInsets()> ==> <androidx.core.view.WindowInsetsCompat: androidx.core.view.WindowInsetsCompat toWindowInsetsCompat(android.view.WindowInsets)>
VIRTUAL edge: r0 = virtualinvoke $r1.<androidx.core.view.WindowInsetsCompat$Impl: androidx.core.view.WindowInsetsCompat consumeStableInsets()>() in <androidx.core.view.WindowInsetsCompat: androidx.core.view.WindowInsetsCompat consumeStableInsets()> ==> <androidx.core.view.WindowInsetsCompat$Impl21: androidx.core.view.WindowInsetsCompat consumeStableInsets()>
STATIC edge: $r2 = staticinvoke <androidx.core.view.WindowInsetsCompat: androidx.core.view.WindowInsetsCompat toWindowInsetsCompat(android.view.WindowInsets)>($r1) in <androidx.core.view.WindowInsetsCompat$Impl21: androidx.core.view.WindowInsetsCompat consumeStableInsets()> ==> <androidx.core.view.WindowInsetsCompat: androidx.core.view.WindowInsetsCompat toWindowInsetsCompat(android.view.WindowInsets)>
VIRTUAL edge: r0 = virtualinvoke $r1.<androidx.core.view.WindowInsetsCompat$Impl: androidx.core.view.WindowInsetsCompat consumeDisplayCutout()>() in <androidx.core.view.WindowInsetsCompat: androidx.core.view.WindowInsetsCompat consumeDisplayCutout()> ==> <androidx.core.view.WindowInsetsCompat$Impl28: androidx.core.view.WindowInsetsCompat consumeDisplayCutout()>
VIRTUAL edge: r0 = virtualinvoke $r1.<androidx.core.view.WindowInsetsCompat$Impl: androidx.core.view.WindowInsetsCompat consumeDisplayCutout()>() in <androidx.core.view.WindowInsetsCompat: androidx.core.view.WindowInsetsCompat consumeDisplayCutout()> ==> <androidx.core.view.WindowInsetsCompat$Impl: androidx.core.view.WindowInsetsCompat consumeDisplayCutout()>
CLINIT edge: $r2 = staticinvoke <androidx.core.view.WindowInsetsCompat: androidx.core.view.WindowInsetsCompat toWindowInsetsCompat(android.view.WindowInsets)>($r1) in <androidx.core.view.WindowInsetsCompat$Impl28: androidx.core.view.WindowInsetsCompat consumeDisplayCutout()> ==> <androidx.core.view.WindowInsetsCompat: void <clinit>()>
STATIC edge: $r2 = staticinvoke <androidx.core.view.WindowInsetsCompat: androidx.core.view.WindowInsetsCompat toWindowInsetsCompat(android.view.WindowInsets)>($r1) in <androidx.core.view.WindowInsetsCompat$Impl28: androidx.core.view.WindowInsetsCompat consumeDisplayCutout()> ==> <androidx.core.view.WindowInsetsCompat: androidx.core.view.WindowInsetsCompat toWindowInsetsCompat(android.view.WindowInsets)>
VIRTUAL edge: r0 = virtualinvoke $r1.<androidx.core.view.WindowInsetsCompat$Impl: androidx.core.view.WindowInsetsCompat consumeSystemWindowInsets()>() in <androidx.core.view.WindowInsetsCompat: androidx.core.view.WindowInsetsCompat consumeSystemWindowInsets()> ==> <androidx.core.view.WindowInsetsCompat$Impl: androidx.core.view.WindowInsetsCompat consumeSystemWindowInsets()>
VIRTUAL edge: r0 = virtualinvoke $r1.<androidx.core.view.WindowInsetsCompat$Impl: androidx.core.view.WindowInsetsCompat consumeStableInsets()>() in <androidx.core.view.WindowInsetsCompat: androidx.core.view.WindowInsetsCompat consumeStableInsets()> ==> <androidx.core.view.WindowInsetsCompat$Impl: androidx.core.view.WindowInsetsCompat consumeStableInsets()>
INTERFACE edge: $r3 = interfaceinvoke $r6.<androidx.core.view.OnApplyWindowInsetsListener: androidx.core.view.WindowInsetsCompat onApplyWindowInsets(android.view.View,androidx.core.view.WindowInsetsCompat)>($r1, $r3) in <androidx.core.view.ViewCompat$Api21Impl$1: android.view.WindowInsets onApplyWindowInsets(android.view.View,android.view.WindowInsets)> ==> <androidx.appcompat.app.AppCompatDelegateImpl$3: androidx.core.view.WindowInsetsCompat onApplyWindowInsets(android.view.View,androidx.core.view.WindowInsetsCompat)>
CLINIT edge: $r2 = staticinvoke <androidx.core.view.ViewCompat: androidx.core.view.WindowInsetsCompat onApplyWindowInsets(android.view.View,androidx.core.view.WindowInsetsCompat)>($r1, $r2) in <androidx.appcompat.app.AppCompatDelegateImpl$3: androidx.core.view.WindowInsetsCompat onApplyWindowInsets(android.view.View,androidx.core.view.WindowInsetsCompat)> ==> <androidx.core.view.ViewCompat: void <clinit>()>
STATIC edge: $r2 = staticinvoke <androidx.core.view.ViewCompat: androidx.core.view.WindowInsetsCompat onApplyWindowInsets(android.view.View,androidx.core.view.WindowInsetsCompat)>($r1, $r2) in <androidx.appcompat.app.AppCompatDelegateImpl$3: androidx.core.view.WindowInsetsCompat onApplyWindowInsets(android.view.View,androidx.core.view.WindowInsetsCompat)> ==> <androidx.core.view.ViewCompat: androidx.core.view.WindowInsetsCompat onApplyWindowInsets(android.view.View,androidx.core.view.WindowInsetsCompat)>
CLINIT edge: $r0 = staticinvoke <androidx.core.view.WindowInsetsCompat: androidx.core.view.WindowInsetsCompat toWindowInsetsCompat(android.view.WindowInsets,android.view.View)>($r3, $r1) in <androidx.core.view.ViewCompat: androidx.core.view.WindowInsetsCompat onApplyWindowInsets(android.view.View,androidx.core.view.WindowInsetsCompat)> ==> <androidx.core.view.WindowInsetsCompat: void <clinit>()>
STATIC edge: $r0 = staticinvoke <androidx.core.view.WindowInsetsCompat: androidx.core.view.WindowInsetsCompat toWindowInsetsCompat(android.view.WindowInsets,android.view.View)>($r3, $r1) in <androidx.core.view.ViewCompat: androidx.core.view.WindowInsetsCompat onApplyWindowInsets(android.view.View,androidx.core.view.WindowInsetsCompat)> ==> <androidx.core.view.WindowInsetsCompat: androidx.core.view.WindowInsetsCompat toWindowInsetsCompat(android.view.WindowInsets,android.view.View)>
STATIC edge: $r3 = staticinvoke <androidx.core.view.ViewCompat$Api20Impl: android.view.WindowInsets onApplyWindowInsets(android.view.View,android.view.WindowInsets)>($r1, $r2) in <androidx.core.view.ViewCompat: androidx.core.view.WindowInsetsCompat onApplyWindowInsets(android.view.View,androidx.core.view.WindowInsetsCompat)> ==> <androidx.core.view.ViewCompat$Api20Impl: android.view.WindowInsets onApplyWindowInsets(android.view.View,android.view.WindowInsets)>
VIRTUAL edge: $r2 = virtualinvoke $r0.<androidx.core.view.WindowInsetsCompat: android.view.WindowInsets toWindowInsets()>() in <androidx.core.view.ViewCompat: androidx.core.view.WindowInsetsCompat onApplyWindowInsets(android.view.View,androidx.core.view.WindowInsetsCompat)> ==> <androidx.core.view.WindowInsetsCompat: android.view.WindowInsets toWindowInsets()>
VIRTUAL edge: $i0 = virtualinvoke $r2.<androidx.core.view.WindowInsetsCompat: int getSystemWindowInsetTop()>() in <androidx.appcompat.app.AppCompatDelegateImpl$3: androidx.core.view.WindowInsetsCompat onApplyWindowInsets(android.view.View,androidx.core.view.WindowInsetsCompat)> ==> <androidx.core.view.WindowInsetsCompat: int getSystemWindowInsetTop()>
VIRTUAL edge: $i0 = virtualinvoke $r2.<androidx.core.view.WindowInsetsCompat: int getSystemWindowInsetLeft()>() in <androidx.appcompat.app.AppCompatDelegateImpl$3: androidx.core.view.WindowInsetsCompat onApplyWindowInsets(android.view.View,androidx.core.view.WindowInsetsCompat)> ==> <androidx.core.view.WindowInsetsCompat: int getSystemWindowInsetLeft()>
VIRTUAL edge: $i2 = virtualinvoke $r2.<androidx.core.view.WindowInsetsCompat: int getSystemWindowInsetRight()>() in <androidx.appcompat.app.AppCompatDelegateImpl$3: androidx.core.view.WindowInsetsCompat onApplyWindowInsets(android.view.View,androidx.core.view.WindowInsetsCompat)> ==> <androidx.core.view.WindowInsetsCompat: int getSystemWindowInsetRight()>
VIRTUAL edge: $i3 = virtualinvoke $r2.<androidx.core.view.WindowInsetsCompat: int getSystemWindowInsetBottom()>() in <androidx.appcompat.app.AppCompatDelegateImpl$3: androidx.core.view.WindowInsetsCompat onApplyWindowInsets(android.view.View,androidx.core.view.WindowInsetsCompat)> ==> <androidx.core.view.WindowInsetsCompat: int getSystemWindowInsetBottom()>
VIRTUAL edge: $r2 = virtualinvoke $r2.<androidx.core.view.WindowInsetsCompat: androidx.core.view.WindowInsetsCompat replaceSystemWindowInsets(int,int,int,int)>($i0, $i1, $i2, $i3) in <androidx.appcompat.app.AppCompatDelegateImpl$3: androidx.core.view.WindowInsetsCompat onApplyWindowInsets(android.view.View,androidx.core.view.WindowInsetsCompat)> ==> <androidx.core.view.WindowInsetsCompat: androidx.core.view.WindowInsetsCompat replaceSystemWindowInsets(int,int,int,int)>
CLINIT edge: $r2 = staticinvoke <androidx.core.graphics.Insets: androidx.core.graphics.Insets of(int,int,int,int)>($i3, $i0, $i1, $i2) in <androidx.core.view.WindowInsetsCompat: androidx.core.view.WindowInsetsCompat replaceSystemWindowInsets(int,int,int,int)> ==> <androidx.core.graphics.Insets: void <clinit>()>
STATIC edge: $r2 = staticinvoke <androidx.core.graphics.Insets: androidx.core.graphics.Insets of(int,int,int,int)>($i3, $i0, $i1, $i2) in <androidx.core.view.WindowInsetsCompat: androidx.core.view.WindowInsetsCompat replaceSystemWindowInsets(int,int,int,int)> ==> <androidx.core.graphics.Insets: androidx.core.graphics.Insets of(int,int,int,int)>
SPECIAL edge: specialinvoke $r1.<androidx.core.view.WindowInsetsCompat$Builder: void <init>(androidx.core.view.WindowInsetsCompat)>(r0) in <androidx.core.view.WindowInsetsCompat: androidx.core.view.WindowInsetsCompat replaceSystemWindowInsets(int,int,int,int)> ==> <androidx.core.view.WindowInsetsCompat$Builder: void <init>(androidx.core.view.WindowInsetsCompat)>
VIRTUAL edge: $r1 = virtualinvoke $r1.<androidx.core.view.WindowInsetsCompat$Builder: androidx.core.view.WindowInsetsCompat$Builder setSystemWindowInsets(androidx.core.graphics.Insets)>($r2) in <androidx.core.view.WindowInsetsCompat: androidx.core.view.WindowInsetsCompat replaceSystemWindowInsets(int,int,int,int)> ==> <androidx.core.view.WindowInsetsCompat$Builder: androidx.core.view.WindowInsetsCompat$Builder setSystemWindowInsets(androidx.core.graphics.Insets)>
VIRTUAL edge: r0 = virtualinvoke $r1.<androidx.core.view.WindowInsetsCompat$Builder: androidx.core.view.WindowInsetsCompat build()>() in <androidx.core.view.WindowInsetsCompat: androidx.core.view.WindowInsetsCompat replaceSystemWindowInsets(int,int,int,int)> ==> <androidx.core.view.WindowInsetsCompat$Builder: androidx.core.view.WindowInsetsCompat build()>
CLINIT edge: $r4 = new androidx.core.view.WindowInsetsCompat$BuilderImpl20 in <androidx.core.view.WindowInsetsCompat$Builder: void <init>(androidx.core.view.WindowInsetsCompat)> ==> <androidx.core.view.WindowInsetsCompat$BuilderImpl20: void <clinit>()>
SPECIAL edge: specialinvoke $r4.<androidx.core.view.WindowInsetsCompat$BuilderImpl20: void <init>(androidx.core.view.WindowInsetsCompat)>($r1) in <androidx.core.view.WindowInsetsCompat$Builder: void <init>(androidx.core.view.WindowInsetsCompat)> ==> <androidx.core.view.WindowInsetsCompat$BuilderImpl20: void <init>(androidx.core.view.WindowInsetsCompat)>
SPECIAL edge: specialinvoke r0.<androidx.core.view.WindowInsetsCompat$BuilderImpl: void <init>(androidx.core.view.WindowInsetsCompat)>($r2) in <androidx.core.view.WindowInsetsCompat$BuilderImpl20: void <init>(androidx.core.view.WindowInsetsCompat)> ==> <androidx.core.view.WindowInsetsCompat$BuilderImpl: void <init>(androidx.core.view.WindowInsetsCompat)>
SPECIAL edge: specialinvoke $r3.<androidx.core.view.WindowInsetsCompat$BuilderImpl29: void <init>(androidx.core.view.WindowInsetsCompat)>($r1) in <androidx.core.view.WindowInsetsCompat$Builder: void <init>(androidx.core.view.WindowInsetsCompat)> ==> <androidx.core.view.WindowInsetsCompat$BuilderImpl29: void <init>(androidx.core.view.WindowInsetsCompat)>
SPECIAL edge: specialinvoke r0.<androidx.core.view.WindowInsetsCompat$BuilderImpl: void <init>(androidx.core.view.WindowInsetsCompat)>($r2) in <androidx.core.view.WindowInsetsCompat$BuilderImpl29: void <init>(androidx.core.view.WindowInsetsCompat)> ==> <androidx.core.view.WindowInsetsCompat$BuilderImpl: void <init>(androidx.core.view.WindowInsetsCompat)>
SPECIAL edge: specialinvoke $r2.<androidx.core.view.WindowInsetsCompat$BuilderImpl30: void <init>(androidx.core.view.WindowInsetsCompat)>($r1) in <androidx.core.view.WindowInsetsCompat$Builder: void <init>(androidx.core.view.WindowInsetsCompat)> ==> <androidx.core.view.WindowInsetsCompat$BuilderImpl30: void <init>(androidx.core.view.WindowInsetsCompat)>
SPECIAL edge: specialinvoke r0.<androidx.core.view.WindowInsetsCompat$BuilderImpl29: void <init>(androidx.core.view.WindowInsetsCompat)>($r1) in <androidx.core.view.WindowInsetsCompat$BuilderImpl30: void <init>(androidx.core.view.WindowInsetsCompat)> ==> <androidx.core.view.WindowInsetsCompat$BuilderImpl29: void <init>(androidx.core.view.WindowInsetsCompat)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.core.view.WindowInsetsCompat$Builder: void <init>(androidx.core.view.WindowInsetsCompat)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r2.<androidx.core.view.WindowInsetsCompat: android.view.WindowInsets toWindowInsets()>() in <androidx.core.view.WindowInsetsCompat$BuilderImpl29: void <init>(androidx.core.view.WindowInsetsCompat)> ==> <androidx.core.view.WindowInsetsCompat: android.view.WindowInsets toWindowInsets()>
VIRTUAL edge: $r1 = virtualinvoke $r2.<androidx.core.view.WindowInsetsCompat: android.view.WindowInsets toWindowInsets()>() in <androidx.core.view.WindowInsetsCompat$BuilderImpl20: void <init>(androidx.core.view.WindowInsetsCompat)> ==> <androidx.core.view.WindowInsetsCompat: android.view.WindowInsets toWindowInsets()>
VIRTUAL edge: $r1 = virtualinvoke $r2.<androidx.core.view.WindowInsetsCompat$Impl: androidx.core.graphics.Insets getSystemWindowInsets()>() in <androidx.core.view.WindowInsetsCompat: int getSystemWindowInsetBottom()> ==> <androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getSystemWindowInsets()>
VIRTUAL edge: $r1 = virtualinvoke $r2.<androidx.core.view.WindowInsetsCompat$Impl: androidx.core.graphics.Insets getSystemWindowInsets()>() in <androidx.core.view.WindowInsetsCompat: int getSystemWindowInsetRight()> ==> <androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getSystemWindowInsets()>
VIRTUAL edge: $r1 = virtualinvoke $r2.<androidx.core.view.WindowInsetsCompat$Impl: androidx.core.graphics.Insets getSystemWindowInsets()>() in <androidx.core.view.WindowInsetsCompat: int getSystemWindowInsetLeft()> ==> <androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getSystemWindowInsets()>
VIRTUAL edge: $r1 = virtualinvoke $r2.<androidx.core.view.WindowInsetsCompat$Impl: androidx.core.graphics.Insets getSystemWindowInsets()>() in <androidx.core.view.WindowInsetsCompat: int getSystemWindowInsetTop()> ==> <androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getSystemWindowInsets()>
VIRTUAL edge: $i1 = virtualinvoke $r3.<androidx.appcompat.app.AppCompatDelegateImpl: int updateStatusGuard(androidx.core.view.WindowInsetsCompat,android.graphics.Rect)>($r2, null) in <androidx.appcompat.app.AppCompatDelegateImpl$3: androidx.core.view.WindowInsetsCompat onApplyWindowInsets(android.view.View,androidx.core.view.WindowInsetsCompat)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: int updateStatusGuard(androidx.core.view.WindowInsetsCompat,android.graphics.Rect)>
STATIC edge: $r1 = staticinvoke <androidx.core.view.ViewCompat: androidx.core.view.WindowInsetsCompat getRootWindowInsets(android.view.View)>($r8) in <androidx.appcompat.app.AppCompatDelegateImpl: int updateStatusGuard(androidx.core.view.WindowInsetsCompat,android.graphics.Rect)> ==> <androidx.core.view.ViewCompat: androidx.core.view.WindowInsetsCompat getRootWindowInsets(android.view.View)>
STATIC edge: staticinvoke <androidx.appcompat.widget.ViewUtils: void computeFitSystemWindows(android.view.View,android.graphics.Rect,android.graphics.Rect)>($r8, $r6, $r7) in <androidx.appcompat.app.AppCompatDelegateImpl: int updateStatusGuard(androidx.core.view.WindowInsetsCompat,android.graphics.Rect)> ==> <androidx.appcompat.widget.ViewUtils: void computeFitSystemWindows(android.view.View,android.graphics.Rect,android.graphics.Rect)>
CLINIT edge: $r1 = staticinvoke <androidx.core.view.ViewCompat: androidx.core.view.WindowInsetsCompat getRootWindowInsets(android.view.View)>($r8) in <androidx.appcompat.app.AppCompatDelegateImpl: int updateStatusGuard(androidx.core.view.WindowInsetsCompat,android.graphics.Rect)> ==> <androidx.core.view.ViewCompat: void <clinit>()>
CLINIT edge: staticinvoke <androidx.appcompat.widget.ViewUtils: void computeFitSystemWindows(android.view.View,android.graphics.Rect,android.graphics.Rect)>($r8, $r6, $r7) in <androidx.appcompat.app.AppCompatDelegateImpl: int updateStatusGuard(androidx.core.view.WindowInsetsCompat,android.graphics.Rect)> ==> <androidx.appcompat.widget.ViewUtils: void <clinit>()>
CLINIT edge: $r0 = <androidx.appcompat.widget.ViewUtils: java.lang.reflect.Method sComputeFitSystemWindowsMethod> in <androidx.appcompat.widget.ViewUtils: void computeFitSystemWindows(android.view.View,android.graphics.Rect,android.graphics.Rect)> ==> <androidx.appcompat.widget.ViewUtils: void <clinit>()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<androidx.core.view.WindowInsetsCompat: int getSystemWindowInsetTop()>() in <androidx.appcompat.app.AppCompatDelegateImpl: int updateStatusGuard(androidx.core.view.WindowInsetsCompat,android.graphics.Rect)> ==> <androidx.core.view.WindowInsetsCompat: int getSystemWindowInsetTop()>
VIRTUAL edge: $i2 = virtualinvoke $r1.<androidx.core.view.WindowInsetsCompat: int getSystemWindowInsetLeft()>() in <androidx.appcompat.app.AppCompatDelegateImpl: int updateStatusGuard(androidx.core.view.WindowInsetsCompat,android.graphics.Rect)> ==> <androidx.core.view.WindowInsetsCompat: int getSystemWindowInsetLeft()>
VIRTUAL edge: $i4 = virtualinvoke $r1.<androidx.core.view.WindowInsetsCompat: int getSystemWindowInsetRight()>() in <androidx.appcompat.app.AppCompatDelegateImpl: int updateStatusGuard(androidx.core.view.WindowInsetsCompat,android.graphics.Rect)> ==> <androidx.core.view.WindowInsetsCompat: int getSystemWindowInsetRight()>
VIRTUAL edge: $i5 = virtualinvoke $r1.<androidx.core.view.WindowInsetsCompat: int getSystemWindowInsetBottom()>() in <androidx.appcompat.app.AppCompatDelegateImpl: int updateStatusGuard(androidx.core.view.WindowInsetsCompat,android.graphics.Rect)> ==> <androidx.core.view.WindowInsetsCompat: int getSystemWindowInsetBottom()>
SPECIAL edge: specialinvoke r0.<androidx.appcompat.app.AppCompatDelegateImpl: void updateStatusGuardColor(android.view.View)>($r9) in <androidx.appcompat.app.AppCompatDelegateImpl: int updateStatusGuard(androidx.core.view.WindowInsetsCompat,android.graphics.Rect)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: void updateStatusGuardColor(android.view.View)>
CLINIT edge: $i0 = staticinvoke <androidx.core.view.ViewCompat: int getWindowSystemUiVisibility(android.view.View)>($r1) in <androidx.appcompat.app.AppCompatDelegateImpl: void updateStatusGuardColor(android.view.View)> ==> <androidx.core.view.ViewCompat: void <clinit>()>
STATIC edge: $i0 = staticinvoke <androidx.core.content.ContextCompat: int getColor(android.content.Context,int)>($r2, $i0) in <androidx.appcompat.app.AppCompatDelegateImpl: void updateStatusGuardColor(android.view.View)> ==> <androidx.core.content.ContextCompat: int getColor(android.content.Context,int)>
STATIC edge: $i0 = staticinvoke <androidx.core.view.ViewCompat: int getWindowSystemUiVisibility(android.view.View)>($r1) in <androidx.appcompat.app.AppCompatDelegateImpl: void updateStatusGuardColor(android.view.View)> ==> <androidx.core.view.ViewCompat: int getWindowSystemUiVisibility(android.view.View)>
CLINIT edge: $i0 = staticinvoke <androidx.core.content.ContextCompat: int getColor(android.content.Context,int)>($r2, $i0) in <androidx.appcompat.app.AppCompatDelegateImpl: void updateStatusGuardColor(android.view.View)> ==> <androidx.core.content.ContextCompat: void <clinit>()>
CLINIT edge: $i0 = staticinvoke <androidx.core.content.ContextCompat: int getColor(android.content.Context,int)>($r2, $i0) in <androidx.appcompat.app.AppCompatDelegateImpl: void updateStatusGuardColor(android.view.View)> ==> <androidx.core.content.ContextCompat: void <clinit>()>
STATIC edge: $i0 = staticinvoke <androidx.core.content.ContextCompat$Api23Impl: int getColor(android.content.Context,int)>($r0, $i0) in <androidx.core.content.ContextCompat: int getColor(android.content.Context,int)> ==> <androidx.core.content.ContextCompat$Api23Impl: int getColor(android.content.Context,int)>
STATIC edge: $i0 = staticinvoke <androidx.core.view.ViewCompat$Api16Impl: int getWindowSystemUiVisibility(android.view.View)>($r0) in <androidx.core.view.ViewCompat: int getWindowSystemUiVisibility(android.view.View)> ==> <androidx.core.view.ViewCompat$Api16Impl: int getWindowSystemUiVisibility(android.view.View)>
VIRTUAL edge: $r1 = virtualinvoke $r2.<androidx.core.view.WindowInsetsCompat: androidx.core.graphics.Insets getStableInsets()>() in <androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getRootStableInsets()> ==> <androidx.core.view.WindowInsetsCompat: androidx.core.graphics.Insets getStableInsets()>
VIRTUAL edge: $r1 = virtualinvoke $r2.<androidx.core.view.WindowInsetsCompat$Impl: androidx.core.graphics.Insets getStableInsets()>() in <androidx.core.view.WindowInsetsCompat: androidx.core.graphics.Insets getStableInsets()> ==> <androidx.core.view.WindowInsetsCompat$Impl21: androidx.core.graphics.Insets getStableInsets()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<androidx.core.view.WindowInsetsCompat: androidx.core.view.DisplayCutoutCompat getDisplayCutout()>() in <androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getInsetsForType(int,boolean)> ==> <androidx.core.view.WindowInsetsCompat: androidx.core.view.DisplayCutoutCompat getDisplayCutout()>
VIRTUAL edge: $r1 = virtualinvoke $r2.<androidx.core.view.WindowInsetsCompat: androidx.core.graphics.Insets getStableInsets()>() in <androidx.core.view.WindowInsetsCompat$Impl20: androidx.core.graphics.Insets getInsetsForType(int,boolean)> ==> <androidx.core.view.WindowInsetsCompat: androidx.core.graphics.Insets getStableInsets()>
VIRTUAL edge: $r1 = virtualinvoke $r2.<androidx.core.view.WindowInsetsCompat$Impl: androidx.core.view.DisplayCutoutCompat getDisplayCutout()>() in <androidx.core.view.WindowInsetsCompat: androidx.core.view.DisplayCutoutCompat getDisplayCutout()> ==> <androidx.core.view.WindowInsetsCompat$Impl28: androidx.core.view.DisplayCutoutCompat getDisplayCutout()>
VIRTUAL edge: $r1 = virtualinvoke $r2.<androidx.core.view.WindowInsetsCompat$Impl: androidx.core.view.DisplayCutoutCompat getDisplayCutout()>() in <androidx.core.view.WindowInsetsCompat: androidx.core.view.DisplayCutoutCompat getDisplayCutout()> ==> <androidx.core.view.WindowInsetsCompat$Impl: androidx.core.view.DisplayCutoutCompat getDisplayCutout()>
VIRTUAL edge: $r7 = virtualinvoke $r6.<androidx.lifecycle.Lifecycle: androidx.lifecycle.Lifecycle$State getCurrentState()>() in <androidx.appcompat.app.AppCompatDelegateImpl: void updateActivityConfiguration(android.content.res.Configuration)> ==> <androidx.lifecycle.LifecycleRegistry: androidx.lifecycle.Lifecycle$State getCurrentState()>
VIRTUAL edge: $z0 = virtualinvoke $r7.<androidx.lifecycle.Lifecycle$State: boolean isAtLeast(androidx.lifecycle.Lifecycle$State)>($r2) in <androidx.appcompat.app.AppCompatDelegateImpl: void updateActivityConfiguration(android.content.res.Configuration)> ==> <androidx.lifecycle.Lifecycle$State: boolean isAtLeast(androidx.lifecycle.Lifecycle$State)>
VIRTUAL edge: virtualinvoke $r1.<androidx.lifecycle.Lifecycle: void addObserver(androidx.lifecycle.LifecycleObserver)>($r4) in <androidx.activity.ComponentActivity: androidx.activity.OnBackPressedDispatcher getOnBackPressedDispatcher()> ==> <androidx.lifecycle.LifecycleRegistry: void addObserver(androidx.lifecycle.LifecycleObserver)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<androidx.lifecycle.Lifecycle: androidx.lifecycle.Lifecycle$State getCurrentState()>() in <androidx.lifecycle.SavedStateHandleSupport: void enableSavedStateHandles(androidx.savedstate.SavedStateRegistryOwner)> ==> <androidx.lifecycle.LifecycleRegistry: androidx.lifecycle.Lifecycle$State getCurrentState()>
VIRTUAL edge: virtualinvoke $r1.<androidx.lifecycle.Lifecycle: void addObserver(androidx.lifecycle.LifecycleObserver)>($r9) in <androidx.lifecycle.SavedStateHandleSupport: void enableSavedStateHandles(androidx.savedstate.SavedStateRegistryOwner)> ==> <androidx.lifecycle.LifecycleRegistry: void addObserver(androidx.lifecycle.LifecycleObserver)>
VIRTUAL edge: virtualinvoke $r12.<androidx.lifecycle.Lifecycle: void addObserver(androidx.lifecycle.LifecycleObserver)>($r13) in <androidx.activity.ComponentActivity: void <init>()> ==> <androidx.lifecycle.LifecycleRegistry: void addObserver(androidx.lifecycle.LifecycleObserver)>
VIRTUAL edge: virtualinvoke $r3.<androidx.lifecycle.LifecycleRegistry: void setCurrentState(androidx.lifecycle.Lifecycle$State)>($r4) in <androidx.activity.ComponentActivity: void onSaveInstanceState(android.os.Bundle)> ==> <androidx.lifecycle.LifecycleRegistry: void setCurrentState(androidx.lifecycle.Lifecycle$State)>
VIRTUAL edge: virtualinvoke $r4.<androidx.lifecycle.LifecycleRegistry: void handleLifecycleEvent(androidx.lifecycle.Lifecycle$Event)>($r1) in <androidx.lifecycle.ReportFragment$Companion: void dispatch$lifecycle_runtime_release(android.app.Activity,androidx.lifecycle.Lifecycle$Event)> ==> <androidx.lifecycle.LifecycleRegistry: void handleLifecycleEvent(androidx.lifecycle.Lifecycle$Event)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.Exception: java.lang.Throwable getCause()>() in <androidx.tracing.Trace: void handleException(java.lang.String,java.lang.Exception)> ==> <java.lang.ClassNotFoundException: java.lang.Throwable getCause()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassNotFoundException: java.lang.Throwable getCause()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<androidx.core.view.WindowInsetsCompat$BuilderImpl: void setSystemWindowInsets(androidx.core.graphics.Insets)>($r1) in <androidx.core.view.WindowInsetsCompat$Builder: androidx.core.view.WindowInsetsCompat$Builder setSystemWindowInsets(androidx.core.graphics.Insets)> ==> <androidx.core.view.WindowInsetsCompat$BuilderImpl29: void setSystemWindowInsets(androidx.core.graphics.Insets)>
VIRTUAL edge: virtualinvoke $r2.<androidx.core.view.WindowInsetsCompat$BuilderImpl: void setSystemWindowInsets(androidx.core.graphics.Insets)>($r1) in <androidx.core.view.WindowInsetsCompat$Builder: androidx.core.view.WindowInsetsCompat$Builder setSystemWindowInsets(androidx.core.graphics.Insets)> ==> <androidx.core.view.WindowInsetsCompat$BuilderImpl20: void setSystemWindowInsets(androidx.core.graphics.Insets)>
VIRTUAL edge: virtualinvoke $r3.<androidx.appcompat.view.menu.MenuBuilder: void removeMenuPresenter(androidx.appcompat.view.menu.MenuPresenter)>($r2) in <androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState: void setMenu(androidx.appcompat.view.menu.MenuBuilder)> ==> <androidx.appcompat.view.menu.MenuBuilder: void removeMenuPresenter(androidx.appcompat.view.menu.MenuPresenter)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<androidx.appcompat.view.menu.MenuBuilder: androidx.appcompat.view.menu.MenuItemImpl getExpandedItem()>() in <androidx.appcompat.view.menu.ListMenuPresenter$MenuAdapter: void findExpandedIndex()> ==> <androidx.appcompat.view.menu.MenuBuilder: androidx.appcompat.view.menu.MenuItemImpl getExpandedItem()>
VIRTUAL edge: $r4 = virtualinvoke $r2.<androidx.appcompat.view.menu.MenuBuilder: java.util.ArrayList getNonActionItems()>() in <androidx.appcompat.view.menu.ListMenuPresenter$MenuAdapter: void findExpandedIndex()> ==> <androidx.appcompat.view.menu.MenuBuilder: java.util.ArrayList getNonActionItems()>
VIRTUAL edge: virtualinvoke r0.<androidx.appcompat.view.menu.MenuBuilder: void flagActionItems()>() in <androidx.appcompat.view.menu.MenuBuilder: java.util.ArrayList getNonActionItems()> ==> <androidx.appcompat.view.menu.MenuBuilder: void flagActionItems()>
VIRTUAL edge: $r1 = virtualinvoke r0.<androidx.appcompat.view.menu.MenuBuilder: java.util.ArrayList getVisibleItems()>() in <androidx.appcompat.view.menu.MenuBuilder: void flagActionItems()> ==> <androidx.appcompat.view.menu.MenuBuilder: java.util.ArrayList getVisibleItems()>
VIRTUAL edge: $r7 = virtualinvoke r0.<androidx.appcompat.view.menu.MenuBuilder: java.util.ArrayList getVisibleItems()>() in <androidx.appcompat.view.menu.MenuBuilder: void flagActionItems()> ==> <androidx.appcompat.view.menu.MenuBuilder: java.util.ArrayList getVisibleItems()>
VIRTUAL edge: virtualinvoke $r4.<androidx.appcompat.view.menu.MenuBuilder: void addMenuPresenter(androidx.appcompat.view.menu.MenuPresenter)>($r5) in <androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState: androidx.appcompat.view.menu.MenuView getListMenuView(androidx.appcompat.view.menu.MenuPresenter$Callback)> ==> <androidx.appcompat.view.menu.MenuBuilder: void addMenuPresenter(androidx.appcompat.view.menu.MenuPresenter)>
VIRTUAL edge: $r3 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>() in <androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState: void setStyle(android.content.Context)> ==> <androidx.appcompat.view.ContextThemeWrapper: android.content.res.Resources getResources()>
VIRTUAL edge: $r5 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources$Theme getTheme()>() in <androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState: void setStyle(android.content.Context)> ==> <androidx.appcompat.view.ContextThemeWrapper: android.content.res.Resources$Theme getTheme()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<androidx.appcompat.view.menu.ListMenuPresenter: android.widget.ListAdapter getAdapter()>() in <androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState: boolean hasPanelItems()> ==> <androidx.appcompat.view.menu.ListMenuPresenter: android.widget.ListAdapter getAdapter()>
INTERFACE edge: $i0 = interfaceinvoke $r3.<android.widget.ListAdapter: int getCount()>() in <androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState: boolean hasPanelItems()> ==> <androidx.appcompat.view.menu.ListMenuPresenter$MenuAdapter: int getCount()>
SPECIAL edge: specialinvoke $r1.<androidx.appcompat.view.menu.ListMenuPresenter$MenuAdapter: void <init>(androidx.appcompat.view.menu.ListMenuPresenter)>(r0) in <androidx.appcompat.view.menu.ListMenuPresenter: android.widget.ListAdapter getAdapter()> ==> <androidx.appcompat.view.menu.ListMenuPresenter$MenuAdapter: void <init>(androidx.appcompat.view.menu.ListMenuPresenter)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<androidx.appcompat.view.menu.MenuBuilder: java.util.ArrayList getNonActionItems()>() in <androidx.appcompat.view.menu.ListMenuPresenter$MenuAdapter: int getCount()> ==> <androidx.appcompat.view.menu.MenuBuilder: java.util.ArrayList getNonActionItems()>
VIRTUAL edge: virtualinvoke $r10.<android.view.ViewGroup: void setBackgroundResource(int)>($i0) in <androidx.appcompat.app.AppCompatDelegateImpl: void openPanel(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,android.view.KeyEvent)> ==> <androidx.appcompat.app.AppCompatDelegateImpl$ListMenuDecorView: void setBackgroundResource(int)>
STATIC edge: $r2 = staticinvoke <androidx.appcompat.content.res.AppCompatResources: android.graphics.drawable.Drawable getDrawable(android.content.Context,int)>($r1, $i0) in <androidx.appcompat.app.AppCompatDelegateImpl$ListMenuDecorView: void setBackgroundResource(int)> ==> <androidx.appcompat.content.res.AppCompatResources: android.graphics.drawable.Drawable getDrawable(android.content.Context,int)>
VIRTUAL edge: virtualinvoke $r9.<androidx.appcompat.view.menu.MenuBuilder: void stopDispatchingItemsChanged()>() in <androidx.appcompat.app.AppCompatDelegateImpl: boolean preparePanel(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,android.view.KeyEvent)> ==> <androidx.appcompat.view.menu.MenuBuilder: void stopDispatchingItemsChanged()>
VIRTUAL edge: virtualinvoke $r9.<androidx.appcompat.view.menu.MenuBuilder: void restoreActionViewStates(android.os.Bundle)>($r10) in <androidx.appcompat.app.AppCompatDelegateImpl: boolean preparePanel(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,android.view.KeyEvent)> ==> <androidx.appcompat.view.menu.MenuBuilder: void restoreActionViewStates(android.os.Bundle)>
VIRTUAL edge: virtualinvoke $r9.<androidx.appcompat.view.menu.MenuBuilder: void startDispatchingItemsChanged()>() in <androidx.appcompat.app.AppCompatDelegateImpl: boolean preparePanel(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,android.view.KeyEvent)> ==> <androidx.appcompat.view.menu.MenuBuilder: void startDispatchingItemsChanged()>
VIRTUAL edge: virtualinvoke $r9.<androidx.appcompat.view.menu.MenuBuilder: void setQwertyMode(boolean)>($z0) in <androidx.appcompat.app.AppCompatDelegateImpl: boolean preparePanel(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,android.view.KeyEvent)> ==> <androidx.appcompat.view.menu.MenuBuilder: void setQwertyMode(boolean)>
VIRTUAL edge: virtualinvoke $r9.<androidx.appcompat.view.menu.MenuBuilder: void startDispatchingItemsChanged()>() in <androidx.appcompat.app.AppCompatDelegateImpl: boolean preparePanel(androidx.appcompat.app.AppCompatDelegateImpl$PanelFeatureState,android.view.KeyEvent)> ==> <androidx.appcompat.view.menu.MenuBuilder: void startDispatchingItemsChanged()>
VIRTUAL edge: virtualinvoke r0.<androidx.appcompat.view.menu.MenuBuilder: void onItemsChanged(boolean)>(0) in <androidx.appcompat.view.menu.MenuBuilder: void setQwertyMode(boolean)> ==> <androidx.appcompat.view.menu.MenuBuilder: void onItemsChanged(boolean)>
SPECIAL edge: specialinvoke r0.<androidx.appcompat.view.menu.MenuBuilder: void dispatchPresenterUpdate(boolean)>($z0) in <androidx.appcompat.view.menu.MenuBuilder: void onItemsChanged(boolean)> ==> <androidx.appcompat.view.menu.MenuBuilder: void dispatchPresenterUpdate(boolean)>
VIRTUAL edge: virtualinvoke r0.<androidx.appcompat.view.menu.MenuBuilder: void stopDispatchingItemsChanged()>() in <androidx.appcompat.view.menu.MenuBuilder: void dispatchPresenterUpdate(boolean)> ==> <androidx.appcompat.view.menu.MenuBuilder: void stopDispatchingItemsChanged()>
VIRTUAL edge: virtualinvoke r0.<androidx.appcompat.view.menu.MenuBuilder: void startDispatchingItemsChanged()>() in <androidx.appcompat.view.menu.MenuBuilder: void dispatchPresenterUpdate(boolean)> ==> <androidx.appcompat.view.menu.MenuBuilder: void startDispatchingItemsChanged()>
VIRTUAL edge: virtualinvoke r0.<androidx.appcompat.view.menu.MenuBuilder: void onItemsChanged(boolean)>($z0) in <androidx.appcompat.view.menu.MenuBuilder: void startDispatchingItemsChanged()> ==> <androidx.appcompat.view.menu.MenuBuilder: void onItemsChanged(boolean)>
VIRTUAL edge: $r2 = virtualinvoke r0.<androidx.appcompat.view.menu.MenuBuilder: java.lang.String getActionViewStatesKey()>() in <androidx.appcompat.view.menu.MenuBuilder: void restoreActionViewStates(android.os.Bundle)> ==> <androidx.appcompat.view.menu.MenuBuilder: java.lang.String getActionViewStatesKey()>
VIRTUAL edge: $i0 = virtualinvoke r0.<androidx.appcompat.view.menu.MenuBuilder: int size()>() in <androidx.appcompat.view.menu.MenuBuilder: void restoreActionViewStates(android.os.Bundle)> ==> <androidx.appcompat.view.menu.MenuBuilder: int size()>
VIRTUAL edge: $r4 = virtualinvoke r0.<androidx.appcompat.view.menu.MenuBuilder: android.view.MenuItem getItem(int)>($i1) in <androidx.appcompat.view.menu.MenuBuilder: void restoreActionViewStates(android.os.Bundle)> ==> <androidx.appcompat.view.menu.MenuBuilder: android.view.MenuItem getItem(int)>
VIRTUAL edge: $r4 = virtualinvoke r0.<androidx.appcompat.view.menu.MenuBuilder: android.view.MenuItem findItem(int)>($i0) in <androidx.appcompat.view.menu.MenuBuilder: void restoreActionViewStates(android.os.Bundle)> ==> <androidx.appcompat.view.menu.MenuBuilder: android.view.MenuItem findItem(int)>
VIRTUAL edge: $i1 = virtualinvoke r0.<androidx.appcompat.view.menu.MenuBuilder: int size()>() in <androidx.appcompat.view.menu.MenuBuilder: android.view.MenuItem findItem(int)> ==> <androidx.appcompat.view.menu.MenuBuilder: int size()>
VIRTUAL edge: virtualinvoke $r3.<androidx.appcompat.app.AppCompatDelegateImpl: void endOnGoingFadeAnimation()>() in <androidx.appcompat.app.AppCompatDelegateImpl$ActionModeCallbackWrapperV9: void onDestroyActionMode(androidx.appcompat.view.ActionMode)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: void endOnGoingFadeAnimation()>
VIRTUAL edge: virtualinvoke $r3.<androidx.appcompat.app.AppCompatDelegateImpl: void updateBackInvokedCallbackState()>() in <androidx.appcompat.app.AppCompatDelegateImpl$ActionModeCallbackWrapperV9: void onDestroyActionMode(androidx.appcompat.view.ActionMode)> ==> <androidx.appcompat.app.AppCompatDelegateImpl: void updateBackInvokedCallbackState()>
INTERFACE edge: interfaceinvoke $r11.<androidx.appcompat.app.AppCompatCallback: void onSupportActionModeFinished(androidx.appcompat.view.ActionMode)>($r1) in <androidx.appcompat.app.AppCompatDelegateImpl$ActionModeCallbackWrapperV9: void onDestroyActionMode(androidx.appcompat.view.ActionMode)> ==> <androidx.appcompat.app.AppCompatActivity: void onSupportActionModeFinished(androidx.appcompat.view.ActionMode)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<androidx.appcompat.widget.AppCompatDrawableManager: android.content.res.ColorStateList getTintList(android.content.Context,int)>($r4, $i0) in <androidx.appcompat.widget.AppCompatBackgroundHelper: void loadFromAttributes(android.util.AttributeSet,int)> ==> <androidx.appcompat.widget.AppCompatDrawableManager: android.content.res.ColorStateList getTintList(android.content.Context,int)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<androidx.appcompat.widget.ResourceManagerInternal: android.content.res.ColorStateList getTintList(android.content.Context,int)>($r3, $i0) in <androidx.appcompat.widget.AppCompatDrawableManager: android.content.res.ColorStateList getTintList(android.content.Context,int)> ==> <androidx.appcompat.widget.ResourceManagerInternal: android.content.res.ColorStateList getTintList(android.content.Context,int)>
VIRTUAL edge: virtualinvoke $r3.<android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>($r7) in <androidx.appcompat.widget.AppCompatImageHelper: void loadFromAttributes(android.util.AttributeSet,int)> ==> <androidx.appcompat.widget.AppCompatImageView: void setImageDrawable(android.graphics.drawable.Drawable)>
VIRTUAL edge: virtualinvoke $r1.<androidx.appcompat.widget.AppCompatImageHelper: void obtainLevelFromDrawable(android.graphics.drawable.Drawable)>($r2) in <androidx.appcompat.widget.AppCompatImageView: void setImageDrawable(android.graphics.drawable.Drawable)> ==> <androidx.appcompat.widget.AppCompatImageHelper: void obtainLevelFromDrawable(android.graphics.drawable.Drawable)>
VIRTUAL edge: virtualinvoke $r1.<androidx.appcompat.widget.AppCompatImageHelper: void applySupportImageTint()>() in <androidx.appcompat.widget.AppCompatImageView: void setImageDrawable(android.graphics.drawable.Drawable)> ==> <androidx.appcompat.widget.AppCompatImageHelper: void applySupportImageTint()>
VIRTUAL edge: virtualinvoke $r1.<androidx.appcompat.widget.AppCompatImageHelper: void applyImageLevel()>() in <androidx.appcompat.widget.AppCompatImageView: void setImageDrawable(android.graphics.drawable.Drawable)> ==> <androidx.appcompat.widget.AppCompatImageHelper: void applyImageLevel()>
CLINIT edge: staticinvoke <androidx.appcompat.widget.DrawableUtils: void fixDrawable(android.graphics.drawable.Drawable)>($r2) in <androidx.appcompat.widget.AppCompatImageHelper: void applySupportImageTint()> ==> <androidx.appcompat.widget.DrawableUtils: void <clinit>()>
STATIC edge: staticinvoke <androidx.appcompat.widget.AppCompatDrawableManager: void tintDrawable(android.graphics.drawable.Drawable,androidx.appcompat.widget.TintInfo,int[])>($r2, $r3, $r4) in <androidx.appcompat.widget.AppCompatImageHelper: void applySupportImageTint()> ==> <androidx.appcompat.widget.AppCompatDrawableManager: void tintDrawable(android.graphics.drawable.Drawable,androidx.appcompat.widget.TintInfo,int[])>
STATIC edge: staticinvoke <androidx.appcompat.widget.AppCompatDrawableManager: void tintDrawable(android.graphics.drawable.Drawable,androidx.appcompat.widget.TintInfo,int[])>($r2, $r3, $r4) in <androidx.appcompat.widget.AppCompatImageHelper: void applySupportImageTint()> ==> <androidx.appcompat.widget.AppCompatDrawableManager: void tintDrawable(android.graphics.drawable.Drawable,androidx.appcompat.widget.TintInfo,int[])>
STATIC edge: staticinvoke <androidx.appcompat.widget.DrawableUtils: void fixDrawable(android.graphics.drawable.Drawable)>($r2) in <androidx.appcompat.widget.AppCompatImageHelper: void applySupportImageTint()> ==> <androidx.appcompat.widget.DrawableUtils: void fixDrawable(android.graphics.drawable.Drawable)>
CLINIT edge: staticinvoke <androidx.appcompat.widget.AppCompatDrawableManager: void tintDrawable(android.graphics.drawable.Drawable,androidx.appcompat.widget.TintInfo,int[])>($r2, $r3, $r4) in <androidx.appcompat.widget.AppCompatImageHelper: void applySupportImageTint()> ==> <androidx.appcompat.widget.AppCompatDrawableManager: void <clinit>()>
SPECIAL edge: $z0 = specialinvoke r0.<androidx.appcompat.widget.AppCompatImageHelper: boolean shouldApplyFrameworkTintUsingColorFilter()>() in <androidx.appcompat.widget.AppCompatImageHelper: void applySupportImageTint()> ==> <androidx.appcompat.widget.AppCompatImageHelper: boolean shouldApplyFrameworkTintUsingColorFilter()>
SPECIAL edge: $z0 = specialinvoke r0.<androidx.appcompat.widget.AppCompatImageHelper: boolean applyFrameworkTintUsingColorFilter(android.graphics.drawable.Drawable)>($r2) in <androidx.appcompat.widget.AppCompatImageHelper: void applySupportImageTint()> ==> <androidx.appcompat.widget.AppCompatImageHelper: boolean applyFrameworkTintUsingColorFilter(android.graphics.drawable.Drawable)>
CLINIT edge: staticinvoke <androidx.appcompat.widget.AppCompatDrawableManager: void tintDrawable(android.graphics.drawable.Drawable,androidx.appcompat.widget.TintInfo,int[])>($r1, $r2, $r6) in <androidx.appcompat.widget.AppCompatImageHelper: boolean applyFrameworkTintUsingColorFilter(android.graphics.drawable.Drawable)> ==> <androidx.appcompat.widget.AppCompatDrawableManager: void <clinit>()>
STATIC edge: staticinvoke <androidx.appcompat.widget.AppCompatDrawableManager: void tintDrawable(android.graphics.drawable.Drawable,androidx.appcompat.widget.TintInfo,int[])>($r1, $r2, $r6) in <androidx.appcompat.widget.AppCompatImageHelper: boolean applyFrameworkTintUsingColorFilter(android.graphics.drawable.Drawable)> ==> <androidx.appcompat.widget.AppCompatDrawableManager: void tintDrawable(android.graphics.drawable.Drawable,androidx.appcompat.widget.TintInfo,int[])>
STATIC edge: $r5 = staticinvoke <androidx.core.widget.ImageViewCompat: android.graphics.PorterDuff$Mode getImageTintMode(android.widget.ImageView)>($r3) in <androidx.appcompat.widget.AppCompatImageHelper: boolean applyFrameworkTintUsingColorFilter(android.graphics.drawable.Drawable)> ==> <androidx.core.widget.ImageViewCompat: android.graphics.PorterDuff$Mode getImageTintMode(android.widget.ImageView)>
STATIC edge: $r4 = staticinvoke <androidx.core.widget.ImageViewCompat: android.content.res.ColorStateList getImageTintList(android.widget.ImageView)>($r3) in <androidx.appcompat.widget.AppCompatImageHelper: boolean applyFrameworkTintUsingColorFilter(android.graphics.drawable.Drawable)> ==> <androidx.core.widget.ImageViewCompat: android.content.res.ColorStateList getImageTintList(android.widget.ImageView)>
STATIC edge: $r0 = staticinvoke <androidx.core.widget.ImageViewCompat$Api21Impl: android.graphics.PorterDuff$Mode getImageTintMode(android.widget.ImageView)>($r1) in <androidx.core.widget.ImageViewCompat: android.graphics.PorterDuff$Mode getImageTintMode(android.widget.ImageView)> ==> <androidx.core.widget.ImageViewCompat$Api21Impl: android.graphics.PorterDuff$Mode getImageTintMode(android.widget.ImageView)>
STATIC edge: $r0 = staticinvoke <androidx.core.widget.ImageViewCompat$Api21Impl: android.content.res.ColorStateList getImageTintList(android.widget.ImageView)>($r1) in <androidx.core.widget.ImageViewCompat: android.content.res.ColorStateList getImageTintList(android.widget.ImageView)> ==> <androidx.core.widget.ImageViewCompat$Api21Impl: android.content.res.ColorStateList getImageTintList(android.widget.ImageView)>
SPECIAL edge: specialinvoke $r2.<androidx.appcompat.widget.TintInfo: void <init>()>() in <androidx.appcompat.widget.AppCompatImageHelper: boolean applyFrameworkTintUsingColorFilter(android.graphics.drawable.Drawable)> ==> <androidx.appcompat.widget.TintInfo: void <init>()>
VIRTUAL edge: virtualinvoke $r2.<androidx.appcompat.widget.TintInfo: void clear()>() in <androidx.appcompat.widget.AppCompatImageHelper: boolean applyFrameworkTintUsingColorFilter(android.graphics.drawable.Drawable)> ==> <androidx.appcompat.widget.TintInfo: void clear()>
INTERFACE edge: interfaceinvoke $r1.<androidx.appcompat.view.ActionMode$Callback: boolean onPrepareActionMode(androidx.appcompat.view.ActionMode,android.view.Menu)>(r0, $r2) in <androidx.appcompat.view.StandaloneActionMode: void invalidate()> ==> <androidx.appcompat.app.AppCompatDelegateImpl$ActionModeCallbackWrapperV9: boolean onPrepareActionMode(androidx.appcompat.view.ActionMode,android.view.Menu)>
CLINIT edge: staticinvoke <androidx.core.view.ViewCompat: void requestApplyInsets(android.view.View)>($r4) in <androidx.appcompat.app.AppCompatDelegateImpl$ActionModeCallbackWrapperV9: boolean onPrepareActionMode(androidx.appcompat.view.ActionMode,android.view.Menu)> ==> <androidx.core.view.ViewCompat: void <clinit>()>
STATIC edge: staticinvoke <androidx.core.view.ViewCompat: void requestApplyInsets(android.view.View)>($r4) in <androidx.appcompat.app.AppCompatDelegateImpl$ActionModeCallbackWrapperV9: boolean onPrepareActionMode(androidx.appcompat.view.ActionMode,android.view.Menu)> ==> <androidx.core.view.ViewCompat: void requestApplyInsets(android.view.View)>
INTERFACE edge: $z0 = interfaceinvoke $r5.<androidx.appcompat.view.ActionMode$Callback: boolean onPrepareActionMode(androidx.appcompat.view.ActionMode,android.view.Menu)>($r2, $r1) in <androidx.appcompat.app.AppCompatDelegateImpl$ActionModeCallbackWrapperV9: boolean onPrepareActionMode(androidx.appcompat.view.ActionMode,android.view.Menu)> ==> <androidx.appcompat.view.SupportActionModeWrapper$CallbackWrapper: boolean onPrepareActionMode(androidx.appcompat.view.ActionMode,android.view.Menu)>
INTERFACE edge: $z0 = interfaceinvoke $r5.<androidx.appcompat.view.ActionMode$Callback: boolean onPrepareActionMode(androidx.appcompat.view.ActionMode,android.view.Menu)>($r2, $r1) in <androidx.appcompat.app.AppCompatDelegateImpl$ActionModeCallbackWrapperV9: boolean onPrepareActionMode(androidx.appcompat.view.ActionMode,android.view.Menu)> ==> <androidx.appcompat.app.AppCompatDelegateImpl$ActionModeCallbackWrapperV9: boolean onPrepareActionMode(androidx.appcompat.view.ActionMode,android.view.Menu)>
VIRTUAL edge: $r4 = virtualinvoke r0.<androidx.appcompat.view.SupportActionModeWrapper$CallbackWrapper: android.view.ActionMode getActionModeWrapper(androidx.appcompat.view.ActionMode)>($r2) in <androidx.appcompat.view.SupportActionModeWrapper$CallbackWrapper: boolean onPrepareActionMode(androidx.appcompat.view.ActionMode,android.view.Menu)> ==> <androidx.appcompat.view.SupportActionModeWrapper$CallbackWrapper: android.view.ActionMode getActionModeWrapper(androidx.appcompat.view.ActionMode)>
SPECIAL edge: $r3 = specialinvoke r0.<androidx.appcompat.view.SupportActionModeWrapper$CallbackWrapper: android.view.Menu getMenuWrapper(android.view.Menu)>($r3) in <androidx.appcompat.view.SupportActionModeWrapper$CallbackWrapper: boolean onPrepareActionMode(androidx.appcompat.view.ActionMode,android.view.Menu)> ==> <androidx.appcompat.view.SupportActionModeWrapper$CallbackWrapper: android.view.Menu getMenuWrapper(android.view.Menu)>
VIRTUAL edge: virtualinvoke $r7.<androidx.appcompat.view.menu.MenuBuilder: void addMenuPresenter(androidx.appcompat.view.menu.MenuPresenter,android.content.Context)>($r8, $r3) in <androidx.appcompat.widget.ActionBarContextView: void initForMode(androidx.appcompat.view.ActionMode)> ==> <androidx.appcompat.view.menu.MenuBuilder: void addMenuPresenter(androidx.appcompat.view.menu.MenuPresenter,android.content.Context)>
INTERFACE edge: interfaceinvoke $r4.<androidx.appcompat.view.menu.MenuPresenter: void initForMenu(android.content.Context,androidx.appcompat.view.menu.MenuBuilder)>($r1, r0) in <androidx.appcompat.view.menu.MenuBuilder: void addMenuPresenter(androidx.appcompat.view.menu.MenuPresenter,android.content.Context)> ==> <androidx.appcompat.widget.ActionMenuPresenter: void initForMenu(android.content.Context,androidx.appcompat.view.menu.MenuBuilder)>
STATIC edge: $r4 = staticinvoke <androidx.appcompat.view.ActionBarPolicy: androidx.appcompat.view.ActionBarPolicy get(android.content.Context)>($r1) in <androidx.appcompat.widget.ActionMenuPresenter: void initForMenu(android.content.Context,androidx.appcompat.view.menu.MenuBuilder)> ==> <androidx.appcompat.view.ActionBarPolicy: androidx.appcompat.view.ActionBarPolicy get(android.content.Context)>
VIRTUAL edge: $z0 = virtualinvoke $r4.<androidx.appcompat.view.ActionBarPolicy: boolean showsOverflowMenuButton()>() in <androidx.appcompat.widget.ActionMenuPresenter: void initForMenu(android.content.Context,androidx.appcompat.view.menu.MenuBuilder)> ==> <androidx.appcompat.view.ActionBarPolicy: boolean showsOverflowMenuButton()>
VIRTUAL edge: $i0 = virtualinvoke $r4.<androidx.appcompat.view.ActionBarPolicy: int getEmbeddedMenuWidthLimit()>() in <androidx.appcompat.widget.ActionMenuPresenter: void initForMenu(android.content.Context,androidx.appcompat.view.menu.MenuBuilder)> ==> <androidx.appcompat.view.ActionBarPolicy: int getEmbeddedMenuWidthLimit()>
VIRTUAL edge: $i0 = virtualinvoke $r4.<androidx.appcompat.view.ActionBarPolicy: int getMaxActionButtons()>() in <androidx.appcompat.widget.ActionMenuPresenter: void initForMenu(android.content.Context,androidx.appcompat.view.menu.MenuBuilder)> ==> <androidx.appcompat.view.ActionBarPolicy: int getMaxActionButtons()>
SPECIAL edge: specialinvoke $r5.<androidx.appcompat.widget.ActionMenuPresenter$OverflowMenuButton: void <init>(androidx.appcompat.widget.ActionMenuPresenter,android.content.Context)>(r0, $r1) in <androidx.appcompat.widget.ActionMenuPresenter: void initForMenu(android.content.Context,androidx.appcompat.view.menu.MenuBuilder)> ==> <androidx.appcompat.widget.ActionMenuPresenter$OverflowMenuButton: void <init>(androidx.appcompat.widget.ActionMenuPresenter,android.content.Context)>
VIRTUAL edge: virtualinvoke $r5.<androidx.appcompat.widget.ActionMenuPresenter$OverflowMenuButton: void setImageDrawable(android.graphics.drawable.Drawable)>($r6) in <androidx.appcompat.widget.ActionMenuPresenter: void initForMenu(android.content.Context,androidx.appcompat.view.menu.MenuBuilder)> ==> <androidx.appcompat.widget.AppCompatImageView: void setImageDrawable(android.graphics.drawable.Drawable)>
VIRTUAL edge: $r3 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>() in <androidx.appcompat.widget.ActionMenuPresenter: void initForMenu(android.content.Context,androidx.appcompat.view.menu.MenuBuilder)> ==> <androidx.appcompat.view.ContextThemeWrapper: android.content.res.Resources getResources()>
VIRTUAL edge: $r3 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>() in <androidx.appcompat.widget.ActionMenuPresenter: void initForMenu(android.content.Context,androidx.appcompat.view.menu.MenuBuilder)> ==> <androidx.appcompat.app.AppCompatActivity: android.content.res.Resources getResources()>
VIRTUAL edge: $r7 = virtualinvoke $r3.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>() in <androidx.appcompat.widget.ActionMenuPresenter: void initForMenu(android.content.Context,androidx.appcompat.view.menu.MenuBuilder)> ==> <androidx.appcompat.widget.VectorEnabledTintResources: android.util.DisplayMetrics getDisplayMetrics()>
SPECIAL edge: specialinvoke r0.<androidx.appcompat.view.menu.BaseMenuPresenter: void initForMenu(android.content.Context,androidx.appcompat.view.menu.MenuBuilder)>($r1, $r2) in <androidx.appcompat.widget.ActionMenuPresenter: void initForMenu(android.content.Context,androidx.appcompat.view.menu.MenuBuilder)> ==> <androidx.appcompat.view.menu.BaseMenuPresenter: void initForMenu(android.content.Context,androidx.appcompat.view.menu.MenuBuilder)>
VIRTUAL edge: $r3 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>() in <androidx.appcompat.widget.TintContextWrapper: void <init>(android.content.Context)> ==> <androidx.appcompat.view.ContextThemeWrapper: android.content.res.Resources getResources()>
VIRTUAL edge: $r5 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources$Theme getTheme()>() in <androidx.appcompat.widget.TintContextWrapper: void <init>(android.content.Context)> ==> <androidx.appcompat.view.ContextThemeWrapper: android.content.res.Resources$Theme getTheme()>
VIRTUAL edge: $r3 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>() in <androidx.appcompat.widget.TintContextWrapper: void <init>(android.content.Context)> ==> <androidx.appcompat.view.ContextThemeWrapper: android.content.res.Resources getResources()>
VIRTUAL edge: $r3 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>() in <androidx.appcompat.widget.TintContextWrapper: void <init>(android.content.Context)> ==> <androidx.appcompat.app.AppCompatActivity: android.content.res.Resources getResources()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<android.content.Context: android.content.res.Resources getResources()>() in <androidx.appcompat.widget.TintContextWrapper: boolean shouldWrap(android.content.Context)> ==> <androidx.appcompat.view.ContextThemeWrapper: android.content.res.Resources getResources()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<android.content.Context: android.content.res.Resources getResources()>() in <androidx.appcompat.widget.TintContextWrapper: boolean shouldWrap(android.content.Context)> ==> <androidx.appcompat.view.ContextThemeWrapper: android.content.res.Resources getResources()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<android.content.Context: android.content.res.Resources getResources()>() in <androidx.appcompat.widget.TintContextWrapper: boolean shouldWrap(android.content.Context)> ==> <androidx.appcompat.app.AppCompatActivity: android.content.res.Resources getResources()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<android.content.Context: android.content.res.Resources getResources()>() in <androidx.appcompat.widget.TintContextWrapper: boolean shouldWrap(android.content.Context)> ==> <androidx.appcompat.app.AppCompatActivity: android.content.res.Resources getResources()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<android.content.res.Resources: android.content.res.TypedArray obtainAttributes(android.util.AttributeSet,int[])>($r4, $r1) in <androidx.appcompat.widget.ResourcesWrapper: android.content.res.TypedArray obtainAttributes(android.util.AttributeSet,int[])> ==> <androidx.appcompat.widget.ResourcesWrapper: android.content.res.TypedArray obtainAttributes(android.util.AttributeSet,int[])>
VIRTUAL edge: $r2 = virtualinvoke $r1.<android.content.res.Resources: android.content.res.XmlResourceParser getXml(int)>($i0) in <androidx.appcompat.widget.ResourcesWrapper: android.content.res.XmlResourceParser getXml(int)> ==> <androidx.appcompat.widget.ResourcesWrapper: android.content.res.XmlResourceParser getXml(int)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<androidx.collection.MapCollections: int colIndexOfKey(java.lang.Object)>($r2) in <androidx.collection.MapCollections$KeySet: boolean contains(java.lang.Object)> ==> <androidx.collection.ArrayMap$1: int colIndexOfKey(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<androidx.collection.ArrayMap: int indexOfKey(java.lang.Object)>($r2) in <androidx.collection.ArrayMap$1: int colIndexOfKey(java.lang.Object)> ==> <androidx.collection.SimpleArrayMap: int indexOfKey(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <androidx.arch.core.internal.SafeIterableMap: androidx.arch.core.internal.SafeIterableMap$Entry get(java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <androidx.arch.core.internal.SafeIterableMap: androidx.arch.core.internal.SafeIterableMap$Entry get(java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r3.<android.content.res.Resources: void updateConfiguration(android.content.res.Configuration,android.util.DisplayMetrics)>($r1, $r2) in <androidx.appcompat.widget.ResourcesWrapper: void updateConfiguration(android.content.res.Configuration,android.util.DisplayMetrics)> ==> <androidx.appcompat.widget.ResourcesWrapper: void updateConfiguration(android.content.res.Configuration,android.util.DisplayMetrics)>
VIRTUAL edge: virtualinvoke $r1.<androidx.appcompat.app.ActionBar: void dispatchMenuVisibilityChanged(boolean)>(0) in <androidx.appcompat.app.AppCompatDelegateImpl: void onPanelClosed(int)> ==> <androidx.appcompat.app.WindowDecorActionBar: void dispatchMenuVisibilityChanged(boolean)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<androidx.appcompat.app.ActionBar: boolean onKeyShortcut(int,android.view.KeyEvent)>($i0, $r1) in <androidx.appcompat.app.AppCompatDelegateImpl: boolean onKeyShortcut(int,android.view.KeyEvent)> ==> <androidx.appcompat.app.WindowDecorActionBar: boolean onKeyShortcut(int,android.view.KeyEvent)>
VIRTUAL edge: virtualinvoke $r1.<androidx.appcompat.app.ActionBar: void dispatchMenuVisibilityChanged(boolean)>(1) in <androidx.appcompat.app.AppCompatDelegateImpl: void onMenuOpened(int)> ==> <androidx.appcompat.app.WindowDecorActionBar: void dispatchMenuVisibilityChanged(boolean)>
VIRTUAL edge: $z0 = virtualinvoke $r3.<androidx.appcompat.app.ActionBar: boolean collapseActionView()>() in <androidx.appcompat.app.AppCompatDelegateImpl: boolean onBackPressed()> ==> <androidx.appcompat.app.WindowDecorActionBar: boolean collapseActionView()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<androidx.appcompat.app.ActionBar: android.content.Context getThemedContext()>() in <androidx.appcompat.app.AppCompatDelegateImpl: android.content.Context getActionBarThemedContext()> ==> <androidx.appcompat.app.WindowDecorActionBar: android.content.Context getThemedContext()>
VIRTUAL edge: $r3 = virtualinvoke $r5.<androidx.appcompat.app.ActionBar: androidx.appcompat.view.ActionMode startActionMode(androidx.appcompat.view.ActionMode$Callback)>($r4) in <androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.view.ActionMode startSupportActionMode(androidx.appcompat.view.ActionMode$Callback)> ==> <androidx.appcompat.app.WindowDecorActionBar: androidx.appcompat.view.ActionMode startActionMode(androidx.appcompat.view.ActionMode$Callback)>
VIRTUAL edge: virtualinvoke $r2.<androidx.appcompat.app.WindowDecorActionBar$ActionModeImpl: void finish()>() in <androidx.appcompat.app.WindowDecorActionBar: androidx.appcompat.view.ActionMode startActionMode(androidx.appcompat.view.ActionMode$Callback)> ==> <androidx.appcompat.app.WindowDecorActionBar$ActionModeImpl: void finish()>
SPECIAL edge: specialinvoke $r2.<androidx.appcompat.app.WindowDecorActionBar$ActionModeImpl: void <init>(androidx.appcompat.app.WindowDecorActionBar,android.content.Context,androidx.appcompat.view.ActionMode$Callback)>(r0, $r5, $r1) in <androidx.appcompat.app.WindowDecorActionBar: androidx.appcompat.view.ActionMode startActionMode(androidx.appcompat.view.ActionMode$Callback)> ==> <androidx.appcompat.app.WindowDecorActionBar$ActionModeImpl: void <init>(androidx.appcompat.app.WindowDecorActionBar,android.content.Context,androidx.appcompat.view.ActionMode$Callback)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<androidx.appcompat.app.WindowDecorActionBar$ActionModeImpl: boolean dispatchOnCreate()>() in <androidx.appcompat.app.WindowDecorActionBar: androidx.appcompat.view.ActionMode startActionMode(androidx.appcompat.view.ActionMode$Callback)> ==> <androidx.appcompat.app.WindowDecorActionBar$ActionModeImpl: boolean dispatchOnCreate()>
VIRTUAL edge: virtualinvoke $r2.<androidx.appcompat.app.WindowDecorActionBar$ActionModeImpl: void invalidate()>() in <androidx.appcompat.app.WindowDecorActionBar: androidx.appcompat.view.ActionMode startActionMode(androidx.appcompat.view.ActionMode$Callback)> ==> <androidx.appcompat.app.WindowDecorActionBar$ActionModeImpl: void invalidate()>
CLINIT edge: $z0 = staticinvoke <androidx.appcompat.app.WindowDecorActionBar: boolean checkShowingFlags(boolean,boolean,boolean)>($z0, $z1, 0) in <androidx.appcompat.app.WindowDecorActionBar$ActionModeImpl: void finish()> ==> <androidx.appcompat.app.WindowDecorActionBar: void <clinit>()>
STATIC edge: $z0 = staticinvoke <androidx.appcompat.app.WindowDecorActionBar: boolean checkShowingFlags(boolean,boolean,boolean)>($z0, $z1, 0) in <androidx.appcompat.app.WindowDecorActionBar$ActionModeImpl: void finish()> ==> <androidx.appcompat.app.WindowDecorActionBar: boolean checkShowingFlags(boolean,boolean,boolean)>
CLINIT edge: $r2 = new androidx.appcompat.view.menu.MenuBuilder in <androidx.appcompat.app.WindowDecorActionBar$ActionModeImpl: void <init>(androidx.appcompat.app.WindowDecorActionBar,android.content.Context,androidx.appcompat.view.ActionMode$Callback)> ==> <androidx.appcompat.view.menu.MenuBuilder: void <clinit>()>
SPECIAL edge: specialinvoke $r2.<androidx.appcompat.view.menu.MenuBuilder: void <init>(android.content.Context)>($r4) in <androidx.appcompat.app.WindowDecorActionBar$ActionModeImpl: void <init>(androidx.appcompat.app.WindowDecorActionBar,android.content.Context,androidx.appcompat.view.ActionMode$Callback)> ==> <androidx.appcompat.view.menu.MenuBuilder: void <init>(android.content.Context)>
VIRTUAL edge: $r2 = virtualinvoke $r2.<androidx.appcompat.view.menu.MenuBuilder: androidx.appcompat.view.menu.MenuBuilder setDefaultShowAsAction(int)>(1) in <androidx.appcompat.app.WindowDecorActionBar$ActionModeImpl: void <init>(androidx.appcompat.app.WindowDecorActionBar,android.content.Context,androidx.appcompat.view.ActionMode$Callback)> ==> <androidx.appcompat.view.menu.MenuBuilder: androidx.appcompat.view.menu.MenuBuilder setDefaultShowAsAction(int)>
VIRTUAL edge: virtualinvoke $r2.<androidx.appcompat.view.menu.MenuBuilder: void setCallback(androidx.appcompat.view.menu.MenuBuilder$Callback)>(r0) in <androidx.appcompat.app.WindowDecorActionBar$ActionModeImpl: void <init>(androidx.appcompat.app.WindowDecorActionBar,android.content.Context,androidx.appcompat.view.ActionMode$Callback)> ==> <androidx.appcompat.view.menu.MenuBuilder: void setCallback(androidx.appcompat.view.menu.MenuBuilder$Callback)>
SPECIAL edge: specialinvoke r0.<androidx.appcompat.view.ActionMode: void <init>()>() in <androidx.appcompat.app.WindowDecorActionBar$ActionModeImpl: void <init>(androidx.appcompat.app.WindowDecorActionBar,android.content.Context,androidx.appcompat.view.ActionMode$Callback)> ==> <androidx.appcompat.view.ActionMode: void <init>()>
VIRTUAL edge: virtualinvoke r0.<androidx.appcompat.app.WindowDecorActionBar: void animateToMode(boolean)>(1) in <androidx.appcompat.app.WindowDecorActionBar: androidx.appcompat.view.ActionMode startActionMode(androidx.appcompat.view.ActionMode$Callback)> ==> <androidx.appcompat.app.WindowDecorActionBar: void animateToMode(boolean)>
SPECIAL edge: specialinvoke $r5.<androidx.appcompat.view.ViewPropertyAnimatorCompatSet: void <init>()>() in <androidx.appcompat.app.WindowDecorActionBar: void animateToMode(boolean)> ==> <androidx.appcompat.view.ViewPropertyAnimatorCompatSet: void <init>()>
VIRTUAL edge: virtualinvoke $r5.<androidx.appcompat.view.ViewPropertyAnimatorCompatSet: androidx.appcompat.view.ViewPropertyAnimatorCompatSet playSequentially(androidx.core.view.ViewPropertyAnimatorCompat,androidx.core.view.ViewPropertyAnimatorCompat)>($r2, $r4) in <androidx.appcompat.app.WindowDecorActionBar: void animateToMode(boolean)> ==> <androidx.appcompat.view.ViewPropertyAnimatorCompatSet: androidx.appcompat.view.ViewPropertyAnimatorCompatSet playSequentially(androidx.core.view.ViewPropertyAnimatorCompat,androidx.core.view.ViewPropertyAnimatorCompat)>
VIRTUAL edge: virtualinvoke $r5.<androidx.appcompat.view.ViewPropertyAnimatorCompatSet: void start()>() in <androidx.appcompat.app.WindowDecorActionBar: void animateToMode(boolean)> ==> <androidx.appcompat.view.ViewPropertyAnimatorCompatSet: void start()>
SPECIAL edge: specialinvoke $r1.<androidx.appcompat.view.ViewPropertyAnimatorCompatSet$1: void <init>(androidx.appcompat.view.ViewPropertyAnimatorCompatSet)>(r0) in <androidx.appcompat.view.ViewPropertyAnimatorCompatSet: void <init>()> ==> <androidx.appcompat.view.ViewPropertyAnimatorCompatSet$1: void <init>(androidx.appcompat.view.ViewPropertyAnimatorCompatSet)>
SPECIAL edge: specialinvoke r0.<androidx.core.view.ViewPropertyAnimatorListenerAdapter: void <init>()>() in <androidx.appcompat.view.ViewPropertyAnimatorCompatSet$1: void <init>(androidx.appcompat.view.ViewPropertyAnimatorCompatSet)> ==> <androidx.core.view.ViewPropertyAnimatorListenerAdapter: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.appcompat.view.ViewPropertyAnimatorCompatSet: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<androidx.appcompat.app.WindowDecorActionBar: void showForActionMode()>() in <androidx.appcompat.app.WindowDecorActionBar: void animateToMode(boolean)> ==> <androidx.appcompat.app.WindowDecorActionBar: void showForActionMode()>
SPECIAL edge: specialinvoke r0.<androidx.appcompat.app.WindowDecorActionBar: void hideForActionMode()>() in <androidx.appcompat.app.WindowDecorActionBar: void animateToMode(boolean)> ==> <androidx.appcompat.app.WindowDecorActionBar: void hideForActionMode()>
SPECIAL edge: $z1 = specialinvoke r0.<androidx.appcompat.app.WindowDecorActionBar: boolean shouldAnimateContextView()>() in <androidx.appcompat.app.WindowDecorActionBar: void animateToMode(boolean)> ==> <androidx.appcompat.app.WindowDecorActionBar: boolean shouldAnimateContextView()>
CLINIT edge: $z0 = staticinvoke <androidx.core.view.ViewCompat: boolean isLaidOut(android.view.View)>($r1) in <androidx.appcompat.app.WindowDecorActionBar: boolean shouldAnimateContextView()> ==> <androidx.core.view.ViewCompat: void <clinit>()>
STATIC edge: $z0 = staticinvoke <androidx.core.view.ViewCompat: boolean isLaidOut(android.view.View)>($r1) in <androidx.appcompat.app.WindowDecorActionBar: boolean shouldAnimateContextView()> ==> <androidx.core.view.ViewCompat: boolean isLaidOut(android.view.View)>
SPECIAL edge: specialinvoke r0.<androidx.appcompat.app.WindowDecorActionBar: void updateVisibility(boolean)>(0) in <androidx.appcompat.app.WindowDecorActionBar: void hideForActionMode()> ==> <androidx.appcompat.app.WindowDecorActionBar: void updateVisibility(boolean)>
CLINIT edge: $z1 = staticinvoke <androidx.appcompat.app.WindowDecorActionBar: boolean checkShowingFlags(boolean,boolean,boolean)>($z3, $z1, $z2) in <androidx.appcompat.app.WindowDecorActionBar: void updateVisibility(boolean)> ==> <androidx.appcompat.app.WindowDecorActionBar: void <clinit>()>
STATIC edge: $z1 = staticinvoke <androidx.appcompat.app.WindowDecorActionBar: boolean checkShowingFlags(boolean,boolean,boolean)>($z3, $z1, $z2) in <androidx.appcompat.app.WindowDecorActionBar: void updateVisibility(boolean)> ==> <androidx.appcompat.app.WindowDecorActionBar: boolean checkShowingFlags(boolean,boolean,boolean)>
VIRTUAL edge: virtualinvoke r0.<androidx.appcompat.app.WindowDecorActionBar: void doShow(boolean)>($z0) in <androidx.appcompat.app.WindowDecorActionBar: void updateVisibility(boolean)> ==> <androidx.appcompat.app.WindowDecorActionBar: void doShow(boolean)>
VIRTUAL edge: virtualinvoke r0.<androidx.appcompat.app.WindowDecorActionBar: void doHide(boolean)>($z0) in <androidx.appcompat.app.WindowDecorActionBar: void updateVisibility(boolean)> ==> <androidx.appcompat.app.WindowDecorActionBar: void doHide(boolean)>
CLINIT edge: $r5 = staticinvoke <androidx.core.view.ViewCompat: androidx.core.view.ViewPropertyAnimatorCompat animate(android.view.View)>($r3) in <androidx.appcompat.app.WindowDecorActionBar: void doShow(boolean)> ==> <androidx.core.view.ViewCompat: void <clinit>()>
STATIC edge: staticinvoke <androidx.core.view.ViewCompat: void requestApplyInsets(android.view.View)>($r9) in <androidx.appcompat.app.WindowDecorActionBar: void doShow(boolean)> ==> <androidx.core.view.ViewCompat: void requestApplyInsets(android.view.View)>
STATIC edge: $r5 = staticinvoke <androidx.core.view.ViewCompat: androidx.core.view.ViewPropertyAnimatorCompat animate(android.view.View)>($r6) in <androidx.appcompat.app.WindowDecorActionBar: void doShow(boolean)> ==> <androidx.core.view.ViewCompat: androidx.core.view.ViewPropertyAnimatorCompat animate(android.view.View)>
CLINIT edge: staticinvoke <androidx.core.view.ViewCompat: void requestApplyInsets(android.view.View)>($r9) in <androidx.appcompat.app.WindowDecorActionBar: void doShow(boolean)> ==> <androidx.core.view.ViewCompat: void <clinit>()>
CLINIT edge: $r7 = <androidx.appcompat.app.WindowDecorActionBar: android.view.animation.Interpolator sShowInterpolator> in <androidx.appcompat.app.WindowDecorActionBar: void doShow(boolean)> ==> <androidx.appcompat.app.WindowDecorActionBar: void <clinit>()>
CLINIT edge: $r4 = staticinvoke <androidx.core.view.ViewCompat: androidx.core.view.ViewPropertyAnimatorCompat animate(android.view.View)>($r1) in <androidx.appcompat.app.WindowDecorActionBar: void doHide(boolean)> ==> <androidx.core.view.ViewCompat: void <clinit>()>
STATIC edge: $r4 = staticinvoke <androidx.core.view.ViewCompat: androidx.core.view.ViewPropertyAnimatorCompat animate(android.view.View)>($r6) in <androidx.appcompat.app.WindowDecorActionBar: void doHide(boolean)> ==> <androidx.core.view.ViewCompat: androidx.core.view.ViewPropertyAnimatorCompat animate(android.view.View)>
STATIC edge: $r4 = staticinvoke <androidx.core.view.ViewCompat: androidx.core.view.ViewPropertyAnimatorCompat animate(android.view.View)>($r1) in <androidx.appcompat.app.WindowDecorActionBar: void doHide(boolean)> ==> <androidx.core.view.ViewCompat: androidx.core.view.ViewPropertyAnimatorCompat animate(android.view.View)>
CLINIT edge: $r7 = <androidx.appcompat.app.WindowDecorActionBar: android.view.animation.Interpolator sHideInterpolator> in <androidx.appcompat.app.WindowDecorActionBar: void doHide(boolean)> ==> <androidx.appcompat.app.WindowDecorActionBar: void <clinit>()>
VIRTUAL edge: $r4 = virtualinvoke $r4.<androidx.core.view.ViewPropertyAnimatorCompat: androidx.core.view.ViewPropertyAnimatorCompat translationY(float)>($f0) in <androidx.appcompat.app.WindowDecorActionBar: void doHide(boolean)> ==> <androidx.core.view.ViewPropertyAnimatorCompat: androidx.core.view.ViewPropertyAnimatorCompat translationY(float)>
VIRTUAL edge: virtualinvoke $r4.<androidx.core.view.ViewPropertyAnimatorCompat: androidx.core.view.ViewPropertyAnimatorCompat setUpdateListener(androidx.core.view.ViewPropertyAnimatorUpdateListener)>($r5) in <androidx.appcompat.app.WindowDecorActionBar: void doHide(boolean)> ==> <androidx.core.view.ViewPropertyAnimatorCompat: androidx.core.view.ViewPropertyAnimatorCompat setUpdateListener(androidx.core.view.ViewPropertyAnimatorUpdateListener)>
STATIC edge: staticinvoke <androidx.core.view.ViewPropertyAnimatorCompat$Api19Impl: android.view.ViewPropertyAnimator setUpdateListener(android.view.ViewPropertyAnimator,android.animation.ValueAnimator$AnimatorUpdateListener)>($r6, $r5) in <androidx.core.view.ViewPropertyAnimatorCompat: androidx.core.view.ViewPropertyAnimatorCompat setUpdateListener(androidx.core.view.ViewPropertyAnimatorUpdateListener)> ==> <androidx.core.view.ViewPropertyAnimatorCompat$Api19Impl: android.view.ViewPropertyAnimator setUpdateListener(android.view.ViewPropertyAnimator,android.animation.ValueAnimator$AnimatorUpdateListener)>
SPECIAL edge: specialinvoke $r5.<androidx.core.view.ViewPropertyAnimatorCompat$$ExternalSyntheticLambda0: void <init>(androidx.core.view.ViewPropertyAnimatorUpdateListener,android.view.View)>($r1, $r4) in <androidx.core.view.ViewPropertyAnimatorCompat: androidx.core.view.ViewPropertyAnimatorCompat setUpdateListener(androidx.core.view.ViewPropertyAnimatorUpdateListener)> ==> <androidx.core.view.ViewPropertyAnimatorCompat$$ExternalSyntheticLambda0: void <init>(androidx.core.view.ViewPropertyAnimatorUpdateListener,android.view.View)>
VIRTUAL edge: $r5 = virtualinvoke $r5.<androidx.core.view.ViewPropertyAnimatorCompat: androidx.core.view.ViewPropertyAnimatorCompat translationY(float)>(0.0F) in <androidx.appcompat.app.WindowDecorActionBar: void doShow(boolean)> ==> <androidx.core.view.ViewPropertyAnimatorCompat: androidx.core.view.ViewPropertyAnimatorCompat translationY(float)>
VIRTUAL edge: virtualinvoke $r5.<androidx.core.view.ViewPropertyAnimatorCompat: androidx.core.view.ViewPropertyAnimatorCompat setUpdateListener(androidx.core.view.ViewPropertyAnimatorUpdateListener)>($r1) in <androidx.appcompat.app.WindowDecorActionBar: void doShow(boolean)> ==> <androidx.core.view.ViewPropertyAnimatorCompat: androidx.core.view.ViewPropertyAnimatorCompat setUpdateListener(androidx.core.view.ViewPropertyAnimatorUpdateListener)>
VIRTUAL edge: virtualinvoke $r2.<androidx.appcompat.view.ViewPropertyAnimatorCompatSet: void cancel()>() in <androidx.appcompat.app.WindowDecorActionBar: void doHide(boolean)> ==> <androidx.appcompat.view.ViewPropertyAnimatorCompatSet: void cancel()>
SPECIAL edge: specialinvoke $r2.<androidx.appcompat.view.ViewPropertyAnimatorCompatSet: void <init>()>() in <androidx.appcompat.app.WindowDecorActionBar: void doHide(boolean)> ==> <androidx.appcompat.view.ViewPropertyAnimatorCompatSet: void <init>()>
VIRTUAL edge: virtualinvoke $r2.<androidx.appcompat.view.ViewPropertyAnimatorCompatSet: androidx.appcompat.view.ViewPropertyAnimatorCompatSet play(androidx.core.view.ViewPropertyAnimatorCompat)>($r4) in <androidx.appcompat.app.WindowDecorActionBar: void doHide(boolean)> ==> <androidx.appcompat.view.ViewPropertyAnimatorCompatSet: androidx.appcompat.view.ViewPropertyAnimatorCompatSet play(androidx.core.view.ViewPropertyAnimatorCompat)>
VIRTUAL edge: virtualinvoke $r2.<androidx.appcompat.view.ViewPropertyAnimatorCompatSet: androidx.appcompat.view.ViewPropertyAnimatorCompatSet setInterpolator(android.view.animation.Interpolator)>($r7) in <androidx.appcompat.app.WindowDecorActionBar: void doHide(boolean)> ==> <androidx.appcompat.view.ViewPropertyAnimatorCompatSet: androidx.appcompat.view.ViewPropertyAnimatorCompatSet setInterpolator(android.view.animation.Interpolator)>
VIRTUAL edge: virtualinvoke $r2.<androidx.appcompat.view.ViewPropertyAnimatorCompatSet: androidx.appcompat.view.ViewPropertyAnimatorCompatSet setDuration(long)>(250L) in <androidx.appcompat.app.WindowDecorActionBar: void doHide(boolean)> ==> <androidx.appcompat.view.ViewPropertyAnimatorCompatSet: androidx.appcompat.view.ViewPropertyAnimatorCompatSet setDuration(long)>
VIRTUAL edge: virtualinvoke $r2.<androidx.appcompat.view.ViewPropertyAnimatorCompatSet: androidx.appcompat.view.ViewPropertyAnimatorCompatSet setListener(androidx.core.view.ViewPropertyAnimatorListener)>($r8) in <androidx.appcompat.app.WindowDecorActionBar: void doHide(boolean)> ==> <androidx.appcompat.view.ViewPropertyAnimatorCompatSet: androidx.appcompat.view.ViewPropertyAnimatorCompatSet setListener(androidx.core.view.ViewPropertyAnimatorListener)>
VIRTUAL edge: virtualinvoke $r2.<androidx.appcompat.view.ViewPropertyAnimatorCompatSet: void start()>() in <androidx.appcompat.app.WindowDecorActionBar: void doHide(boolean)> ==> <androidx.appcompat.view.ViewPropertyAnimatorCompatSet: void start()>
INTERFACE edge: interfaceinvoke $r8.<androidx.core.view.ViewPropertyAnimatorListener: void onAnimationEnd(android.view.View)>(null) in <androidx.appcompat.app.WindowDecorActionBar: void doHide(boolean)> ==> <androidx.appcompat.app.WindowDecorActionBar$1: void onAnimationEnd(android.view.View)>
CLINIT edge: staticinvoke <androidx.core.view.ViewCompat: void requestApplyInsets(android.view.View)>($r4) in <androidx.appcompat.app.WindowDecorActionBar$1: void onAnimationEnd(android.view.View)> ==> <androidx.core.view.ViewCompat: void <clinit>()>
STATIC edge: staticinvoke <androidx.core.view.ViewCompat: void requestApplyInsets(android.view.View)>($r4) in <androidx.appcompat.app.WindowDecorActionBar$1: void onAnimationEnd(android.view.View)> ==> <androidx.core.view.ViewCompat: void requestApplyInsets(android.view.View)>
VIRTUAL edge: virtualinvoke $r2.<androidx.appcompat.app.WindowDecorActionBar: void completeDeferredDestroyActionMode()>() in <androidx.appcompat.app.WindowDecorActionBar$1: void onAnimationEnd(android.view.View)> ==> <androidx.appcompat.app.WindowDecorActionBar: void completeDeferredDestroyActionMode()>
VIRTUAL edge: virtualinvoke $r2.<androidx.appcompat.view.ViewPropertyAnimatorCompatSet: void cancel()>() in <androidx.appcompat.app.WindowDecorActionBar: void doShow(boolean)> ==> <androidx.appcompat.view.ViewPropertyAnimatorCompatSet: void cancel()>
SPECIAL edge: specialinvoke $r2.<androidx.appcompat.view.ViewPropertyAnimatorCompatSet: void <init>()>() in <androidx.appcompat.app.WindowDecorActionBar: void doShow(boolean)> ==> <androidx.appcompat.view.ViewPropertyAnimatorCompatSet: void <init>()>
VIRTUAL edge: virtualinvoke $r2.<androidx.appcompat.view.ViewPropertyAnimatorCompatSet: androidx.appcompat.view.ViewPropertyAnimatorCompatSet play(androidx.core.view.ViewPropertyAnimatorCompat)>($r5) in <androidx.appcompat.app.WindowDecorActionBar: void doShow(boolean)> ==> <androidx.appcompat.view.ViewPropertyAnimatorCompatSet: androidx.appcompat.view.ViewPropertyAnimatorCompatSet play(androidx.core.view.ViewPropertyAnimatorCompat)>
VIRTUAL edge: virtualinvoke $r2.<androidx.appcompat.view.ViewPropertyAnimatorCompatSet: androidx.appcompat.view.ViewPropertyAnimatorCompatSet play(androidx.core.view.ViewPropertyAnimatorCompat)>($r5) in <androidx.appcompat.app.WindowDecorActionBar: void doShow(boolean)> ==> <androidx.appcompat.view.ViewPropertyAnimatorCompatSet: androidx.appcompat.view.ViewPropertyAnimatorCompatSet play(androidx.core.view.ViewPropertyAnimatorCompat)>
VIRTUAL edge: virtualinvoke $r2.<androidx.appcompat.view.ViewPropertyAnimatorCompatSet: androidx.appcompat.view.ViewPropertyAnimatorCompatSet setInterpolator(android.view.animation.Interpolator)>($r7) in <androidx.appcompat.app.WindowDecorActionBar: void doShow(boolean)> ==> <androidx.appcompat.view.ViewPropertyAnimatorCompatSet: androidx.appcompat.view.ViewPropertyAnimatorCompatSet setInterpolator(android.view.animation.Interpolator)>
VIRTUAL edge: virtualinvoke $r2.<androidx.appcompat.view.ViewPropertyAnimatorCompatSet: androidx.appcompat.view.ViewPropertyAnimatorCompatSet setDuration(long)>(250L) in <androidx.appcompat.app.WindowDecorActionBar: void doShow(boolean)> ==> <androidx.appcompat.view.ViewPropertyAnimatorCompatSet: androidx.appcompat.view.ViewPropertyAnimatorCompatSet setDuration(long)>
VIRTUAL edge: virtualinvoke $r2.<androidx.appcompat.view.ViewPropertyAnimatorCompatSet: androidx.appcompat.view.ViewPropertyAnimatorCompatSet setListener(androidx.core.view.ViewPropertyAnimatorListener)>($r8) in <androidx.appcompat.app.WindowDecorActionBar: void doShow(boolean)> ==> <androidx.appcompat.view.ViewPropertyAnimatorCompatSet: androidx.appcompat.view.ViewPropertyAnimatorCompatSet setListener(androidx.core.view.ViewPropertyAnimatorListener)>
VIRTUAL edge: virtualinvoke $r2.<androidx.appcompat.view.ViewPropertyAnimatorCompatSet: void start()>() in <androidx.appcompat.app.WindowDecorActionBar: void doShow(boolean)> ==> <androidx.appcompat.view.ViewPropertyAnimatorCompatSet: void start()>
INTERFACE edge: interfaceinvoke $r8.<androidx.core.view.ViewPropertyAnimatorListener: void onAnimationEnd(android.view.View)>(null) in <androidx.appcompat.app.WindowDecorActionBar: void doShow(boolean)> ==> <androidx.appcompat.app.WindowDecorActionBar$2: void onAnimationEnd(android.view.View)>
SPECIAL edge: specialinvoke r0.<androidx.appcompat.app.WindowDecorActionBar: void updateVisibility(boolean)>(0) in <androidx.appcompat.app.WindowDecorActionBar: void showForActionMode()> ==> <androidx.appcompat.app.WindowDecorActionBar: void updateVisibility(boolean)>
VIRTUAL edge: virtualinvoke $r3.<androidx.appcompat.view.ActionMode: void finish()>() in <androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.view.ActionMode startSupportActionMode(androidx.appcompat.view.ActionMode$Callback)> ==> <androidx.appcompat.app.WindowDecorActionBar$ActionModeImpl: void finish()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<androidx.appcompat.app.ActionBar: boolean onMenuKeyEvent(android.view.KeyEvent)>($r1) in <androidx.appcompat.app.AppCompatActivity: boolean dispatchKeyEvent(android.view.KeyEvent)> ==> <androidx.appcompat.app.ActionBar: boolean onMenuKeyEvent(android.view.KeyEvent)>
VIRTUAL edge: $i0 = virtualinvoke $r2.<androidx.appcompat.app.ActionBar: int getDisplayOptions()>() in <androidx.appcompat.app.AppCompatActivity: boolean onMenuItemSelected(int,android.view.MenuItem)> ==> <androidx.appcompat.app.WindowDecorActionBar: int getDisplayOptions()>
VIRTUAL edge: virtualinvoke $r2.<androidx.appcompat.app.ActionBar: void onConfigurationChanged(android.content.res.Configuration)>($r1) in <androidx.appcompat.app.AppCompatDelegateImpl: void onConfigurationChanged(android.content.res.Configuration)> ==> <androidx.appcompat.app.WindowDecorActionBar: void onConfigurationChanged(android.content.res.Configuration)>
STATIC edge: $r3 = staticinvoke <androidx.appcompat.view.ActionBarPolicy: androidx.appcompat.view.ActionBarPolicy get(android.content.Context)>($r2) in <androidx.appcompat.app.WindowDecorActionBar: void onConfigurationChanged(android.content.res.Configuration)> ==> <androidx.appcompat.view.ActionBarPolicy: androidx.appcompat.view.ActionBarPolicy get(android.content.Context)>
VIRTUAL edge: $z0 = virtualinvoke $r3.<androidx.appcompat.view.ActionBarPolicy: boolean hasEmbeddedTabs()>() in <androidx.appcompat.app.WindowDecorActionBar: void onConfigurationChanged(android.content.res.Configuration)> ==> <androidx.appcompat.view.ActionBarPolicy: boolean hasEmbeddedTabs()>
SPECIAL edge: specialinvoke r0.<androidx.appcompat.app.WindowDecorActionBar: void setHasEmbeddedTabs(boolean)>($z0) in <androidx.appcompat.app.WindowDecorActionBar: void onConfigurationChanged(android.content.res.Configuration)> ==> <androidx.appcompat.app.WindowDecorActionBar: void setHasEmbeddedTabs(boolean)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>() in <androidx.appcompat.app.AppCompatActivity: void onConfigurationChanged(android.content.res.Configuration)> ==> <androidx.appcompat.widget.VectorEnabledTintResources: android.content.res.Configuration getConfiguration()>
VIRTUAL edge: $r4 = virtualinvoke $r1.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>() in <androidx.appcompat.app.AppCompatActivity: void onConfigurationChanged(android.content.res.Configuration)> ==> <androidx.appcompat.widget.VectorEnabledTintResources: android.util.DisplayMetrics getDisplayMetrics()>
VIRTUAL edge: virtualinvoke $r1.<android.content.res.Resources: void updateConfiguration(android.content.res.Configuration,android.util.DisplayMetrics)>($r2, $r4) in <androidx.appcompat.app.AppCompatActivity: void onConfigurationChanged(android.content.res.Configuration)> ==> <androidx.appcompat.widget.VectorEnabledTintResources: void updateConfiguration(android.content.res.Configuration,android.util.DisplayMetrics)>
VIRTUAL edge: $r9 = virtualinvoke $r4.<android.app.Activity: android.app.Application getApplication()>() in <androidx.core.app.ActivityRecreator: boolean recreate(android.app.Activity)> ==> <android.app.Activity: android.app.Application getApplication()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <androidx.core.app.ActivityRecreator$LifecycleCheckCallbacks: void <init>(android.app.Activity)> ==> <java.lang.Object: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<androidx.collection.MapCollections: int colGetSize()>() in <androidx.collection.MapCollections$ArrayIterator: void <init>(androidx.collection.MapCollections,int)> ==> <androidx.collection.ArraySet$1: int colGetSize()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<androidx.collection.MapCollections: int colGetSize()>() in <androidx.collection.MapCollections$ArrayIterator: void <init>(androidx.collection.MapCollections,int)> ==> <androidx.collection.ArrayMap$1: int colGetSize()>
INTERFACE edge: interfaceinvoke $r1.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>() in <androidx.activity.OnBackPressedCallback: void setEnabled(boolean)> ==> <androidx.activity.OnBackPressedDispatcher$addCallback$1: java.lang.Object invoke()>
CLINIT edge: r1 = <kotlin.Unit: kotlin.Unit INSTANCE> in <androidx.activity.OnBackPressedDispatcher$addCallback$1: java.lang.Object invoke()> ==> <kotlin.Unit: void <clinit>()>
VIRTUAL edge: virtualinvoke r0.<androidx.activity.OnBackPressedDispatcher$addCallback$1: void invoke()>() in <androidx.activity.OnBackPressedDispatcher$addCallback$1: java.lang.Object invoke()> ==> <androidx.activity.OnBackPressedDispatcher$addCallback$1: void invoke()>
STATIC edge: staticinvoke <androidx.activity.OnBackPressedDispatcher: void access$updateEnabledCallbacks(androidx.activity.OnBackPressedDispatcher)>($r2) in <androidx.activity.OnBackPressedDispatcher$addCallback$1: void invoke()> ==> <androidx.activity.OnBackPressedDispatcher: void access$updateEnabledCallbacks(androidx.activity.OnBackPressedDispatcher)>
SPECIAL edge: specialinvoke $r0.<androidx.activity.OnBackPressedDispatcher: void updateEnabledCallbacks()>() in <androidx.activity.OnBackPressedDispatcher: void access$updateEnabledCallbacks(androidx.activity.OnBackPressedDispatcher)> ==> <androidx.activity.OnBackPressedDispatcher: void updateEnabledCallbacks()>
VIRTUAL edge: $r9 = virtualinvoke $r8.<androidx.fragment.app.FragmentStore: androidx.fragment.app.Fragment findFragmentByWho(java.lang.String)>($r1) in <androidx.fragment.app.FragmentManager$9: void onActivityResult(androidx.activity.result.ActivityResult)> ==> <androidx.fragment.app.FragmentStore: androidx.fragment.app.Fragment findFragmentByWho(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<androidx.fragment.app.FragmentStore: androidx.fragment.app.Fragment findFragmentByWho(java.lang.String)>($r1) in <androidx.fragment.app.FragmentManager$10: void onActivityResult(androidx.activity.result.ActivityResult)> ==> <androidx.fragment.app.FragmentStore: androidx.fragment.app.Fragment findFragmentByWho(java.lang.String)>
VIRTUAL edge: $r16 = virtualinvoke $r15.<androidx.fragment.app.FragmentStore: androidx.fragment.app.Fragment findFragmentByWho(java.lang.String)>($r14) in <androidx.fragment.app.FragmentManager$11: void onActivityResult(java.util.Map)> ==> <androidx.fragment.app.FragmentStore: androidx.fragment.app.Fragment findFragmentByWho(java.lang.String)>
INTERFACE edge: $r5 = interfaceinvoke $r6.<androidx.lifecycle.ViewModelProvider$Factory: androidx.lifecycle.ViewModel create(java.lang.Class,androidx.lifecycle.viewmodel.CreationExtras)>($r3, $r9) in <androidx.lifecycle.ViewModelProvider: androidx.lifecycle.ViewModel get(java.lang.String,java.lang.Class)> ==> <androidx.lifecycle.ViewModelProvider$Factory: androidx.lifecycle.ViewModel create(java.lang.Class,androidx.lifecycle.viewmodel.CreationExtras)>
INTERFACE edge: $r5 = interfaceinvoke $r6.<androidx.lifecycle.ViewModelProvider$Factory: androidx.lifecycle.ViewModel create(java.lang.Class)>($r3) in <androidx.lifecycle.ViewModelProvider: androidx.lifecycle.ViewModel get(java.lang.String,java.lang.Class)> ==> <androidx.fragment.app.FragmentManagerViewModel$1: androidx.lifecycle.ViewModel create(java.lang.Class)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r3, "modelClass") in <androidx.lifecycle.ViewModelProvider$Factory: androidx.lifecycle.ViewModel create(java.lang.Class,androidx.lifecycle.viewmodel.CreationExtras)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
CLINIT edge: $r2 = new androidx.fragment.app.FragmentManagerViewModel in <androidx.fragment.app.FragmentManagerViewModel$1: androidx.lifecycle.ViewModel create(java.lang.Class)> ==> <androidx.fragment.app.FragmentManagerViewModel: void <clinit>()>
SPECIAL edge: specialinvoke $r2.<androidx.fragment.app.FragmentManagerViewModel: void <init>(boolean)>(1) in <androidx.fragment.app.FragmentManagerViewModel$1: androidx.lifecycle.ViewModel create(java.lang.Class)> ==> <androidx.fragment.app.FragmentManagerViewModel: void <init>(boolean)>
INTERFACE edge: $r2 = interfaceinvoke r0.<androidx.lifecycle.ViewModelProvider$Factory: androidx.lifecycle.ViewModel create(java.lang.Class)>($r3) in <androidx.lifecycle.ViewModelProvider$Factory: androidx.lifecycle.ViewModel create(java.lang.Class,androidx.lifecycle.viewmodel.CreationExtras)> ==> <androidx.fragment.app.FragmentManagerViewModel$1: androidx.lifecycle.ViewModel create(java.lang.Class)>
VIRTUAL edge: virtualinvoke $r5.<androidx.fragment.app.FragmentManagerViewModel: void addRetainedFragment(androidx.fragment.app.Fragment)>($r3) in <androidx.fragment.app.FragmentStore: void makeActive(androidx.fragment.app.FragmentStateManager)> ==> <androidx.fragment.app.FragmentManagerViewModel: void addRetainedFragment(androidx.fragment.app.Fragment)>
VIRTUAL edge: virtualinvoke $r5.<androidx.fragment.app.FragmentManagerViewModel: void removeRetainedFragment(androidx.fragment.app.Fragment)>($r3) in <androidx.fragment.app.FragmentStore: void makeActive(androidx.fragment.app.FragmentStateManager)> ==> <androidx.fragment.app.FragmentManagerViewModel: void removeRetainedFragment(androidx.fragment.app.Fragment)>
CLINIT edge: $z0 = staticinvoke <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>(2) in <androidx.fragment.app.FragmentManagerViewModel: void addRetainedFragment(androidx.fragment.app.Fragment)> ==> <androidx.fragment.app.FragmentManager: void <clinit>()>
STATIC edge: $z0 = staticinvoke <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>(2) in <androidx.fragment.app.FragmentManagerViewModel: void addRetainedFragment(androidx.fragment.app.Fragment)> ==> <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>
CLINIT edge: $z0 = staticinvoke <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>(2) in <androidx.fragment.app.FragmentManagerViewModel: void addRetainedFragment(androidx.fragment.app.Fragment)> ==> <androidx.fragment.app.FragmentManager: void <clinit>()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<androidx.fragment.app.FragmentHostCallback: android.content.Context getContext()>() in <androidx.fragment.app.FragmentManager$3: androidx.fragment.app.Fragment instantiate(java.lang.ClassLoader,java.lang.String)> ==> <androidx.fragment.app.FragmentHostCallback: android.content.Context getContext()>
VIRTUAL edge: $r7 = virtualinvoke $r4.<androidx.fragment.app.FragmentHostCallback: androidx.fragment.app.Fragment instantiate(android.content.Context,java.lang.String,android.os.Bundle)>($r6, $r1, null) in <androidx.fragment.app.FragmentManager$3: androidx.fragment.app.Fragment instantiate(java.lang.ClassLoader,java.lang.String)> ==> <androidx.fragment.app.FragmentContainer: androidx.fragment.app.Fragment instantiate(android.content.Context,java.lang.String,android.os.Bundle)>
CLINIT edge: $r3 = staticinvoke <androidx.fragment.app.Fragment: androidx.fragment.app.Fragment instantiate(android.content.Context,java.lang.String,android.os.Bundle)>($r4, $r1, $r2) in <androidx.fragment.app.FragmentContainer: androidx.fragment.app.Fragment instantiate(android.content.Context,java.lang.String,android.os.Bundle)> ==> <androidx.fragment.app.Fragment: void <clinit>()>
STATIC edge: $r3 = staticinvoke <androidx.fragment.app.Fragment: androidx.fragment.app.Fragment instantiate(android.content.Context,java.lang.String,android.os.Bundle)>($r4, $r1, $r2) in <androidx.fragment.app.FragmentContainer: androidx.fragment.app.Fragment instantiate(android.content.Context,java.lang.String,android.os.Bundle)> ==> <androidx.fragment.app.Fragment: androidx.fragment.app.Fragment instantiate(android.content.Context,java.lang.String,android.os.Bundle)>
CLINIT edge: $r5 = staticinvoke <androidx.fragment.app.FragmentFactory: java.lang.Class loadFragmentClass(java.lang.ClassLoader,java.lang.String)>($r4, $r2) in <androidx.fragment.app.Fragment: androidx.fragment.app.Fragment instantiate(android.content.Context,java.lang.String,android.os.Bundle)> ==> <androidx.fragment.app.FragmentFactory: void <clinit>()>
STATIC edge: $r5 = staticinvoke <androidx.fragment.app.FragmentFactory: java.lang.Class loadFragmentClass(java.lang.ClassLoader,java.lang.String)>($r4, $r2) in <androidx.fragment.app.Fragment: androidx.fragment.app.Fragment instantiate(android.content.Context,java.lang.String,android.os.Bundle)> ==> <androidx.fragment.app.FragmentFactory: java.lang.Class loadFragmentClass(java.lang.ClassLoader,java.lang.String)>
CLINIT edge: $r2 = staticinvoke <androidx.fragment.app.FragmentFactory: java.lang.Class loadClass(java.lang.ClassLoader,java.lang.String)>($r0, $r1) in <androidx.fragment.app.FragmentFactory: java.lang.Class loadFragmentClass(java.lang.ClassLoader,java.lang.String)> ==> <androidx.fragment.app.FragmentFactory: void <clinit>()>
STATIC edge: $r2 = staticinvoke <androidx.fragment.app.FragmentFactory: java.lang.Class loadClass(java.lang.ClassLoader,java.lang.String)>($r0, $r1) in <androidx.fragment.app.FragmentFactory: java.lang.Class loadFragmentClass(java.lang.ClassLoader,java.lang.String)> ==> <androidx.fragment.app.FragmentFactory: java.lang.Class loadClass(java.lang.ClassLoader,java.lang.String)>
CLINIT edge: $r2 = <androidx.fragment.app.FragmentFactory: androidx.collection.SimpleArrayMap sClassCacheMap> in <androidx.fragment.app.FragmentFactory: java.lang.Class loadClass(java.lang.ClassLoader,java.lang.String)> ==> <androidx.fragment.app.FragmentFactory: void <clinit>()>
STATIC edge: $r5 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>($r1, 0, $r0) in <androidx.fragment.app.FragmentFactory: java.lang.Class loadClass(java.lang.ClassLoader,java.lang.String)> ==> <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>
SPECIAL edge: specialinvoke $r4.<androidx.collection.SimpleArrayMap: void <init>()>() in <androidx.fragment.app.FragmentFactory: java.lang.Class loadClass(java.lang.ClassLoader,java.lang.String)> ==> <androidx.collection.SimpleArrayMap: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r4.<androidx.collection.SimpleArrayMap: java.lang.Object get(java.lang.Object)>($r1) in <androidx.fragment.app.FragmentFactory: java.lang.Class loadClass(java.lang.ClassLoader,java.lang.String)> ==> <androidx.collection.SimpleArrayMap: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r4.<androidx.collection.SimpleArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r5) in <androidx.fragment.app.FragmentFactory: java.lang.Class loadClass(java.lang.ClassLoader,java.lang.String)> ==> <androidx.collection.SimpleArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<androidx.collection.SimpleArrayMap: java.lang.Object get(java.lang.Object)>($r0) in <androidx.fragment.app.FragmentFactory: java.lang.Class loadClass(java.lang.ClassLoader,java.lang.String)> ==> <androidx.collection.SimpleArrayMap: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r2.<androidx.collection.SimpleArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r0, $r4) in <androidx.fragment.app.FragmentFactory: java.lang.Class loadClass(java.lang.ClassLoader,java.lang.String)> ==> <androidx.collection.SimpleArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r4.<androidx.fragment.app.Fragment$InstantiationException: void <init>(java.lang.String,java.lang.Exception)>($r1, $r3) in <androidx.fragment.app.FragmentFactory: java.lang.Class loadFragmentClass(java.lang.ClassLoader,java.lang.String)> ==> <androidx.fragment.app.Fragment$InstantiationException: void <init>(java.lang.String,java.lang.Exception)>
SPECIAL edge: specialinvoke $r4.<androidx.fragment.app.Fragment$InstantiationException: void <init>(java.lang.String,java.lang.Exception)>($r1, $r6) in <androidx.fragment.app.FragmentFactory: java.lang.Class loadFragmentClass(java.lang.ClassLoader,java.lang.String)> ==> <androidx.fragment.app.Fragment$InstantiationException: void <init>(java.lang.String,java.lang.Exception)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r1, $r2) in <androidx.fragment.app.Fragment$InstantiationException: void <init>(java.lang.String,java.lang.Exception)> ==> <java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r16.<androidx.fragment.app.Fragment$InstantiationException: void <init>(java.lang.String,java.lang.Exception)>($r2, $r17) in <androidx.fragment.app.Fragment: androidx.fragment.app.Fragment instantiate(android.content.Context,java.lang.String,android.os.Bundle)> ==> <androidx.fragment.app.Fragment$InstantiationException: void <init>(java.lang.String,java.lang.Exception)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<androidx.fragment.app.FragmentStore: int findFragmentIndexInContainer(androidx.fragment.app.Fragment)>($r2) in <androidx.fragment.app.FragmentStateManager: void addViewToContainer()> ==> <androidx.fragment.app.FragmentStore: int findFragmentIndexInContainer(androidx.fragment.app.Fragment)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<androidx.fragment.app.FragmentStore: androidx.fragment.app.FragmentManagerViewModel getNonConfig()>() in <androidx.fragment.app.FragmentStateManager: void detach()> ==> <androidx.fragment.app.FragmentStore: androidx.fragment.app.FragmentManagerViewModel getNonConfig()>
VIRTUAL edge: $z0 = virtualinvoke $r6.<androidx.fragment.app.FragmentManagerViewModel: boolean shouldDestroy(androidx.fragment.app.Fragment)>($r2) in <androidx.fragment.app.FragmentStateManager: void detach()> ==> <androidx.fragment.app.FragmentManagerViewModel: boolean shouldDestroy(androidx.fragment.app.Fragment)>
VIRTUAL edge: virtualinvoke $r4.<androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void dispatchOnFragmentDetached(androidx.fragment.app.Fragment,boolean)>($r2, 0) in <androidx.fragment.app.FragmentStateManager: void detach()> ==> <androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void dispatchOnFragmentDetached(androidx.fragment.app.Fragment,boolean)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<androidx.fragment.app.FragmentManager: androidx.fragment.app.Fragment getParent()>() in <androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void dispatchOnFragmentDetached(androidx.fragment.app.Fragment,boolean)> ==> <androidx.fragment.app.FragmentManager: androidx.fragment.app.Fragment getParent()>
VIRTUAL edge: $r4 = virtualinvoke $r2.<androidx.fragment.app.FragmentManager: androidx.fragment.app.FragmentLifecycleCallbacksDispatcher getLifecycleCallbacksDispatcher()>() in <androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void dispatchOnFragmentDetached(androidx.fragment.app.Fragment,boolean)> ==> <androidx.fragment.app.FragmentManager: androidx.fragment.app.FragmentLifecycleCallbacksDispatcher getLifecycleCallbacksDispatcher()>
VIRTUAL edge: virtualinvoke $r2.<androidx.fragment.app.Fragment: void performDetach()>() in <androidx.fragment.app.FragmentStateManager: void detach()> ==> <androidx.fragment.app.Fragment: void performDetach()>
VIRTUAL edge: $z1 = virtualinvoke $r2.<androidx.fragment.app.Fragment: boolean isInBackStack()>() in <androidx.fragment.app.FragmentStateManager: void detach()> ==> <androidx.fragment.app.Fragment: boolean isInBackStack()>
VIRTUAL edge: virtualinvoke $r2.<androidx.fragment.app.Fragment: void initState()>() in <androidx.fragment.app.FragmentStateManager: void detach()> ==> <androidx.fragment.app.Fragment: void initState()>
CLINIT edge: $r4 = new androidx.fragment.app.FragmentManagerImpl in <androidx.fragment.app.Fragment: void performDetach()> ==> <androidx.fragment.app.FragmentManager: void <clinit>()>
CLINIT edge: $r1 = new androidx.fragment.app.FragmentManagerImpl in <androidx.fragment.app.Fragment: void initState()> ==> <androidx.fragment.app.FragmentManager: void <clinit>()>
SPECIAL edge: specialinvoke $r1.<androidx.fragment.app.FragmentManagerImpl: void <init>()>() in <androidx.fragment.app.Fragment: void initState()> ==> <androidx.fragment.app.FragmentManagerImpl: void <init>()>
SPECIAL edge: specialinvoke r0.<androidx.fragment.app.Fragment: void initLifecycle()>() in <androidx.fragment.app.Fragment: void initState()> ==> <androidx.fragment.app.Fragment: void initLifecycle()>
SPECIAL edge: specialinvoke $r6.<androidx.fragment.app.SuperNotCalledException: void <init>(java.lang.String)>($r3) in <androidx.fragment.app.Fragment: void performDetach()> ==> <androidx.fragment.app.SuperNotCalledException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r4.<androidx.fragment.app.FragmentManagerImpl: void <init>()>() in <androidx.fragment.app.Fragment: void performDetach()> ==> <androidx.fragment.app.FragmentManagerImpl: void <init>()>
VIRTUAL edge: virtualinvoke r0.<androidx.fragment.app.Fragment: void onDetach()>() in <androidx.fragment.app.Fragment: void performDetach()> ==> <androidx.fragment.app.Fragment: void onDetach()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<androidx.fragment.app.FragmentManager: boolean isDestroyed()>() in <androidx.fragment.app.Fragment: void performDetach()> ==> <androidx.fragment.app.FragmentManager: boolean isDestroyed()>
VIRTUAL edge: virtualinvoke $r1.<androidx.fragment.app.FragmentManager: void dispatchDestroy()>() in <androidx.fragment.app.Fragment: void performDetach()> ==> <androidx.fragment.app.FragmentManager: void dispatchDestroy()>
SPECIAL edge: specialinvoke r0.<androidx.fragment.app.FragmentManager: void endAnimatingAwayFragments()>() in <androidx.fragment.app.FragmentManager: void dispatchDestroy()> ==> <androidx.fragment.app.FragmentManager: void endAnimatingAwayFragments()>
CLINIT edge: $z0 = <androidx.fragment.app.FragmentManager: boolean USE_STATE_MANAGER> in <androidx.fragment.app.FragmentManager: void endAnimatingAwayFragments()> ==> <androidx.fragment.app.FragmentManager: void <clinit>()>
SPECIAL edge: $r1 = specialinvoke r0.<androidx.fragment.app.FragmentManager: java.util.Set collectAllSpecialEffectsController()>() in <androidx.fragment.app.FragmentManager: void endAnimatingAwayFragments()> ==> <androidx.fragment.app.FragmentManager: java.util.Set collectAllSpecialEffectsController()>
SPECIAL edge: specialinvoke r0.<androidx.fragment.app.FragmentManager: void cancelExitAnimation(androidx.fragment.app.Fragment)>($r6) in <androidx.fragment.app.FragmentManager: void endAnimatingAwayFragments()> ==> <androidx.fragment.app.FragmentManager: void cancelExitAnimation(androidx.fragment.app.Fragment)>
VIRTUAL edge: virtualinvoke $r2.<androidx.activity.OnBackPressedCallback: void remove()>() in <androidx.fragment.app.FragmentManager: void dispatchDestroy()> ==> <androidx.activity.OnBackPressedCallback: void remove()>
VIRTUAL edge: virtualinvoke $r9.<androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void dispatchOnFragmentDestroyed(androidx.fragment.app.Fragment,boolean)>($r2, 0) in <androidx.fragment.app.FragmentStateManager: void destroy()> ==> <androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void dispatchOnFragmentDestroyed(androidx.fragment.app.Fragment,boolean)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<androidx.fragment.app.FragmentManager: androidx.fragment.app.Fragment getParent()>() in <androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void dispatchOnFragmentDestroyed(androidx.fragment.app.Fragment,boolean)> ==> <androidx.fragment.app.FragmentManager: androidx.fragment.app.Fragment getParent()>
VIRTUAL edge: $r4 = virtualinvoke $r2.<androidx.fragment.app.FragmentManager: androidx.fragment.app.FragmentLifecycleCallbacksDispatcher getLifecycleCallbacksDispatcher()>() in <androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void dispatchOnFragmentDestroyed(androidx.fragment.app.Fragment,boolean)> ==> <androidx.fragment.app.FragmentManager: androidx.fragment.app.FragmentLifecycleCallbacksDispatcher getLifecycleCallbacksDispatcher()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<androidx.fragment.app.FragmentStore: androidx.fragment.app.FragmentManagerViewModel getNonConfig()>() in <androidx.fragment.app.FragmentStateManager: void destroy()> ==> <androidx.fragment.app.FragmentStore: androidx.fragment.app.FragmentManagerViewModel getNonConfig()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<androidx.fragment.app.FragmentStore: androidx.fragment.app.FragmentManagerViewModel getNonConfig()>() in <androidx.fragment.app.FragmentStateManager: void destroy()> ==> <androidx.fragment.app.FragmentStore: androidx.fragment.app.FragmentManagerViewModel getNonConfig()>
VIRTUAL edge: $r10 = virtualinvoke $r4.<androidx.fragment.app.FragmentStore: java.util.List getActiveFragmentStateManagers()>() in <androidx.fragment.app.FragmentStateManager: void destroy()> ==> <androidx.fragment.app.FragmentStore: java.util.List getActiveFragmentStateManagers()>
VIRTUAL edge: $r14 = virtualinvoke $r4.<androidx.fragment.app.FragmentStore: androidx.fragment.app.Fragment findActiveFragment(java.lang.String)>($r3) in <androidx.fragment.app.FragmentStateManager: void destroy()> ==> <androidx.fragment.app.FragmentStore: androidx.fragment.app.Fragment findActiveFragment(java.lang.String)>
VIRTUAL edge: virtualinvoke $r4.<androidx.fragment.app.FragmentStore: void makeInactive(androidx.fragment.app.FragmentStateManager)>(r0) in <androidx.fragment.app.FragmentStateManager: void destroy()> ==> <androidx.fragment.app.FragmentStore: void makeInactive(androidx.fragment.app.FragmentStateManager)>
VIRTUAL edge: $z2 = virtualinvoke $r5.<androidx.fragment.app.FragmentManagerViewModel: boolean shouldDestroy(androidx.fragment.app.Fragment)>($r2) in <androidx.fragment.app.FragmentStateManager: void destroy()> ==> <androidx.fragment.app.FragmentManagerViewModel: boolean shouldDestroy(androidx.fragment.app.Fragment)>
VIRTUAL edge: $z0 = virtualinvoke $r5.<androidx.fragment.app.FragmentManagerViewModel: boolean isCleared()>() in <androidx.fragment.app.FragmentStateManager: void destroy()> ==> <androidx.fragment.app.FragmentManagerViewModel: boolean isCleared()>
VIRTUAL edge: virtualinvoke $r5.<androidx.fragment.app.FragmentManagerViewModel: void clearNonConfigState(androidx.fragment.app.Fragment)>($r2) in <androidx.fragment.app.FragmentStateManager: void destroy()> ==> <androidx.fragment.app.FragmentManagerViewModel: void clearNonConfigState(androidx.fragment.app.Fragment)>
CLINIT edge: $z0 = staticinvoke <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>(3) in <androidx.fragment.app.FragmentManagerViewModel: void clearNonConfigState(androidx.fragment.app.Fragment)> ==> <androidx.fragment.app.FragmentManager: void <clinit>()>
STATIC edge: $z0 = staticinvoke <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>(3) in <androidx.fragment.app.FragmentManagerViewModel: void clearNonConfigState(androidx.fragment.app.Fragment)> ==> <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<androidx.fragment.app.FragmentStateManager: androidx.fragment.app.Fragment getFragment()>() in <androidx.fragment.app.FragmentStore: void makeInactive(androidx.fragment.app.FragmentStateManager)> ==> <androidx.fragment.app.FragmentStateManager: androidx.fragment.app.Fragment getFragment()>
VIRTUAL edge: $z1 = virtualinvoke $r2.<androidx.fragment.app.Fragment: boolean isInBackStack()>() in <androidx.fragment.app.FragmentStateManager: void destroy()> ==> <androidx.fragment.app.Fragment: boolean isInBackStack()>
VIRTUAL edge: virtualinvoke $r2.<androidx.fragment.app.Fragment: void performDestroy()>() in <androidx.fragment.app.FragmentStateManager: void destroy()> ==> <androidx.fragment.app.Fragment: void performDestroy()>
CLINIT edge: $r3 = <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_DESTROY> in <androidx.fragment.app.Fragment: void performDestroy()> ==> <androidx.lifecycle.Lifecycle$Event: void <clinit>()>
SPECIAL edge: specialinvoke $r4.<androidx.fragment.app.SuperNotCalledException: void <init>(java.lang.String)>($r6) in <androidx.fragment.app.Fragment: void performDestroy()> ==> <androidx.fragment.app.SuperNotCalledException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<androidx.fragment.app.Fragment: void onDestroy()>() in <androidx.fragment.app.Fragment: void performDestroy()> ==> <androidx.fragment.app.Fragment: void onDestroy()>
VIRTUAL edge: virtualinvoke $r2.<androidx.lifecycle.LifecycleRegistry: void handleLifecycleEvent(androidx.lifecycle.Lifecycle$Event)>($r3) in <androidx.fragment.app.Fragment: void performDestroy()> ==> <androidx.lifecycle.LifecycleRegistry: void handleLifecycleEvent(androidx.lifecycle.Lifecycle$Event)>
VIRTUAL edge: virtualinvoke $r6.<androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void dispatchOnFragmentViewDestroyed(androidx.fragment.app.Fragment,boolean)>($r2, 0) in <androidx.fragment.app.FragmentStateManager: void destroyFragmentView()> ==> <androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void dispatchOnFragmentViewDestroyed(androidx.fragment.app.Fragment,boolean)>
VIRTUAL edge: virtualinvoke $r2.<androidx.fragment.app.Fragment: void performDestroyView()>() in <androidx.fragment.app.FragmentStateManager: void destroyFragmentView()> ==> <androidx.fragment.app.Fragment: void performDestroyView()>
CLINIT edge: $r6 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State CREATED> in <androidx.fragment.app.Fragment: void performDestroyView()> ==> <androidx.lifecycle.Lifecycle$State: void <clinit>()>
STATIC edge: $r8 = staticinvoke <androidx.loader.app.LoaderManager: androidx.loader.app.LoaderManager getInstance(androidx.lifecycle.LifecycleOwner)>(r0) in <androidx.fragment.app.Fragment: void performDestroyView()> ==> <androidx.loader.app.LoaderManager: androidx.loader.app.LoaderManager getInstance(androidx.lifecycle.LifecycleOwner)>
CLINIT edge: $r7 = <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_DESTROY> in <androidx.fragment.app.Fragment: void performDestroyView()> ==> <androidx.lifecycle.Lifecycle$Event: void <clinit>()>
CLINIT edge: $r1 = new androidx.loader.app.LoaderManagerImpl in <androidx.loader.app.LoaderManager: androidx.loader.app.LoaderManager getInstance(androidx.lifecycle.LifecycleOwner)> ==> <androidx.loader.app.LoaderManagerImpl: void <clinit>()>
VIRTUAL edge: virtualinvoke $r8.<androidx.loader.app.LoaderManager: void markForRedelivery()>() in <androidx.fragment.app.Fragment: void performDestroyView()> ==> <androidx.loader.app.LoaderManagerImpl: void markForRedelivery()>
SPECIAL edge: specialinvoke $r1.<androidx.loader.app.LoaderManagerImpl: void <init>(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.ViewModelStore)>($r0, $r2) in <androidx.loader.app.LoaderManager: androidx.loader.app.LoaderManager getInstance(androidx.lifecycle.LifecycleOwner)> ==> <androidx.loader.app.LoaderManagerImpl: void <init>(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.ViewModelStore)>
CLINIT edge: $r2 = staticinvoke <androidx.loader.app.LoaderManagerImpl$LoaderViewModel: androidx.loader.app.LoaderManagerImpl$LoaderViewModel getInstance(androidx.lifecycle.ViewModelStore)>($r1) in <androidx.loader.app.LoaderManagerImpl: void <init>(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.ViewModelStore)> ==> <androidx.loader.app.LoaderManagerImpl$LoaderViewModel: void <clinit>()>
STATIC edge: $r2 = staticinvoke <androidx.loader.app.LoaderManagerImpl$LoaderViewModel: androidx.loader.app.LoaderManagerImpl$LoaderViewModel getInstance(androidx.lifecycle.ViewModelStore)>($r1) in <androidx.loader.app.LoaderManagerImpl: void <init>(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.ViewModelStore)> ==> <androidx.loader.app.LoaderManagerImpl$LoaderViewModel: androidx.loader.app.LoaderManagerImpl$LoaderViewModel getInstance(androidx.lifecycle.ViewModelStore)>
CLINIT edge: $r1 = <androidx.loader.app.LoaderManagerImpl$LoaderViewModel: androidx.lifecycle.ViewModelProvider$Factory FACTORY> in <androidx.loader.app.LoaderManagerImpl$LoaderViewModel: androidx.loader.app.LoaderManagerImpl$LoaderViewModel getInstance(androidx.lifecycle.ViewModelStore)> ==> <androidx.loader.app.LoaderManagerImpl$LoaderViewModel: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<androidx.lifecycle.ViewModelProvider: void <init>(androidx.lifecycle.ViewModelStore,androidx.lifecycle.ViewModelProvider$Factory)>($r3, $r1) in <androidx.loader.app.LoaderManagerImpl$LoaderViewModel: androidx.loader.app.LoaderManagerImpl$LoaderViewModel getInstance(androidx.lifecycle.ViewModelStore)> ==> <androidx.lifecycle.ViewModelProvider: void <init>(androidx.lifecycle.ViewModelStore,androidx.lifecycle.ViewModelProvider$Factory)>
VIRTUAL edge: $r2 = virtualinvoke $r0.<androidx.lifecycle.ViewModelProvider: androidx.lifecycle.ViewModel get(java.lang.Class)>(class "Landroidx/loader/app/LoaderManagerImpl$LoaderViewModel;") in <androidx.loader.app.LoaderManagerImpl$LoaderViewModel: androidx.loader.app.LoaderManagerImpl$LoaderViewModel getInstance(androidx.lifecycle.ViewModelStore)> ==> <androidx.lifecycle.ViewModelProvider: androidx.lifecycle.ViewModel get(java.lang.Class)>
SPECIAL edge: specialinvoke $r0.<androidx.loader.app.LoaderManagerImpl$LoaderViewModel$1: void <init>()>() in <androidx.loader.app.LoaderManagerImpl$LoaderViewModel: void <clinit>()> ==> <androidx.loader.app.LoaderManagerImpl$LoaderViewModel$1: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.loader.app.LoaderManagerImpl$LoaderViewModel$1: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<androidx.loader.app.LoaderManager: void <init>()>() in <androidx.loader.app.LoaderManagerImpl: void <init>(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.ViewModelStore)> ==> <androidx.loader.app.LoaderManager: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.loader.app.LoaderManager: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r9.<androidx.fragment.app.SuperNotCalledException: void <init>(java.lang.String)>($r11) in <androidx.fragment.app.Fragment: void performDestroyView()> ==> <androidx.fragment.app.SuperNotCalledException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<androidx.fragment.app.Fragment: void onDestroyView()>() in <androidx.fragment.app.Fragment: void performDestroyView()> ==> <androidx.fragment.app.Fragment: void onDestroyView()>
INTERFACE edge: $r2 = interfaceinvoke $r3.<androidx.lifecycle.ViewModelStoreOwner: androidx.lifecycle.ViewModelStore getViewModelStore()>() in <androidx.loader.app.LoaderManager: androidx.loader.app.LoaderManager getInstance(androidx.lifecycle.LifecycleOwner)> ==> <androidx.fragment.app.Fragment: androidx.lifecycle.ViewModelStore getViewModelStore()>
CLINIT edge: $r2 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State INITIALIZED> in <androidx.fragment.app.Fragment: androidx.lifecycle.ViewModelStore getViewModelStore()> ==> <androidx.lifecycle.Lifecycle$State: void <clinit>()>
VIRTUAL edge: $i1 = virtualinvoke $r2.<androidx.lifecycle.Lifecycle$State: int ordinal()>() in <androidx.fragment.app.Fragment: androidx.lifecycle.ViewModelStore getViewModelStore()> ==> <java.lang.Enum: int ordinal()>
SPECIAL edge: $i0 = specialinvoke r0.<androidx.fragment.app.Fragment: int getMinimumMaxLifecycleState()>() in <androidx.fragment.app.Fragment: androidx.lifecycle.ViewModelStore getViewModelStore()> ==> <androidx.fragment.app.Fragment: int getMinimumMaxLifecycleState()>
CLINIT edge: $r2 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State INITIALIZED> in <androidx.fragment.app.Fragment: int getMinimumMaxLifecycleState()> ==> <androidx.lifecycle.Lifecycle$State: void <clinit>()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<androidx.lifecycle.Lifecycle$State: int ordinal()>() in <androidx.fragment.app.Fragment: int getMinimumMaxLifecycleState()> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: virtualinvoke $r1.<androidx.fragment.app.FragmentManager: void dispatchDestroyView()>() in <androidx.fragment.app.Fragment: void performDestroyView()> ==> <androidx.fragment.app.FragmentManager: void dispatchDestroyView()>
SPECIAL edge: specialinvoke r0.<androidx.fragment.app.FragmentManager: void dispatchStateChange(int)>(1) in <androidx.fragment.app.FragmentManager: void dispatchDestroyView()> ==> <androidx.fragment.app.FragmentManager: void dispatchStateChange(int)>
VIRTUAL edge: virtualinvoke $r7.<androidx.lifecycle.MutableLiveData: void setValue(java.lang.Object)>(null) in <androidx.fragment.app.FragmentStateManager: void destroyFragmentView()> ==> <androidx.lifecycle.MutableLiveData: void setValue(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<androidx.lifecycle.LiveData: void setValue(java.lang.Object)>($r1) in <androidx.lifecycle.MutableLiveData: void setValue(java.lang.Object)> ==> <androidx.lifecycle.LiveData: void setValue(java.lang.Object)>
CLINIT edge: staticinvoke <androidx.lifecycle.LiveData: void assertMainThread(java.lang.String)>("setValue") in <androidx.lifecycle.LiveData: void setValue(java.lang.Object)> ==> <androidx.lifecycle.LiveData: void <clinit>()>
STATIC edge: staticinvoke <androidx.lifecycle.LiveData: void assertMainThread(java.lang.String)>("setValue") in <androidx.lifecycle.LiveData: void setValue(java.lang.Object)> ==> <androidx.lifecycle.LiveData: void assertMainThread(java.lang.String)>
CLINIT edge: $r1 = staticinvoke <androidx.arch.core.executor.ArchTaskExecutor: androidx.arch.core.executor.ArchTaskExecutor getInstance()>() in <androidx.lifecycle.LiveData: void assertMainThread(java.lang.String)> ==> <androidx.arch.core.executor.ArchTaskExecutor: void <clinit>()>
STATIC edge: $r1 = staticinvoke <androidx.arch.core.executor.ArchTaskExecutor: androidx.arch.core.executor.ArchTaskExecutor getInstance()>() in <androidx.lifecycle.LiveData: void assertMainThread(java.lang.String)> ==> <androidx.arch.core.executor.ArchTaskExecutor: androidx.arch.core.executor.ArchTaskExecutor getInstance()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<androidx.arch.core.executor.ArchTaskExecutor: boolean isMainThread()>() in <androidx.lifecycle.LiveData: void assertMainThread(java.lang.String)> ==> <androidx.arch.core.executor.ArchTaskExecutor: boolean isMainThread()>
VIRTUAL edge: virtualinvoke r0.<androidx.lifecycle.LiveData: void dispatchingValue(androidx.lifecycle.LiveData$ObserverWrapper)>(null) in <androidx.lifecycle.LiveData: void setValue(java.lang.Object)> ==> <androidx.lifecycle.LiveData: void dispatchingValue(androidx.lifecycle.LiveData$ObserverWrapper)>
SPECIAL edge: specialinvoke r0.<androidx.lifecycle.LiveData: void considerNotify(androidx.lifecycle.LiveData$ObserverWrapper)>($r1) in <androidx.lifecycle.LiveData: void dispatchingValue(androidx.lifecycle.LiveData$ObserverWrapper)> ==> <androidx.lifecycle.LiveData: void considerNotify(androidx.lifecycle.LiveData$ObserverWrapper)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<androidx.arch.core.internal.SafeIterableMap: androidx.arch.core.internal.SafeIterableMap$IteratorWithAdditions iteratorWithAdditions()>() in <androidx.lifecycle.LiveData: void dispatchingValue(androidx.lifecycle.LiveData$ObserverWrapper)> ==> <androidx.arch.core.internal.SafeIterableMap: androidx.arch.core.internal.SafeIterableMap$IteratorWithAdditions iteratorWithAdditions()>
INTERFACE edge: $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>() in <androidx.lifecycle.LiveData: void dispatchingValue(androidx.lifecycle.LiveData$ObserverWrapper)> ==> <androidx.arch.core.internal.SafeIterableMap$IteratorWithAdditions: boolean hasNext()>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>() in <androidx.lifecycle.LiveData: void dispatchingValue(androidx.lifecycle.LiveData$ObserverWrapper)> ==> <androidx.arch.core.internal.SafeIterableMap$IteratorWithAdditions: java.util.Map$Entry next()>
INTERFACE edge: $r4 = interfaceinvoke $r5.<java.util.Map$Entry: java.lang.Object getValue()>() in <androidx.lifecycle.LiveData: void dispatchingValue(androidx.lifecycle.LiveData$ObserverWrapper)> ==> <androidx.arch.core.internal.SafeIterableMap$Entry: java.lang.Object getValue()>
VIRTUAL edge: virtualinvoke $r4.<androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void dispatchOnFragmentStopped(androidx.fragment.app.Fragment,boolean)>($r2, 0) in <androidx.fragment.app.FragmentStateManager: void stop()> ==> <androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void dispatchOnFragmentStopped(androidx.fragment.app.Fragment,boolean)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<androidx.fragment.app.FragmentManager: androidx.fragment.app.Fragment getParent()>() in <androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void dispatchOnFragmentStopped(androidx.fragment.app.Fragment,boolean)> ==> <androidx.fragment.app.FragmentManager: androidx.fragment.app.Fragment getParent()>
VIRTUAL edge: $r4 = virtualinvoke $r2.<androidx.fragment.app.FragmentManager: androidx.fragment.app.FragmentLifecycleCallbacksDispatcher getLifecycleCallbacksDispatcher()>() in <androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void dispatchOnFragmentStopped(androidx.fragment.app.Fragment,boolean)> ==> <androidx.fragment.app.FragmentManager: androidx.fragment.app.FragmentLifecycleCallbacksDispatcher getLifecycleCallbacksDispatcher()>
VIRTUAL edge: virtualinvoke $r2.<androidx.fragment.app.Fragment: void performStop()>() in <androidx.fragment.app.FragmentStateManager: void stop()> ==> <androidx.fragment.app.Fragment: void performStop()>
CLINIT edge: $r4 = <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_STOP> in <androidx.fragment.app.Fragment: void performStop()> ==> <androidx.lifecycle.Lifecycle$Event: void <clinit>()>
SPECIAL edge: specialinvoke $r6.<androidx.fragment.app.SuperNotCalledException: void <init>(java.lang.String)>($r8) in <androidx.fragment.app.Fragment: void performStop()> ==> <androidx.fragment.app.SuperNotCalledException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<androidx.fragment.app.Fragment: void onStop()>() in <androidx.fragment.app.Fragment: void performStop()> ==> <androidx.fragment.app.Fragment: void onStop()>
VIRTUAL edge: virtualinvoke $r5.<androidx.lifecycle.LifecycleRegistry: void handleLifecycleEvent(androidx.lifecycle.Lifecycle$Event)>($r4) in <androidx.fragment.app.Fragment: void performStop()> ==> <androidx.lifecycle.LifecycleRegistry: void handleLifecycleEvent(androidx.lifecycle.Lifecycle$Event)>
VIRTUAL edge: virtualinvoke $r1.<androidx.fragment.app.FragmentManager: void dispatchStop()>() in <androidx.fragment.app.Fragment: void performStop()> ==> <androidx.fragment.app.FragmentManager: void dispatchStop()>
VIRTUAL edge: virtualinvoke $r4.<androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void dispatchOnFragmentPaused(androidx.fragment.app.Fragment,boolean)>($r2, 0) in <androidx.fragment.app.FragmentStateManager: void pause()> ==> <androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void dispatchOnFragmentPaused(androidx.fragment.app.Fragment,boolean)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<androidx.fragment.app.FragmentManager: androidx.fragment.app.Fragment getParent()>() in <androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void dispatchOnFragmentPaused(androidx.fragment.app.Fragment,boolean)> ==> <androidx.fragment.app.FragmentManager: androidx.fragment.app.Fragment getParent()>
VIRTUAL edge: $r4 = virtualinvoke $r2.<androidx.fragment.app.FragmentManager: androidx.fragment.app.FragmentLifecycleCallbacksDispatcher getLifecycleCallbacksDispatcher()>() in <androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void dispatchOnFragmentPaused(androidx.fragment.app.Fragment,boolean)> ==> <androidx.fragment.app.FragmentManager: androidx.fragment.app.FragmentLifecycleCallbacksDispatcher getLifecycleCallbacksDispatcher()>
VIRTUAL edge: virtualinvoke $r2.<androidx.fragment.app.Fragment: void performPause()>() in <androidx.fragment.app.FragmentStateManager: void pause()> ==> <androidx.fragment.app.Fragment: void performPause()>
CLINIT edge: $r4 = <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_PAUSE> in <androidx.fragment.app.Fragment: void performPause()> ==> <androidx.lifecycle.Lifecycle$Event: void <clinit>()>
SPECIAL edge: specialinvoke $r6.<androidx.fragment.app.SuperNotCalledException: void <init>(java.lang.String)>($r8) in <androidx.fragment.app.Fragment: void performPause()> ==> <androidx.fragment.app.SuperNotCalledException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<androidx.fragment.app.Fragment: void onPause()>() in <androidx.fragment.app.Fragment: void performPause()> ==> <androidx.fragment.app.Fragment: void onPause()>
VIRTUAL edge: virtualinvoke $r5.<androidx.lifecycle.LifecycleRegistry: void handleLifecycleEvent(androidx.lifecycle.Lifecycle$Event)>($r4) in <androidx.fragment.app.Fragment: void performPause()> ==> <androidx.lifecycle.LifecycleRegistry: void handleLifecycleEvent(androidx.lifecycle.Lifecycle$Event)>
VIRTUAL edge: virtualinvoke $r1.<androidx.fragment.app.FragmentManager: void dispatchPause()>() in <androidx.fragment.app.Fragment: void performPause()> ==> <androidx.fragment.app.FragmentManager: void dispatchPause()>
VIRTUAL edge: virtualinvoke $r11.<androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void dispatchOnFragmentPreAttached(androidx.fragment.app.Fragment,boolean)>($r2, 0) in <androidx.fragment.app.FragmentStateManager: void attach()> ==> <androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void dispatchOnFragmentPreAttached(androidx.fragment.app.Fragment,boolean)>
VIRTUAL edge: virtualinvoke $r11.<androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void dispatchOnFragmentAttached(androidx.fragment.app.Fragment,boolean)>($r2, 0) in <androidx.fragment.app.FragmentStateManager: void attach()> ==> <androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void dispatchOnFragmentAttached(androidx.fragment.app.Fragment,boolean)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<androidx.fragment.app.FragmentManager: androidx.fragment.app.FragmentHostCallback getHost()>() in <androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void dispatchOnFragmentAttached(androidx.fragment.app.Fragment,boolean)> ==> <androidx.fragment.app.FragmentManager: androidx.fragment.app.FragmentHostCallback getHost()>
VIRTUAL edge: $r5 = virtualinvoke $r2.<androidx.fragment.app.FragmentManager: androidx.fragment.app.Fragment getParent()>() in <androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void dispatchOnFragmentAttached(androidx.fragment.app.Fragment,boolean)> ==> <androidx.fragment.app.FragmentManager: androidx.fragment.app.Fragment getParent()>
VIRTUAL edge: $r6 = virtualinvoke $r2.<androidx.fragment.app.FragmentManager: androidx.fragment.app.FragmentLifecycleCallbacksDispatcher getLifecycleCallbacksDispatcher()>() in <androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void dispatchOnFragmentAttached(androidx.fragment.app.Fragment,boolean)> ==> <androidx.fragment.app.FragmentManager: androidx.fragment.app.FragmentLifecycleCallbacksDispatcher getLifecycleCallbacksDispatcher()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<androidx.fragment.app.FragmentHostCallback: android.content.Context getContext()>() in <androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void dispatchOnFragmentAttached(androidx.fragment.app.Fragment,boolean)> ==> <androidx.fragment.app.FragmentHostCallback: android.content.Context getContext()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<androidx.fragment.app.FragmentManager: androidx.fragment.app.FragmentHostCallback getHost()>() in <androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void dispatchOnFragmentPreAttached(androidx.fragment.app.Fragment,boolean)> ==> <androidx.fragment.app.FragmentManager: androidx.fragment.app.FragmentHostCallback getHost()>
VIRTUAL edge: $r5 = virtualinvoke $r2.<androidx.fragment.app.FragmentManager: androidx.fragment.app.Fragment getParent()>() in <androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void dispatchOnFragmentPreAttached(androidx.fragment.app.Fragment,boolean)> ==> <androidx.fragment.app.FragmentManager: androidx.fragment.app.Fragment getParent()>
VIRTUAL edge: $r6 = virtualinvoke $r2.<androidx.fragment.app.FragmentManager: androidx.fragment.app.FragmentLifecycleCallbacksDispatcher getLifecycleCallbacksDispatcher()>() in <androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void dispatchOnFragmentPreAttached(androidx.fragment.app.Fragment,boolean)> ==> <androidx.fragment.app.FragmentManager: androidx.fragment.app.FragmentLifecycleCallbacksDispatcher getLifecycleCallbacksDispatcher()>
VIRTUAL edge: virtualinvoke $r6.<androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void dispatchOnFragmentPreAttached(androidx.fragment.app.Fragment,boolean)>($r1, 1) in <androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void dispatchOnFragmentPreAttached(androidx.fragment.app.Fragment,boolean)> ==> <androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void dispatchOnFragmentPreAttached(androidx.fragment.app.Fragment,boolean)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<androidx.fragment.app.FragmentHostCallback: android.content.Context getContext()>() in <androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void dispatchOnFragmentPreAttached(androidx.fragment.app.Fragment,boolean)> ==> <androidx.fragment.app.FragmentHostCallback: android.content.Context getContext()>
VIRTUAL edge: $r4 = virtualinvoke $r5.<androidx.fragment.app.FragmentStore: androidx.fragment.app.FragmentStateManager getFragmentStateManager(java.lang.String)>($r3) in <androidx.fragment.app.FragmentStateManager: void attach()> ==> <androidx.fragment.app.FragmentStore: androidx.fragment.app.FragmentStateManager getFragmentStateManager(java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<androidx.fragment.app.Fragment: void performAttach()>() in <androidx.fragment.app.FragmentStateManager: void attach()> ==> <androidx.fragment.app.Fragment: void performAttach()>
SPECIAL edge: specialinvoke $r9.<androidx.fragment.app.SuperNotCalledException: void <init>(java.lang.String)>($r11) in <androidx.fragment.app.Fragment: void performAttach()> ==> <androidx.fragment.app.SuperNotCalledException: void <init>(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke r0.<androidx.fragment.app.Fragment: androidx.fragment.app.FragmentContainer createFragmentContainer()>() in <androidx.fragment.app.Fragment: void performAttach()> ==> <androidx.fragment.app.Fragment: androidx.fragment.app.FragmentContainer createFragmentContainer()>
VIRTUAL edge: virtualinvoke r0.<androidx.fragment.app.Fragment: void onAttach(android.content.Context)>($r8) in <androidx.fragment.app.Fragment: void performAttach()> ==> <androidx.fragment.app.Fragment: void onAttach(android.content.Context)>
VIRTUAL edge: virtualinvoke r0.<androidx.fragment.app.Fragment: void onAttach(android.app.Activity)>($r1) in <androidx.fragment.app.Fragment: void onAttach(android.content.Context)> ==> <androidx.fragment.app.Fragment: void onAttach(android.app.Activity)>
SPECIAL edge: specialinvoke $r1.<androidx.fragment.app.Fragment$4: void <init>(androidx.fragment.app.Fragment)>(r0) in <androidx.fragment.app.Fragment: androidx.fragment.app.FragmentContainer createFragmentContainer()> ==> <androidx.fragment.app.Fragment$4: void <init>(androidx.fragment.app.Fragment)>
SPECIAL edge: specialinvoke r0.<androidx.fragment.app.FragmentContainer: void <init>()>() in <androidx.fragment.app.Fragment$4: void <init>(androidx.fragment.app.Fragment)> ==> <androidx.fragment.app.FragmentContainer: void <init>()>
VIRTUAL edge: virtualinvoke $r5.<androidx.fragment.app.FragmentManager: void attachController(androidx.fragment.app.FragmentHostCallback,androidx.fragment.app.FragmentContainer,androidx.fragment.app.Fragment)>($r6, $r7, r0) in <androidx.fragment.app.Fragment: void performAttach()> ==> <androidx.fragment.app.FragmentManager: void attachController(androidx.fragment.app.FragmentHostCallback,androidx.fragment.app.FragmentContainer,androidx.fragment.app.Fragment)>
VIRTUAL edge: virtualinvoke $r5.<androidx.fragment.app.FragmentManager: void dispatchOnAttachFragment(androidx.fragment.app.Fragment)>(r0) in <androidx.fragment.app.Fragment: void performAttach()> ==> <androidx.fragment.app.FragmentManager: void dispatchOnAttachFragment(androidx.fragment.app.Fragment)>
VIRTUAL edge: virtualinvoke $r5.<androidx.fragment.app.FragmentManager: void dispatchAttach()>() in <androidx.fragment.app.Fragment: void performAttach()> ==> <androidx.fragment.app.FragmentManager: void dispatchAttach()>
INTERFACE edge: $r4 = interfaceinvoke $r3.<androidx.lifecycle.LifecycleOwner: androidx.lifecycle.Lifecycle getLifecycle()>() in <androidx.activity.OnBackPressedDispatcher: void addCallback(androidx.lifecycle.LifecycleOwner,androidx.activity.OnBackPressedCallback)> ==> <androidx.fragment.app.Fragment: androidx.lifecycle.Lifecycle getLifecycle()>
VIRTUAL edge: virtualinvoke $r4.<androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void dispatchOnFragmentPreCreated(androidx.fragment.app.Fragment,android.os.Bundle,boolean)>($r2, $r5, 0) in <androidx.fragment.app.FragmentStateManager: void create()> ==> <androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void dispatchOnFragmentPreCreated(androidx.fragment.app.Fragment,android.os.Bundle,boolean)>
VIRTUAL edge: virtualinvoke $r4.<androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void dispatchOnFragmentCreated(androidx.fragment.app.Fragment,android.os.Bundle,boolean)>($r2, $r5, 0) in <androidx.fragment.app.FragmentStateManager: void create()> ==> <androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void dispatchOnFragmentCreated(androidx.fragment.app.Fragment,android.os.Bundle,boolean)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<androidx.fragment.app.FragmentManager: androidx.fragment.app.Fragment getParent()>() in <androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void dispatchOnFragmentCreated(androidx.fragment.app.Fragment,android.os.Bundle,boolean)> ==> <androidx.fragment.app.FragmentManager: androidx.fragment.app.Fragment getParent()>
VIRTUAL edge: $r5 = virtualinvoke $r3.<androidx.fragment.app.FragmentManager: androidx.fragment.app.FragmentLifecycleCallbacksDispatcher getLifecycleCallbacksDispatcher()>() in <androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void dispatchOnFragmentCreated(androidx.fragment.app.Fragment,android.os.Bundle,boolean)> ==> <androidx.fragment.app.FragmentManager: androidx.fragment.app.FragmentLifecycleCallbacksDispatcher getLifecycleCallbacksDispatcher()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<androidx.fragment.app.FragmentManager: androidx.fragment.app.Fragment getParent()>() in <androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void dispatchOnFragmentPreCreated(androidx.fragment.app.Fragment,android.os.Bundle,boolean)> ==> <androidx.fragment.app.FragmentManager: androidx.fragment.app.Fragment getParent()>
VIRTUAL edge: $r5 = virtualinvoke $r3.<androidx.fragment.app.FragmentManager: androidx.fragment.app.FragmentLifecycleCallbacksDispatcher getLifecycleCallbacksDispatcher()>() in <androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void dispatchOnFragmentPreCreated(androidx.fragment.app.Fragment,android.os.Bundle,boolean)> ==> <androidx.fragment.app.FragmentManager: androidx.fragment.app.FragmentLifecycleCallbacksDispatcher getLifecycleCallbacksDispatcher()>
VIRTUAL edge: virtualinvoke $r2.<androidx.fragment.app.Fragment: void performCreate(android.os.Bundle)>($r5) in <androidx.fragment.app.FragmentStateManager: void create()> ==> <androidx.fragment.app.Fragment: void performCreate(android.os.Bundle)>
VIRTUAL edge: virtualinvoke $r2.<androidx.fragment.app.Fragment: void restoreChildFragmentState(android.os.Bundle)>($r5) in <androidx.fragment.app.FragmentStateManager: void create()> ==> <androidx.fragment.app.Fragment: void restoreChildFragmentState(android.os.Bundle)>
CLINIT edge: $r6 = <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_CREATE> in <androidx.fragment.app.Fragment: void performCreate(android.os.Bundle)> ==> <androidx.lifecycle.Lifecycle$Event: void <clinit>()>
VIRTUAL edge: virtualinvoke $r3.<androidx.fragment.app.FragmentManager: void restoreSaveState(android.os.Parcelable)>($r1) in <androidx.fragment.app.Fragment: void restoreChildFragmentState(android.os.Bundle)> ==> <androidx.fragment.app.FragmentManager: void restoreSaveState(android.os.Parcelable)>
VIRTUAL edge: virtualinvoke $r3.<androidx.fragment.app.FragmentManager: void dispatchCreate()>() in <androidx.fragment.app.Fragment: void restoreChildFragmentState(android.os.Bundle)> ==> <androidx.fragment.app.FragmentManager: void dispatchCreate()>
SPECIAL edge: specialinvoke $r7.<androidx.fragment.app.SuperNotCalledException: void <init>(java.lang.String)>($r9) in <androidx.fragment.app.Fragment: void performCreate(android.os.Bundle)> ==> <androidx.fragment.app.SuperNotCalledException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<androidx.fragment.app.Fragment$5: void <init>(androidx.fragment.app.Fragment)>(r0) in <androidx.fragment.app.Fragment: void performCreate(android.os.Bundle)> ==> <androidx.fragment.app.Fragment$5: void <init>(androidx.fragment.app.Fragment)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.fragment.app.Fragment$5: void <init>(androidx.fragment.app.Fragment)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke r0.<androidx.fragment.app.Fragment: void onCreate(android.os.Bundle)>($r2) in <androidx.fragment.app.Fragment: void performCreate(android.os.Bundle)> ==> <androidx.fragment.app.Fragment: void onCreate(android.os.Bundle)>
VIRTUAL edge: virtualinvoke r0.<androidx.fragment.app.Fragment: void restoreChildFragmentState(android.os.Bundle)>($r1) in <androidx.fragment.app.Fragment: void onCreate(android.os.Bundle)> ==> <androidx.fragment.app.Fragment: void restoreChildFragmentState(android.os.Bundle)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<androidx.fragment.app.FragmentManager: boolean isStateAtLeast(int)>(1) in <androidx.fragment.app.Fragment: void onCreate(android.os.Bundle)> ==> <androidx.fragment.app.FragmentManager: boolean isStateAtLeast(int)>
VIRTUAL edge: virtualinvoke $r2.<androidx.fragment.app.FragmentManager: void dispatchCreate()>() in <androidx.fragment.app.Fragment: void onCreate(android.os.Bundle)> ==> <androidx.fragment.app.FragmentManager: void dispatchCreate()>
VIRTUAL edge: virtualinvoke $r5.<androidx.savedstate.SavedStateRegistryController: void performRestore(android.os.Bundle)>($r2) in <androidx.fragment.app.Fragment: void performCreate(android.os.Bundle)> ==> <androidx.savedstate.SavedStateRegistryController: void performRestore(android.os.Bundle)>
VIRTUAL edge: virtualinvoke $r4.<androidx.lifecycle.LifecycleRegistry: void addObserver(androidx.lifecycle.LifecycleObserver)>($r1) in <androidx.fragment.app.Fragment: void performCreate(android.os.Bundle)> ==> <androidx.lifecycle.LifecycleRegistry: void addObserver(androidx.lifecycle.LifecycleObserver)>
VIRTUAL edge: virtualinvoke $r4.<androidx.lifecycle.LifecycleRegistry: void handleLifecycleEvent(androidx.lifecycle.Lifecycle$Event)>($r6) in <androidx.fragment.app.Fragment: void performCreate(android.os.Bundle)> ==> <androidx.lifecycle.LifecycleRegistry: void handleLifecycleEvent(androidx.lifecycle.Lifecycle$Event)>
VIRTUAL edge: virtualinvoke $r3.<androidx.fragment.app.FragmentManager: void noteStateNotSaved()>() in <androidx.fragment.app.Fragment: void performCreate(android.os.Bundle)> ==> <androidx.fragment.app.FragmentManager: void noteStateNotSaved()>
VIRTUAL edge: virtualinvoke $r13.<androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void dispatchOnFragmentViewCreated(androidx.fragment.app.Fragment,android.view.View,android.os.Bundle,boolean)>($r2, $r10, $r5, 0) in <androidx.fragment.app.FragmentStateManager: void createView()> ==> <androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void dispatchOnFragmentViewCreated(androidx.fragment.app.Fragment,android.view.View,android.os.Bundle,boolean)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<androidx.fragment.app.FragmentManager: androidx.fragment.app.Fragment getParent()>() in <androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void dispatchOnFragmentViewCreated(androidx.fragment.app.Fragment,android.view.View,android.os.Bundle,boolean)> ==> <androidx.fragment.app.FragmentManager: androidx.fragment.app.Fragment getParent()>
VIRTUAL edge: $r6 = virtualinvoke $r4.<androidx.fragment.app.FragmentManager: androidx.fragment.app.FragmentLifecycleCallbacksDispatcher getLifecycleCallbacksDispatcher()>() in <androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void dispatchOnFragmentViewCreated(androidx.fragment.app.Fragment,android.view.View,android.os.Bundle,boolean)> ==> <androidx.fragment.app.FragmentManager: androidx.fragment.app.FragmentLifecycleCallbacksDispatcher getLifecycleCallbacksDispatcher()>
VIRTUAL edge: virtualinvoke $r6.<androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void dispatchOnFragmentViewCreated(androidx.fragment.app.Fragment,android.view.View,android.os.Bundle,boolean)>($r1, $r2, $r3, 1) in <androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void dispatchOnFragmentViewCreated(androidx.fragment.app.Fragment,android.view.View,android.os.Bundle,boolean)> ==> <androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void dispatchOnFragmentViewCreated(androidx.fragment.app.Fragment,android.view.View,android.os.Bundle,boolean)>
VIRTUAL edge: $r6 = virtualinvoke $r2.<androidx.fragment.app.Fragment: android.view.LayoutInflater performGetLayoutInflater(android.os.Bundle)>($r5) in <androidx.fragment.app.FragmentStateManager: void createView()> ==> <androidx.fragment.app.Fragment: android.view.LayoutInflater performGetLayoutInflater(android.os.Bundle)>
VIRTUAL edge: $r11 = virtualinvoke $r2.<androidx.fragment.app.Fragment: android.content.res.Resources getResources()>() in <androidx.fragment.app.FragmentStateManager: void createView()> ==> <androidx.fragment.app.Fragment: android.content.res.Resources getResources()>
VIRTUAL edge: virtualinvoke $r2.<androidx.fragment.app.Fragment: void performCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>($r6, $r7, $r5) in <androidx.fragment.app.FragmentStateManager: void createView()> ==> <androidx.fragment.app.Fragment: void performCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>
VIRTUAL edge: virtualinvoke $r2.<androidx.fragment.app.Fragment: void performViewCreated()>() in <androidx.fragment.app.FragmentStateManager: void createView()> ==> <androidx.fragment.app.Fragment: void performViewCreated()>
VIRTUAL edge: virtualinvoke $r2.<androidx.fragment.app.Fragment: void setPostOnViewCreatedAlpha(float)>($f0) in <androidx.fragment.app.FragmentStateManager: void createView()> ==> <androidx.fragment.app.Fragment: void setPostOnViewCreatedAlpha(float)>
VIRTUAL edge: virtualinvoke $r2.<androidx.fragment.app.Fragment: void setFocusedView(android.view.View)>($r10) in <androidx.fragment.app.FragmentStateManager: void createView()> ==> <androidx.fragment.app.Fragment: void setFocusedView(android.view.View)>
STATIC edge: staticinvoke <androidx.lifecycle.ViewTreeLifecycleOwner: void set(android.view.View,androidx.lifecycle.LifecycleOwner)>($r7, $r5) in <androidx.fragment.app.Fragment: void performCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> ==> <androidx.lifecycle.ViewTreeLifecycleOwner: void set(android.view.View,androidx.lifecycle.LifecycleOwner)>
STATIC edge: staticinvoke <androidx.savedstate.ViewTreeSavedStateRegistryOwner: void set(android.view.View,androidx.savedstate.SavedStateRegistryOwner)>($r7, $r5) in <androidx.fragment.app.Fragment: void performCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> ==> <androidx.savedstate.ViewTreeSavedStateRegistryOwner: void set(android.view.View,androidx.savedstate.SavedStateRegistryOwner)>
STATIC edge: staticinvoke <androidx.lifecycle.ViewTreeViewModelStoreOwner: void set(android.view.View,androidx.lifecycle.ViewModelStoreOwner)>($r7, $r5) in <androidx.fragment.app.Fragment: void performCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> ==> <androidx.lifecycle.ViewTreeViewModelStoreOwner: void set(android.view.View,androidx.lifecycle.ViewModelStoreOwner)>
SPECIAL edge: $r2 = specialinvoke r0.<androidx.fragment.app.Fragment: androidx.fragment.app.Fragment$AnimationInfo ensureAnimationInfo()>() in <androidx.fragment.app.Fragment: void setFocusedView(android.view.View)> ==> <androidx.fragment.app.Fragment: androidx.fragment.app.Fragment$AnimationInfo ensureAnimationInfo()>
SPECIAL edge: $r1 = specialinvoke r0.<androidx.fragment.app.Fragment: androidx.fragment.app.Fragment$AnimationInfo ensureAnimationInfo()>() in <androidx.fragment.app.Fragment: void setPostOnViewCreatedAlpha(float)> ==> <androidx.fragment.app.Fragment: androidx.fragment.app.Fragment$AnimationInfo ensureAnimationInfo()>
VIRTUAL edge: virtualinvoke r0.<androidx.fragment.app.Fragment: void onViewCreated(android.view.View,android.os.Bundle)>($r2, $r1) in <androidx.fragment.app.Fragment: void performViewCreated()> ==> <androidx.fragment.app.Fragment: void onViewCreated(android.view.View,android.os.Bundle)>
VIRTUAL edge: virtualinvoke $r3.<androidx.fragment.app.FragmentManager: void dispatchViewCreated()>() in <androidx.fragment.app.Fragment: void performViewCreated()> ==> <androidx.fragment.app.FragmentManager: void dispatchViewCreated()>
SPECIAL edge: specialinvoke $r5.<androidx.fragment.app.FragmentViewLifecycleOwner: void <init>(androidx.fragment.app.Fragment,androidx.lifecycle.ViewModelStore)>(r0, $r6) in <androidx.fragment.app.Fragment: void performCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> ==> <androidx.fragment.app.FragmentViewLifecycleOwner: void <init>(androidx.fragment.app.Fragment,androidx.lifecycle.ViewModelStore)>
VIRTUAL edge: virtualinvoke $r5.<androidx.fragment.app.FragmentViewLifecycleOwner: void initialize()>() in <androidx.fragment.app.Fragment: void performCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> ==> <androidx.fragment.app.FragmentViewLifecycleOwner: void initialize()>
VIRTUAL edge: $z0 = virtualinvoke $r5.<androidx.fragment.app.FragmentViewLifecycleOwner: boolean isInitialized()>() in <androidx.fragment.app.Fragment: void performCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> ==> <androidx.fragment.app.FragmentViewLifecycleOwner: boolean isInitialized()>
CLINIT edge: $r2 = new androidx.lifecycle.LifecycleRegistry in <androidx.fragment.app.FragmentViewLifecycleOwner: void initialize()> ==> <androidx.lifecycle.LifecycleRegistry: void <clinit>()>
STATIC edge: $r1 = staticinvoke <androidx.savedstate.SavedStateRegistryController: androidx.savedstate.SavedStateRegistryController create(androidx.savedstate.SavedStateRegistryOwner)>(r0) in <androidx.fragment.app.FragmentViewLifecycleOwner: void initialize()> ==> <androidx.savedstate.SavedStateRegistryController: androidx.savedstate.SavedStateRegistryController create(androidx.savedstate.SavedStateRegistryOwner)>
CLINIT edge: $r1 = staticinvoke <androidx.savedstate.SavedStateRegistryController: androidx.savedstate.SavedStateRegistryController create(androidx.savedstate.SavedStateRegistryOwner)>(r0) in <androidx.fragment.app.FragmentViewLifecycleOwner: void initialize()> ==> <androidx.savedstate.SavedStateRegistryController: void <clinit>()>
SPECIAL edge: specialinvoke $r2.<androidx.lifecycle.LifecycleRegistry: void <init>(androidx.lifecycle.LifecycleOwner)>(r0) in <androidx.fragment.app.FragmentViewLifecycleOwner: void initialize()> ==> <androidx.lifecycle.LifecycleRegistry: void <init>(androidx.lifecycle.LifecycleOwner)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.fragment.app.FragmentViewLifecycleOwner: void <init>(androidx.fragment.app.Fragment,androidx.lifecycle.ViewModelStore)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke r0.<androidx.fragment.app.Fragment: androidx.lifecycle.ViewModelStore getViewModelStore()>() in <androidx.fragment.app.Fragment: void performCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> ==> <androidx.fragment.app.Fragment: androidx.lifecycle.ViewModelStore getViewModelStore()>
VIRTUAL edge: $r7 = virtualinvoke r0.<androidx.fragment.app.Fragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>($r2, $r3, $r1) in <androidx.fragment.app.Fragment: void performCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> ==> <androidx.fragment.app.Fragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>
VIRTUAL edge: virtualinvoke $r8.<androidx.lifecycle.MutableLiveData: void setValue(java.lang.Object)>($r5) in <androidx.fragment.app.Fragment: void performCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> ==> <androidx.lifecycle.MutableLiveData: void setValue(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r4.<androidx.fragment.app.FragmentManager: void noteStateNotSaved()>() in <androidx.fragment.app.Fragment: void performCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> ==> <androidx.fragment.app.FragmentManager: void noteStateNotSaved()>
VIRTUAL edge: $r1 = virtualinvoke r0.<androidx.fragment.app.Fragment: android.content.Context requireContext()>() in <androidx.fragment.app.Fragment: android.content.res.Resources getResources()> ==> <androidx.fragment.app.Fragment: android.content.Context requireContext()>
VIRTUAL edge: $r1 = virtualinvoke r0.<androidx.fragment.app.Fragment: android.content.Context getContext()>() in <androidx.fragment.app.Fragment: android.content.Context requireContext()> ==> <androidx.fragment.app.Fragment: android.content.Context getContext()>
VIRTUAL edge: $r1 = virtualinvoke r0.<androidx.fragment.app.Fragment: android.view.LayoutInflater onGetLayoutInflater(android.os.Bundle)>($r2) in <androidx.fragment.app.Fragment: android.view.LayoutInflater performGetLayoutInflater(android.os.Bundle)> ==> <androidx.fragment.app.Fragment: android.view.LayoutInflater onGetLayoutInflater(android.os.Bundle)>
VIRTUAL edge: $r1 = virtualinvoke r0.<androidx.fragment.app.Fragment: android.view.LayoutInflater getLayoutInflater(android.os.Bundle)>($r2) in <androidx.fragment.app.Fragment: android.view.LayoutInflater onGetLayoutInflater(android.os.Bundle)> ==> <androidx.fragment.app.Fragment: android.view.LayoutInflater getLayoutInflater(android.os.Bundle)>
STATIC edge: staticinvoke <androidx.core.view.LayoutInflaterCompat: void setFactory2(android.view.LayoutInflater,android.view.LayoutInflater$Factory2)>($r3, $r5) in <androidx.fragment.app.Fragment: android.view.LayoutInflater getLayoutInflater(android.os.Bundle)> ==> <androidx.core.view.LayoutInflaterCompat: void setFactory2(android.view.LayoutInflater,android.view.LayoutInflater$Factory2)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<androidx.fragment.app.FragmentManager: android.view.LayoutInflater$Factory2 getLayoutInflaterFactory()>() in <androidx.fragment.app.Fragment: android.view.LayoutInflater getLayoutInflater(android.os.Bundle)> ==> <androidx.fragment.app.FragmentManager: android.view.LayoutInflater$Factory2 getLayoutInflaterFactory()>
VIRTUAL edge: virtualinvoke $r8.<androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void dispatchOnFragmentViewCreated(androidx.fragment.app.Fragment,android.view.View,android.os.Bundle,boolean)>($r1, $r7, $r4, 0) in <androidx.fragment.app.FragmentStateManager: void ensureInflatedView()> ==> <androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void dispatchOnFragmentViewCreated(androidx.fragment.app.Fragment,android.view.View,android.os.Bundle,boolean)>
VIRTUAL edge: $r5 = virtualinvoke $r1.<androidx.fragment.app.Fragment: android.view.LayoutInflater performGetLayoutInflater(android.os.Bundle)>($r4) in <androidx.fragment.app.FragmentStateManager: void ensureInflatedView()> ==> <androidx.fragment.app.Fragment: android.view.LayoutInflater performGetLayoutInflater(android.os.Bundle)>
VIRTUAL edge: virtualinvoke $r1.<androidx.fragment.app.Fragment: void performCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>($r5, null, $r4) in <androidx.fragment.app.FragmentStateManager: void ensureInflatedView()> ==> <androidx.fragment.app.Fragment: void performCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>
VIRTUAL edge: virtualinvoke $r1.<androidx.fragment.app.Fragment: void performViewCreated()>() in <androidx.fragment.app.FragmentStateManager: void ensureInflatedView()> ==> <androidx.fragment.app.Fragment: void performViewCreated()>
VIRTUAL edge: virtualinvoke $r5.<androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void dispatchOnFragmentActivityCreated(androidx.fragment.app.Fragment,android.os.Bundle,boolean)>($r3, $r1, 0) in <androidx.fragment.app.FragmentStateManager: void activityCreated()> ==> <androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void dispatchOnFragmentActivityCreated(androidx.fragment.app.Fragment,android.os.Bundle,boolean)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<androidx.fragment.app.FragmentManager: androidx.fragment.app.Fragment getParent()>() in <androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void dispatchOnFragmentActivityCreated(androidx.fragment.app.Fragment,android.os.Bundle,boolean)> ==> <androidx.fragment.app.FragmentManager: androidx.fragment.app.Fragment getParent()>
VIRTUAL edge: $r5 = virtualinvoke $r3.<androidx.fragment.app.FragmentManager: androidx.fragment.app.FragmentLifecycleCallbacksDispatcher getLifecycleCallbacksDispatcher()>() in <androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void dispatchOnFragmentActivityCreated(androidx.fragment.app.Fragment,android.os.Bundle,boolean)> ==> <androidx.fragment.app.FragmentManager: androidx.fragment.app.FragmentLifecycleCallbacksDispatcher getLifecycleCallbacksDispatcher()>
VIRTUAL edge: virtualinvoke $r3.<androidx.fragment.app.Fragment: void performActivityCreated(android.os.Bundle)>($r1) in <androidx.fragment.app.FragmentStateManager: void activityCreated()> ==> <androidx.fragment.app.Fragment: void performActivityCreated(android.os.Bundle)>
SPECIAL edge: specialinvoke $r3.<androidx.fragment.app.SuperNotCalledException: void <init>(java.lang.String)>($r5) in <androidx.fragment.app.Fragment: void performActivityCreated(android.os.Bundle)> ==> <androidx.fragment.app.SuperNotCalledException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<androidx.fragment.app.Fragment: void onActivityCreated(android.os.Bundle)>($r1) in <androidx.fragment.app.Fragment: void performActivityCreated(android.os.Bundle)> ==> <androidx.fragment.app.Fragment: void onActivityCreated(android.os.Bundle)>
SPECIAL edge: specialinvoke r0.<androidx.fragment.app.Fragment: void restoreViewState()>() in <androidx.fragment.app.Fragment: void performActivityCreated(android.os.Bundle)> ==> <androidx.fragment.app.Fragment: void restoreViewState()>
CLINIT edge: $z0 = staticinvoke <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>(3) in <androidx.fragment.app.Fragment: void restoreViewState()> ==> <androidx.fragment.app.FragmentManager: void <clinit>()>
STATIC edge: $z0 = staticinvoke <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>(3) in <androidx.fragment.app.Fragment: void restoreViewState()> ==> <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>
VIRTUAL edge: virtualinvoke r0.<androidx.fragment.app.Fragment: void restoreViewState(android.os.Bundle)>($r4) in <androidx.fragment.app.Fragment: void restoreViewState()> ==> <androidx.fragment.app.Fragment: void restoreViewState(android.os.Bundle)>
CLINIT edge: $r6 = <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_CREATE> in <androidx.fragment.app.Fragment: void restoreViewState(android.os.Bundle)> ==> <androidx.lifecycle.Lifecycle$Event: void <clinit>()>
SPECIAL edge: specialinvoke $r7.<androidx.fragment.app.SuperNotCalledException: void <init>(java.lang.String)>($r9) in <androidx.fragment.app.Fragment: void restoreViewState(android.os.Bundle)> ==> <androidx.fragment.app.SuperNotCalledException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<androidx.fragment.app.Fragment: void onViewStateRestored(android.os.Bundle)>($r1) in <androidx.fragment.app.Fragment: void restoreViewState(android.os.Bundle)> ==> <androidx.fragment.app.Fragment: void onViewStateRestored(android.os.Bundle)>
VIRTUAL edge: virtualinvoke $r4.<androidx.fragment.app.FragmentViewLifecycleOwner: void performRestore(android.os.Bundle)>($r5) in <androidx.fragment.app.Fragment: void restoreViewState(android.os.Bundle)> ==> <androidx.fragment.app.FragmentViewLifecycleOwner: void performRestore(android.os.Bundle)>
VIRTUAL edge: virtualinvoke $r4.<androidx.fragment.app.FragmentViewLifecycleOwner: void handleLifecycleEvent(androidx.lifecycle.Lifecycle$Event)>($r6) in <androidx.fragment.app.Fragment: void restoreViewState(android.os.Bundle)> ==> <androidx.fragment.app.FragmentViewLifecycleOwner: void handleLifecycleEvent(androidx.lifecycle.Lifecycle$Event)>
VIRTUAL edge: virtualinvoke $r2.<androidx.lifecycle.LifecycleRegistry: void handleLifecycleEvent(androidx.lifecycle.Lifecycle$Event)>($r1) in <androidx.fragment.app.FragmentViewLifecycleOwner: void handleLifecycleEvent(androidx.lifecycle.Lifecycle$Event)> ==> <androidx.lifecycle.LifecycleRegistry: void handleLifecycleEvent(androidx.lifecycle.Lifecycle$Event)>
VIRTUAL edge: virtualinvoke $r2.<androidx.savedstate.SavedStateRegistryController: void performRestore(android.os.Bundle)>($r1) in <androidx.fragment.app.FragmentViewLifecycleOwner: void performRestore(android.os.Bundle)> ==> <androidx.savedstate.SavedStateRegistryController: void performRestore(android.os.Bundle)>
VIRTUAL edge: virtualinvoke $r2.<androidx.fragment.app.FragmentManager: void noteStateNotSaved()>() in <androidx.fragment.app.Fragment: void performActivityCreated(android.os.Bundle)> ==> <androidx.fragment.app.FragmentManager: void noteStateNotSaved()>
VIRTUAL edge: virtualinvoke $r2.<androidx.fragment.app.FragmentManager: void dispatchActivityCreated()>() in <androidx.fragment.app.Fragment: void performActivityCreated(android.os.Bundle)> ==> <androidx.fragment.app.FragmentManager: void dispatchActivityCreated()>
VIRTUAL edge: virtualinvoke $r1.<androidx.fragment.app.FragmentManagerViewModel: void setIsStateSaved(boolean)>(0) in <androidx.fragment.app.FragmentManager: void dispatchActivityCreated()> ==> <androidx.fragment.app.FragmentManagerViewModel: void setIsStateSaved(boolean)>
VIRTUAL edge: virtualinvoke $r4.<androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void dispatchOnFragmentStarted(androidx.fragment.app.Fragment,boolean)>($r2, 0) in <androidx.fragment.app.FragmentStateManager: void start()> ==> <androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void dispatchOnFragmentStarted(androidx.fragment.app.Fragment,boolean)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<androidx.fragment.app.FragmentManager: androidx.fragment.app.Fragment getParent()>() in <androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void dispatchOnFragmentStarted(androidx.fragment.app.Fragment,boolean)> ==> <androidx.fragment.app.FragmentManager: androidx.fragment.app.Fragment getParent()>
VIRTUAL edge: $r4 = virtualinvoke $r2.<androidx.fragment.app.FragmentManager: androidx.fragment.app.FragmentLifecycleCallbacksDispatcher getLifecycleCallbacksDispatcher()>() in <androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void dispatchOnFragmentStarted(androidx.fragment.app.Fragment,boolean)> ==> <androidx.fragment.app.FragmentManager: androidx.fragment.app.FragmentLifecycleCallbacksDispatcher getLifecycleCallbacksDispatcher()>
VIRTUAL edge: virtualinvoke $r2.<androidx.fragment.app.Fragment: void performStart()>() in <androidx.fragment.app.FragmentStateManager: void start()> ==> <androidx.fragment.app.Fragment: void performStart()>
CLINIT edge: $r3 = <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_START> in <androidx.fragment.app.Fragment: void performStart()> ==> <androidx.lifecycle.Lifecycle$Event: void <clinit>()>
SPECIAL edge: specialinvoke $r6.<androidx.fragment.app.SuperNotCalledException: void <init>(java.lang.String)>($r8) in <androidx.fragment.app.Fragment: void performStart()> ==> <androidx.fragment.app.SuperNotCalledException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<androidx.fragment.app.Fragment: void onStart()>() in <androidx.fragment.app.Fragment: void performStart()> ==> <androidx.fragment.app.Fragment: void onStart()>
VIRTUAL edge: virtualinvoke $r5.<androidx.fragment.app.FragmentViewLifecycleOwner: void handleLifecycleEvent(androidx.lifecycle.Lifecycle$Event)>($r3) in <androidx.fragment.app.Fragment: void performStart()> ==> <androidx.fragment.app.FragmentViewLifecycleOwner: void handleLifecycleEvent(androidx.lifecycle.Lifecycle$Event)>
VIRTUAL edge: virtualinvoke $r2.<androidx.lifecycle.LifecycleRegistry: void handleLifecycleEvent(androidx.lifecycle.Lifecycle$Event)>($r3) in <androidx.fragment.app.Fragment: void performStart()> ==> <androidx.lifecycle.LifecycleRegistry: void handleLifecycleEvent(androidx.lifecycle.Lifecycle$Event)>
VIRTUAL edge: virtualinvoke $r1.<androidx.fragment.app.FragmentManager: void noteStateNotSaved()>() in <androidx.fragment.app.Fragment: void performStart()> ==> <androidx.fragment.app.FragmentManager: void noteStateNotSaved()>
VIRTUAL edge: virtualinvoke $r1.<androidx.fragment.app.FragmentManager: void dispatchStart()>() in <androidx.fragment.app.Fragment: void performStart()> ==> <androidx.fragment.app.FragmentManager: void dispatchStart()>
VIRTUAL edge: virtualinvoke $r1.<androidx.fragment.app.FragmentManagerViewModel: void setIsStateSaved(boolean)>(0) in <androidx.fragment.app.FragmentManager: void dispatchStart()> ==> <androidx.fragment.app.FragmentManagerViewModel: void setIsStateSaved(boolean)>
VIRTUAL edge: virtualinvoke $r5.<androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void dispatchOnFragmentResumed(androidx.fragment.app.Fragment,boolean)>($r2, 0) in <androidx.fragment.app.FragmentStateManager: void resume()> ==> <androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void dispatchOnFragmentResumed(androidx.fragment.app.Fragment,boolean)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<androidx.fragment.app.FragmentManager: androidx.fragment.app.Fragment getParent()>() in <androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void dispatchOnFragmentResumed(androidx.fragment.app.Fragment,boolean)> ==> <androidx.fragment.app.FragmentManager: androidx.fragment.app.Fragment getParent()>
VIRTUAL edge: $r4 = virtualinvoke $r2.<androidx.fragment.app.FragmentManager: androidx.fragment.app.FragmentLifecycleCallbacksDispatcher getLifecycleCallbacksDispatcher()>() in <androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void dispatchOnFragmentResumed(androidx.fragment.app.Fragment,boolean)> ==> <androidx.fragment.app.FragmentManager: androidx.fragment.app.FragmentLifecycleCallbacksDispatcher getLifecycleCallbacksDispatcher()>
VIRTUAL edge: virtualinvoke $r4.<androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void dispatchOnFragmentResumed(androidx.fragment.app.Fragment,boolean)>($r1, 1) in <androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void dispatchOnFragmentResumed(androidx.fragment.app.Fragment,boolean)> ==> <androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void dispatchOnFragmentResumed(androidx.fragment.app.Fragment,boolean)>
VIRTUAL edge: $r4 = virtualinvoke $r2.<androidx.fragment.app.Fragment: android.view.View getFocusedView()>() in <androidx.fragment.app.FragmentStateManager: void resume()> ==> <androidx.fragment.app.Fragment: android.view.View getFocusedView()>
VIRTUAL edge: virtualinvoke $r2.<androidx.fragment.app.Fragment: void setFocusedView(android.view.View)>(null) in <androidx.fragment.app.FragmentStateManager: void resume()> ==> <androidx.fragment.app.Fragment: void setFocusedView(android.view.View)>
VIRTUAL edge: virtualinvoke $r2.<androidx.fragment.app.Fragment: void performResume()>() in <androidx.fragment.app.FragmentStateManager: void resume()> ==> <androidx.fragment.app.Fragment: void performResume()>
CLINIT edge: $r3 = <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_RESUME> in <androidx.fragment.app.Fragment: void performResume()> ==> <androidx.lifecycle.Lifecycle$Event: void <clinit>()>
SPECIAL edge: specialinvoke $r6.<androidx.fragment.app.SuperNotCalledException: void <init>(java.lang.String)>($r8) in <androidx.fragment.app.Fragment: void performResume()> ==> <androidx.fragment.app.SuperNotCalledException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<androidx.fragment.app.Fragment: void onResume()>() in <androidx.fragment.app.Fragment: void performResume()> ==> <androidx.fragment.app.Fragment: void onResume()>
VIRTUAL edge: virtualinvoke $r5.<androidx.fragment.app.FragmentViewLifecycleOwner: void handleLifecycleEvent(androidx.lifecycle.Lifecycle$Event)>($r3) in <androidx.fragment.app.Fragment: void performResume()> ==> <androidx.fragment.app.FragmentViewLifecycleOwner: void handleLifecycleEvent(androidx.lifecycle.Lifecycle$Event)>
VIRTUAL edge: virtualinvoke $r2.<androidx.lifecycle.LifecycleRegistry: void handleLifecycleEvent(androidx.lifecycle.Lifecycle$Event)>($r3) in <androidx.fragment.app.Fragment: void performResume()> ==> <androidx.lifecycle.LifecycleRegistry: void handleLifecycleEvent(androidx.lifecycle.Lifecycle$Event)>
VIRTUAL edge: virtualinvoke $r1.<androidx.fragment.app.FragmentManager: void noteStateNotSaved()>() in <androidx.fragment.app.Fragment: void performResume()> ==> <androidx.fragment.app.FragmentManager: void noteStateNotSaved()>
VIRTUAL edge: virtualinvoke $r1.<androidx.fragment.app.FragmentManager: boolean execPendingActions(boolean)>(1) in <androidx.fragment.app.Fragment: void performResume()> ==> <androidx.fragment.app.FragmentManager: boolean execPendingActions(boolean)>
VIRTUAL edge: virtualinvoke $r1.<androidx.fragment.app.FragmentManager: void dispatchResume()>() in <androidx.fragment.app.Fragment: void performResume()> ==> <androidx.fragment.app.FragmentManager: void dispatchResume()>
VIRTUAL edge: virtualinvoke $r1.<androidx.fragment.app.FragmentManagerViewModel: void setIsStateSaved(boolean)>(0) in <androidx.fragment.app.FragmentManager: void dispatchResume()> ==> <androidx.fragment.app.FragmentManagerViewModel: void setIsStateSaved(boolean)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<androidx.fragment.app.Fragment: androidx.fragment.app.FragmentManager getParentFragmentManager()>() in <androidx.fragment.app.FragmentStateManager: int computeExpectedState()> ==> <androidx.fragment.app.Fragment: androidx.fragment.app.FragmentManager getParentFragmentManager()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<androidx.fragment.app.Fragment: boolean isInBackStack()>() in <androidx.fragment.app.FragmentStateManager: int computeExpectedState()> ==> <androidx.fragment.app.Fragment: boolean isInBackStack()>
VIRTUAL edge: $i1 = virtualinvoke $r4.<androidx.lifecycle.Lifecycle$State: int ordinal()>() in <androidx.fragment.app.FragmentStateManager: int computeExpectedState()> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: $r6 = virtualinvoke $r2.<androidx.fragment.app.Fragment: androidx.fragment.app.FragmentManager getParentFragmentManager()>() in <androidx.fragment.app.FragmentStateManager: void moveToExpectedState()> ==> <androidx.fragment.app.Fragment: androidx.fragment.app.FragmentManager getParentFragmentManager()>
VIRTUAL edge: virtualinvoke $r2.<androidx.fragment.app.Fragment: void onHiddenChanged(boolean)>($z0) in <androidx.fragment.app.FragmentStateManager: void moveToExpectedState()> ==> <androidx.fragment.app.Fragment: void onHiddenChanged(boolean)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<androidx.fragment.app.Fragment: boolean equals(java.lang.Object)>($r3) in <androidx.fragment.app.FragmentManager: void dispatchParentPrimaryNavigationFragmentChanged(androidx.fragment.app.Fragment)> ==> <androidx.fragment.app.Fragment: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r1.<androidx.fragment.app.Fragment: void performPrimaryNavigationFragmentChanged()>() in <androidx.fragment.app.FragmentManager: void dispatchParentPrimaryNavigationFragmentChanged(androidx.fragment.app.Fragment)> ==> <androidx.fragment.app.Fragment: void performPrimaryNavigationFragmentChanged()>
CLINIT edge: $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0) in <androidx.fragment.app.Fragment: void performPrimaryNavigationFragmentChanged()> ==> <java.lang.Boolean: void <clinit>()>
STATIC edge: $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0) in <androidx.fragment.app.Fragment: void performPrimaryNavigationFragmentChanged()> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
VIRTUAL edge: virtualinvoke r0.<androidx.fragment.app.Fragment: void onPrimaryNavigationFragmentChanged(boolean)>($z0) in <androidx.fragment.app.Fragment: void performPrimaryNavigationFragmentChanged()> ==> <androidx.fragment.app.Fragment: void onPrimaryNavigationFragmentChanged(boolean)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<androidx.fragment.app.FragmentManager: boolean isPrimaryNavigation(androidx.fragment.app.Fragment)>(r0) in <androidx.fragment.app.Fragment: void performPrimaryNavigationFragmentChanged()> ==> <androidx.fragment.app.FragmentManager: boolean isPrimaryNavigation(androidx.fragment.app.Fragment)>
VIRTUAL edge: virtualinvoke $r1.<androidx.fragment.app.FragmentManager: void dispatchPrimaryNavigationFragmentChanged()>() in <androidx.fragment.app.Fragment: void performPrimaryNavigationFragmentChanged()> ==> <androidx.fragment.app.FragmentManager: void dispatchPrimaryNavigationFragmentChanged()>
SPECIAL edge: specialinvoke r0.<androidx.fragment.app.FragmentManager: void updateOnBackPressedCallbackEnabled()>() in <androidx.fragment.app.FragmentManager: void dispatchPrimaryNavigationFragmentChanged()> ==> <androidx.fragment.app.FragmentManager: void updateOnBackPressedCallbackEnabled()>
SPECIAL edge: $z0 = specialinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <androidx.fragment.app.Fragment: boolean equals(java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<androidx.fragment.app.Fragment: boolean equals(java.lang.Object)>($r3) in <androidx.fragment.app.FragmentManager: boolean isPrimaryNavigation(androidx.fragment.app.Fragment)> ==> <androidx.fragment.app.Fragment: boolean equals(java.lang.Object)>
VIRTUAL edge: $r3 = virtualinvoke $r1.<androidx.fragment.app.FragmentManager: androidx.fragment.app.Fragment getPrimaryNavigationFragment()>() in <androidx.fragment.app.FragmentManager: boolean isPrimaryNavigation(androidx.fragment.app.Fragment)> ==> <androidx.fragment.app.FragmentManager: androidx.fragment.app.Fragment getPrimaryNavigationFragment()>
VIRTUAL edge: $r16 = virtualinvoke $r15.<androidx.fragment.app.FragmentHostCallback: android.content.Context getContext()>() in <androidx.fragment.app.FragmentManager: void restoreSaveState(android.os.Parcelable)> ==> <androidx.fragment.app.FragmentHostCallback: android.content.Context getContext()>
VIRTUAL edge: $r16 = virtualinvoke $r15.<androidx.fragment.app.FragmentHostCallback: android.content.Context getContext()>() in <androidx.fragment.app.FragmentManager: void restoreSaveState(android.os.Parcelable)> ==> <androidx.fragment.app.FragmentHostCallback: android.content.Context getContext()>
VIRTUAL edge: $r10 = virtualinvoke $r8.<androidx.fragment.app.FragmentManagerViewModel: androidx.fragment.app.Fragment findRetainedFragmentByWho(java.lang.String)>($r9) in <androidx.fragment.app.FragmentManager: void restoreSaveState(android.os.Parcelable)> ==> <androidx.fragment.app.FragmentManagerViewModel: androidx.fragment.app.Fragment findRetainedFragmentByWho(java.lang.String)>
VIRTUAL edge: $r19 = virtualinvoke $r8.<androidx.fragment.app.FragmentManagerViewModel: java.util.Collection getRetainedFragments()>() in <androidx.fragment.app.FragmentManager: void restoreSaveState(android.os.Parcelable)> ==> <androidx.fragment.app.FragmentManagerViewModel: java.util.Collection getRetainedFragments()>
VIRTUAL edge: virtualinvoke $r8.<androidx.fragment.app.FragmentManagerViewModel: void removeRetainedFragment(androidx.fragment.app.Fragment)>($r10) in <androidx.fragment.app.FragmentManager: void restoreSaveState(android.os.Parcelable)> ==> <androidx.fragment.app.FragmentManagerViewModel: void removeRetainedFragment(androidx.fragment.app.Fragment)>
INTERFACE edge: $r7 = interfaceinvoke $r6.<androidx.savedstate.SavedStateRegistryOwner: androidx.savedstate.SavedStateRegistry getSavedStateRegistry()>() in <androidx.savedstate.Recreator: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)> ==> <androidx.activity.ComponentActivity: androidx.savedstate.SavedStateRegistry getSavedStateRegistry()>
INTERFACE edge: interfaceinvoke $r6.<androidx.lifecycle.LifecycleEventObserver: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)>($r1, $r2) in <androidx.lifecycle.DefaultLifecycleObserverAdapter: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)> ==> <androidx.activity.OnBackPressedDispatcher$LifecycleOnBackPressedCancellable: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)>
INTERFACE edge: interfaceinvoke $r6.<androidx.lifecycle.LifecycleEventObserver: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)>($r1, $r2) in <androidx.lifecycle.DefaultLifecycleObserverAdapter: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)> ==> <androidx.activity.ComponentActivity$6: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)>
INTERFACE edge: interfaceinvoke $r6.<androidx.lifecycle.LifecycleEventObserver: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)>($r1, $r2) in <androidx.lifecycle.DefaultLifecycleObserverAdapter: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)> ==> <androidx.lifecycle.SavedStateHandleAttacher: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)>
INTERFACE edge: interfaceinvoke $r6.<androidx.lifecycle.LifecycleEventObserver: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)>($r1, $r2) in <androidx.lifecycle.DefaultLifecycleObserverAdapter: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)> ==> <androidx.activity.ComponentActivity$2: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)>
INTERFACE edge: interfaceinvoke $r6.<androidx.lifecycle.LifecycleEventObserver: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)>($r1, $r2) in <androidx.lifecycle.DefaultLifecycleObserverAdapter: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)> ==> <androidx.activity.ComponentActivity$3: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)>
INTERFACE edge: interfaceinvoke $r6.<androidx.lifecycle.LifecycleEventObserver: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)>($r1, $r2) in <androidx.lifecycle.DefaultLifecycleObserverAdapter: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)> ==> <androidx.activity.ComponentActivity$4: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)>
CLINIT edge: $r4 = <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_START> in <androidx.activity.OnBackPressedDispatcher$LifecycleOnBackPressedCancellable: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)> ==> <androidx.lifecycle.Lifecycle$Event: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r3, "event") in <androidx.activity.OnBackPressedDispatcher$LifecycleOnBackPressedCancellable: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
CLINIT edge: $r3 = <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_CREATE> in <androidx.activity.ComponentActivity$6: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)> ==> <androidx.lifecycle.Lifecycle$Event: void <clinit>()>
STATIC edge: $r6 = staticinvoke <androidx.activity.ComponentActivity$Api33Impl: android.window.OnBackInvokedDispatcher getOnBackInvokedDispatcher(android.app.Activity)>($r4) in <androidx.activity.ComponentActivity$6: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)> ==> <androidx.activity.ComponentActivity$Api33Impl: android.window.OnBackInvokedDispatcher getOnBackInvokedDispatcher(android.app.Activity)>
STATIC edge: $r5 = staticinvoke <androidx.activity.ComponentActivity: androidx.activity.OnBackPressedDispatcher access$100(androidx.activity.ComponentActivity)>($r4) in <androidx.activity.ComponentActivity$6: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)> ==> <androidx.activity.ComponentActivity: androidx.activity.OnBackPressedDispatcher access$100(androidx.activity.ComponentActivity)>
CLINIT edge: $r3 = <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_CREATE> in <androidx.lifecycle.SavedStateHandleAttacher: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)> ==> <androidx.lifecycle.Lifecycle$Event: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "event") in <androidx.lifecycle.SavedStateHandleAttacher: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "source") in <androidx.lifecycle.SavedStateHandleAttacher: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
CLINIT edge: $r3 = <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_STOP> in <androidx.activity.ComponentActivity$2: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)> ==> <androidx.lifecycle.Lifecycle$Event: void <clinit>()>
STATIC edge: staticinvoke <androidx.activity.ComponentActivity$Api19Impl: void cancelPendingInputEvents(android.view.View)>($r6) in <androidx.activity.ComponentActivity$2: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)> ==> <androidx.activity.ComponentActivity$Api19Impl: void cancelPendingInputEvents(android.view.View)>
CLINIT edge: $r3 = <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_DESTROY> in <androidx.activity.ComponentActivity$3: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)> ==> <androidx.lifecycle.Lifecycle$Event: void <clinit>()>
VIRTUAL edge: virtualinvoke $r4.<androidx.activity.ComponentActivity: void ensureViewModelStore()>() in <androidx.activity.ComponentActivity$4: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)> ==> <androidx.activity.ComponentActivity: void ensureViewModelStore()>
VIRTUAL edge: $r2 = virtualinvoke $r4.<androidx.activity.ComponentActivity: androidx.lifecycle.Lifecycle getLifecycle()>() in <androidx.activity.ComponentActivity$4: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)> ==> <androidx.activity.ComponentActivity: androidx.lifecycle.Lifecycle getLifecycle()>
VIRTUAL edge: virtualinvoke $r2.<androidx.lifecycle.Lifecycle: void removeObserver(androidx.lifecycle.LifecycleObserver)>(r0) in <androidx.activity.ComponentActivity$4: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)> ==> <androidx.lifecycle.LifecycleRegistry: void removeObserver(androidx.lifecycle.LifecycleObserver)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "observer") in <androidx.lifecycle.LifecycleRegistry: void removeObserver(androidx.lifecycle.LifecycleObserver)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke r0.<androidx.lifecycle.LifecycleRegistry: void enforceMainThreadIfNeeded(java.lang.String)>("removeObserver") in <androidx.lifecycle.LifecycleRegistry: void removeObserver(androidx.lifecycle.LifecycleObserver)> ==> <androidx.lifecycle.LifecycleRegistry: void enforceMainThreadIfNeeded(java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<androidx.arch.core.internal.FastSafeIterableMap: java.lang.Object remove(java.lang.Object)>($r1) in <androidx.lifecycle.LifecycleRegistry: void removeObserver(androidx.lifecycle.LifecycleObserver)> ==> <androidx.arch.core.internal.FastSafeIterableMap: java.lang.Object remove(java.lang.Object)>
SPECIAL edge: $r3 = specialinvoke r0.<androidx.arch.core.internal.SafeIterableMap: java.lang.Object remove(java.lang.Object)>($r1) in <androidx.arch.core.internal.FastSafeIterableMap: java.lang.Object remove(java.lang.Object)> ==> <androidx.arch.core.internal.SafeIterableMap: java.lang.Object remove(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke r0.<androidx.arch.core.internal.SafeIterableMap: androidx.arch.core.internal.SafeIterableMap$Entry get(java.lang.Object)>($r1) in <androidx.arch.core.internal.SafeIterableMap: java.lang.Object remove(java.lang.Object)> ==> <androidx.arch.core.internal.FastSafeIterableMap: androidx.arch.core.internal.SafeIterableMap$Entry get(java.lang.Object)>
VIRTUAL edge: $r6 = virtualinvoke $r4.<androidx.activity.ComponentActivity: androidx.lifecycle.ViewModelStore getViewModelStore()>() in <androidx.activity.ComponentActivity$3: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)> ==> <androidx.activity.ComponentActivity: androidx.lifecycle.ViewModelStore getViewModelStore()>
VIRTUAL edge: virtualinvoke $r6.<androidx.lifecycle.ViewModelStore: void clear()>() in <androidx.activity.ComponentActivity$3: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)> ==> <androidx.lifecycle.ViewModelStore: void clear()>
INTERFACE edge: interfaceinvoke $r7.<androidx.activity.ComponentActivity$ReportFullyDrawnExecutor: void activityDestroyed()>() in <androidx.activity.ComponentActivity$3: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)> ==> <androidx.activity.ComponentActivity$ReportFullyDrawnExecutorApi16Impl: void activityDestroyed()>
VIRTUAL edge: virtualinvoke $r5.<androidx.activity.contextaware.ContextAwareHelper: void clearAvailableContext()>() in <androidx.activity.ComponentActivity$3: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)> ==> <androidx.activity.contextaware.ContextAwareHelper: void clearAvailableContext()>
VIRTUAL edge: virtualinvoke $r6.<androidx.lifecycle.SavedStateHandlesProvider: void performRestore()>() in <androidx.lifecycle.SavedStateHandleAttacher: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)> ==> <androidx.lifecycle.SavedStateHandlesProvider: void performRestore()>
SPECIAL edge: specialinvoke r0.<androidx.lifecycle.SavedStateHandlesProvider: androidx.lifecycle.SavedStateHandlesVM getViewModel()>() in <androidx.lifecycle.SavedStateHandlesProvider: void performRestore()> ==> <androidx.lifecycle.SavedStateHandlesProvider: androidx.lifecycle.SavedStateHandlesVM getViewModel()>
INTERFACE edge: $r1 = interfaceinvoke $r2.<kotlin.Lazy: java.lang.Object getValue()>() in <androidx.lifecycle.SavedStateHandlesProvider: androidx.lifecycle.SavedStateHandlesVM getViewModel()> ==> <kotlin.SynchronizedLazyImpl: java.lang.Object getValue()>
CLINIT edge: $r2 = <kotlin.UNINITIALIZED_VALUE: kotlin.UNINITIALIZED_VALUE INSTANCE> in <kotlin.SynchronizedLazyImpl: java.lang.Object getValue()> ==> <kotlin.UNINITIALIZED_VALUE: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r5) in <kotlin.SynchronizedLazyImpl: java.lang.Object getValue()> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>
INTERFACE edge: $r1 = interfaceinvoke $r5.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>() in <kotlin.SynchronizedLazyImpl: java.lang.Object getValue()> ==> <androidx.lifecycle.SavedStateHandlesProvider$viewModel$2: androidx.lifecycle.SavedStateHandlesVM invoke()>
CLINIT edge: $r1 = staticinvoke <androidx.lifecycle.SavedStateHandleSupport: androidx.lifecycle.SavedStateHandlesVM getSavedStateHandlesVM(androidx.lifecycle.ViewModelStoreOwner)>($r2) in <androidx.lifecycle.SavedStateHandlesProvider$viewModel$2: androidx.lifecycle.SavedStateHandlesVM invoke()> ==> <androidx.lifecycle.SavedStateHandleSupport: void <clinit>()>
STATIC edge: $r1 = staticinvoke <androidx.lifecycle.SavedStateHandleSupport: androidx.lifecycle.SavedStateHandlesVM getSavedStateHandlesVM(androidx.lifecycle.ViewModelStoreOwner)>($r2) in <androidx.lifecycle.SavedStateHandlesProvider$viewModel$2: androidx.lifecycle.SavedStateHandlesVM invoke()> ==> <androidx.lifecycle.SavedStateHandleSupport: androidx.lifecycle.SavedStateHandlesVM getSavedStateHandlesVM(androidx.lifecycle.ViewModelStoreOwner)>
CLINIT edge: $r2 = <androidx.lifecycle.SavedStateHandleSupport$savedStateHandlesVM$1$1: androidx.lifecycle.SavedStateHandleSupport$savedStateHandlesVM$1$1 INSTANCE> in <androidx.lifecycle.SavedStateHandleSupport: androidx.lifecycle.SavedStateHandlesVM getSavedStateHandlesVM(androidx.lifecycle.ViewModelStoreOwner)> ==> <androidx.lifecycle.SavedStateHandleSupport$savedStateHandlesVM$1$1: void <clinit>()>
STATIC edge: $r4 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>(class "Landroidx/lifecycle/SavedStateHandlesVM;") in <androidx.lifecycle.SavedStateHandleSupport: androidx.lifecycle.SavedStateHandlesVM getSavedStateHandlesVM(androidx.lifecycle.ViewModelStoreOwner)> ==> <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>") in <androidx.lifecycle.SavedStateHandleSupport: androidx.lifecycle.SavedStateHandlesVM getSavedStateHandlesVM(androidx.lifecycle.ViewModelStoreOwner)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
CLINIT edge: $r4 = staticinvoke <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>(class "Landroidx/lifecycle/SavedStateHandlesVM;") in <androidx.lifecycle.SavedStateHandleSupport: androidx.lifecycle.SavedStateHandlesVM getSavedStateHandlesVM(androidx.lifecycle.ViewModelStoreOwner)> ==> <kotlin.jvm.internal.Reflection: void <clinit>()>
CLINIT edge: $r0 = <kotlin.jvm.internal.Reflection: kotlin.jvm.internal.ReflectionFactory factory> in <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)> ==> <kotlin.jvm.internal.Reflection: void <clinit>()>
STATIC edge: $r5 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("kotlin.reflect.jvm.internal.ReflectionFactoryImpl") in <kotlin.jvm.internal.Reflection: void <clinit>()> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
SPECIAL edge: specialinvoke $r4.<kotlin.jvm.internal.ReflectionFactory: void <init>()>() in <kotlin.jvm.internal.Reflection: void <clinit>()> ==> <kotlin.jvm.internal.ReflectionFactory: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <kotlin.jvm.internal.ReflectionFactory: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<kotlin.jvm.internal.ReflectionFactory: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>($r2) in <kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)> ==> <kotlin.jvm.internal.ReflectionFactory: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)>
CLINIT edge: $r2 = new kotlin.jvm.internal.ClassReference in <kotlin.jvm.internal.ReflectionFactory: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)> ==> <kotlin.jvm.internal.ClassReference: void <clinit>()>
CLINIT edge: $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <kotlin.jvm.internal.ClassReference: void <clinit>()> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: $r15 = staticinvoke <kotlin.text.StringsKt: java.lang.String substringAfterLast$default(java.lang.String,char,java.lang.String,int,java.lang.Object)>($r15, 46, null, 2, null) in <kotlin.jvm.internal.ClassReference: void <clinit>()> ==> <kotlin.text.StringsKt__StringsKt: java.lang.String substringAfterLast$default(java.lang.String,char,java.lang.String,int,java.lang.Object)>
STATIC edge: $i0 = staticinvoke <kotlin.collections.MapsKt: int mapCapacity(int)>($i0) in <kotlin.jvm.internal.ClassReference: void <clinit>()> ==> <kotlin.collections.MapsKt__MapsJVMKt: int mapCapacity(int)>
STATIC edge: $r10 = staticinvoke <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>($r17, $r15) in <kotlin.jvm.internal.ClassReference: void <clinit>()> ==> <kotlin.TuplesKt: kotlin.Pair 'to'(java.lang.Object,java.lang.Object)>
STATIC edge: $r17 = staticinvoke <kotlin.text.StringsKt: java.lang.String substringAfterLast$default(java.lang.String,char,java.lang.String,int,java.lang.Object)>($r15, 46, null, 2, null) in <kotlin.jvm.internal.ClassReference: void <clinit>()> ==> <kotlin.text.StringsKt__StringsKt: java.lang.String substringAfterLast$default(java.lang.String,char,java.lang.String,int,java.lang.Object)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r15, "kotlinName") in <kotlin.jvm.internal.ClassReference: void <clinit>()> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r5, "primitiveFqNames.values") in <kotlin.jvm.internal.ClassReference: void <clinit>()> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
STATIC edge: $r11 = staticinvoke <kotlin.collections.MapsKt: java.util.Map toMap(java.lang.Iterable)>($r3) in <kotlin.jvm.internal.ClassReference: void <clinit>()> ==> <kotlin.collections.MapsKt__MapsKt: java.util.Map toMap(java.lang.Iterable)>
STATIC edge: $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <kotlin.jvm.internal.ClassReference: void <clinit>()> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: staticinvoke <kotlin.collections.CollectionsKt: void throwIndexOverflow()>() in <kotlin.jvm.internal.ClassReference: void <clinit>()> ==> <kotlin.collections.CollectionsKt__CollectionsKt: void throwIndexOverflow()>
STATIC edge: $i1 = staticinvoke <kotlin.collections.CollectionsKt: int collectionSizeOrDefault(java.lang.Iterable,int)>($r3, 10) in <kotlin.jvm.internal.ClassReference: void <clinit>()> ==> <kotlin.collections.CollectionsKt__IterablesKt: int collectionSizeOrDefault(java.lang.Iterable,int)>
STATIC edge: $r2 = staticinvoke <kotlin.collections.CollectionsKt: java.util.List listOf(java.lang.Object[])>($r1) in <kotlin.jvm.internal.ClassReference: void <clinit>()> ==> <kotlin.collections.CollectionsKt__CollectionsKt: java.util.List listOf(java.lang.Object[])>
STATIC edge: $r1 = staticinvoke <kotlin.text.StringsKt: java.lang.String substringAfterLast(java.lang.String,char,java.lang.String)>($r1, $c0, $r2) in <kotlin.text.StringsKt__StringsKt: java.lang.String substringAfterLast$default(java.lang.String,char,java.lang.String,int,java.lang.Object)> ==> <kotlin.text.StringsKt__StringsKt: java.lang.String substringAfterLast(java.lang.String,char,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>") in <kotlin.text.StringsKt__StringsKt: java.lang.String substringAfterLast(java.lang.String,char,java.lang.String)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r0, "this as java.lang.String\u2026ing(startIndex, endIndex)") in <kotlin.text.StringsKt__StringsKt: java.lang.String substringAfterLast(java.lang.String,char,java.lang.String)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
STATIC edge: $i1 = staticinvoke <kotlin.text.StringsKt: int lastIndexOf$default(java.lang.CharSequence,char,int,boolean,int,java.lang.Object)>($r2, $c0, 0, 0, 6, null) in <kotlin.text.StringsKt__StringsKt: java.lang.String substringAfterLast(java.lang.String,char,java.lang.String)> ==> <kotlin.text.StringsKt__StringsKt: int lastIndexOf$default(java.lang.CharSequence,char,int,boolean,int,java.lang.Object)>
STATIC edge: $i1 = staticinvoke <kotlin.text.StringsKt: int getLastIndex(java.lang.CharSequence)>($r0) in <kotlin.text.StringsKt__StringsKt: int lastIndexOf$default(java.lang.CharSequence,char,int,boolean,int,java.lang.Object)> ==> <kotlin.text.StringsKt__StringsKt: int getLastIndex(java.lang.CharSequence)>
STATIC edge: $i1 = staticinvoke <kotlin.text.StringsKt: int lastIndexOf(java.lang.CharSequence,char,int,boolean)>($r0, $c0, $i1, $z0) in <kotlin.text.StringsKt__StringsKt: int lastIndexOf$default(java.lang.CharSequence,char,int,boolean,int,java.lang.Object)> ==> <kotlin.text.StringsKt__StringsKt: int lastIndexOf(java.lang.CharSequence,char,int,boolean)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>") in <kotlin.text.StringsKt__StringsKt: int lastIndexOf(java.lang.CharSequence,char,int,boolean)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: $i1 = staticinvoke <kotlin.text.StringsKt: int lastIndexOfAny(java.lang.CharSequence,char[],int,boolean)>($r0, $r2, $i1, $z0) in <kotlin.text.StringsKt__StringsKt: int lastIndexOf(java.lang.CharSequence,char,int,boolean)> ==> <kotlin.text.StringsKt__StringsKt: int lastIndexOfAny(java.lang.CharSequence,char[],int,boolean)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>") in <kotlin.text.StringsKt__StringsKt: int lastIndexOfAny(java.lang.CharSequence,char[],int,boolean)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: $z2 = staticinvoke <kotlin.text.CharsKt: boolean equals(char,char,boolean)>($c4, $c2, $z0) in <kotlin.text.StringsKt__StringsKt: int lastIndexOfAny(java.lang.CharSequence,char[],int,boolean)> ==> <kotlin.text.CharsKt__CharKt: boolean equals(char,char,boolean)>
STATIC edge: $i1 = staticinvoke <kotlin.ranges.RangesKt: int coerceAtMost(int,int)>($i1, $i0) in <kotlin.text.StringsKt__StringsKt: int lastIndexOfAny(java.lang.CharSequence,char[],int,boolean)> ==> <kotlin.ranges.RangesKt___RangesKt: int coerceAtMost(int,int)>
STATIC edge: $i0 = staticinvoke <kotlin.text.StringsKt: int getLastIndex(java.lang.CharSequence)>($r0) in <kotlin.text.StringsKt__StringsKt: int lastIndexOfAny(java.lang.CharSequence,char[],int,boolean)> ==> <kotlin.text.StringsKt__StringsKt: int getLastIndex(java.lang.CharSequence)>
STATIC edge: $c2 = staticinvoke <kotlin.collections.ArraysKt: char single(char[])>($r1) in <kotlin.text.StringsKt__StringsKt: int lastIndexOfAny(java.lang.CharSequence,char[],int,boolean)> ==> <kotlin.collections.ArraysKt___ArraysKt: char single(char[])>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "chars") in <kotlin.text.StringsKt__StringsKt: int lastIndexOfAny(java.lang.CharSequence,char[],int,boolean)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r10.<kotlin.Pair: java.lang.Object getFirst()>() in <kotlin.jvm.internal.ClassReference: void <clinit>()> ==> <kotlin.Pair: java.lang.Object getFirst()>
VIRTUAL edge: $r18 = virtualinvoke $r10.<kotlin.Pair: java.lang.Object getSecond()>() in <kotlin.jvm.internal.ClassReference: void <clinit>()> ==> <kotlin.Pair: java.lang.Object getSecond()>
SPECIAL edge: specialinvoke $r0.<java.lang.ArithmeticException: void <init>(java.lang.String)>("Index overflow has happened.") in <kotlin.collections.CollectionsKt__CollectionsKt: void throwIndexOverflow()> ==> <java.lang.ArithmeticException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArithmeticException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.ArithmeticException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
INTERFACE edge: interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r18) in <kotlin.jvm.internal.ClassReference: void <clinit>()> ==> <kotlin.collections.EmptyMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: $r19 = interfaceinvoke $r11.<java.util.Map: java.util.Set entrySet()>() in <kotlin.jvm.internal.ClassReference: void <clinit>()> ==> <kotlin.collections.EmptyMap: java.util.Set entrySet()>
INTERFACE edge: $i0 = interfaceinvoke $r11.<java.util.Map: int size()>() in <kotlin.jvm.internal.ClassReference: void <clinit>()> ==> <kotlin.collections.EmptyMap: int size()>
INTERFACE edge: $r19 = interfaceinvoke $r11.<java.util.Map: java.util.Set entrySet()>() in <kotlin.jvm.internal.ClassReference: void <clinit>()> ==> <kotlin.collections.EmptyMap: java.util.Set entrySet()>
INTERFACE edge: $r6 = interfaceinvoke $r19.<java.util.Set: java.util.Iterator iterator()>() in <kotlin.jvm.internal.ClassReference: void <clinit>()> ==> <kotlin.collections.EmptySet: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>() in <kotlin.jvm.internal.ClassReference: void <clinit>()> ==> <kotlin.collections.EmptyIterator: boolean hasNext()>
INTERFACE edge: $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>() in <kotlin.jvm.internal.ClassReference: void <clinit>()> ==> <kotlin.collections.EmptyIterator: java.lang.Void next()>
INTERFACE edge: $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>() in <kotlin.jvm.internal.ClassReference: void <clinit>()> ==> <kotlin.collections.EmptyIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>() in <kotlin.jvm.internal.ClassReference: void <clinit>()> ==> <kotlin.collections.EmptyIterator: boolean hasNext()>
INTERFACE edge: $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>() in <kotlin.jvm.internal.ClassReference: void <clinit>()> ==> <kotlin.collections.EmptyIterator: java.lang.Void next()>
INTERFACE edge: $r6 = interfaceinvoke $r3.<java.lang.Iterable: java.util.Iterator iterator()>() in <kotlin.jvm.internal.ClassReference: void <clinit>()> ==> <kotlin.collections.EmptyList: java.util.Iterator iterator()>
INTERFACE edge: $r6 = interfaceinvoke $r3.<java.lang.Iterable: java.util.Iterator iterator()>() in <kotlin.jvm.internal.ClassReference: void <clinit>()> ==> <kotlin.collections.EmptyList: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke $r0.<kotlin.jvm.internal.ClassReference$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null) in <kotlin.jvm.internal.ClassReference: void <clinit>()> ==> <kotlin.jvm.internal.ClassReference$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>
SPECIAL edge: specialinvoke r0.<kotlin.jvm.internal.ClassReference$Companion: void <init>()>() in <kotlin.jvm.internal.ClassReference$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)> ==> <kotlin.jvm.internal.ClassReference$Companion: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <kotlin.jvm.internal.ClassReference$Companion: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r2.<kotlin.jvm.internal.ClassReference: void <init>(java.lang.Class)>($r1) in <kotlin.jvm.internal.ReflectionFactory: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)> ==> <kotlin.jvm.internal.ClassReference: void <init>(java.lang.Class)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "jClass") in <kotlin.jvm.internal.ClassReference: void <init>(java.lang.Class)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <kotlin.jvm.internal.ClassReference: void <init>(java.lang.Class)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<androidx.lifecycle.SavedStateHandleSupport$savedStateHandlesVM$1$1: void <init>()>() in <androidx.lifecycle.SavedStateHandleSupport$savedStateHandlesVM$1$1: void <clinit>()> ==> <androidx.lifecycle.SavedStateHandleSupport$savedStateHandlesVM$1$1: void <init>()>
SPECIAL edge: specialinvoke r0.<kotlin.jvm.internal.Lambda: void <init>(int)>(1) in <androidx.lifecycle.SavedStateHandleSupport$savedStateHandlesVM$1$1: void <init>()> ==> <kotlin.jvm.internal.Lambda: void <init>(int)>
SPECIAL edge: specialinvoke $r6.<androidx.lifecycle.ViewModelProvider: void <init>(androidx.lifecycle.ViewModelStoreOwner,androidx.lifecycle.ViewModelProvider$Factory)>($r0, $r5) in <androidx.lifecycle.SavedStateHandleSupport: androidx.lifecycle.SavedStateHandlesVM getSavedStateHandlesVM(androidx.lifecycle.ViewModelStoreOwner)> ==> <androidx.lifecycle.ViewModelProvider: void <init>(androidx.lifecycle.ViewModelStoreOwner,androidx.lifecycle.ViewModelProvider$Factory)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<androidx.lifecycle.ViewModelProvider: androidx.lifecycle.ViewModel get(java.lang.String,java.lang.Class)>("androidx.lifecycle.internal.SavedStateHandlesVM", class "Landroidx/lifecycle/SavedStateHandlesVM;") in <androidx.lifecycle.SavedStateHandleSupport: androidx.lifecycle.SavedStateHandlesVM getSavedStateHandlesVM(androidx.lifecycle.ViewModelStoreOwner)> ==> <androidx.lifecycle.ViewModelProvider: androidx.lifecycle.ViewModel get(java.lang.String,java.lang.Class)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "owner") in <androidx.lifecycle.ViewModelProvider: void <init>(androidx.lifecycle.ViewModelStoreOwner,androidx.lifecycle.ViewModelProvider$Factory)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: $r4 = staticinvoke <androidx.lifecycle.ViewModelProviderGetKt: androidx.lifecycle.viewmodel.CreationExtras defaultCreationExtras(androidx.lifecycle.ViewModelStoreOwner)>($r2) in <androidx.lifecycle.ViewModelProvider: void <init>(androidx.lifecycle.ViewModelStoreOwner,androidx.lifecycle.ViewModelProvider$Factory)> ==> <androidx.lifecycle.ViewModelProviderGetKt: androidx.lifecycle.viewmodel.CreationExtras defaultCreationExtras(androidx.lifecycle.ViewModelStoreOwner)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "factory") in <androidx.lifecycle.ViewModelProvider: void <init>(androidx.lifecycle.ViewModelStoreOwner,androidx.lifecycle.ViewModelProvider$Factory)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
CLINIT edge: $r3 = <androidx.lifecycle.viewmodel.CreationExtras$Empty: androidx.lifecycle.viewmodel.CreationExtras$Empty INSTANCE> in <androidx.lifecycle.ViewModelProviderGetKt: androidx.lifecycle.viewmodel.CreationExtras defaultCreationExtras(androidx.lifecycle.ViewModelStoreOwner)> ==> <androidx.lifecycle.viewmodel.CreationExtras$Empty: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "owner") in <androidx.lifecycle.ViewModelProviderGetKt: androidx.lifecycle.viewmodel.CreationExtras defaultCreationExtras(androidx.lifecycle.ViewModelStoreOwner)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke r0.<androidx.lifecycle.ViewModelProvider: void <init>(androidx.lifecycle.ViewModelStore,androidx.lifecycle.ViewModelProvider$Factory,androidx.lifecycle.viewmodel.CreationExtras)>($r3, $r1, $r4) in <androidx.lifecycle.ViewModelProvider: void <init>(androidx.lifecycle.ViewModelStoreOwner,androidx.lifecycle.ViewModelProvider$Factory)> ==> <androidx.lifecycle.ViewModelProvider: void <init>(androidx.lifecycle.ViewModelStore,androidx.lifecycle.ViewModelProvider$Factory,androidx.lifecycle.viewmodel.CreationExtras)>
SPECIAL edge: specialinvoke $r1.<androidx.lifecycle.viewmodel.InitializerViewModelFactoryBuilder: void <init>()>() in <androidx.lifecycle.SavedStateHandleSupport: androidx.lifecycle.SavedStateHandlesVM getSavedStateHandlesVM(androidx.lifecycle.ViewModelStoreOwner)> ==> <androidx.lifecycle.viewmodel.InitializerViewModelFactoryBuilder: void <init>()>
VIRTUAL edge: virtualinvoke $r1.<androidx.lifecycle.viewmodel.InitializerViewModelFactoryBuilder: void addInitializer(kotlin.reflect.KClass,kotlin.jvm.functions.Function1)>($r4, $r3) in <androidx.lifecycle.SavedStateHandleSupport: androidx.lifecycle.SavedStateHandlesVM getSavedStateHandlesVM(androidx.lifecycle.ViewModelStoreOwner)> ==> <androidx.lifecycle.viewmodel.InitializerViewModelFactoryBuilder: void addInitializer(kotlin.reflect.KClass,kotlin.jvm.functions.Function1)>
VIRTUAL edge: $r5 = virtualinvoke $r1.<androidx.lifecycle.viewmodel.InitializerViewModelFactoryBuilder: androidx.lifecycle.ViewModelProvider$Factory build()>() in <androidx.lifecycle.SavedStateHandleSupport: androidx.lifecycle.SavedStateHandlesVM getSavedStateHandlesVM(androidx.lifecycle.ViewModelStoreOwner)> ==> <androidx.lifecycle.viewmodel.InitializerViewModelFactoryBuilder: androidx.lifecycle.ViewModelProvider$Factory build()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r4, "clazz") in <androidx.lifecycle.viewmodel.InitializerViewModelFactoryBuilder: void addInitializer(kotlin.reflect.KClass,kotlin.jvm.functions.Function1)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: $r3 = staticinvoke <kotlin.jvm.JvmClassMappingKt: java.lang.Class getJavaClass(kotlin.reflect.KClass)>($r4) in <androidx.lifecycle.viewmodel.InitializerViewModelFactoryBuilder: void addInitializer(kotlin.reflect.KClass,kotlin.jvm.functions.Function1)> ==> <kotlin.jvm.JvmClassMappingKt: java.lang.Class getJavaClass(kotlin.reflect.KClass)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "initializer") in <androidx.lifecycle.viewmodel.InitializerViewModelFactoryBuilder: void addInitializer(kotlin.reflect.KClass,kotlin.jvm.functions.Function1)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "<this>") in <kotlin.jvm.JvmClassMappingKt: java.lang.Class getJavaClass(kotlin.reflect.KClass)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>($r0, "null cannot be cast to non-null type java.lang.Class<T of kotlin.jvm.JvmClassMappingKt.<get-java>>") in <kotlin.jvm.JvmClassMappingKt: java.lang.Class getJavaClass(kotlin.reflect.KClass)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke $r1.<androidx.lifecycle.viewmodel.InitializerViewModelFactory: void <init>(androidx.lifecycle.viewmodel.ViewModelInitializer[])>($r4) in <androidx.lifecycle.viewmodel.InitializerViewModelFactoryBuilder: androidx.lifecycle.ViewModelProvider$Factory build()> ==> <androidx.lifecycle.viewmodel.InitializerViewModelFactory: void <init>(androidx.lifecycle.viewmodel.ViewModelInitializer[])>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "initializers") in <androidx.lifecycle.viewmodel.InitializerViewModelFactory: void <init>(androidx.lifecycle.viewmodel.ViewModelInitializer[])> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.lifecycle.viewmodel.InitializerViewModelFactory: void <init>(androidx.lifecycle.viewmodel.ViewModelInitializer[])> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r2.<androidx.lifecycle.viewmodel.ViewModelInitializer: void <init>(java.lang.Class,kotlin.jvm.functions.Function1)>($r3, $r1) in <androidx.lifecycle.viewmodel.InitializerViewModelFactoryBuilder: void addInitializer(kotlin.reflect.KClass,kotlin.jvm.functions.Function1)> ==> <androidx.lifecycle.viewmodel.ViewModelInitializer: void <init>(java.lang.Class,kotlin.jvm.functions.Function1)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "clazz") in <androidx.lifecycle.viewmodel.ViewModelInitializer: void <init>(java.lang.Class,kotlin.jvm.functions.Function1)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.lifecycle.viewmodel.ViewModelInitializer: void <init>(java.lang.Class,kotlin.jvm.functions.Function1)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $r0 = interfaceinvoke $r2.<kotlin.jvm.internal.ClassBasedDeclarationContainer: java.lang.Class getJClass()>() in <kotlin.jvm.JvmClassMappingKt: java.lang.Class getJavaClass(kotlin.reflect.KClass)> ==> <kotlin.jvm.internal.ClassReference: java.lang.Class getJClass()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.lifecycle.viewmodel.InitializerViewModelFactoryBuilder: void <init>()> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<androidx.lifecycle.ViewModelStoreOwner: androidx.lifecycle.ViewModelStore getViewModelStore()>() in <androidx.lifecycle.ViewModelProvider: void <init>(androidx.lifecycle.ViewModelStoreOwner,androidx.lifecycle.ViewModelProvider$Factory)> ==> <androidx.activity.ComponentActivity: androidx.lifecycle.ViewModelStore getViewModelStore()>
INTERFACE edge: $r0 = interfaceinvoke $r2.<androidx.lifecycle.HasDefaultViewModelProviderFactory: androidx.lifecycle.viewmodel.CreationExtras getDefaultViewModelCreationExtras()>() in <androidx.lifecycle.ViewModelProviderGetKt: androidx.lifecycle.viewmodel.CreationExtras defaultCreationExtras(androidx.lifecycle.ViewModelStoreOwner)> ==> <androidx.activity.ComponentActivity: androidx.lifecycle.viewmodel.CreationExtras getDefaultViewModelCreationExtras()>
CLINIT edge: $r3 = <androidx.lifecycle.ViewModelProvider$AndroidViewModelFactory: androidx.lifecycle.viewmodel.CreationExtras$Key APPLICATION_KEY> in <androidx.activity.ComponentActivity: androidx.lifecycle.viewmodel.CreationExtras getDefaultViewModelCreationExtras()> ==> <androidx.lifecycle.ViewModelProvider$AndroidViewModelFactory: void <clinit>()>
CLINIT edge: $r3 = <androidx.lifecycle.SavedStateHandleSupport: androidx.lifecycle.viewmodel.CreationExtras$Key SAVED_STATE_REGISTRY_OWNER_KEY> in <androidx.activity.ComponentActivity: androidx.lifecycle.viewmodel.CreationExtras getDefaultViewModelCreationExtras()> ==> <androidx.lifecycle.SavedStateHandleSupport: void <clinit>()>
CLINIT edge: $r3 = <androidx.lifecycle.ViewModelProvider$AndroidViewModelFactory: androidx.lifecycle.viewmodel.CreationExtras$Key APPLICATION_KEY> in <androidx.activity.ComponentActivity: androidx.lifecycle.viewmodel.CreationExtras getDefaultViewModelCreationExtras()> ==> <androidx.lifecycle.ViewModelProvider$NewInstanceFactory: void <clinit>()>
CLINIT edge: <androidx.lifecycle.ViewModelProvider$AndroidViewModelFactory: androidx.lifecycle.ViewModelProvider$AndroidViewModelFactory$Companion Companion> = $r0 in <androidx.lifecycle.ViewModelProvider$AndroidViewModelFactory: void <clinit>()> ==> <androidx.lifecycle.ViewModelProvider$NewInstanceFactory: void <clinit>()>
CLINIT edge: $r1 = <androidx.lifecycle.ViewModelProvider$AndroidViewModelFactory$Companion$ApplicationKeyImpl: androidx.lifecycle.ViewModelProvider$AndroidViewModelFactory$Companion$ApplicationKeyImpl INSTANCE> in <androidx.lifecycle.ViewModelProvider$AndroidViewModelFactory: void <clinit>()> ==> <androidx.lifecycle.ViewModelProvider$AndroidViewModelFactory$Companion$ApplicationKeyImpl: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<androidx.lifecycle.ViewModelProvider$AndroidViewModelFactory$Companion$ApplicationKeyImpl: void <init>()>() in <androidx.lifecycle.ViewModelProvider$AndroidViewModelFactory$Companion$ApplicationKeyImpl: void <clinit>()> ==> <androidx.lifecycle.ViewModelProvider$AndroidViewModelFactory$Companion$ApplicationKeyImpl: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.lifecycle.ViewModelProvider$AndroidViewModelFactory$Companion$ApplicationKeyImpl: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<androidx.lifecycle.ViewModelProvider$AndroidViewModelFactory$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>(null) in <androidx.lifecycle.ViewModelProvider$AndroidViewModelFactory: void <clinit>()> ==> <androidx.lifecycle.ViewModelProvider$AndroidViewModelFactory$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)>
SPECIAL edge: specialinvoke r0.<androidx.lifecycle.ViewModelProvider$AndroidViewModelFactory$Companion: void <init>()>() in <androidx.lifecycle.ViewModelProvider$AndroidViewModelFactory$Companion: void <init>(kotlin.jvm.internal.DefaultConstructorMarker)> ==> <androidx.lifecycle.ViewModelProvider$AndroidViewModelFactory$Companion: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.lifecycle.ViewModelProvider$AndroidViewModelFactory$Companion: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<androidx.lifecycle.viewmodel.MutableCreationExtras: void <init>()>() in <androidx.activity.ComponentActivity: androidx.lifecycle.viewmodel.CreationExtras getDefaultViewModelCreationExtras()> ==> <androidx.lifecycle.viewmodel.MutableCreationExtras: void <init>()>
VIRTUAL edge: virtualinvoke $r1.<androidx.lifecycle.viewmodel.MutableCreationExtras: void set(androidx.lifecycle.viewmodel.CreationExtras$Key,java.lang.Object)>($r3, $r2) in <androidx.activity.ComponentActivity: androidx.lifecycle.viewmodel.CreationExtras getDefaultViewModelCreationExtras()> ==> <androidx.lifecycle.viewmodel.MutableCreationExtras: void set(androidx.lifecycle.viewmodel.CreationExtras$Key,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r1.<androidx.lifecycle.viewmodel.MutableCreationExtras: void set(androidx.lifecycle.viewmodel.CreationExtras$Key,java.lang.Object)>($r3, r0) in <androidx.activity.ComponentActivity: androidx.lifecycle.viewmodel.CreationExtras getDefaultViewModelCreationExtras()> ==> <androidx.lifecycle.viewmodel.MutableCreationExtras: void set(androidx.lifecycle.viewmodel.CreationExtras$Key,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<androidx.lifecycle.viewmodel.MutableCreationExtras: void <init>(androidx.lifecycle.viewmodel.CreationExtras,int,kotlin.jvm.internal.DefaultConstructorMarker)>(null, 1, null) in <androidx.lifecycle.viewmodel.MutableCreationExtras: void <init>()> ==> <androidx.lifecycle.viewmodel.MutableCreationExtras: void <init>(androidx.lifecycle.viewmodel.CreationExtras,int,kotlin.jvm.internal.DefaultConstructorMarker)>
CLINIT edge: $r3 = <androidx.lifecycle.viewmodel.CreationExtras$Empty: androidx.lifecycle.viewmodel.CreationExtras$Empty INSTANCE> in <androidx.lifecycle.viewmodel.MutableCreationExtras: void <init>(androidx.lifecycle.viewmodel.CreationExtras,int,kotlin.jvm.internal.DefaultConstructorMarker)> ==> <androidx.lifecycle.viewmodel.CreationExtras$Empty: void <clinit>()>
VIRTUAL edge: $r2 = virtualinvoke r0.<androidx.activity.ComponentActivity: android.app.Application getApplication()>() in <androidx.activity.ComponentActivity: androidx.lifecycle.viewmodel.CreationExtras getDefaultViewModelCreationExtras()> ==> <android.app.Activity: android.app.Application getApplication()>
VIRTUAL edge: $r4 = virtualinvoke r0.<androidx.activity.ComponentActivity: android.content.Intent getIntent()>() in <androidx.activity.ComponentActivity: androidx.lifecycle.viewmodel.CreationExtras getDefaultViewModelCreationExtras()> ==> <com.example.notificationtest.MainActivity: android.content.Intent getIntent()>
VIRTUAL edge: $r2 = virtualinvoke $r3.<androidx.savedstate.SavedStateRegistry: android.os.Bundle consumeRestoredStateForKey(java.lang.String)>("androidx.lifecycle.internal.SavedStateHandlesProvider") in <androidx.lifecycle.SavedStateHandlesProvider: void performRestore()> ==> <androidx.savedstate.SavedStateRegistry: android.os.Bundle consumeRestoredStateForKey(java.lang.String)>
VIRTUAL edge: virtualinvoke $r5.<androidx.activity.OnBackPressedDispatcher: void setOnBackInvokedDispatcher(android.window.OnBackInvokedDispatcher)>($r6) in <androidx.activity.ComponentActivity$6: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)> ==> <androidx.activity.OnBackPressedDispatcher: void setOnBackInvokedDispatcher(android.window.OnBackInvokedDispatcher)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "invoker") in <androidx.activity.OnBackPressedDispatcher: void setOnBackInvokedDispatcher(android.window.OnBackInvokedDispatcher)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke r0.<androidx.activity.OnBackPressedDispatcher: void updateBackInvokedCallbackState(boolean)>($z0) in <androidx.activity.OnBackPressedDispatcher: void setOnBackInvokedDispatcher(android.window.OnBackInvokedDispatcher)> ==> <androidx.activity.OnBackPressedDispatcher: void updateBackInvokedCallbackState(boolean)>
VIRTUAL edge: virtualinvoke r0.<androidx.activity.OnBackPressedDispatcher$LifecycleOnBackPressedCancellable: void cancel()>() in <androidx.activity.OnBackPressedDispatcher$LifecycleOnBackPressedCancellable: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)> ==> <androidx.activity.OnBackPressedDispatcher$LifecycleOnBackPressedCancellable: void cancel()>
VIRTUAL edge: virtualinvoke $r3.<androidx.activity.OnBackPressedCallback: void removeCancellable(androidx.activity.Cancellable)>($r4) in <androidx.activity.OnBackPressedDispatcher$LifecycleOnBackPressedCancellable: void cancel()> ==> <androidx.activity.OnBackPressedCallback: void removeCancellable(androidx.activity.Cancellable)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "cancellable") in <androidx.activity.OnBackPressedCallback: void removeCancellable(androidx.activity.Cancellable)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
VIRTUAL edge: virtualinvoke $r1.<androidx.lifecycle.Lifecycle: void removeObserver(androidx.lifecycle.LifecycleObserver)>($r2) in <androidx.activity.OnBackPressedDispatcher$LifecycleOnBackPressedCancellable: void cancel()> ==> <androidx.lifecycle.LifecycleRegistry: void removeObserver(androidx.lifecycle.LifecycleObserver)>
VIRTUAL edge: $r1 = virtualinvoke $r5.<androidx.activity.OnBackPressedDispatcher: androidx.activity.Cancellable addCancellableCallback$activity_release(androidx.activity.OnBackPressedCallback)>($r6) in <androidx.activity.OnBackPressedDispatcher$LifecycleOnBackPressedCancellable: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)> ==> <androidx.activity.OnBackPressedDispatcher: androidx.activity.Cancellable addCancellableCallback$activity_release(androidx.activity.OnBackPressedCallback)>
CLINIT edge: $r5 = new androidx.activity.OnBackPressedDispatcher$addCancellableCallback$1 in <androidx.activity.OnBackPressedDispatcher: androidx.activity.Cancellable addCancellableCallback$activity_release(androidx.activity.OnBackPressedCallback)> ==> <kotlin.jvm.internal.CallableReference: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "onBackPressedCallback") in <androidx.activity.OnBackPressedDispatcher: androidx.activity.Cancellable addCancellableCallback$activity_release(androidx.activity.OnBackPressedCallback)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke $r5.<androidx.activity.OnBackPressedDispatcher$addCancellableCallback$1: void <init>(java.lang.Object)>(r0) in <androidx.activity.OnBackPressedDispatcher: androidx.activity.Cancellable addCancellableCallback$activity_release(androidx.activity.OnBackPressedCallback)> ==> <androidx.activity.OnBackPressedDispatcher$addCancellableCallback$1: void <init>(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<kotlin.jvm.internal.FunctionReferenceImpl: void <init>(int,java.lang.Object,java.lang.Class,java.lang.String,java.lang.String,int)>(0, $r1, class "Landroidx/activity/OnBackPressedDispatcher;", "updateEnabledCallbacks", "updateEnabledCallbacks()V", 0) in <androidx.activity.OnBackPressedDispatcher$addCancellableCallback$1: void <init>(java.lang.Object)> ==> <kotlin.jvm.internal.FunctionReferenceImpl: void <init>(int,java.lang.Object,java.lang.Class,java.lang.String,java.lang.String,int)>
SPECIAL edge: specialinvoke $r3.<androidx.activity.OnBackPressedDispatcher$OnBackPressedCancellable: void <init>(androidx.activity.OnBackPressedDispatcher,androidx.activity.OnBackPressedCallback)>(r0, $r1) in <androidx.activity.OnBackPressedDispatcher: androidx.activity.Cancellable addCancellableCallback$activity_release(androidx.activity.OnBackPressedCallback)> ==> <androidx.activity.OnBackPressedDispatcher$OnBackPressedCancellable: void <init>(androidx.activity.OnBackPressedDispatcher,androidx.activity.OnBackPressedCallback)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "onBackPressedCallback") in <androidx.activity.OnBackPressedDispatcher$OnBackPressedCancellable: void <init>(androidx.activity.OnBackPressedDispatcher,androidx.activity.OnBackPressedCallback)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.activity.OnBackPressedDispatcher$OnBackPressedCancellable: void <init>(androidx.activity.OnBackPressedDispatcher,androidx.activity.OnBackPressedCallback)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r1.<androidx.activity.OnBackPressedCallback: void addCancellable(androidx.activity.Cancellable)>($r4) in <androidx.activity.OnBackPressedDispatcher: androidx.activity.Cancellable addCancellableCallback$activity_release(androidx.activity.OnBackPressedCallback)> ==> <androidx.activity.OnBackPressedCallback: void addCancellable(androidx.activity.Cancellable)>
VIRTUAL edge: virtualinvoke $r1.<androidx.activity.OnBackPressedCallback: void setEnabledChangedCallback$activity_release(kotlin.jvm.functions.Function0)>($r6) in <androidx.activity.OnBackPressedDispatcher: androidx.activity.Cancellable addCancellableCallback$activity_release(androidx.activity.OnBackPressedCallback)> ==> <androidx.activity.OnBackPressedCallback: void setEnabledChangedCallback$activity_release(kotlin.jvm.functions.Function0)>
SPECIAL edge: specialinvoke r0.<androidx.activity.OnBackPressedDispatcher: void updateEnabledCallbacks()>() in <androidx.activity.OnBackPressedDispatcher: androidx.activity.Cancellable addCancellableCallback$activity_release(androidx.activity.OnBackPressedCallback)> ==> <androidx.activity.OnBackPressedDispatcher: void updateEnabledCallbacks()>
VIRTUAL edge: virtualinvoke $r2.<kotlin.collections.ArrayDeque: boolean add(java.lang.Object)>($r1) in <androidx.activity.OnBackPressedDispatcher: androidx.activity.Cancellable addCancellableCallback$activity_release(androidx.activity.OnBackPressedCallback)> ==> <kotlin.collections.ArrayDeque: boolean add(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<kotlin.collections.ArrayDeque: void addLast(java.lang.Object)>($r1) in <kotlin.collections.ArrayDeque: boolean add(java.lang.Object)> ==> <kotlin.collections.ArrayDeque: void addLast(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke r0.<kotlin.collections.ArrayDeque: int size()>() in <kotlin.collections.ArrayDeque: void addLast(java.lang.Object)> ==> <kotlin.collections.AbstractMutableList: int size()>
SPECIAL edge: specialinvoke r0.<kotlin.collections.ArrayDeque: void ensureCapacity(int)>($i0) in <kotlin.collections.ArrayDeque: void addLast(java.lang.Object)> ==> <kotlin.collections.ArrayDeque: void ensureCapacity(int)>
SPECIAL edge: $i0 = specialinvoke r0.<kotlin.collections.ArrayDeque: int positiveMod(int)>($i0) in <kotlin.collections.ArrayDeque: void addLast(java.lang.Object)> ==> <kotlin.collections.ArrayDeque: int positiveMod(int)>
CLINIT edge: $r2 = <kotlin.collections.ArrayDeque: java.lang.Object[] emptyElementData> in <kotlin.collections.ArrayDeque: void ensureCapacity(int)> ==> <kotlin.collections.ArrayDeque: void <clinit>()>
STATIC edge: $i0 = staticinvoke <kotlin.ranges.RangesKt: int coerceAtLeast(int,int)>($i0, 10) in <kotlin.collections.ArrayDeque: void ensureCapacity(int)> ==> <kotlin.ranges.RangesKt___RangesKt: int coerceAtLeast(int,int)>
VIRTUAL edge: $i0 = virtualinvoke $r3.<kotlin.collections.ArrayDeque$Companion: int newCapacity$kotlin_stdlib(int,int)>($i1, $i0) in <kotlin.collections.ArrayDeque: void ensureCapacity(int)> ==> <kotlin.collections.ArrayDeque$Companion: int newCapacity$kotlin_stdlib(int,int)>
SPECIAL edge: specialinvoke r0.<kotlin.collections.ArrayDeque: void copyElements(int)>($i0) in <kotlin.collections.ArrayDeque: void ensureCapacity(int)> ==> <kotlin.collections.ArrayDeque: void copyElements(int)>
STATIC edge: staticinvoke <kotlin.collections.ArraysKt: java.lang.Object[] copyInto(java.lang.Object[],java.lang.Object[],int,int,int)>($r2, $r1, 0, $i0, $i1) in <kotlin.collections.ArrayDeque: void copyElements(int)> ==> <kotlin.collections.ArraysKt___ArraysJvmKt: java.lang.Object[] copyInto(java.lang.Object[],java.lang.Object[],int,int,int)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "destination") in <kotlin.collections.ArraysKt___ArraysJvmKt: java.lang.Object[] copyInto(java.lang.Object[],java.lang.Object[],int,int,int)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>") in <kotlin.collections.ArraysKt___ArraysJvmKt: java.lang.Object[] copyInto(java.lang.Object[],java.lang.Object[],int,int,int)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
INTERFACE edge: interfaceinvoke $r1.<androidx.activity.Cancellable: void cancel()>() in <androidx.activity.OnBackPressedDispatcher$LifecycleOnBackPressedCancellable: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)> ==> <androidx.activity.OnBackPressedDispatcher$OnBackPressedCancellable: void cancel()>
STATIC edge: $r2 = staticinvoke <androidx.activity.OnBackPressedDispatcher: kotlin.collections.ArrayDeque access$getOnBackPressedCallbacks$p(androidx.activity.OnBackPressedDispatcher)>($r1) in <androidx.activity.OnBackPressedDispatcher$OnBackPressedCancellable: void cancel()> ==> <androidx.activity.OnBackPressedDispatcher: kotlin.collections.ArrayDeque access$getOnBackPressedCallbacks$p(androidx.activity.OnBackPressedDispatcher)>
STATIC edge: staticinvoke <androidx.activity.OnBackPressedDispatcher: void access$setInProgressCallback$p(androidx.activity.OnBackPressedDispatcher,androidx.activity.OnBackPressedCallback)>($r1, null) in <androidx.activity.OnBackPressedDispatcher$OnBackPressedCancellable: void cancel()> ==> <androidx.activity.OnBackPressedDispatcher: void access$setInProgressCallback$p(androidx.activity.OnBackPressedDispatcher,androidx.activity.OnBackPressedCallback)>
STATIC edge: $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r3, $r4) in <androidx.activity.OnBackPressedDispatcher$OnBackPressedCancellable: void cancel()> ==> <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>
STATIC edge: $r3 = staticinvoke <androidx.activity.OnBackPressedDispatcher: androidx.activity.OnBackPressedCallback access$getInProgressCallback$p(androidx.activity.OnBackPressedDispatcher)>($r1) in <androidx.activity.OnBackPressedDispatcher$OnBackPressedCancellable: void cancel()> ==> <androidx.activity.OnBackPressedDispatcher: androidx.activity.OnBackPressedCallback access$getInProgressCallback$p(androidx.activity.OnBackPressedDispatcher)>
VIRTUAL edge: virtualinvoke $r3.<androidx.activity.OnBackPressedCallback: void handleOnBackCancelled()>() in <androidx.activity.OnBackPressedDispatcher$OnBackPressedCancellable: void cancel()> ==> <androidx.activity.OnBackPressedCallback: void handleOnBackCancelled()>
VIRTUAL edge: virtualinvoke $r3.<androidx.activity.OnBackPressedCallback: void removeCancellable(androidx.activity.Cancellable)>($r5) in <androidx.activity.OnBackPressedDispatcher$OnBackPressedCancellable: void cancel()> ==> <androidx.activity.OnBackPressedCallback: void removeCancellable(androidx.activity.Cancellable)>
VIRTUAL edge: $r6 = virtualinvoke $r3.<androidx.activity.OnBackPressedCallback: kotlin.jvm.functions.Function0 getEnabledChangedCallback$activity_release()>() in <androidx.activity.OnBackPressedDispatcher$OnBackPressedCancellable: void cancel()> ==> <androidx.activity.OnBackPressedCallback: kotlin.jvm.functions.Function0 getEnabledChangedCallback$activity_release()>
VIRTUAL edge: virtualinvoke $r3.<androidx.activity.OnBackPressedCallback: void setEnabledChangedCallback$activity_release(kotlin.jvm.functions.Function0)>(null) in <androidx.activity.OnBackPressedDispatcher$OnBackPressedCancellable: void cancel()> ==> <androidx.activity.OnBackPressedCallback: void setEnabledChangedCallback$activity_release(kotlin.jvm.functions.Function0)>
INTERFACE edge: interfaceinvoke $r6.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>() in <androidx.activity.OnBackPressedDispatcher$OnBackPressedCancellable: void cancel()> ==> <androidx.activity.OnBackPressedDispatcher$addCallback$1: java.lang.Object invoke()>
VIRTUAL edge: virtualinvoke $r2.<kotlin.collections.ArrayDeque: boolean remove(java.lang.Object)>($r3) in <androidx.activity.OnBackPressedDispatcher$OnBackPressedCancellable: void cancel()> ==> <kotlin.collections.ArrayDeque: boolean remove(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke r0.<kotlin.collections.ArrayDeque: int indexOf(java.lang.Object)>($r1) in <kotlin.collections.ArrayDeque: boolean remove(java.lang.Object)> ==> <kotlin.collections.ArrayDeque: int indexOf(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<kotlin.collections.ArrayDeque: java.lang.Object remove(int)>($i0) in <kotlin.collections.ArrayDeque: boolean remove(java.lang.Object)> ==> <kotlin.collections.AbstractMutableList: java.lang.Object remove(int)>
STATIC edge: $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r1, $r3) in <kotlin.collections.ArrayDeque: int indexOf(java.lang.Object)> ==> <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $r1 = virtualinvoke r0.<kotlin.collections.AbstractMutableList: java.lang.Object removeAt(int)>($i0) in <kotlin.collections.AbstractMutableList: java.lang.Object remove(int)> ==> <kotlin.collections.ArrayDeque: java.lang.Object removeAt(int)>
CLINIT edge: $r1 = <kotlin.collections.AbstractList: kotlin.collections.AbstractList$Companion Companion> in <kotlin.collections.ArrayDeque: java.lang.Object removeAt(int)> ==> <kotlin.collections.AbstractList: void <clinit>()>
STATIC edge: staticinvoke <kotlin.collections.ArraysKt: java.lang.Object[] copyInto(java.lang.Object[],java.lang.Object[],int,int,int)>($r4, $r4, 0, 1, $i2) in <kotlin.collections.ArrayDeque: java.lang.Object removeAt(int)> ==> <kotlin.collections.ArraysKt___ArraysJvmKt: java.lang.Object[] copyInto(java.lang.Object[],java.lang.Object[],int,int,int)>
STATIC edge: staticinvoke <kotlin.collections.ArraysKt: java.lang.Object[] copyInto(java.lang.Object[],java.lang.Object[],int,int,int)>($r4, $r4, $i2, $i3, $i0) in <kotlin.collections.ArrayDeque: java.lang.Object removeAt(int)> ==> <kotlin.collections.ArraysKt___ArraysJvmKt: java.lang.Object[] copyInto(java.lang.Object[],java.lang.Object[],int,int,int)>
STATIC edge: staticinvoke <kotlin.collections.ArraysKt: java.lang.Object[] copyInto(java.lang.Object[],java.lang.Object[],int,int,int)>($r4, $r4, $i2, $i0, $i3) in <kotlin.collections.ArrayDeque: java.lang.Object removeAt(int)> ==> <kotlin.collections.ArraysKt___ArraysJvmKt: java.lang.Object[] copyInto(java.lang.Object[],java.lang.Object[],int,int,int)>
STATIC edge: $i0 = staticinvoke <kotlin.collections.CollectionsKt: int getLastIndex(java.util.List)>($r2) in <kotlin.collections.ArrayDeque: java.lang.Object removeAt(int)> ==> <kotlin.collections.CollectionsKt__CollectionsKt: int getLastIndex(java.util.List)>
STATIC edge: staticinvoke <kotlin.collections.ArraysKt: java.lang.Object[] copyInto(java.lang.Object[],java.lang.Object[],int,int,int)>($r4, $r4, $i0, $i1, $i2) in <kotlin.collections.ArrayDeque: java.lang.Object removeAt(int)> ==> <kotlin.collections.ArraysKt___ArraysJvmKt: java.lang.Object[] copyInto(java.lang.Object[],java.lang.Object[],int,int,int)>
STATIC edge: $i2 = staticinvoke <kotlin.collections.CollectionsKt: int getLastIndex(java.util.List)>($r2) in <kotlin.collections.ArrayDeque: java.lang.Object removeAt(int)> ==> <kotlin.collections.CollectionsKt__CollectionsKt: int getLastIndex(java.util.List)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "<this>") in <kotlin.collections.CollectionsKt__CollectionsKt: int getLastIndex(java.util.List)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
VIRTUAL edge: virtualinvoke $r1.<kotlin.collections.AbstractList$Companion: void checkElementIndex$kotlin_stdlib(int,int)>($i1, $i2) in <kotlin.collections.ArrayDeque: java.lang.Object removeAt(int)> ==> <kotlin.collections.AbstractList$Companion: void checkElementIndex$kotlin_stdlib(int,int)>
SPECIAL edge: specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r3) in <kotlin.collections.AbstractList$Companion: void checkElementIndex$kotlin_stdlib(int,int)> ==> <java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>
VIRTUAL edge: $i2 = virtualinvoke r0.<kotlin.collections.ArrayDeque: int size()>() in <kotlin.collections.ArrayDeque: java.lang.Object removeAt(int)> ==> <kotlin.collections.AbstractMutableList: int size()>
VIRTUAL edge: $r3 = virtualinvoke r0.<kotlin.collections.ArrayDeque: java.lang.Object removeLast()>() in <kotlin.collections.ArrayDeque: java.lang.Object removeAt(int)> ==> <kotlin.collections.ArrayDeque: java.lang.Object removeLast()>
VIRTUAL edge: $r3 = virtualinvoke r0.<kotlin.collections.ArrayDeque: java.lang.Object removeFirst()>() in <kotlin.collections.ArrayDeque: java.lang.Object removeAt(int)> ==> <kotlin.collections.ArrayDeque: java.lang.Object removeFirst()>
SPECIAL edge: $i2 = specialinvoke r0.<kotlin.collections.ArrayDeque: int positiveMod(int)>($i2) in <kotlin.collections.ArrayDeque: java.lang.Object removeAt(int)> ==> <kotlin.collections.ArrayDeque: int positiveMod(int)>
VIRTUAL edge: $i0 = virtualinvoke r0.<kotlin.collections.ArrayDeque: int size()>() in <kotlin.collections.ArrayDeque: java.lang.Object removeAt(int)> ==> <kotlin.collections.AbstractMutableList: int size()>
SPECIAL edge: $i1 = specialinvoke r0.<kotlin.collections.ArrayDeque: int incremented(int)>($i1) in <kotlin.collections.ArrayDeque: java.lang.Object removeAt(int)> ==> <kotlin.collections.ArrayDeque: int incremented(int)>
STATIC edge: $i1 = staticinvoke <kotlin.collections.CollectionsKt: int getLastIndex(java.util.List)>($r2) in <kotlin.collections.ArrayDeque: java.lang.Object removeLast()> ==> <kotlin.collections.CollectionsKt__CollectionsKt: int getLastIndex(java.util.List)>
STATIC edge: $i0 = staticinvoke <kotlin.collections.ArraysKt: int getLastIndex(java.lang.Object[])>($r1) in <kotlin.collections.ArrayDeque: int incremented(int)> ==> <kotlin.collections.ArraysKt___ArraysKt: int getLastIndex(java.lang.Object[])>
VIRTUAL edge: $z0 = virtualinvoke r0.<kotlin.collections.ArrayDeque: boolean isEmpty()>() in <kotlin.collections.ArrayDeque: java.lang.Object removeFirst()> ==> <kotlin.collections.ArrayDeque: boolean isEmpty()>
SPECIAL edge: $i0 = specialinvoke r0.<kotlin.collections.ArrayDeque: int incremented(int)>($i0) in <kotlin.collections.ArrayDeque: java.lang.Object removeFirst()> ==> <kotlin.collections.ArrayDeque: int incremented(int)>
VIRTUAL edge: $i0 = virtualinvoke r0.<kotlin.collections.ArrayDeque: int size()>() in <kotlin.collections.ArrayDeque: java.lang.Object removeFirst()> ==> <kotlin.collections.AbstractMutableList: int size()>
VIRTUAL edge: $z0 = virtualinvoke r0.<kotlin.collections.ArrayDeque: boolean isEmpty()>() in <kotlin.collections.ArrayDeque: java.lang.Object removeLast()> ==> <kotlin.collections.ArrayDeque: boolean isEmpty()>
SPECIAL edge: $i0 = specialinvoke r0.<kotlin.collections.ArrayDeque: int positiveMod(int)>($i0) in <kotlin.collections.ArrayDeque: java.lang.Object removeLast()> ==> <kotlin.collections.ArrayDeque: int positiveMod(int)>
VIRTUAL edge: $i0 = virtualinvoke r0.<kotlin.collections.ArrayDeque: int size()>() in <kotlin.collections.ArrayDeque: java.lang.Object removeLast()> ==> <kotlin.collections.AbstractMutableList: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r0.<java.util.List: int size()>() in <kotlin.collections.CollectionsKt__CollectionsKt: int getLastIndex(java.util.List)> ==> <kotlin.collections.AbstractMutableList: int size()>
VIRTUAL edge: $i1 = virtualinvoke r0.<kotlin.collections.ArrayDeque: int size()>() in <kotlin.collections.ArrayDeque: int indexOf(java.lang.Object)> ==> <kotlin.collections.AbstractMutableList: int size()>
SPECIAL edge: $i0 = specialinvoke r0.<kotlin.collections.ArrayDeque: int positiveMod(int)>($i0) in <kotlin.collections.ArrayDeque: int indexOf(java.lang.Object)> ==> <kotlin.collections.ArrayDeque: int positiveMod(int)>
INTERFACE edge: $r6 = interfaceinvoke $r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <kotlin.collections.MapsKt__MapsKt: java.util.Map toMap(java.lang.Iterable)> ==> <kotlin.collections.EmptySet: java.util.Iterator iterator()>
INTERFACE edge: $r6 = interfaceinvoke $r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <kotlin.collections.MapsKt__MapsKt: java.util.Map toMap(java.lang.Iterable)> ==> <kotlin.collections.EmptyList: java.util.Iterator iterator()>
INTERFACE edge: $r5 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>() in <kotlin.collections.MapsKt__MapsKt: java.util.Map toMap(java.lang.Iterable)> ==> <kotlin.collections.EmptyIterator: java.lang.Void next()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.lang.Iterable: java.util.Iterator iterator()>() in <kotlin.collections.MapsKt__MapsKt: void putAll(java.util.Map,java.lang.Iterable)> ==> <kotlin.collections.EmptySet: java.util.Iterator iterator()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.lang.Iterable: java.util.Iterator iterator()>() in <kotlin.collections.MapsKt__MapsKt: void putAll(java.util.Map,java.lang.Iterable)> ==> <kotlin.collections.EmptyList: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>() in <kotlin.collections.MapsKt__MapsKt: void putAll(java.util.Map,java.lang.Iterable)> ==> <kotlin.collections.EmptyIterator: boolean hasNext()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>() in <kotlin.collections.MapsKt__MapsKt: void putAll(java.util.Map,java.lang.Iterable)> ==> <kotlin.collections.EmptyIterator: java.lang.Void next()>
INTERFACE edge: $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(0) in <kotlin.collections.MapsKt__MapsKt: java.util.Map toMap(java.lang.Iterable)> ==> <kotlin.collections.EmptyList: java.lang.Void get(int)>
SPECIAL edge: specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r3) in <kotlin.collections.EmptyList: java.lang.Void get(int)> ==> <java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.Collection: int size()>() in <kotlin.collections.MapsKt__MapsKt: java.util.Map toMap(java.lang.Iterable)> ==> <kotlin.collections.EmptySet: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.Collection: int size()>() in <kotlin.collections.MapsKt__MapsKt: java.util.Map toMap(java.lang.Iterable)> ==> <kotlin.collections.EmptySet: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.Collection: int size()>() in <kotlin.collections.MapsKt__MapsKt: java.util.Map toMap(java.lang.Iterable)> ==> <kotlin.collections.EmptyList: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.Collection: int size()>() in <kotlin.collections.MapsKt__MapsKt: java.util.Map toMap(java.lang.Iterable)> ==> <kotlin.collections.EmptyList: int size()>
VIRTUAL edge: $i0 = virtualinvoke r0.<kotlin.collections.EmptyList: int getSize()>() in <kotlin.collections.EmptyList: int size()> ==> <kotlin.collections.EmptyList: int getSize()>
INTERFACE edge: $r5 = interfaceinvoke $r6.<androidx.lifecycle.ViewModelProvider$Factory: androidx.lifecycle.ViewModel create(java.lang.Class)>($r3) in <androidx.lifecycle.ViewModelProvider: androidx.lifecycle.ViewModel get(java.lang.String,java.lang.Class)> ==> <androidx.loader.app.LoaderManagerImpl$LoaderViewModel$1: androidx.lifecycle.ViewModel create(java.lang.Class)>
INTERFACE edge: $r5 = interfaceinvoke $r6.<androidx.lifecycle.ViewModelProvider$Factory: androidx.lifecycle.ViewModel create(java.lang.Class,androidx.lifecycle.viewmodel.CreationExtras)>($r3, $r9) in <androidx.lifecycle.ViewModelProvider: androidx.lifecycle.ViewModel get(java.lang.String,java.lang.Class)> ==> <androidx.lifecycle.viewmodel.InitializerViewModelFactory: androidx.lifecycle.ViewModel create(java.lang.Class,androidx.lifecycle.viewmodel.CreationExtras)>
INTERFACE edge: $r5 = interfaceinvoke $r6.<androidx.lifecycle.ViewModelProvider$Factory: androidx.lifecycle.ViewModel create(java.lang.Class)>($r3) in <androidx.lifecycle.ViewModelProvider: androidx.lifecycle.ViewModel get(java.lang.String,java.lang.Class)> ==> <androidx.lifecycle.ViewModelProvider$Factory: androidx.lifecycle.ViewModel create(java.lang.Class)>
CLINIT edge: $r2 = new androidx.loader.app.LoaderManagerImpl$LoaderViewModel in <androidx.loader.app.LoaderManagerImpl$LoaderViewModel$1: androidx.lifecycle.ViewModel create(java.lang.Class)> ==> <androidx.loader.app.LoaderManagerImpl$LoaderViewModel: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "modelClass") in <androidx.lifecycle.viewmodel.InitializerViewModelFactory: androidx.lifecycle.ViewModel create(java.lang.Class,androidx.lifecycle.viewmodel.CreationExtras)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r6, $r1) in <androidx.lifecycle.viewmodel.InitializerViewModelFactory: androidx.lifecycle.ViewModel create(java.lang.Class,androidx.lifecycle.viewmodel.CreationExtras)> ==> <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "modelClass") in <androidx.lifecycle.ViewModelProvider$Factory: androidx.lifecycle.ViewModel create(java.lang.Class)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>() in <androidx.lifecycle.viewmodel.InitializerViewModelFactory: androidx.lifecycle.ViewModel create(java.lang.Class,androidx.lifecycle.viewmodel.CreationExtras)> ==> <java.lang.Class: java.lang.String getName()>
SPECIAL edge: specialinvoke $r2.<androidx.loader.app.LoaderManagerImpl$LoaderViewModel: void <init>()>() in <androidx.loader.app.LoaderManagerImpl$LoaderViewModel$1: androidx.lifecycle.ViewModel create(java.lang.Class)> ==> <androidx.loader.app.LoaderManagerImpl$LoaderViewModel: void <init>()>
CLINIT edge: $r1 = new androidx.collection.SparseArrayCompat in <androidx.loader.app.LoaderManagerImpl$LoaderViewModel: void <init>()> ==> <androidx.collection.SparseArrayCompat: void <clinit>()>
SPECIAL edge: specialinvoke $r1.<androidx.collection.SparseArrayCompat: void <init>()>() in <androidx.loader.app.LoaderManagerImpl$LoaderViewModel: void <init>()> ==> <androidx.collection.SparseArrayCompat: void <init>()>
SPECIAL edge: specialinvoke r0.<androidx.lifecycle.ViewModel: void <init>()>() in <androidx.loader.app.LoaderManagerImpl$LoaderViewModel: void <init>()> ==> <androidx.lifecycle.ViewModel: void <init>()>
INTERFACE edge: $r2 = interfaceinvoke r0.<androidx.lifecycle.ViewModelProvider$Factory: androidx.lifecycle.ViewModel create(java.lang.Class)>($r3) in <androidx.lifecycle.ViewModelProvider$Factory: androidx.lifecycle.ViewModel create(java.lang.Class,androidx.lifecycle.viewmodel.CreationExtras)> ==> <androidx.loader.app.LoaderManagerImpl$LoaderViewModel$1: androidx.lifecycle.ViewModel create(java.lang.Class)>
INTERFACE edge: $r2 = interfaceinvoke r0.<androidx.lifecycle.ViewModelProvider$Factory: androidx.lifecycle.ViewModel create(java.lang.Class)>($r3) in <androidx.lifecycle.ViewModelProvider$Factory: androidx.lifecycle.ViewModel create(java.lang.Class,androidx.lifecycle.viewmodel.CreationExtras)> ==> <androidx.lifecycle.ViewModelProvider$Factory: androidx.lifecycle.ViewModel create(java.lang.Class)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<androidx.lifecycle.ViewModelStore: androidx.lifecycle.ViewModel get(java.lang.String)>($r2) in <androidx.lifecycle.ViewModelProvider: androidx.lifecycle.ViewModel get(java.lang.String,java.lang.Class)> ==> <androidx.lifecycle.ViewModelStore: androidx.lifecycle.ViewModel get(java.lang.String)>
VIRTUAL edge: virtualinvoke $r4.<androidx.lifecycle.ViewModelStore: void put(java.lang.String,androidx.lifecycle.ViewModel)>($r2, $r5) in <androidx.lifecycle.ViewModelProvider: androidx.lifecycle.ViewModel get(java.lang.String,java.lang.Class)> ==> <androidx.lifecycle.ViewModelStore: void put(java.lang.String,androidx.lifecycle.ViewModel)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "key") in <androidx.lifecycle.ViewModelStore: androidx.lifecycle.ViewModel get(java.lang.String)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r3, "key") in <androidx.lifecycle.ViewModelStore: void put(java.lang.String,androidx.lifecycle.ViewModel)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "viewModel") in <androidx.lifecycle.ViewModelStore: void put(java.lang.String,androidx.lifecycle.ViewModel)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
VIRTUAL edge: virtualinvoke $r1.<androidx.lifecycle.ViewModel: void onCleared()>() in <androidx.lifecycle.ViewModelStore: void put(java.lang.String,androidx.lifecycle.ViewModel)> ==> <androidx.fragment.app.FragmentManagerViewModel: void onCleared()>
VIRTUAL edge: virtualinvoke $r1.<androidx.lifecycle.ViewModel: void onCleared()>() in <androidx.lifecycle.ViewModelStore: void put(java.lang.String,androidx.lifecycle.ViewModel)> ==> <androidx.loader.app.LoaderManagerImpl$LoaderViewModel: void onCleared()>
CLINIT edge: $z0 = staticinvoke <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>(3) in <androidx.fragment.app.FragmentManagerViewModel: void onCleared()> ==> <androidx.fragment.app.FragmentManager: void <clinit>()>
STATIC edge: $z0 = staticinvoke <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>(3) in <androidx.fragment.app.FragmentManagerViewModel: void onCleared()> ==> <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>
SPECIAL edge: specialinvoke r0.<androidx.lifecycle.ViewModel: void onCleared()>() in <androidx.loader.app.LoaderManagerImpl$LoaderViewModel: void onCleared()> ==> <androidx.lifecycle.ViewModel: void onCleared()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<androidx.collection.SparseArrayCompat: int size()>() in <androidx.loader.app.LoaderManagerImpl$LoaderViewModel: void onCleared()> ==> <androidx.collection.SparseArrayCompat: int size()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<androidx.collection.SparseArrayCompat: java.lang.Object valueAt(int)>($i1) in <androidx.loader.app.LoaderManagerImpl$LoaderViewModel: void onCleared()> ==> <androidx.collection.SparseArrayCompat: java.lang.Object valueAt(int)>
VIRTUAL edge: virtualinvoke $r1.<androidx.collection.SparseArrayCompat: void clear()>() in <androidx.loader.app.LoaderManagerImpl$LoaderViewModel: void onCleared()> ==> <androidx.collection.SparseArrayCompat: void clear()>
SPECIAL edge: specialinvoke r0.<androidx.collection.SparseArrayCompat: void gc()>() in <androidx.collection.SparseArrayCompat: java.lang.Object valueAt(int)> ==> <androidx.collection.SparseArrayCompat: void gc()>
SPECIAL edge: specialinvoke r0.<androidx.collection.SparseArrayCompat: void gc()>() in <androidx.collection.SparseArrayCompat: int size()> ==> <androidx.collection.SparseArrayCompat: void gc()>
INTERFACE edge: $r3 = interfaceinvoke $r10.<androidx.savedstate.SavedStateRegistry$SavedStateProvider: android.os.Bundle saveState()>() in <androidx.savedstate.SavedStateRegistry: void performSave(android.os.Bundle)> ==> <androidx.activity.ComponentActivity$$ExternalSyntheticLambda2: android.os.Bundle saveState()>
INTERFACE edge: $r3 = interfaceinvoke $r10.<androidx.savedstate.SavedStateRegistry$SavedStateProvider: android.os.Bundle saveState()>() in <androidx.savedstate.SavedStateRegistry: void performSave(android.os.Bundle)> ==> <androidx.fragment.app.FragmentActivity$1: android.os.Bundle saveState()>
INTERFACE edge: $r3 = interfaceinvoke $r10.<androidx.savedstate.SavedStateRegistry$SavedStateProvider: android.os.Bundle saveState()>() in <androidx.savedstate.SavedStateRegistry: void performSave(android.os.Bundle)> ==> <androidx.lifecycle.SavedStateHandlesProvider: android.os.Bundle saveState()>
INTERFACE edge: $r3 = interfaceinvoke $r10.<androidx.savedstate.SavedStateRegistry$SavedStateProvider: android.os.Bundle saveState()>() in <androidx.savedstate.SavedStateRegistry: void performSave(android.os.Bundle)> ==> <androidx.appcompat.app.AppCompatActivity$1: android.os.Bundle saveState()>
CLINIT edge: $r5 = <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_STOP> in <androidx.fragment.app.FragmentActivity$1: android.os.Bundle saveState()> ==> <androidx.lifecycle.Lifecycle$Event: void <clinit>()>
STATIC edge: $z0 = staticinvoke <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>($r2, $r12) in <androidx.lifecycle.SavedStateHandlesProvider: android.os.Bundle saveState()> ==> <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke $r3.<androidx.appcompat.app.AppCompatActivity: androidx.appcompat.app.AppCompatDelegate getDelegate()>() in <androidx.appcompat.app.AppCompatActivity$1: android.os.Bundle saveState()> ==> <androidx.appcompat.app.AppCompatActivity: androidx.appcompat.app.AppCompatDelegate getDelegate()>
VIRTUAL edge: virtualinvoke $r2.<androidx.appcompat.app.AppCompatDelegate: void onSaveInstanceState(android.os.Bundle)>($r1) in <androidx.appcompat.app.AppCompatActivity$1: android.os.Bundle saveState()> ==> <androidx.appcompat.app.AppCompatDelegateImpl: void onSaveInstanceState(android.os.Bundle)>
SPECIAL edge: $r3 = specialinvoke r0.<androidx.lifecycle.SavedStateHandlesProvider: androidx.lifecycle.SavedStateHandlesVM getViewModel()>() in <androidx.lifecycle.SavedStateHandlesProvider: android.os.Bundle saveState()> ==> <androidx.lifecycle.SavedStateHandlesProvider: androidx.lifecycle.SavedStateHandlesVM getViewModel()>
VIRTUAL edge: virtualinvoke $r3.<androidx.fragment.app.FragmentActivity: void markFragmentsCreated()>() in <androidx.fragment.app.FragmentActivity$1: android.os.Bundle saveState()> ==> <androidx.fragment.app.FragmentActivity: void markFragmentsCreated()>
CLINIT edge: $r1 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State CREATED> in <androidx.fragment.app.FragmentActivity: void markFragmentsCreated()> ==> <androidx.lifecycle.Lifecycle$State: void <clinit>()>
STATIC edge: $z0 = staticinvoke <androidx.fragment.app.FragmentActivity: boolean markState(androidx.fragment.app.FragmentManager,androidx.lifecycle.Lifecycle$State)>($r2, $r1) in <androidx.fragment.app.FragmentActivity: void markFragmentsCreated()> ==> <androidx.fragment.app.FragmentActivity: boolean markState(androidx.fragment.app.FragmentManager,androidx.lifecycle.Lifecycle$State)>
CLINIT edge: $r9 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State STARTED> in <androidx.fragment.app.FragmentActivity: boolean markState(androidx.fragment.app.FragmentManager,androidx.lifecycle.Lifecycle$State)> ==> <androidx.lifecycle.Lifecycle$State: void <clinit>()>
CLINIT edge: $r9 = <androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State STARTED> in <androidx.fragment.app.FragmentActivity: boolean markState(androidx.fragment.app.FragmentManager,androidx.lifecycle.Lifecycle$State)> ==> <androidx.lifecycle.Lifecycle$State: void <clinit>()>
VIRTUAL edge: $r2 = virtualinvoke r0.<androidx.fragment.app.FragmentActivity: androidx.fragment.app.FragmentManager getSupportFragmentManager()>() in <androidx.fragment.app.FragmentActivity: void markFragmentsCreated()> ==> <androidx.fragment.app.FragmentActivity: androidx.fragment.app.FragmentManager getSupportFragmentManager()>
VIRTUAL edge: $r1 = virtualinvoke $r2.<androidx.fragment.app.FragmentController: androidx.fragment.app.FragmentManager getSupportFragmentManager()>() in <androidx.fragment.app.FragmentActivity: androidx.fragment.app.FragmentManager getSupportFragmentManager()> ==> <androidx.fragment.app.FragmentController: androidx.fragment.app.FragmentManager getSupportFragmentManager()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<androidx.fragment.app.FragmentManager: java.util.List getFragments()>() in <androidx.fragment.app.FragmentActivity: boolean markState(androidx.fragment.app.FragmentManager,androidx.lifecycle.Lifecycle$State)> ==> <androidx.fragment.app.FragmentManager: java.util.List getFragments()>
VIRTUAL edge: $r1 = virtualinvoke $r2.<androidx.fragment.app.FragmentStore: java.util.List getFragments()>() in <androidx.fragment.app.FragmentManager: java.util.List getFragments()> ==> <androidx.fragment.app.FragmentStore: java.util.List getFragments()>
VIRTUAL edge: $r2 = virtualinvoke $r6.<androidx.fragment.app.FragmentController: android.os.Parcelable saveAllState()>() in <androidx.fragment.app.FragmentActivity$1: android.os.Bundle saveState()> ==> <androidx.fragment.app.FragmentController: android.os.Parcelable saveAllState()>
VIRTUAL edge: $r1 = virtualinvoke $r3.<androidx.fragment.app.FragmentManager: android.os.Parcelable saveAllState()>() in <androidx.fragment.app.FragmentController: android.os.Parcelable saveAllState()> ==> <androidx.fragment.app.FragmentManager: android.os.Parcelable saveAllState()>
CLINIT edge: $z0 = staticinvoke <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>(2) in <androidx.fragment.app.FragmentManager: android.os.Parcelable saveAllState()> ==> <androidx.fragment.app.FragmentManager: void <clinit>()>
STATIC edge: $z0 = staticinvoke <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>(2) in <androidx.fragment.app.FragmentManager: android.os.Parcelable saveAllState()> ==> <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>
CLINIT edge: $r12 = new androidx.fragment.app.FragmentManagerState in <androidx.fragment.app.FragmentManager: android.os.Parcelable saveAllState()> ==> <androidx.fragment.app.FragmentManagerState: void <clinit>()>
CLINIT edge: $z0 = staticinvoke <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>(2) in <androidx.fragment.app.FragmentManager: android.os.Parcelable saveAllState()> ==> <androidx.fragment.app.FragmentManager: void <clinit>()>
CLINIT edge: $r4 = newarray (androidx.fragment.app.BackStackState)[$i0] in <androidx.fragment.app.FragmentManager: android.os.Parcelable saveAllState()> ==> <androidx.fragment.app.BackStackState: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<androidx.fragment.app.BackStackState$1: void <init>()>() in <androidx.fragment.app.BackStackState: void <clinit>()> ==> <androidx.fragment.app.BackStackState$1: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.fragment.app.BackStackState$1: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<androidx.fragment.app.FragmentManagerState$1: void <init>()>() in <androidx.fragment.app.FragmentManagerState: void <clinit>()> ==> <androidx.fragment.app.FragmentManagerState$1: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.fragment.app.FragmentManagerState$1: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r12.<androidx.fragment.app.FragmentManagerState: void <init>()>() in <androidx.fragment.app.FragmentManager: android.os.Parcelable saveAllState()> ==> <androidx.fragment.app.FragmentManagerState: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.fragment.app.FragmentManagerState: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r7.<androidx.fragment.app.BackStackState: void <init>(androidx.fragment.app.BackStackRecord)>($r9) in <androidx.fragment.app.FragmentManager: android.os.Parcelable saveAllState()> ==> <androidx.fragment.app.BackStackState: void <init>(androidx.fragment.app.BackStackRecord)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.fragment.app.BackStackState: void <init>(androidx.fragment.app.BackStackRecord)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<androidx.fragment.app.FragmentManager: void forcePostponedTransactions()>() in <androidx.fragment.app.FragmentManager: android.os.Parcelable saveAllState()> ==> <androidx.fragment.app.FragmentManager: void forcePostponedTransactions()>
SPECIAL edge: specialinvoke r0.<androidx.fragment.app.FragmentManager: void endAnimatingAwayFragments()>() in <androidx.fragment.app.FragmentManager: android.os.Parcelable saveAllState()> ==> <androidx.fragment.app.FragmentManager: void endAnimatingAwayFragments()>
CLINIT edge: $z0 = <androidx.fragment.app.FragmentManager: boolean USE_STATE_MANAGER> in <androidx.fragment.app.FragmentManager: void forcePostponedTransactions()> ==> <androidx.fragment.app.FragmentManager: void <clinit>()>
SPECIAL edge: $r1 = specialinvoke r0.<androidx.fragment.app.FragmentManager: java.util.Set collectAllSpecialEffectsController()>() in <androidx.fragment.app.FragmentManager: void forcePostponedTransactions()> ==> <androidx.fragment.app.FragmentManager: java.util.Set collectAllSpecialEffectsController()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<androidx.fragment.app.FragmentStore: java.util.ArrayList saveActiveFragments()>() in <androidx.fragment.app.FragmentManager: android.os.Parcelable saveAllState()> ==> <androidx.fragment.app.FragmentStore: java.util.ArrayList saveActiveFragments()>
VIRTUAL edge: $r5 = virtualinvoke $r2.<androidx.fragment.app.FragmentStore: java.util.ArrayList saveAddedFragments()>() in <androidx.fragment.app.FragmentManager: android.os.Parcelable saveAllState()> ==> <androidx.fragment.app.FragmentStore: java.util.ArrayList saveAddedFragments()>
CLINIT edge: $z0 = staticinvoke <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>(2) in <androidx.fragment.app.FragmentStore: java.util.ArrayList saveActiveFragments()> ==> <androidx.fragment.app.FragmentManager: void <clinit>()>
STATIC edge: $z0 = staticinvoke <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>(2) in <androidx.fragment.app.FragmentStore: java.util.ArrayList saveActiveFragments()> ==> <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>
CLINIT edge: $z0 = staticinvoke <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>(2) in <androidx.fragment.app.FragmentStore: java.util.ArrayList saveAddedFragments()> ==> <androidx.fragment.app.FragmentManager: void <clinit>()>
STATIC edge: $z0 = staticinvoke <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>(2) in <androidx.fragment.app.FragmentStore: java.util.ArrayList saveAddedFragments()> ==> <androidx.fragment.app.FragmentManager: boolean isLoggingEnabled(int)>
VIRTUAL edge: virtualinvoke $r1.<androidx.fragment.app.FragmentManagerViewModel: void setIsStateSaved(boolean)>(1) in <androidx.fragment.app.FragmentManager: android.os.Parcelable saveAllState()> ==> <androidx.fragment.app.FragmentManagerViewModel: void setIsStateSaved(boolean)>
VIRTUAL edge: virtualinvoke $r4.<androidx.lifecycle.LifecycleRegistry: void handleLifecycleEvent(androidx.lifecycle.Lifecycle$Event)>($r5) in <androidx.fragment.app.FragmentActivity$1: android.os.Bundle saveState()> ==> <androidx.lifecycle.LifecycleRegistry: void handleLifecycleEvent(androidx.lifecycle.Lifecycle$Event)>
VIRTUAL edge: $r1 = virtualinvoke $r2.<androidx.activity.ComponentActivity: android.os.Bundle lambda$new$1$androidx-activity-ComponentActivity()>() in <androidx.activity.ComponentActivity$$ExternalSyntheticLambda2: android.os.Bundle saveState()> ==> <androidx.activity.ComponentActivity: android.os.Bundle lambda$new$1$androidx-activity-ComponentActivity()>
VIRTUAL edge: virtualinvoke $r2.<androidx.activity.result.ActivityResultRegistry: void onSaveInstanceState(android.os.Bundle)>($r1) in <androidx.activity.ComponentActivity: android.os.Bundle lambda$new$1$androidx-activity-ComponentActivity()> ==> <androidx.activity.result.ActivityResultRegistry: void onSaveInstanceState(android.os.Bundle)>
INTERFACE edge: $r4 = interfaceinvoke $r5.<java.util.Map$Entry: java.lang.Object getKey()>() in <androidx.savedstate.SavedStateRegistry: androidx.savedstate.SavedStateRegistry$SavedStateProvider getSavedStateProvider(java.lang.String)> ==> <androidx.arch.core.internal.SafeIterableMap$Entry: java.lang.Object getKey()>
INTERFACE edge: $r4 = interfaceinvoke $r5.<java.util.Map$Entry: java.lang.Object getValue()>() in <androidx.savedstate.SavedStateRegistry: androidx.savedstate.SavedStateRegistry$SavedStateProvider getSavedStateProvider(java.lang.String)> ==> <androidx.arch.core.internal.SafeIterableMap$Entry: java.lang.Object getValue()>
INTERFACE edge: $r4 = interfaceinvoke $r5.<java.util.Map$Entry: java.lang.Object getKey()>() in <androidx.lifecycle.LifecycleRegistry: void backwardPass(androidx.lifecycle.LifecycleOwner)> ==> <androidx.arch.core.internal.SafeIterableMap$Entry: java.lang.Object getKey()>
INTERFACE edge: $r4 = interfaceinvoke $r5.<java.util.Map$Entry: java.lang.Object getValue()>() in <androidx.lifecycle.LifecycleRegistry: void backwardPass(androidx.lifecycle.LifecycleOwner)> ==> <androidx.arch.core.internal.SafeIterableMap$Entry: java.lang.Object getValue()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<androidx.lifecycle.LifecycleRegistry$ObserverWithState: androidx.lifecycle.Lifecycle$State getState()>() in <androidx.lifecycle.LifecycleRegistry: void backwardPass(androidx.lifecycle.LifecycleOwner)> ==> <androidx.lifecycle.LifecycleRegistry$ObserverWithState: androidx.lifecycle.Lifecycle$State getState()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<androidx.lifecycle.LifecycleRegistry$ObserverWithState: androidx.lifecycle.Lifecycle$State getState()>() in <androidx.lifecycle.LifecycleRegistry: void backwardPass(androidx.lifecycle.LifecycleOwner)> ==> <androidx.lifecycle.LifecycleRegistry$ObserverWithState: androidx.lifecycle.Lifecycle$State getState()>
VIRTUAL edge: virtualinvoke $r7.<androidx.lifecycle.LifecycleRegistry$ObserverWithState: void dispatchEvent(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)>($r1, $r12) in <androidx.lifecycle.LifecycleRegistry: void backwardPass(androidx.lifecycle.LifecycleOwner)> ==> <androidx.lifecycle.LifecycleRegistry$ObserverWithState: void dispatchEvent(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)>
INTERFACE edge: interfaceinvoke $r6.<androidx.lifecycle.LifecycleEventObserver: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)>($r1, $r2) in <androidx.lifecycle.LifecycleRegistry$ObserverWithState: void dispatchEvent(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)> ==> <androidx.activity.OnBackPressedDispatcher$LifecycleOnBackPressedCancellable: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)>
INTERFACE edge: interfaceinvoke $r6.<androidx.lifecycle.LifecycleEventObserver: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)>($r1, $r2) in <androidx.lifecycle.LifecycleRegistry$ObserverWithState: void dispatchEvent(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)> ==> <androidx.activity.ComponentActivity$6: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)>
INTERFACE edge: interfaceinvoke $r6.<androidx.lifecycle.LifecycleEventObserver: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)>($r1, $r2) in <androidx.lifecycle.LifecycleRegistry$ObserverWithState: void dispatchEvent(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)> ==> <androidx.lifecycle.SavedStateHandleAttacher: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)>
INTERFACE edge: interfaceinvoke $r6.<androidx.lifecycle.LifecycleEventObserver: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)>($r1, $r2) in <androidx.lifecycle.LifecycleRegistry$ObserverWithState: void dispatchEvent(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)> ==> <androidx.activity.ComponentActivity$2: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)>
INTERFACE edge: interfaceinvoke $r6.<androidx.lifecycle.LifecycleEventObserver: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)>($r1, $r2) in <androidx.lifecycle.LifecycleRegistry$ObserverWithState: void dispatchEvent(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)> ==> <androidx.activity.ComponentActivity$3: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)>
INTERFACE edge: interfaceinvoke $r6.<androidx.lifecycle.LifecycleEventObserver: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)>($r1, $r2) in <androidx.lifecycle.LifecycleRegistry$ObserverWithState: void dispatchEvent(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)> ==> <androidx.activity.ComponentActivity$4: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)>
VIRTUAL edge: $z0 = virtualinvoke $r11.<okhttp3.internal.connection.RealConnectionPool: boolean connectionBecameIdle(okhttp3.internal.connection.RealConnection)>($r1) in <okhttp3.internal.connection.RealCall: java.net.Socket releaseConnectionNoEvents$okhttp()> ==> <okhttp3.internal.connection.RealConnectionPool: boolean connectionBecameIdle(okhttp3.internal.connection.RealConnection)>
CLINIT edge: $z0 = <okhttp3.internal.Util: boolean assertionsEnabled> in <okhttp3.internal.connection.RealConnectionPool: boolean connectionBecameIdle(okhttp3.internal.connection.RealConnection)> ==> <okhttp3.internal.Util: void <clinit>()>
STATIC edge: staticinvoke <okhttp3.internal.concurrent.TaskQueue: void schedule$default(okhttp3.internal.concurrent.TaskQueue,okhttp3.internal.concurrent.Task,long,int,java.lang.Object)>($r7, $r9, 0L, 2, null) in <okhttp3.internal.connection.RealConnectionPool: boolean connectionBecameIdle(okhttp3.internal.connection.RealConnection)> ==> <okhttp3.internal.concurrent.TaskQueue: void schedule$default(okhttp3.internal.concurrent.TaskQueue,okhttp3.internal.concurrent.Task,long,int,java.lang.Object)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r4, "Thread.currentThread()") in <okhttp3.internal.connection.RealConnectionPool: boolean connectionBecameIdle(okhttp3.internal.connection.RealConnection)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "connection") in <okhttp3.internal.connection.RealConnectionPool: boolean connectionBecameIdle(okhttp3.internal.connection.RealConnection)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.Thread: java.lang.String getName()>() in <okhttp3.internal.connection.RealConnectionPool: boolean connectionBecameIdle(okhttp3.internal.connection.RealConnection)> ==> <java.lang.Thread: java.lang.String getName()>
SPECIAL edge: specialinvoke $r2.<java.lang.AssertionError: void <init>(java.lang.Object)>($r5) in <okhttp3.internal.connection.RealConnectionPool: boolean connectionBecameIdle(okhttp3.internal.connection.RealConnection)> ==> <java.lang.AssertionError: void <init>(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r7.<okhttp3.internal.concurrent.TaskQueue: void cancelAll()>() in <okhttp3.internal.connection.RealConnectionPool: boolean connectionBecameIdle(okhttp3.internal.connection.RealConnection)> ==> <okhttp3.internal.concurrent.TaskQueue: void cancelAll()>
CLINIT edge: $z0 = <okhttp3.internal.Util: boolean assertionsEnabled> in <okhttp3.internal.concurrent.TaskQueue: void cancelAll()> ==> <okhttp3.internal.Util: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r3, "Thread.currentThread()") in <okhttp3.internal.concurrent.TaskQueue: void cancelAll()> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
CLINIT edge: $r8 = <kotlin.Unit: kotlin.Unit INSTANCE> in <okhttp3.internal.concurrent.TaskQueue: void cancelAll()> ==> <kotlin.Unit: void <clinit>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.Thread: java.lang.String getName()>() in <okhttp3.internal.concurrent.TaskQueue: void cancelAll()> ==> <java.lang.Thread: java.lang.String getName()>
SPECIAL edge: specialinvoke $r1.<java.lang.AssertionError: void <init>(java.lang.Object)>($r4) in <okhttp3.internal.concurrent.TaskQueue: void cancelAll()> ==> <java.lang.AssertionError: void <init>(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<okhttp3.internal.concurrent.TaskQueue: boolean cancelAllAndDecide$okhttp()>() in <okhttp3.internal.concurrent.TaskQueue: void cancelAll()> ==> <okhttp3.internal.concurrent.TaskQueue: boolean cancelAllAndDecide$okhttp()>
CLINIT edge: $r5 = <okhttp3.internal.concurrent.TaskRunner: okhttp3.internal.concurrent.TaskRunner$Companion Companion> in <okhttp3.internal.concurrent.TaskQueue: boolean cancelAllAndDecide$okhttp()> ==> <okhttp3.internal.concurrent.TaskRunner: void <clinit>()>
STATIC edge: staticinvoke <okhttp3.internal.concurrent.TaskLoggerKt: void access$log(okhttp3.internal.concurrent.Task,okhttp3.internal.concurrent.TaskQueue,java.lang.String)>($r2, r0, "canceled") in <okhttp3.internal.concurrent.TaskQueue: boolean cancelAllAndDecide$okhttp()> ==> <okhttp3.internal.concurrent.TaskLoggerKt: void access$log(okhttp3.internal.concurrent.Task,okhttp3.internal.concurrent.TaskQueue,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r2) in <okhttp3.internal.concurrent.TaskQueue: boolean cancelAllAndDecide$okhttp()> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>
STATIC edge: staticinvoke <okhttp3.internal.concurrent.TaskLoggerKt: void log(okhttp3.internal.concurrent.Task,okhttp3.internal.concurrent.TaskQueue,java.lang.String)>($r0, $r1, $r2) in <okhttp3.internal.concurrent.TaskLoggerKt: void access$log(okhttp3.internal.concurrent.Task,okhttp3.internal.concurrent.TaskQueue,java.lang.String)> ==> <okhttp3.internal.concurrent.TaskLoggerKt: void log(okhttp3.internal.concurrent.Task,okhttp3.internal.concurrent.TaskQueue,java.lang.String)>
CLINIT edge: $r4 = <okhttp3.internal.concurrent.TaskRunner: okhttp3.internal.concurrent.TaskRunner$Companion Companion> in <okhttp3.internal.concurrent.TaskLoggerKt: void log(okhttp3.internal.concurrent.Task,okhttp3.internal.concurrent.TaskQueue,java.lang.String)> ==> <okhttp3.internal.concurrent.TaskRunner: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r3, "java.lang.String.format(format, *args)") in <okhttp3.internal.concurrent.TaskLoggerKt: void log(okhttp3.internal.concurrent.Task,okhttp3.internal.concurrent.TaskQueue,java.lang.String)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
STATIC edge: $r3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%-22s", $r0) in <okhttp3.internal.concurrent.TaskLoggerKt: void log(okhttp3.internal.concurrent.Task,okhttp3.internal.concurrent.TaskQueue,java.lang.String)> ==> <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
CLINIT edge: $r3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%-22s", $r0) in <okhttp3.internal.concurrent.TaskLoggerKt: void log(okhttp3.internal.concurrent.Task,okhttp3.internal.concurrent.TaskQueue,java.lang.String)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r8 = <kotlin.jvm.internal.StringCompanionObject: kotlin.jvm.internal.StringCompanionObject INSTANCE> in <okhttp3.internal.concurrent.TaskLoggerKt: void log(okhttp3.internal.concurrent.Task,okhttp3.internal.concurrent.TaskQueue,java.lang.String)> ==> <kotlin.jvm.internal.StringCompanionObject: void <clinit>()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<okhttp3.internal.concurrent.TaskRunner$Companion: java.util.logging.Logger getLogger()>() in <okhttp3.internal.concurrent.TaskLoggerKt: void log(okhttp3.internal.concurrent.Task,okhttp3.internal.concurrent.TaskQueue,java.lang.String)> ==> <okhttp3.internal.concurrent.TaskRunner$Companion: java.util.logging.Logger getLogger()>
CLINIT edge: $r1 = staticinvoke <okhttp3.internal.concurrent.TaskRunner: java.util.logging.Logger access$getLogger$cp()>() in <okhttp3.internal.concurrent.TaskRunner$Companion: java.util.logging.Logger getLogger()> ==> <okhttp3.internal.concurrent.TaskRunner: void <clinit>()>
STATIC edge: $r1 = staticinvoke <okhttp3.internal.concurrent.TaskRunner: java.util.logging.Logger access$getLogger$cp()>() in <okhttp3.internal.concurrent.TaskRunner$Companion: java.util.logging.Logger getLogger()> ==> <okhttp3.internal.concurrent.TaskRunner: java.util.logging.Logger access$getLogger$cp()>
CLINIT edge: r0 = <okhttp3.internal.concurrent.TaskRunner: java.util.logging.Logger logger> in <okhttp3.internal.concurrent.TaskRunner: java.util.logging.Logger access$getLogger$cp()> ==> <okhttp3.internal.concurrent.TaskRunner: void <clinit>()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<okhttp3.internal.concurrent.TaskRunner$Companion: java.util.logging.Logger getLogger()>() in <okhttp3.internal.concurrent.TaskQueue: boolean cancelAllAndDecide$okhttp()> ==> <okhttp3.internal.concurrent.TaskRunner$Companion: java.util.logging.Logger getLogger()>
VIRTUAL edge: $r7 = virtualinvoke $r2.<okhttp3.internal.concurrent.TaskQueue: java.lang.String getName$okhttp()>() in <okhttp3.internal.concurrent.TaskLoggerKt: void log(okhttp3.internal.concurrent.Task,okhttp3.internal.concurrent.TaskQueue,java.lang.String)> ==> <okhttp3.internal.concurrent.TaskQueue: java.lang.String getName$okhttp()>
VIRTUAL edge: virtualinvoke $r7.<okhttp3.internal.concurrent.TaskRunner: void kickCoordinator$okhttp(okhttp3.internal.concurrent.TaskQueue)>(r0) in <okhttp3.internal.concurrent.TaskQueue: void cancelAll()> ==> <okhttp3.internal.concurrent.TaskRunner: void kickCoordinator$okhttp(okhttp3.internal.concurrent.TaskQueue)>
CLINIT edge: $z0 = <okhttp3.internal.Util: boolean assertionsEnabled> in <okhttp3.internal.concurrent.TaskRunner: void kickCoordinator$okhttp(okhttp3.internal.concurrent.TaskQueue)> ==> <okhttp3.internal.Util: void <clinit>()>
STATIC edge: staticinvoke <okhttp3.internal.Util: void addIfAbsent(java.util.List,java.lang.Object)>($r8, $r1) in <okhttp3.internal.concurrent.TaskRunner: void kickCoordinator$okhttp(okhttp3.internal.concurrent.TaskQueue)> ==> <okhttp3.internal.Util: void addIfAbsent(java.util.List,java.lang.Object)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r4, "Thread.currentThread()") in <okhttp3.internal.concurrent.TaskRunner: void kickCoordinator$okhttp(okhttp3.internal.concurrent.TaskQueue)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "taskQueue") in <okhttp3.internal.concurrent.TaskRunner: void kickCoordinator$okhttp(okhttp3.internal.concurrent.TaskQueue)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r0, "$this$addIfAbsent") in <okhttp3.internal.Util: void addIfAbsent(java.util.List,java.lang.Object)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.Thread: java.lang.String getName()>() in <okhttp3.internal.concurrent.TaskRunner: void kickCoordinator$okhttp(okhttp3.internal.concurrent.TaskQueue)> ==> <java.lang.Thread: java.lang.String getName()>
SPECIAL edge: specialinvoke $r2.<java.lang.AssertionError: void <init>(java.lang.Object)>($r5) in <okhttp3.internal.concurrent.TaskRunner: void kickCoordinator$okhttp(okhttp3.internal.concurrent.TaskQueue)> ==> <java.lang.AssertionError: void <init>(java.lang.Object)>
VIRTUAL edge: $r7 = virtualinvoke $r1.<okhttp3.internal.concurrent.TaskQueue: okhttp3.internal.concurrent.Task getActiveTask$okhttp()>() in <okhttp3.internal.concurrent.TaskRunner: void kickCoordinator$okhttp(okhttp3.internal.concurrent.TaskQueue)> ==> <okhttp3.internal.concurrent.TaskQueue: okhttp3.internal.concurrent.Task getActiveTask$okhttp()>
VIRTUAL edge: $r8 = virtualinvoke $r1.<okhttp3.internal.concurrent.TaskQueue: java.util.List getFutureTasks$okhttp()>() in <okhttp3.internal.concurrent.TaskRunner: void kickCoordinator$okhttp(okhttp3.internal.concurrent.TaskQueue)> ==> <okhttp3.internal.concurrent.TaskQueue: java.util.List getFutureTasks$okhttp()>
EXECUTOR edge: interfaceinvoke $r10.<okhttp3.internal.concurrent.TaskRunner$Backend: void execute(java.lang.Runnable)>($r11) in <okhttp3.internal.concurrent.TaskRunner: void kickCoordinator$okhttp(okhttp3.internal.concurrent.TaskQueue)> ==> <okhttp3.internal.concurrent.TaskRunner$runnable$1: void run()>
CLINIT edge: $r5 = <okhttp3.internal.concurrent.TaskRunner: okhttp3.internal.concurrent.TaskRunner$Companion Companion> in <okhttp3.internal.concurrent.TaskRunner$runnable$1: void run()> ==> <okhttp3.internal.concurrent.TaskRunner: void <clinit>()>
STATIC edge: staticinvoke <okhttp3.internal.concurrent.TaskLoggerKt: void access$log(okhttp3.internal.concurrent.Task,okhttp3.internal.concurrent.TaskQueue,java.lang.String)>($r3, $r4, $r11) in <okhttp3.internal.concurrent.TaskRunner$runnable$1: void run()> ==> <okhttp3.internal.concurrent.TaskLoggerKt: void access$log(okhttp3.internal.concurrent.Task,okhttp3.internal.concurrent.TaskQueue,java.lang.String)>
STATIC edge: $r11 = staticinvoke <okhttp3.internal.concurrent.TaskLoggerKt: java.lang.String formatDuration(long)>($l0) in <okhttp3.internal.concurrent.TaskRunner$runnable$1: void run()> ==> <okhttp3.internal.concurrent.TaskLoggerKt: java.lang.String formatDuration(long)>
STATIC edge: staticinvoke <okhttp3.internal.concurrent.TaskLoggerKt: void access$log(okhttp3.internal.concurrent.Task,okhttp3.internal.concurrent.TaskQueue,java.lang.String)>($r3, $r4, $r11) in <okhttp3.internal.concurrent.TaskRunner$runnable$1: void run()> ==> <okhttp3.internal.concurrent.TaskLoggerKt: void access$log(okhttp3.internal.concurrent.Task,okhttp3.internal.concurrent.TaskQueue,java.lang.String)>
STATIC edge: staticinvoke <okhttp3.internal.concurrent.TaskRunner: void access$runTask(okhttp3.internal.concurrent.TaskRunner,okhttp3.internal.concurrent.Task)>($r1, $r3) in <okhttp3.internal.concurrent.TaskRunner$runnable$1: void run()> ==> <okhttp3.internal.concurrent.TaskRunner: void access$runTask(okhttp3.internal.concurrent.TaskRunner,okhttp3.internal.concurrent.Task)>
STATIC edge: staticinvoke <okhttp3.internal.concurrent.TaskLoggerKt: void access$log(okhttp3.internal.concurrent.Task,okhttp3.internal.concurrent.TaskQueue,java.lang.String)>($r3, $r4, "starting") in <okhttp3.internal.concurrent.TaskRunner$runnable$1: void run()> ==> <okhttp3.internal.concurrent.TaskLoggerKt: void access$log(okhttp3.internal.concurrent.Task,okhttp3.internal.concurrent.TaskQueue,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r4) in <okhttp3.internal.concurrent.TaskRunner$runnable$1: void run()> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>
CLINIT edge: $r9 = <kotlin.Unit: kotlin.Unit INSTANCE> in <okhttp3.internal.concurrent.TaskRunner$runnable$1: void run()> ==> <kotlin.Unit: void <clinit>()>
CLINIT edge: $r2 = <kotlin.jvm.internal.StringCompanionObject: kotlin.jvm.internal.StringCompanionObject INSTANCE> in <okhttp3.internal.concurrent.TaskLoggerKt: java.lang.String formatDuration(long)> ==> <kotlin.jvm.internal.StringCompanionObject: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r1, "java.lang.String.format(format, *args)") in <okhttp3.internal.concurrent.TaskLoggerKt: java.lang.String formatDuration(long)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
STATIC edge: $r1 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%6s", $r3) in <okhttp3.internal.concurrent.TaskLoggerKt: java.lang.String formatDuration(long)> ==> <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
CLINIT edge: $r1 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%6s", $r3) in <okhttp3.internal.concurrent.TaskLoggerKt: java.lang.String formatDuration(long)> ==> <java.lang.String: void <clinit>()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<okhttp3.internal.concurrent.TaskRunner$Companion: java.util.logging.Logger getLogger()>() in <okhttp3.internal.concurrent.TaskRunner$runnable$1: void run()> ==> <okhttp3.internal.concurrent.TaskRunner$Companion: java.util.logging.Logger getLogger()>
EXECUTOR edge: interfaceinvoke $r8.<okhttp3.internal.concurrent.TaskRunner$Backend: void execute(java.lang.Runnable)>($r13) in <okhttp3.internal.concurrent.TaskRunner$runnable$1: void run()> ==> <okhttp3.internal.concurrent.TaskRunner$runnable$1: void run()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<okhttp3.internal.concurrent.TaskRunner: okhttp3.internal.concurrent.Task awaitTaskToRun()>() in <okhttp3.internal.concurrent.TaskRunner$runnable$1: void run()> ==> <okhttp3.internal.concurrent.TaskRunner: okhttp3.internal.concurrent.Task awaitTaskToRun()>
CLINIT edge: $z0 = <okhttp3.internal.Util: boolean assertionsEnabled> in <okhttp3.internal.concurrent.TaskRunner: okhttp3.internal.concurrent.Task awaitTaskToRun()> ==> <okhttp3.internal.Util: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r3, "Thread.currentThread()") in <okhttp3.internal.concurrent.TaskRunner: okhttp3.internal.concurrent.Task awaitTaskToRun()> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.Thread: java.lang.String getName()>() in <okhttp3.internal.concurrent.TaskRunner: okhttp3.internal.concurrent.Task awaitTaskToRun()> ==> <java.lang.Thread: java.lang.String getName()>
SPECIAL edge: specialinvoke $r16.<java.lang.AssertionError: void <init>(java.lang.Object)>($r4) in <okhttp3.internal.concurrent.TaskRunner: okhttp3.internal.concurrent.Task awaitTaskToRun()> ==> <java.lang.AssertionError: void <init>(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<okhttp3.internal.concurrent.TaskRunner: void beforeRun(okhttp3.internal.concurrent.Task)>($r9) in <okhttp3.internal.concurrent.TaskRunner: okhttp3.internal.concurrent.Task awaitTaskToRun()> ==> <okhttp3.internal.concurrent.TaskRunner: void beforeRun(okhttp3.internal.concurrent.Task)>
VIRTUAL edge: virtualinvoke r0.<okhttp3.internal.concurrent.TaskRunner: void cancelAll()>() in <okhttp3.internal.concurrent.TaskRunner: okhttp3.internal.concurrent.Task awaitTaskToRun()> ==> <okhttp3.internal.concurrent.TaskRunner: void cancelAll()>
CLINIT edge: $z0 = <okhttp3.internal.Util: boolean assertionsEnabled> in <okhttp3.internal.concurrent.TaskRunner: void beforeRun(okhttp3.internal.concurrent.Task)> ==> <okhttp3.internal.Util: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r7) in <okhttp3.internal.concurrent.TaskRunner: void beforeRun(okhttp3.internal.concurrent.Task)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r4, "Thread.currentThread()") in <okhttp3.internal.concurrent.TaskRunner: void beforeRun(okhttp3.internal.concurrent.Task)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.Thread: java.lang.String getName()>() in <okhttp3.internal.concurrent.TaskRunner: void beforeRun(okhttp3.internal.concurrent.Task)> ==> <java.lang.Thread: java.lang.String getName()>
SPECIAL edge: specialinvoke $r2.<java.lang.AssertionError: void <init>(java.lang.Object)>($r5) in <okhttp3.internal.concurrent.TaskRunner: void beforeRun(okhttp3.internal.concurrent.Task)> ==> <java.lang.AssertionError: void <init>(java.lang.Object)>
EXECUTOR edge: interfaceinvoke $r7.<okhttp3.internal.concurrent.TaskRunner$Backend: void execute(java.lang.Runnable)>($r14) in <okhttp3.internal.concurrent.TaskRunner: okhttp3.internal.concurrent.Task awaitTaskToRun()> ==> <okhttp3.internal.concurrent.TaskRunner$runnable$1: void run()>
INTERFACE edge: $l0 = interfaceinvoke $r7.<okhttp3.internal.concurrent.TaskRunner$Backend: long nanoTime()>() in <okhttp3.internal.concurrent.TaskRunner: okhttp3.internal.concurrent.Task awaitTaskToRun()> ==> <okhttp3.internal.concurrent.TaskRunner$RealBackend: long nanoTime()>
INTERFACE edge: interfaceinvoke $r7.<okhttp3.internal.concurrent.TaskRunner$Backend: void coordinatorNotify(okhttp3.internal.concurrent.TaskRunner)>(r0) in <okhttp3.internal.concurrent.TaskRunner: okhttp3.internal.concurrent.Task awaitTaskToRun()> ==> <okhttp3.internal.concurrent.TaskRunner$RealBackend: void coordinatorNotify(okhttp3.internal.concurrent.TaskRunner)>
INTERFACE edge: interfaceinvoke $r7.<okhttp3.internal.concurrent.TaskRunner$Backend: void coordinatorWait(okhttp3.internal.concurrent.TaskRunner,long)>(r0, $l1) in <okhttp3.internal.concurrent.TaskRunner: okhttp3.internal.concurrent.Task awaitTaskToRun()> ==> <okhttp3.internal.concurrent.TaskRunner$RealBackend: void coordinatorWait(okhttp3.internal.concurrent.TaskRunner,long)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "runnable") in <okhttp3.internal.concurrent.TaskRunner$RealBackend: void execute(java.lang.Runnable)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "taskRunner") in <okhttp3.internal.concurrent.TaskRunner$RealBackend: void coordinatorNotify(okhttp3.internal.concurrent.TaskRunner)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "taskRunner") in <okhttp3.internal.concurrent.TaskRunner$RealBackend: void coordinatorWait(okhttp3.internal.concurrent.TaskRunner,long)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
EXECUTOR edge: virtualinvoke $r2.<java.util.concurrent.ThreadPoolExecutor: void execute(java.lang.Runnable)>($r1) in <okhttp3.internal.concurrent.TaskRunner$RealBackend: void execute(java.lang.Runnable)> ==> <okhttp3.internal.concurrent.TaskRunner$runnable$1: void run()>
VIRTUAL edge: $r8 = virtualinvoke $r1.<okhttp3.internal.concurrent.TaskRunner: okhttp3.internal.concurrent.TaskRunner$Backend getBackend()>() in <okhttp3.internal.concurrent.TaskRunner$runnable$1: void run()> ==> <okhttp3.internal.concurrent.TaskRunner: okhttp3.internal.concurrent.TaskRunner$Backend getBackend()>
INTERFACE edge: $l0 = interfaceinvoke $r8.<okhttp3.internal.concurrent.TaskRunner$Backend: long nanoTime()>() in <okhttp3.internal.concurrent.TaskRunner$runnable$1: void run()> ==> <okhttp3.internal.concurrent.TaskRunner$RealBackend: long nanoTime()>
INTERFACE edge: $l1 = interfaceinvoke $r8.<okhttp3.internal.concurrent.TaskRunner$Backend: long nanoTime()>() in <okhttp3.internal.concurrent.TaskRunner$runnable$1: void run()> ==> <okhttp3.internal.concurrent.TaskRunner$RealBackend: long nanoTime()>
INTERFACE edge: $l1 = interfaceinvoke $r8.<okhttp3.internal.concurrent.TaskRunner$Backend: long nanoTime()>() in <okhttp3.internal.concurrent.TaskRunner$runnable$1: void run()> ==> <okhttp3.internal.concurrent.TaskRunner$RealBackend: long nanoTime()>
SPECIAL edge: specialinvoke $r0.<okhttp3.internal.concurrent.TaskRunner: void runTask(okhttp3.internal.concurrent.Task)>($r1) in <okhttp3.internal.concurrent.TaskRunner: void access$runTask(okhttp3.internal.concurrent.TaskRunner,okhttp3.internal.concurrent.Task)> ==> <okhttp3.internal.concurrent.TaskRunner: void runTask(okhttp3.internal.concurrent.Task)>
CLINIT edge: $z0 = <okhttp3.internal.Util: boolean assertionsEnabled> in <okhttp3.internal.concurrent.TaskRunner: void runTask(okhttp3.internal.concurrent.Task)> ==> <okhttp3.internal.Util: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r4, "currentThread") in <okhttp3.internal.concurrent.TaskRunner: void runTask(okhttp3.internal.concurrent.Task)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
CLINIT edge: $r8 = <kotlin.Unit: kotlin.Unit INSTANCE> in <okhttp3.internal.concurrent.TaskRunner: void runTask(okhttp3.internal.concurrent.Task)> ==> <kotlin.Unit: void <clinit>()>
CLINIT edge: $r8 = <kotlin.Unit: kotlin.Unit INSTANCE> in <okhttp3.internal.concurrent.TaskRunner: void runTask(okhttp3.internal.concurrent.Task)> ==> <kotlin.Unit: void <clinit>()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.Thread: java.lang.String getName()>() in <okhttp3.internal.concurrent.TaskRunner: void runTask(okhttp3.internal.concurrent.Task)> ==> <java.lang.Thread: java.lang.String getName()>
VIRTUAL edge: virtualinvoke $r4.<java.lang.Thread: void setName(java.lang.String)>($r7) in <okhttp3.internal.concurrent.TaskRunner: void runTask(okhttp3.internal.concurrent.Task)> ==> <java.lang.Thread: void setName(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void setName(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r2.<java.lang.AssertionError: void <init>(java.lang.Object)>($r5) in <okhttp3.internal.concurrent.TaskRunner: void runTask(okhttp3.internal.concurrent.Task)> ==> <java.lang.AssertionError: void <init>(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<okhttp3.internal.concurrent.TaskRunner: void afterRun(okhttp3.internal.concurrent.Task,long)>($r1, $l0) in <okhttp3.internal.concurrent.TaskRunner: void runTask(okhttp3.internal.concurrent.Task)> ==> <okhttp3.internal.concurrent.TaskRunner: void afterRun(okhttp3.internal.concurrent.Task,long)>
CLINIT edge: $z0 = <okhttp3.internal.Util: boolean assertionsEnabled> in <okhttp3.internal.concurrent.TaskRunner: void afterRun(okhttp3.internal.concurrent.Task,long)> ==> <okhttp3.internal.Util: void <clinit>()>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>($r7) in <okhttp3.internal.concurrent.TaskRunner: void afterRun(okhttp3.internal.concurrent.Task,long)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>($r4, "Thread.currentThread()") in <okhttp3.internal.concurrent.TaskRunner: void afterRun(okhttp3.internal.concurrent.Task,long)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.Thread: java.lang.String getName()>() in <okhttp3.internal.concurrent.TaskRunner: void afterRun(okhttp3.internal.concurrent.Task,long)> ==> <java.lang.Thread: java.lang.String getName()>
VIRTUAL edge: $r5 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>() in <okhttp3.internal.concurrent.TaskRunner: void afterRun(okhttp3.internal.concurrent.Task,long)> ==> <java.lang.String: java.lang.String toString()>
SPECIAL edge: specialinvoke $r2.<java.lang.AssertionError: void <init>(java.lang.Object)>($r5) in <okhttp3.internal.concurrent.TaskRunner: void afterRun(okhttp3.internal.concurrent.Task,long)> ==> <java.lang.AssertionError: void <init>(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<okhttp3.internal.concurrent.TaskRunner$Backend: void coordinatorNotify(okhttp3.internal.concurrent.TaskRunner)>(r0) in <okhttp3.internal.concurrent.TaskRunner: void kickCoordinator$okhttp(okhttp3.internal.concurrent.TaskQueue)> ==> <okhttp3.internal.concurrent.TaskRunner$RealBackend: void coordinatorNotify(okhttp3.internal.concurrent.TaskRunner)>
INTERFACE edge: interfaceinvoke $r10.<okhttp3.internal.concurrent.TaskRunner$Backend: void execute(java.lang.Runnable)>($r11) in <okhttp3.internal.concurrent.TaskRunner: void kickCoordinator$okhttp(okhttp3.internal.concurrent.TaskQueue)> ==> <okhttp3.internal.concurrent.TaskRunner$RealBackend: void execute(java.lang.Runnable)>
VIRTUAL edge: virtualinvoke $r0.<okhttp3.internal.concurrent.TaskQueue: void schedule(okhttp3.internal.concurrent.Task,long)>($r1, $l0) in <okhttp3.internal.concurrent.TaskQueue: void schedule$default(okhttp3.internal.concurrent.TaskQueue,okhttp3.internal.concurrent.Task,long,int,java.lang.Object)> ==> <okhttp3.internal.concurrent.TaskQueue: void schedule(okhttp3.internal.concurrent.Task,long)>
CLINIT edge: $r3 = <okhttp3.internal.concurrent.TaskRunner: okhttp3.internal.concurrent.TaskRunner$Companion Companion> in <okhttp3.internal.concurrent.TaskQueue: void schedule(okhttp3.internal.concurrent.Task,long)> ==> <okhttp3.internal.concurrent.TaskRunner: void <clinit>()>
STATIC edge: staticinvoke <okhttp3.internal.concurrent.TaskLoggerKt: void access$log(okhttp3.internal.concurrent.Task,okhttp3.internal.concurrent.TaskQueue,java.lang.String)>($r1, r0, "schedule failed (queue is shutdown)") in <okhttp3.internal.concurrent.TaskQueue: void schedule(okhttp3.internal.concurrent.Task,long)> ==> <okhttp3.internal.concurrent.TaskLoggerKt: void access$log(okhttp3.internal.concurrent.Task,okhttp3.internal.concurrent.TaskQueue,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "task") in <okhttp3.internal.concurrent.TaskQueue: void schedule(okhttp3.internal.concurrent.Task,long)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
CLINIT edge: $r9 = <kotlin.Unit: kotlin.Unit INSTANCE> in <okhttp3.internal.concurrent.TaskQueue: void schedule(okhttp3.internal.concurrent.Task,long)> ==> <kotlin.Unit: void <clinit>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<okhttp3.internal.concurrent.TaskRunner$Companion: java.util.logging.Logger getLogger()>() in <okhttp3.internal.concurrent.TaskQueue: void schedule(okhttp3.internal.concurrent.Task,long)> ==> <okhttp3.internal.concurrent.TaskRunner$Companion: java.util.logging.Logger getLogger()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<okhttp3.internal.concurrent.TaskRunner$Companion: java.util.logging.Logger getLogger()>() in <okhttp3.internal.concurrent.TaskQueue: void schedule(okhttp3.internal.concurrent.Task,long)> ==> <okhttp3.internal.concurrent.TaskRunner$Companion: java.util.logging.Logger getLogger()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<okhttp3.internal.concurrent.Task: boolean getCancelable()>() in <okhttp3.internal.concurrent.TaskQueue: void schedule(okhttp3.internal.concurrent.Task,long)> ==> <okhttp3.internal.concurrent.Task: boolean getCancelable()>
VIRTUAL edge: $z0 = virtualinvoke r0.<okhttp3.internal.concurrent.TaskQueue: boolean scheduleAndDecide$okhttp(okhttp3.internal.concurrent.Task,long,boolean)>($r1, $l0, 0) in <okhttp3.internal.concurrent.TaskQueue: void schedule(okhttp3.internal.concurrent.Task,long)> ==> <okhttp3.internal.concurrent.TaskQueue: boolean scheduleAndDecide$okhttp(okhttp3.internal.concurrent.Task,long,boolean)>
CLINIT edge: $r6 = <okhttp3.internal.concurrent.TaskRunner: okhttp3.internal.concurrent.TaskRunner$Companion Companion> in <okhttp3.internal.concurrent.TaskQueue: boolean scheduleAndDecide$okhttp(okhttp3.internal.concurrent.Task,long,boolean)> ==> <okhttp3.internal.concurrent.TaskRunner: void <clinit>()>
STATIC edge: staticinvoke <okhttp3.internal.concurrent.TaskLoggerKt: void access$log(okhttp3.internal.concurrent.Task,okhttp3.internal.concurrent.TaskQueue,java.lang.String)>($r1, r0, $r9) in <okhttp3.internal.concurrent.TaskQueue: boolean scheduleAndDecide$okhttp(okhttp3.internal.concurrent.Task,long,boolean)> ==> <okhttp3.internal.concurrent.TaskLoggerKt: void access$log(okhttp3.internal.concurrent.Task,okhttp3.internal.concurrent.TaskQueue,java.lang.String)>
STATIC edge: $r9 = staticinvoke <okhttp3.internal.concurrent.TaskLoggerKt: java.lang.String formatDuration(long)>($l2) in <okhttp3.internal.concurrent.TaskQueue: boolean scheduleAndDecide$okhttp(okhttp3.internal.concurrent.Task,long,boolean)> ==> <okhttp3.internal.concurrent.TaskLoggerKt: java.lang.String formatDuration(long)>
STATIC edge: $r9 = staticinvoke <okhttp3.internal.concurrent.TaskLoggerKt: java.lang.String formatDuration(long)>($l2) in <okhttp3.internal.concurrent.TaskQueue: boolean scheduleAndDecide$okhttp(okhttp3.internal.concurrent.Task,long,boolean)> ==> <okhttp3.internal.concurrent.TaskLoggerKt: java.lang.String formatDuration(long)>
STATIC edge: staticinvoke <okhttp3.internal.concurrent.TaskLoggerKt: void access$log(okhttp3.internal.concurrent.Task,okhttp3.internal.concurrent.TaskQueue,java.lang.String)>($r1, r0, "already scheduled") in <okhttp3.internal.concurrent.TaskQueue: boolean scheduleAndDecide$okhttp(okhttp3.internal.concurrent.Task,long,boolean)> ==> <okhttp3.internal.concurrent.TaskLoggerKt: void access$log(okhttp3.internal.concurrent.Task,okhttp3.internal.concurrent.TaskQueue,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "task") in <okhttp3.internal.concurrent.TaskQueue: boolean scheduleAndDecide$okhttp(okhttp3.internal.concurrent.Task,long,boolean)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<okhttp3.internal.concurrent.TaskRunner$Companion: java.util.logging.Logger getLogger()>() in <okhttp3.internal.concurrent.TaskQueue: boolean scheduleAndDecide$okhttp(okhttp3.internal.concurrent.Task,long,boolean)> ==> <okhttp3.internal.concurrent.TaskRunner$Companion: java.util.logging.Logger getLogger()>
VIRTUAL edge: virtualinvoke $r1.<okhttp3.internal.concurrent.Task: void initQueue$okhttp(okhttp3.internal.concurrent.TaskQueue)>(r0) in <okhttp3.internal.concurrent.TaskQueue: boolean scheduleAndDecide$okhttp(okhttp3.internal.concurrent.Task,long,boolean)> ==> <okhttp3.internal.concurrent.Task: void initQueue$okhttp(okhttp3.internal.concurrent.TaskQueue)>
VIRTUAL edge: $l4 = virtualinvoke $r1.<okhttp3.internal.concurrent.Task: long getNextExecuteNanoTime$okhttp()>() in <okhttp3.internal.concurrent.TaskQueue: boolean scheduleAndDecide$okhttp(okhttp3.internal.concurrent.Task,long,boolean)> ==> <okhttp3.internal.concurrent.Task: long getNextExecuteNanoTime$okhttp()>
VIRTUAL edge: virtualinvoke $r1.<okhttp3.internal.concurrent.Task: void setNextExecuteNanoTime$okhttp(long)>($l2) in <okhttp3.internal.concurrent.TaskQueue: boolean scheduleAndDecide$okhttp(okhttp3.internal.concurrent.Task,long,boolean)> ==> <okhttp3.internal.concurrent.Task: void setNextExecuteNanoTime$okhttp(long)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "queue") in <okhttp3.internal.concurrent.Task: void initQueue$okhttp(okhttp3.internal.concurrent.TaskQueue)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>() in <okhttp3.internal.concurrent.Task: void initQueue$okhttp(okhttp3.internal.concurrent.TaskQueue)> ==> <java.lang.String: java.lang.String toString()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<okhttp3.internal.concurrent.TaskRunner: okhttp3.internal.concurrent.TaskRunner$Backend getBackend()>() in <okhttp3.internal.concurrent.TaskQueue: boolean scheduleAndDecide$okhttp(okhttp3.internal.concurrent.Task,long,boolean)> ==> <okhttp3.internal.concurrent.TaskRunner: okhttp3.internal.concurrent.TaskRunner$Backend getBackend()>
INTERFACE edge: $l1 = interfaceinvoke $r4.<okhttp3.internal.concurrent.TaskRunner$Backend: long nanoTime()>() in <okhttp3.internal.concurrent.TaskQueue: boolean scheduleAndDecide$okhttp(okhttp3.internal.concurrent.Task,long,boolean)> ==> <okhttp3.internal.concurrent.TaskRunner$RealBackend: long nanoTime()>
VIRTUAL edge: virtualinvoke $r8.<okhttp3.internal.concurrent.TaskRunner: void kickCoordinator$okhttp(okhttp3.internal.concurrent.TaskQueue)>(r0) in <okhttp3.internal.concurrent.TaskQueue: void schedule(okhttp3.internal.concurrent.Task,long)> ==> <okhttp3.internal.concurrent.TaskRunner: void kickCoordinator$okhttp(okhttp3.internal.concurrent.TaskQueue)>
VIRTUAL edge: $r3 = virtualinvoke $r1.<okhttp3.internal.concurrent.Task: java.lang.String getName()>() in <okhttp3.internal.concurrent.TaskLoggerKt: void log(okhttp3.internal.concurrent.Task,okhttp3.internal.concurrent.TaskQueue,java.lang.String)> ==> <okhttp3.internal.concurrent.Task: java.lang.String getName()>
VIRTUAL edge: virtualinvoke $r10.<okhttp3.EventListener: void connectionReleased(okhttp3.Call,okhttp3.Connection)>($r11, $r12) in <okhttp3.internal.connection.RealCall: java.io.IOException callDone(java.io.IOException)> ==> <okhttp3.EventListener: void connectionReleased(okhttp3.Call,okhttp3.Connection)>
VIRTUAL edge: virtualinvoke $r10.<okhttp3.EventListener: void callFailed(okhttp3.Call,java.io.IOException)>($r11, $r14) in <okhttp3.internal.connection.RealCall: java.io.IOException callDone(java.io.IOException)> ==> <okhttp3.EventListener: void callFailed(okhttp3.Call,java.io.IOException)>
VIRTUAL edge: virtualinvoke $r10.<okhttp3.EventListener: void callEnd(okhttp3.Call)>($r11) in <okhttp3.internal.connection.RealCall: java.io.IOException callDone(java.io.IOException)> ==> <okhttp3.EventListener: void callEnd(okhttp3.Call)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "call") in <okhttp3.EventListener: void connectionReleased(okhttp3.Call,okhttp3.Connection)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "connection") in <okhttp3.EventListener: void connectionReleased(okhttp3.Call,okhttp3.Connection)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r2, "call") in <okhttp3.EventListener: void callFailed(okhttp3.Call,java.io.IOException)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "call") in <okhttp3.EventListener: void callEnd(okhttp3.Call)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
VIRTUAL edge: virtualinvoke $r4.<okhttp3.EventListener: void callStart(okhttp3.Call)>($r5) in <okhttp3.internal.connection.RealCall: void callStart()> ==> <okhttp3.EventListener: void callStart(okhttp3.Call)>
STATIC edge: staticinvoke <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>($r1, "call") in <okhttp3.EventListener: void callStart(okhttp3.Call)> ==> <kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.Collection: int size()>() in <kotlin.collections.CollectionsKt__IterablesKt: int collectionSizeOrDefault(java.lang.Iterable,int)> ==> <kotlin.collections.EmptySet: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.Collection: int size()>() in <kotlin.collections.CollectionsKt__IterablesKt: int collectionSizeOrDefault(java.lang.Iterable,int)> ==> <kotlin.collections.EmptyList: int size()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0) in <kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<androidx.fragment.app.FragmentTransition$Callback: void onComplete(androidx.fragment.app.Fragment,androidx.core.os.CancellationSignal)>($r3, $r5) in <androidx.fragment.app.FragmentAnim$2$1: void run()> ==> <androidx.fragment.app.FragmentManager$2: void onComplete(androidx.fragment.app.Fragment,androidx.core.os.CancellationSignal)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<androidx.core.os.CancellationSignal: boolean isCanceled()>() in <androidx.fragment.app.FragmentManager$2: void onComplete(androidx.fragment.app.Fragment,androidx.core.os.CancellationSignal)> ==> <androidx.core.os.CancellationSignal: boolean isCanceled()>
VIRTUAL edge: virtualinvoke $r3.<androidx.fragment.app.FragmentManager: void removeCancellationSignal(androidx.fragment.app.Fragment,androidx.core.os.CancellationSignal)>($r1, $r2) in <androidx.fragment.app.FragmentManager$2: void onComplete(androidx.fragment.app.Fragment,androidx.core.os.CancellationSignal)> ==> <androidx.fragment.app.FragmentManager: void removeCancellationSignal(androidx.fragment.app.Fragment,androidx.core.os.CancellationSignal)>
SPECIAL edge: specialinvoke r0.<androidx.fragment.app.FragmentManager: void destroyFragmentView(androidx.fragment.app.Fragment)>($r1) in <androidx.fragment.app.FragmentManager: void removeCancellationSignal(androidx.fragment.app.Fragment,androidx.core.os.CancellationSignal)> ==> <androidx.fragment.app.FragmentManager: void destroyFragmentView(androidx.fragment.app.Fragment)>
VIRTUAL edge: virtualinvoke r0.<androidx.fragment.app.FragmentManager: void moveToState(androidx.fragment.app.Fragment)>($r1) in <androidx.fragment.app.FragmentManager: void removeCancellationSignal(androidx.fragment.app.Fragment,androidx.core.os.CancellationSignal)> ==> <androidx.fragment.app.FragmentManager: void moveToState(androidx.fragment.app.Fragment)>
VIRTUAL edge: virtualinvoke $r1.<androidx.fragment.app.Fragment: void performDestroyView()>() in <androidx.fragment.app.FragmentManager: void destroyFragmentView(androidx.fragment.app.Fragment)> ==> <androidx.fragment.app.Fragment: void performDestroyView()>
VIRTUAL edge: virtualinvoke $r2.<androidx.lifecycle.MutableLiveData: void setValue(java.lang.Object)>(null) in <androidx.fragment.app.FragmentManager: void destroyFragmentView(androidx.fragment.app.Fragment)> ==> <androidx.lifecycle.MutableLiveData: void setValue(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<androidx.fragment.app.Fragment: boolean isRemovingParent()>() in <androidx.fragment.app.FragmentManager: void moveToState(androidx.fragment.app.Fragment,int)> ==> <androidx.fragment.app.Fragment: boolean isRemovingParent()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<androidx.fragment.app.Fragment: boolean getPopDirection()>() in <androidx.fragment.app.FragmentManager: void moveToState(androidx.fragment.app.Fragment,int)> ==> <androidx.fragment.app.Fragment: boolean getPopDirection()>
VIRTUAL edge: r0 = virtualinvoke r0.<androidx.fragment.app.Fragment: androidx.fragment.app.Fragment getParentFragment()>() in <androidx.fragment.app.Fragment: boolean isRemovingParent()> ==> <androidx.fragment.app.Fragment: androidx.fragment.app.Fragment getParentFragment()>
VIRTUAL edge: $z0 = virtualinvoke r0.<androidx.fragment.app.Fragment: boolean isRemoving()>() in <androidx.fragment.app.Fragment: boolean isRemovingParent()> ==> <androidx.fragment.app.Fragment: boolean isRemoving()>
VIRTUAL edge: $i0 = virtualinvoke $r2.<androidx.fragment.app.Fragment: int getNextTransition()>() in <androidx.fragment.app.FragmentAnim: androidx.fragment.app.FragmentAnim$AnimationOrAnimator loadAnimation(android.content.Context,androidx.fragment.app.Fragment,boolean,boolean)> ==> <androidx.fragment.app.Fragment: int getNextTransition()>
VIRTUAL edge: virtualinvoke $r2.<androidx.fragment.app.Fragment: void setAnimations(int,int,int,int)>(0, 0, 0, 0) in <androidx.fragment.app.FragmentAnim: androidx.fragment.app.FragmentAnim$AnimationOrAnimator loadAnimation(android.content.Context,androidx.fragment.app.Fragment,boolean,boolean)> ==> <androidx.fragment.app.Fragment: void setAnimations(int,int,int,int)>
VIRTUAL edge: $r6 = virtualinvoke $r2.<androidx.fragment.app.Fragment: android.view.animation.Animation onCreateAnimation(int,boolean,int)>($i0, $z0, $i1) in <androidx.fragment.app.FragmentAnim: androidx.fragment.app.FragmentAnim$AnimationOrAnimator loadAnimation(android.content.Context,androidx.fragment.app.Fragment,boolean,boolean)> ==> <androidx.fragment.app.Fragment: android.view.animation.Animation onCreateAnimation(int,boolean,int)>
VIRTUAL edge: $r8 = virtualinvoke $r2.<androidx.fragment.app.Fragment: android.animation.Animator onCreateAnimator(int,boolean,int)>($i0, $z0, $i1) in <androidx.fragment.app.FragmentAnim: androidx.fragment.app.FragmentAnim$AnimationOrAnimator loadAnimation(android.content.Context,androidx.fragment.app.Fragment,boolean,boolean)> ==> <androidx.fragment.app.Fragment: android.animation.Animator onCreateAnimator(int,boolean,int)>
SPECIAL edge: $r1 = specialinvoke r0.<androidx.fragment.app.Fragment: androidx.fragment.app.Fragment$AnimationInfo ensureAnimationInfo()>() in <androidx.fragment.app.Fragment: void setAnimations(int,int,int,int)> ==> <androidx.fragment.app.Fragment: androidx.fragment.app.Fragment$AnimationInfo ensureAnimationInfo()>
SPECIAL edge: $r1 = specialinvoke r0.<androidx.fragment.app.Fragment: androidx.fragment.app.Fragment$AnimationInfo ensureAnimationInfo()>() in <androidx.fragment.app.Fragment: void setAnimations(int,int,int,int)> ==> <androidx.fragment.app.Fragment: androidx.fragment.app.Fragment$AnimationInfo ensureAnimationInfo()>
VIRTUAL edge: $i0 = virtualinvoke $r0.<androidx.fragment.app.Fragment: int getPopEnterAnim()>() in <androidx.fragment.app.FragmentAnim: int getNextAnim(androidx.fragment.app.Fragment,boolean,boolean)> ==> <androidx.fragment.app.Fragment: int getPopEnterAnim()>
VIRTUAL edge: $i0 = virtualinvoke $r0.<androidx.fragment.app.Fragment: int getPopExitAnim()>() in <androidx.fragment.app.FragmentAnim: int getNextAnim(androidx.fragment.app.Fragment,boolean,boolean)> ==> <androidx.fragment.app.Fragment: int getPopExitAnim()>
VIRTUAL edge: $i0 = virtualinvoke $r0.<androidx.fragment.app.Fragment: int getEnterAnim()>() in <androidx.fragment.app.FragmentAnim: int getNextAnim(androidx.fragment.app.Fragment,boolean,boolean)> ==> <androidx.fragment.app.Fragment: int getEnterAnim()>
VIRTUAL edge: $i0 = virtualinvoke $r0.<androidx.fragment.app.Fragment: int getExitAnim()>() in <androidx.fragment.app.FragmentAnim: int getNextAnim(androidx.fragment.app.Fragment,boolean,boolean)> ==> <androidx.fragment.app.Fragment: int getExitAnim()>
VIRTUAL edge: virtualinvoke $r5.<androidx.fragment.app.Fragment: void setAnimatingAway(android.view.View)>($r2) in <androidx.fragment.app.FragmentAnim: void animateRemoveFragment(androidx.fragment.app.Fragment,androidx.fragment.app.FragmentAnim$AnimationOrAnimator,androidx.fragment.app.FragmentTransition$Callback)> ==> <androidx.fragment.app.Fragment: void setAnimatingAway(android.view.View)>
VIRTUAL edge: virtualinvoke $r5.<androidx.fragment.app.Fragment: void setAnimator(android.animation.Animator)>($r11) in <androidx.fragment.app.FragmentAnim: void animateRemoveFragment(androidx.fragment.app.Fragment,androidx.fragment.app.FragmentAnim$AnimationOrAnimator,androidx.fragment.app.FragmentTransition$Callback)> ==> <androidx.fragment.app.Fragment: void setAnimator(android.animation.Animator)>
SPECIAL edge: $r2 = specialinvoke r0.<androidx.fragment.app.Fragment: androidx.fragment.app.Fragment$AnimationInfo ensureAnimationInfo()>() in <androidx.fragment.app.Fragment: void setAnimator(android.animation.Animator)> ==> <androidx.fragment.app.Fragment: androidx.fragment.app.Fragment$AnimationInfo ensureAnimationInfo()>
VIRTUAL edge: virtualinvoke $r2.<androidx.appcompat.view.ActionMode: void finish()>() in <androidx.appcompat.widget.ActionBarContextView$1: void onClick(android.view.View)> ==> <androidx.appcompat.view.StandaloneActionMode: void finish()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>() in <androidx.core.content.res.ResourcesCompat: android.content.res.ColorStateList getCachedColorStateList(androidx.core.content.res.ResourcesCompat$ColorStateListCacheKey,int)> ==> <androidx.appcompat.widget.VectorEnabledTintResources: android.content.res.Configuration getConfiguration()>
VIRTUAL edge: $r9 = virtualinvoke $r8.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>() in <androidx.core.content.res.ResourcesCompat: void addColorStateListToCache(androidx.core.content.res.ResourcesCompat$ColorStateListCacheKey,int,android.content.res.ColorStateList,android.content.res.Resources$Theme)> ==> <androidx.appcompat.widget.VectorEnabledTintResources: android.content.res.Configuration getConfiguration()>
VIRTUAL edge: $r4 = virtualinvoke $r0.<android.content.Context: android.content.res.Resources$Theme getTheme()>() in <androidx.appcompat.widget.ThemeUtils: int getDisabledThemeAttrColor(android.content.Context,int)> ==> <androidx.appcompat.view.ContextThemeWrapper: android.content.res.Resources$Theme getTheme()>
VIRTUAL edge: $r3 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>() in <androidx.appcompat.widget.ResourceManagerInternal: android.graphics.drawable.Drawable createDrawableIfNeeded(android.content.Context,int)> ==> <androidx.appcompat.view.ContextThemeWrapper: android.content.res.Resources getResources()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<android.content.Context: android.content.res.Resources getResources()>() in <androidx.appcompat.widget.AppCompatDrawableManager$1: android.graphics.drawable.LayerDrawable getRatingBarLayerDrawable(androidx.appcompat.widget.ResourceManagerInternal,android.content.Context,int)> ==> <androidx.appcompat.view.ContextThemeWrapper: android.content.res.Resources getResources()>
VIRTUAL edge: $r7 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>() in <androidx.appcompat.widget.ResourceManagerInternal: android.graphics.drawable.Drawable getCachedDrawable(android.content.Context,long)> ==> <androidx.appcompat.view.ContextThemeWrapper: android.content.res.Resources getResources()>
VIRTUAL edge: $r8 = virtualinvoke $r2.<android.content.Context: android.content.res.Resources getResources()>() in <androidx.appcompat.widget.ResourceManagerInternal: android.graphics.drawable.Drawable loadDrawableFromDelegates(android.content.Context,int)> ==> <androidx.appcompat.view.ContextThemeWrapper: android.content.res.Resources getResources()>
VIRTUAL edge: $r15 = virtualinvoke $r2.<android.content.Context: android.content.res.Resources$Theme getTheme()>() in <androidx.appcompat.widget.ResourceManagerInternal: android.graphics.drawable.Drawable loadDrawableFromDelegates(android.content.Context,int)> ==> <androidx.appcompat.view.ContextThemeWrapper: android.content.res.Resources$Theme getTheme()>
INTERFACE edge: interfaceinvoke $r2.<java.lang.Runnable: void run()>() in <androidx.fragment.app.FragmentTransitionCompat21$4: void onTransitionEnd(android.transition.Transition)> ==> <androidx.fragment.app.FragmentTransition$1: void run()>
INTERFACE edge: interfaceinvoke $r2.<java.lang.Runnable: void run()>() in <androidx.fragment.app.FragmentTransitionCompat21$4: void onTransitionEnd(android.transition.Transition)> ==> <androidx.fragment.app.FragmentTransition$3: void run()>
INTERFACE edge: interfaceinvoke $r1.<androidx.fragment.app.FragmentTransition$Callback: void onComplete(androidx.fragment.app.Fragment,androidx.core.os.CancellationSignal)>($r2, $r3) in <androidx.fragment.app.FragmentTransition$3: void run()> ==> <androidx.fragment.app.FragmentManager$2: void onComplete(androidx.fragment.app.Fragment,androidx.core.os.CancellationSignal)>
INTERFACE edge: interfaceinvoke $r1.<androidx.fragment.app.FragmentTransition$Callback: void onComplete(androidx.fragment.app.Fragment,androidx.core.os.CancellationSignal)>($r2, $r3) in <androidx.fragment.app.FragmentTransition$1: void run()> ==> <androidx.fragment.app.FragmentManager$2: void onComplete(androidx.fragment.app.Fragment,androidx.core.os.CancellationSignal)>
INTERFACE edge: interfaceinvoke $r6.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>() in <androidx.activity.OnBackPressedDispatcher$OnBackPressedCancellable: void cancel()> ==> <androidx.activity.OnBackPressedDispatcher$addCancellableCallback$1: java.lang.Object invoke()>
CLINIT edge: r1 = <kotlin.Unit: kotlin.Unit INSTANCE> in <androidx.activity.OnBackPressedDispatcher$addCancellableCallback$1: java.lang.Object invoke()> ==> <kotlin.Unit: void <clinit>()>
VIRTUAL edge: virtualinvoke r0.<androidx.activity.OnBackPressedDispatcher$addCancellableCallback$1: void invoke()>() in <androidx.activity.OnBackPressedDispatcher$addCancellableCallback$1: java.lang.Object invoke()> ==> <androidx.activity.OnBackPressedDispatcher$addCancellableCallback$1: void invoke()>
STATIC edge: staticinvoke <androidx.activity.OnBackPressedDispatcher: void access$updateEnabledCallbacks(androidx.activity.OnBackPressedDispatcher)>($r2) in <androidx.activity.OnBackPressedDispatcher$addCancellableCallback$1: void invoke()> ==> <androidx.activity.OnBackPressedDispatcher: void access$updateEnabledCallbacks(androidx.activity.OnBackPressedDispatcher)>
INTERFACE edge: interfaceinvoke $r4.<androidx.activity.Cancellable: void cancel()>() in <androidx.activity.OnBackPressedDispatcher$LifecycleOnBackPressedCancellable: void cancel()> ==> <androidx.activity.OnBackPressedDispatcher$OnBackPressedCancellable: void cancel()>
VIRTUAL edge: virtualinvoke $r1.<androidx.fragment.app.FragmentManagerViewModel: void setIsStateSaved(boolean)>(0) in <androidx.fragment.app.FragmentManager: void dispatchAttach()> ==> <androidx.fragment.app.FragmentManagerViewModel: void setIsStateSaved(boolean)>
VIRTUAL edge: virtualinvoke $r3.<androidx.fragment.app.FragmentViewLifecycleOwner: void handleLifecycleEvent(androidx.lifecycle.Lifecycle$Event)>($r4) in <androidx.fragment.app.Fragment: void performPause()> ==> <androidx.fragment.app.FragmentViewLifecycleOwner: void handleLifecycleEvent(androidx.lifecycle.Lifecycle$Event)>
VIRTUAL edge: virtualinvoke $r1.<androidx.fragment.app.FragmentManagerViewModel: void setIsStateSaved(boolean)>(1) in <androidx.fragment.app.FragmentManager: void dispatchStop()> ==> <androidx.fragment.app.FragmentManagerViewModel: void setIsStateSaved(boolean)>
VIRTUAL edge: virtualinvoke $r3.<androidx.fragment.app.FragmentViewLifecycleOwner: void handleLifecycleEvent(androidx.lifecycle.Lifecycle$Event)>($r4) in <androidx.fragment.app.Fragment: void performStop()> ==> <androidx.fragment.app.FragmentViewLifecycleOwner: void handleLifecycleEvent(androidx.lifecycle.Lifecycle$Event)>
VIRTUAL edge: $r3 = virtualinvoke $r1.<androidx.fragment.app.FragmentManager: androidx.lifecycle.ViewModelStore getViewModelStore(androidx.fragment.app.Fragment)>(r0) in <androidx.fragment.app.Fragment: androidx.lifecycle.ViewModelStore getViewModelStore()> ==> <androidx.fragment.app.FragmentManager: androidx.lifecycle.ViewModelStore getViewModelStore(androidx.fragment.app.Fragment)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<androidx.fragment.app.FragmentManagerViewModel: androidx.lifecycle.ViewModelStore getViewModelStore(androidx.fragment.app.Fragment)>($r3) in <androidx.fragment.app.FragmentManager: androidx.lifecycle.ViewModelStore getViewModelStore(androidx.fragment.app.Fragment)> ==> <androidx.fragment.app.FragmentManagerViewModel: androidx.lifecycle.ViewModelStore getViewModelStore(androidx.fragment.app.Fragment)>
SPECIAL edge: specialinvoke $r5.<androidx.lifecycle.ViewModelStore: void <init>()>() in <androidx.fragment.app.FragmentManagerViewModel: androidx.lifecycle.ViewModelStore getViewModelStore(androidx.fragment.app.Fragment)> ==> <androidx.lifecycle.ViewModelStore: void <init>()>
VIRTUAL edge: virtualinvoke $r1.<androidx.loader.app.LoaderManagerImpl$LoaderViewModel: void markForRedelivery()>() in <androidx.loader.app.LoaderManagerImpl: void markForRedelivery()> ==> <androidx.loader.app.LoaderManagerImpl$LoaderViewModel: void markForRedelivery()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<androidx.collection.SparseArrayCompat: int size()>() in <androidx.loader.app.LoaderManagerImpl$LoaderViewModel: void markForRedelivery()> ==> <androidx.collection.SparseArrayCompat: int size()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<androidx.collection.SparseArrayCompat: java.lang.Object valueAt(int)>($i1) in <androidx.loader.app.LoaderManagerImpl$LoaderViewModel: void markForRedelivery()> ==> <androidx.collection.SparseArrayCompat: java.lang.Object valueAt(int)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<androidx.fragment.app.FragmentViewLifecycleOwner: androidx.lifecycle.Lifecycle getLifecycle()>() in <androidx.fragment.app.Fragment: void performDestroyView()> ==> <androidx.fragment.app.FragmentViewLifecycleOwner: androidx.lifecycle.Lifecycle getLifecycle()>
VIRTUAL edge: virtualinvoke $r3.<androidx.fragment.app.FragmentViewLifecycleOwner: void handleLifecycleEvent(androidx.lifecycle.Lifecycle$Event)>($r7) in <androidx.fragment.app.Fragment: void performDestroyView()> ==> <androidx.fragment.app.FragmentViewLifecycleOwner: void handleLifecycleEvent(androidx.lifecycle.Lifecycle$Event)>
VIRTUAL edge: virtualinvoke r0.<androidx.fragment.app.FragmentViewLifecycleOwner: void initialize()>() in <androidx.fragment.app.FragmentViewLifecycleOwner: androidx.lifecycle.Lifecycle getLifecycle()> ==> <androidx.fragment.app.FragmentViewLifecycleOwner: void initialize()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<androidx.lifecycle.Lifecycle: androidx.lifecycle.Lifecycle$State getCurrentState()>() in <androidx.fragment.app.Fragment: void performDestroyView()> ==> <androidx.lifecycle.LifecycleRegistry: androidx.lifecycle.Lifecycle$State getCurrentState()>
VIRTUAL edge: $z0 = virtualinvoke $r5.<androidx.lifecycle.Lifecycle$State: boolean isAtLeast(androidx.lifecycle.Lifecycle$State)>($r6) in <androidx.fragment.app.Fragment: void performDestroyView()> ==> <androidx.lifecycle.Lifecycle$State: boolean isAtLeast(androidx.lifecycle.Lifecycle$State)>
VIRTUAL edge: virtualinvoke $r3.<androidx.activity.result.ActivityResultLauncher: void unregister()>() in <androidx.fragment.app.FragmentManager: void dispatchDestroy()> ==> <androidx.activity.result.ActivityResultRegistry$3: void unregister()>
VIRTUAL edge: virtualinvoke $r3.<androidx.activity.result.ActivityResultLauncher: void unregister()>() in <androidx.fragment.app.FragmentManager: void dispatchDestroy()> ==> <androidx.activity.result.ActivityResultRegistry$3: void unregister()>
VIRTUAL edge: virtualinvoke $r1.<androidx.activity.result.ActivityResultRegistry: void unregister(java.lang.String)>($r2) in <androidx.activity.result.ActivityResultRegistry$3: void unregister()> ==> <androidx.activity.result.ActivityResultRegistry: void unregister(java.lang.String)>
INTERFACE edge: interfaceinvoke $r4.<androidx.appcompat.view.ActionMode$Callback: boolean onPrepareActionMode(androidx.appcompat.view.ActionMode,android.view.Menu)>(r0, $r3) in <androidx.appcompat.app.WindowDecorActionBar$ActionModeImpl: void invalidate()> ==> <androidx.appcompat.app.AppCompatDelegateImpl$ActionModeCallbackWrapperV9: boolean onPrepareActionMode(androidx.appcompat.view.ActionMode,android.view.Menu)>
VIRTUAL edge: virtualinvoke $r3.<androidx.appcompat.view.menu.MenuBuilder: void stopDispatchingItemsChanged()>() in <androidx.appcompat.app.WindowDecorActionBar$ActionModeImpl: void invalidate()> ==> <androidx.appcompat.view.menu.MenuBuilder: void stopDispatchingItemsChanged()>
VIRTUAL edge: virtualinvoke $r3.<androidx.appcompat.view.menu.MenuBuilder: void startDispatchingItemsChanged()>() in <androidx.appcompat.app.WindowDecorActionBar$ActionModeImpl: void invalidate()> ==> <androidx.appcompat.view.menu.MenuBuilder: void startDispatchingItemsChanged()>
VIRTUAL edge: virtualinvoke $r3.<androidx.appcompat.view.menu.MenuBuilder: void startDispatchingItemsChanged()>() in <androidx.appcompat.app.WindowDecorActionBar$ActionModeImpl: void invalidate()> ==> <androidx.appcompat.view.menu.MenuBuilder: void startDispatchingItemsChanged()>
INTERFACE edge: $z0 = interfaceinvoke $r2.<androidx.appcompat.view.ActionMode$Callback: boolean onCreateActionMode(androidx.appcompat.view.ActionMode,android.view.Menu)>(r0, $r1) in <androidx.appcompat.app.WindowDecorActionBar$ActionModeImpl: boolean dispatchOnCreate()> ==> <androidx.appcompat.app.AppCompatDelegateImpl$ActionModeCallbackWrapperV9: boolean onCreateActionMode(androidx.appcompat.view.ActionMode,android.view.Menu)>
VIRTUAL edge: virtualinvoke $r1.<androidx.appcompat.view.menu.MenuBuilder: void stopDispatchingItemsChanged()>() in <androidx.appcompat.app.WindowDecorActionBar$ActionModeImpl: boolean dispatchOnCreate()> ==> <androidx.appcompat.view.menu.MenuBuilder: void stopDispatchingItemsChanged()>
VIRTUAL edge: virtualinvoke $r1.<androidx.appcompat.view.menu.MenuBuilder: void startDispatchingItemsChanged()>() in <androidx.appcompat.app.WindowDecorActionBar$ActionModeImpl: boolean dispatchOnCreate()> ==> <androidx.appcompat.view.menu.MenuBuilder: void startDispatchingItemsChanged()>
INTERFACE edge: interfaceinvoke $r3.<androidx.appcompat.view.ActionMode$Callback: void onDestroyActionMode(androidx.appcompat.view.ActionMode)>(r0) in <androidx.appcompat.app.WindowDecorActionBar$ActionModeImpl: void finish()> ==> <androidx.appcompat.app.AppCompatDelegateImpl$ActionModeCallbackWrapperV9: void onDestroyActionMode(androidx.appcompat.view.ActionMode)>
VIRTUAL edge: virtualinvoke $r1.<androidx.appcompat.app.WindowDecorActionBar: void animateToMode(boolean)>(0) in <androidx.appcompat.app.WindowDecorActionBar$ActionModeImpl: void finish()> ==> <androidx.appcompat.app.WindowDecorActionBar: void animateToMode(boolean)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<androidx.appcompat.app.WindowDecorActionBar$ActionModeImpl: android.view.Menu getMenu()>() in <androidx.appcompat.app.WindowDecorActionBar: boolean onKeyShortcut(int,android.view.KeyEvent)> ==> <androidx.appcompat.app.WindowDecorActionBar$ActionModeImpl: android.view.Menu getMenu()>
INTERFACE edge: interfaceinvoke $r3.<android.view.Menu: void setQwertyMode(boolean)>($z0) in <androidx.appcompat.app.WindowDecorActionBar: boolean onKeyShortcut(int,android.view.KeyEvent)> ==> <androidx.appcompat.view.menu.MenuBuilder: void setQwertyMode(boolean)>
INTERFACE edge: $z0 = interfaceinvoke $r3.<android.view.Menu: boolean performShortcut(int,android.view.KeyEvent,int)>($i0, $r1, 0) in <androidx.appcompat.app.WindowDecorActionBar: boolean onKeyShortcut(int,android.view.KeyEvent)> ==> <androidx.appcompat.view.menu.MenuBuilder: boolean performShortcut(int,android.view.KeyEvent,int)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>() in <androidx.appcompat.view.ActionBarPolicy: int getMaxActionButtons()> ==> <androidx.appcompat.view.ContextThemeWrapper: android.content.res.Resources getResources()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>() in <androidx.appcompat.view.ActionBarPolicy: int getMaxActionButtons()> ==> <androidx.appcompat.app.AppCompatActivity: android.content.res.Resources getResources()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>() in <androidx.appcompat.view.ActionBarPolicy: int getMaxActionButtons()> ==> <androidx.appcompat.widget.VectorEnabledTintResources: android.content.res.Configuration getConfiguration()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>() in <androidx.appcompat.view.ActionBarPolicy: int getEmbeddedMenuWidthLimit()> ==> <androidx.appcompat.view.ContextThemeWrapper: android.content.res.Resources getResources()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>() in <androidx.appcompat.view.ActionBarPolicy: int getEmbeddedMenuWidthLimit()> ==> <androidx.appcompat.app.AppCompatActivity: android.content.res.Resources getResources()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>() in <androidx.appcompat.view.ActionBarPolicy: int getEmbeddedMenuWidthLimit()> ==> <androidx.appcompat.widget.VectorEnabledTintResources: android.util.DisplayMetrics getDisplayMetrics()>
VIRTUAL edge: virtualinvoke $r2.<androidx.appcompat.view.ActionMode: void finish()>() in <androidx.appcompat.app.AppCompatDelegateImpl: boolean onBackPressed()> ==> <androidx.appcompat.app.WindowDecorActionBar$ActionModeImpl: void finish()>
VIRTUAL edge: virtualinvoke $r3.<androidx.appcompat.view.menu.MenuBuilder: void flagActionItems()>() in <androidx.appcompat.view.menu.BaseMenuPresenter: void updateMenuView(boolean)> ==> <androidx.appcompat.view.menu.MenuBuilder: void flagActionItems()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<androidx.appcompat.view.menu.MenuBuilder: java.util.ArrayList getVisibleItems()>() in <androidx.appcompat.view.menu.BaseMenuPresenter: void updateMenuView(boolean)> ==> <androidx.appcompat.view.menu.MenuBuilder: java.util.ArrayList getVisibleItems()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<androidx.appcompat.view.menu.MenuBuilder: java.util.ArrayList getActionItems()>() in <androidx.appcompat.widget.ActionMenuPresenter: void updateMenuView(boolean)> ==> <androidx.appcompat.view.menu.MenuBuilder: java.util.ArrayList getActionItems()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<androidx.appcompat.view.menu.MenuBuilder: java.util.ArrayList getNonActionItems()>() in <androidx.appcompat.widget.ActionMenuPresenter: void updateMenuView(boolean)> ==> <androidx.appcompat.view.menu.MenuBuilder: java.util.ArrayList getNonActionItems()>
VIRTUAL edge: virtualinvoke r0.<androidx.appcompat.view.menu.MenuBuilder: void flagActionItems()>() in <androidx.appcompat.view.menu.MenuBuilder: java.util.ArrayList getActionItems()> ==> <androidx.appcompat.view.menu.MenuBuilder: void flagActionItems()>
VIRTUAL edge: virtualinvoke $r3.<androidx.appcompat.view.ActionMode: void finish()>() in <androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.view.ActionMode startSupportActionModeFromWindow(androidx.appcompat.view.ActionMode$Callback)> ==> <androidx.appcompat.app.WindowDecorActionBar$ActionModeImpl: void finish()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <androidx.collection.SimpleArrayMap: int indexOfValue(java.lang.Object)> ==> <androidx.collection.SimpleArrayMap: boolean equals(java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke $r6.<androidx.collection.SimpleArrayMap: int size()>() in <androidx.collection.SimpleArrayMap: boolean equals(java.lang.Object)> ==> <androidx.collection.SimpleArrayMap: int size()>
VIRTUAL edge: $z0 = virtualinvoke $r6.<androidx.collection.SimpleArrayMap: boolean containsKey(java.lang.Object)>($r5) in <androidx.collection.SimpleArrayMap: boolean equals(java.lang.Object)> ==> <androidx.collection.SimpleArrayMap: boolean containsKey(java.lang.Object)>
VIRTUAL edge: $r5 = virtualinvoke r0.<androidx.collection.SimpleArrayMap: java.lang.Object keyAt(int)>($i0) in <androidx.collection.SimpleArrayMap: boolean equals(java.lang.Object)> ==> <androidx.collection.SimpleArrayMap: java.lang.Object keyAt(int)>
VIRTUAL edge: $r7 = virtualinvoke r0.<androidx.collection.SimpleArrayMap: java.lang.Object valueAt(int)>($i0) in <androidx.collection.SimpleArrayMap: boolean equals(java.lang.Object)> ==> <androidx.collection.SimpleArrayMap: java.lang.Object valueAt(int)>
VIRTUAL edge: $r7 = virtualinvoke r0.<androidx.collection.SimpleArrayMap: java.lang.Object valueAt(int)>($i0) in <androidx.collection.SimpleArrayMap: boolean equals(java.lang.Object)> ==> <androidx.collection.SimpleArrayMap: java.lang.Object valueAt(int)>
VIRTUAL edge: $z0 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>($r8) in <androidx.collection.SimpleArrayMap: boolean equals(java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>($r8) in <androidx.collection.SimpleArrayMap: boolean equals(java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <androidx.collection.SimpleArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <androidx.collection.SimpleArrayMap: int hashCode()>
VIRTUAL edge: $i2 = virtualinvoke $r3.<java.lang.Object: int hashCode()>() in <androidx.collection.SimpleArrayMap: int hashCode()> ==> <java.lang.String: int hashCode()>
VIRTUAL edge: $i2 = virtualinvoke $r3.<java.lang.Object: int hashCode()>() in <androidx.collection.SimpleArrayMap: int hashCode()> ==> <java.lang.Object: int hashCode()>
VIRTUAL edge: $z1 = virtualinvoke $r0.<androidx.fragment.app.FragmentContainer: boolean onHasView()>() in <androidx.fragment.app.FragmentTransition: void startTransitions(android.content.Context,androidx.fragment.app.FragmentContainer,java.util.ArrayList,java.util.ArrayList,int,int,boolean,androidx.fragment.app.FragmentTransition$Callback)> ==> <androidx.fragment.app.Fragment$4: boolean onHasView()>
VIRTUAL edge: $r12 = virtualinvoke $r0.<androidx.fragment.app.FragmentContainer: android.view.View onFindViewById(int)>($i4) in <androidx.fragment.app.FragmentTransition: void startTransitions(android.content.Context,androidx.fragment.app.FragmentContainer,java.util.ArrayList,java.util.ArrayList,int,int,boolean,androidx.fragment.app.FragmentTransition$Callback)> ==> <androidx.fragment.app.Fragment$4: android.view.View onFindViewById(int)>
VIRTUAL edge: $r2 = virtualinvoke $r3.<androidx.fragment.app.Fragment: androidx.fragment.app.FragmentManager getParentFragmentManager()>() in <androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void dispatchOnFragmentResumed(androidx.fragment.app.Fragment,boolean)> ==> <androidx.fragment.app.Fragment: androidx.fragment.app.FragmentManager getParentFragmentManager()>
VIRTUAL edge: $r2 = virtualinvoke $r3.<androidx.fragment.app.Fragment: androidx.fragment.app.FragmentManager getParentFragmentManager()>() in <androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void dispatchOnFragmentStarted(androidx.fragment.app.Fragment,boolean)> ==> <androidx.fragment.app.Fragment: androidx.fragment.app.FragmentManager getParentFragmentManager()>
VIRTUAL edge: $r3 = virtualinvoke $r4.<androidx.fragment.app.Fragment: androidx.fragment.app.FragmentManager getParentFragmentManager()>() in <androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void dispatchOnFragmentActivityCreated(androidx.fragment.app.Fragment,android.os.Bundle,boolean)> ==> <androidx.fragment.app.Fragment: androidx.fragment.app.FragmentManager getParentFragmentManager()>
VIRTUAL edge: $r4 = virtualinvoke $r5.<androidx.fragment.app.Fragment: androidx.fragment.app.FragmentManager getParentFragmentManager()>() in <androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void dispatchOnFragmentViewCreated(androidx.fragment.app.Fragment,android.view.View,android.os.Bundle,boolean)> ==> <androidx.fragment.app.Fragment: androidx.fragment.app.FragmentManager getParentFragmentManager()>
VIRTUAL edge: $r3 = virtualinvoke $r4.<androidx.fragment.app.Fragment: androidx.fragment.app.FragmentManager getParentFragmentManager()>() in <androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void dispatchOnFragmentPreCreated(androidx.fragment.app.Fragment,android.os.Bundle,boolean)> ==> <androidx.fragment.app.Fragment: androidx.fragment.app.FragmentManager getParentFragmentManager()>
VIRTUAL edge: $r3 = virtualinvoke $r4.<androidx.fragment.app.Fragment: androidx.fragment.app.FragmentManager getParentFragmentManager()>() in <androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void dispatchOnFragmentCreated(androidx.fragment.app.Fragment,android.os.Bundle,boolean)> ==> <androidx.fragment.app.Fragment: androidx.fragment.app.FragmentManager getParentFragmentManager()>
VIRTUAL edge: $r2 = virtualinvoke $r5.<androidx.fragment.app.Fragment: androidx.fragment.app.FragmentManager getParentFragmentManager()>() in <androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void dispatchOnFragmentPreAttached(androidx.fragment.app.Fragment,boolean)> ==> <androidx.fragment.app.Fragment: androidx.fragment.app.FragmentManager getParentFragmentManager()>
VIRTUAL edge: $r2 = virtualinvoke $r5.<androidx.fragment.app.Fragment: androidx.fragment.app.FragmentManager getParentFragmentManager()>() in <androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void dispatchOnFragmentAttached(androidx.fragment.app.Fragment,boolean)> ==> <androidx.fragment.app.Fragment: androidx.fragment.app.FragmentManager getParentFragmentManager()>
VIRTUAL edge: $r2 = virtualinvoke $r3.<androidx.fragment.app.Fragment: androidx.fragment.app.FragmentManager getParentFragmentManager()>() in <androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void dispatchOnFragmentPaused(androidx.fragment.app.Fragment,boolean)> ==> <androidx.fragment.app.Fragment: androidx.fragment.app.FragmentManager getParentFragmentManager()>
VIRTUAL edge: $r2 = virtualinvoke $r3.<androidx.fragment.app.Fragment: androidx.fragment.app.FragmentManager getParentFragmentManager()>() in <androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void dispatchOnFragmentStopped(androidx.fragment.app.Fragment,boolean)> ==> <androidx.fragment.app.Fragment: androidx.fragment.app.FragmentManager getParentFragmentManager()>
VIRTUAL edge: $r2 = virtualinvoke $r3.<androidx.fragment.app.Fragment: androidx.fragment.app.FragmentManager getParentFragmentManager()>() in <androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void dispatchOnFragmentDestroyed(androidx.fragment.app.Fragment,boolean)> ==> <androidx.fragment.app.Fragment: androidx.fragment.app.FragmentManager getParentFragmentManager()>
VIRTUAL edge: $r2 = virtualinvoke $r3.<androidx.fragment.app.Fragment: androidx.fragment.app.FragmentManager getParentFragmentManager()>() in <androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void dispatchOnFragmentDetached(androidx.fragment.app.Fragment,boolean)> ==> <androidx.fragment.app.Fragment: androidx.fragment.app.FragmentManager getParentFragmentManager()>
VIRTUAL edge: $r2 = virtualinvoke $r3.<androidx.fragment.app.Fragment: androidx.fragment.app.FragmentManager getParentFragmentManager()>() in <androidx.fragment.app.FragmentLifecycleCallbacksDispatcher: void dispatchOnFragmentViewDestroyed(androidx.fragment.app.Fragment,boolean)> ==> <androidx.fragment.app.Fragment: androidx.fragment.app.FragmentManager getParentFragmentManager()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<androidx.fragment.app.Fragment: android.view.View getAnimatingAway()>() in <androidx.fragment.app.FragmentAnim$1: void onCancel()> ==> <androidx.fragment.app.Fragment: android.view.View getAnimatingAway()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<androidx.fragment.app.Fragment: android.view.View getAnimatingAway()>() in <androidx.fragment.app.FragmentAnim$1: void onCancel()> ==> <androidx.fragment.app.Fragment: android.view.View getAnimatingAway()>
VIRTUAL edge: virtualinvoke $r1.<androidx.fragment.app.Fragment: void setAnimatingAway(android.view.View)>(null) in <androidx.fragment.app.FragmentAnim$1: void onCancel()> ==> <androidx.fragment.app.Fragment: void setAnimatingAway(android.view.View)>
VIRTUAL edge: virtualinvoke $r1.<androidx.fragment.app.Fragment: void setAnimator(android.animation.Animator)>(null) in <androidx.fragment.app.FragmentAnim$1: void onCancel()> ==> <androidx.fragment.app.Fragment: void setAnimator(android.animation.Animator)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<androidx.savedstate.SavedStateRegistryOwner: androidx.lifecycle.Lifecycle getLifecycle()>() in <androidx.savedstate.SavedStateRegistryController: void performRestore(android.os.Bundle)> ==> <androidx.fragment.app.FragmentViewLifecycleOwner: androidx.lifecycle.Lifecycle getLifecycle()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>() in <androidx.appcompat.view.ActionBarPolicy: boolean hasEmbeddedTabs()> ==> <androidx.appcompat.view.ContextThemeWrapper: android.content.res.Resources getResources()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>() in <androidx.appcompat.view.ActionBarPolicy: boolean hasEmbeddedTabs()> ==> <androidx.appcompat.app.AppCompatActivity: android.content.res.Resources getResources()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<android.content.res.Resources: boolean getBoolean(int)>($i0) in <androidx.appcompat.view.ActionBarPolicy: boolean hasEmbeddedTabs()> ==> <androidx.appcompat.widget.VectorEnabledTintResources: boolean getBoolean(int)>
VIRTUAL edge: virtualinvoke $r1.<androidx.collection.MapCollections: void colRemoveAt(int)>($i0) in <androidx.collection.MapCollections$ArrayIterator: void remove()> ==> <androidx.collection.ArraySet$1: void colRemoveAt(int)>
VIRTUAL edge: virtualinvoke $r1.<androidx.collection.MapCollections: void colRemoveAt(int)>($i0) in <androidx.collection.MapCollections$ArrayIterator: void remove()> ==> <androidx.collection.ArrayMap$1: void colRemoveAt(int)>
VIRTUAL edge: virtualinvoke $r1.<androidx.collection.ArrayMap: java.lang.Object removeAt(int)>($i0) in <androidx.collection.ArrayMap$1: void colRemoveAt(int)> ==> <androidx.collection.SimpleArrayMap: java.lang.Object removeAt(int)>
VIRTUAL edge: virtualinvoke $r1.<androidx.collection.ArraySet: java.lang.Object removeAt(int)>($i0) in <androidx.collection.ArraySet$1: void colRemoveAt(int)> ==> <androidx.collection.ArraySet: java.lang.Object removeAt(int)>
CLINIT edge: staticinvoke <androidx.collection.ArraySet: void freeArrays(int[],java.lang.Object[],int)>($r2, $r3, $i1) in <androidx.collection.ArraySet: java.lang.Object removeAt(int)> ==> <androidx.collection.ArraySet: void <clinit>()>
STATIC edge: staticinvoke <androidx.collection.ArraySet: void freeArrays(int[],java.lang.Object[],int)>($r2, $r3, $i1) in <androidx.collection.ArraySet: java.lang.Object removeAt(int)> ==> <androidx.collection.ArraySet: void freeArrays(int[],java.lang.Object[],int)>
SPECIAL edge: specialinvoke r0.<androidx.collection.ArraySet: void allocArrays(int)>($i3) in <androidx.collection.ArraySet: java.lang.Object removeAt(int)> ==> <androidx.collection.ArraySet: void allocArrays(int)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<androidx.collection.MapCollections: java.lang.Object colGetEntry(int,int)>($i0, $i1) in <androidx.collection.MapCollections$ArrayIterator: java.lang.Object next()> ==> <androidx.collection.ArraySet$1: java.lang.Object colGetEntry(int,int)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<androidx.collection.MapCollections: java.lang.Object colGetEntry(int,int)>($i0, $i1) in <androidx.collection.MapCollections$ArrayIterator: java.lang.Object next()> ==> <androidx.collection.ArrayMap$1: java.lang.Object colGetEntry(int,int)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <androidx.collection.ArraySet: int indexOf(java.lang.Object)> ==> <java.lang.String: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <androidx.collection.ArraySet: int indexOf(java.lang.Object)> ==> <java.lang.Object: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <androidx.collection.ArraySet: int indexOf(java.lang.Object)> ==> <androidx.collection.SimpleArrayMap: int hashCode()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <androidx.collection.ArraySet: int indexOf(java.lang.Object,int)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <androidx.collection.ArraySet: int indexOf(java.lang.Object,int)> ==> <androidx.collection.SimpleArrayMap: boolean equals(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r1.<kotlin.jvm.functions.Function0: java.lang.Object invoke()>() in <androidx.activity.OnBackPressedCallback: void setEnabled(boolean)> ==> <androidx.activity.OnBackPressedDispatcher$addCancellableCallback$1: java.lang.Object invoke()>
SPECIAL edge: $r11 = specialinvoke $r10.<androidx.fragment.app.FragmentManager: androidx.fragment.app.FragmentManagerViewModel getChildNonConfig(androidx.fragment.app.Fragment)>($r3) in <androidx.fragment.app.FragmentManager: void attachController(androidx.fragment.app.FragmentHostCallback,androidx.fragment.app.FragmentContainer,androidx.fragment.app.Fragment)> ==> <androidx.fragment.app.FragmentManager: androidx.fragment.app.FragmentManagerViewModel getChildNonConfig(androidx.fragment.app.Fragment)>
VIRTUAL edge: $r1 = virtualinvoke $r1.<androidx.fragment.app.FragmentManagerViewModel: androidx.fragment.app.FragmentManagerViewModel getChildNonConfig(androidx.fragment.app.Fragment)>($r2) in <androidx.fragment.app.FragmentManager: androidx.fragment.app.FragmentManagerViewModel getChildNonConfig(androidx.fragment.app.Fragment)> ==> <androidx.fragment.app.FragmentManagerViewModel: androidx.fragment.app.FragmentManagerViewModel getChildNonConfig(androidx.fragment.app.Fragment)>
CLINIT edge: $r5 = new androidx.fragment.app.FragmentManagerViewModel in <androidx.fragment.app.FragmentManagerViewModel: androidx.fragment.app.FragmentManagerViewModel getChildNonConfig(androidx.fragment.app.Fragment)> ==> <androidx.fragment.app.FragmentManagerViewModel: void <clinit>()>
SPECIAL edge: specialinvoke $r5.<androidx.fragment.app.FragmentManagerViewModel: void <init>(boolean)>($z0) in <androidx.fragment.app.FragmentManagerViewModel: androidx.fragment.app.FragmentManagerViewModel getChildNonConfig(androidx.fragment.app.Fragment)> ==> <androidx.fragment.app.FragmentManagerViewModel: void <init>(boolean)>
VIRTUAL edge: virtualinvoke $r5.<androidx.fragment.app.FragmentViewLifecycleOwner: void performSave(android.os.Bundle)>($r4) in <androidx.fragment.app.FragmentStateManager: void saveViewState()> ==> <androidx.fragment.app.FragmentViewLifecycleOwner: void performSave(android.os.Bundle)>
VIRTUAL edge: virtualinvoke $r2.<androidx.savedstate.SavedStateRegistryController: void performSave(android.os.Bundle)>($r1) in <androidx.fragment.app.FragmentViewLifecycleOwner: void performSave(android.os.Bundle)> ==> <androidx.savedstate.SavedStateRegistryController: void performSave(android.os.Bundle)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<androidx.fragment.app.FragmentManager: androidx.fragment.app.FragmentHostCallback getHost()>() in <androidx.fragment.app.FragmentStateManager: void attach()> ==> <androidx.fragment.app.FragmentManager: androidx.fragment.app.FragmentHostCallback getHost()>
VIRTUAL edge: $r6 = virtualinvoke $r9.<androidx.fragment.app.FragmentManager: androidx.fragment.app.Fragment getParent()>() in <androidx.fragment.app.FragmentStateManager: void attach()> ==> <androidx.fragment.app.FragmentManager: androidx.fragment.app.Fragment getParent()>
VIRTUAL edge: $r1 = virtualinvoke $r3.<androidx.fragment.app.FragmentHostCallback: android.app.Activity getActivity()>() in <androidx.fragment.app.Fragment: void onAttach(android.content.Context)> ==> <androidx.fragment.app.FragmentHostCallback: android.app.Activity getActivity()>
VIRTUAL edge: $r8 = virtualinvoke $r6.<androidx.fragment.app.FragmentHostCallback: android.content.Context getContext()>() in <androidx.fragment.app.Fragment: void performAttach()> ==> <androidx.fragment.app.FragmentHostCallback: android.content.Context getContext()>
VIRTUAL edge: $r9 = virtualinvoke $r8.<androidx.fragment.app.FragmentManager: androidx.fragment.app.FragmentContainer getContainer()>() in <androidx.fragment.app.FragmentStateManager: void createView()> ==> <androidx.fragment.app.FragmentManager: androidx.fragment.app.FragmentContainer getContainer()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<androidx.fragment.app.FragmentContainer: android.view.View onFindViewById(int)>($i0) in <androidx.fragment.app.FragmentStateManager: void createView()> ==> <androidx.fragment.app.FragmentActivity$HostCallbacks: android.view.View onFindViewById(int)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<androidx.fragment.app.FragmentContainer: android.view.View onFindViewById(int)>($i0) in <androidx.fragment.app.FragmentStateManager: void createView()> ==> <androidx.fragment.app.Fragment$4: android.view.View onFindViewById(int)>
VIRTUAL edge: $r1 = virtualinvoke $r2.<androidx.fragment.app.FragmentHostCallback: android.content.Context getContext()>() in <androidx.fragment.app.Fragment: android.content.Context getContext()> ==> <androidx.fragment.app.FragmentHostCallback: android.content.Context getContext()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>() in <androidx.fragment.app.Fragment: android.content.res.Resources getResources()> ==> <androidx.appcompat.app.AppCompatActivity: android.content.res.Resources getResources()>
VIRTUAL edge: $r4 = virtualinvoke $r11.<android.content.res.Resources: java.lang.String getResourceName(int)>($i0) in <androidx.fragment.app.FragmentStateManager: void createView()> ==> <androidx.appcompat.widget.VectorEnabledTintResources: java.lang.String getResourceName(int)>
SPECIAL edge: $r1 = specialinvoke r0.<androidx.appcompat.widget.ResourcesWrapper: java.lang.String getResourceName(int)>($i0) in <androidx.appcompat.widget.VectorEnabledTintResources: java.lang.String getResourceName(int)> ==> <androidx.appcompat.widget.ResourcesWrapper: java.lang.String getResourceName(int)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<androidx.fragment.app.FragmentHostCallback: android.view.LayoutInflater onGetLayoutInflater()>() in <androidx.fragment.app.Fragment: android.view.LayoutInflater getLayoutInflater(android.os.Bundle)> ==> <androidx.fragment.app.FragmentActivity$HostCallbacks: android.view.LayoutInflater onGetLayoutInflater()>
VIRTUAL edge: virtualinvoke $r6.<androidx.fragment.app.FragmentManager: void invalidateMenuForFragment(androidx.fragment.app.Fragment)>($r2) in <androidx.fragment.app.FragmentStateManager: void moveToExpectedState()> ==> <androidx.fragment.app.FragmentManager: void invalidateMenuForFragment(androidx.fragment.app.Fragment)>
INTERFACE edge: interfaceinvoke $r6.<androidx.lifecycle.LifecycleEventObserver: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)>($r1, $r2) in <androidx.lifecycle.DefaultLifecycleObserverAdapter: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)> ==> <androidx.fragment.app.Fragment$5: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)>
CLINIT edge: $r3 = <androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_STOP> in <androidx.fragment.app.Fragment$5: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)> ==> <androidx.lifecycle.Lifecycle$Event: void <clinit>()>
INTERFACE edge: interfaceinvoke $r6.<androidx.lifecycle.LifecycleEventObserver: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)>($r1, $r2) in <androidx.lifecycle.LifecycleRegistry$ObserverWithState: void dispatchEvent(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)> ==> <androidx.fragment.app.Fragment$5: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<androidx.savedstate.SavedStateRegistryOwner: androidx.lifecycle.Lifecycle getLifecycle()>() in <androidx.savedstate.SavedStateRegistryController: void performAttach()> ==> <androidx.fragment.app.FragmentViewLifecycleOwner: androidx.lifecycle.Lifecycle getLifecycle()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <androidx.collection.SimpleArrayMap: int indexOf(java.lang.Object,int)> ==> <androidx.collection.SimpleArrayMap: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <androidx.collection.SimpleArrayMap: int indexOf(java.lang.Object,int)> ==> <androidx.collection.SimpleArrayMap: boolean equals(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <androidx.collection.SimpleArrayMap: int indexOfKey(java.lang.Object)> ==> <androidx.collection.SimpleArrayMap: int hashCode()>
INTERFACE edge: interfaceinvoke $r0.<androidx.core.view.ViewPropertyAnimatorUpdateListener: void onAnimationUpdate(android.view.View)>($r1) in <androidx.core.view.ViewPropertyAnimatorCompat: void lambda$setUpdateListener$0(androidx.core.view.ViewPropertyAnimatorUpdateListener,android.view.View,android.animation.ValueAnimator)> ==> <androidx.appcompat.app.WindowDecorActionBar$3: void onAnimationUpdate(android.view.View)>
INTERFACE edge: interfaceinvoke $r2.<androidx.appcompat.view.ActionMode$Callback: void onDestroyActionMode(androidx.appcompat.view.ActionMode)>($r1) in <androidx.appcompat.app.WindowDecorActionBar: void completeDeferredDestroyActionMode()> ==> <androidx.appcompat.app.AppCompatDelegateImpl$ActionModeCallbackWrapperV9: void onDestroyActionMode(androidx.appcompat.view.ActionMode)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<androidx.fragment.app.FragmentHostCallback: android.content.Context getContext()>() in <androidx.fragment.app.FragmentStateManager: void destroy()> ==> <androidx.fragment.app.FragmentHostCallback: android.content.Context getContext()>
INTERFACE edge: $r7 = interfaceinvoke $r6.<androidx.savedstate.SavedStateRegistryOwner: androidx.savedstate.SavedStateRegistry getSavedStateRegistry()>() in <androidx.savedstate.Recreator: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)> ==> <androidx.fragment.app.FragmentViewLifecycleOwner: androidx.savedstate.SavedStateRegistry getSavedStateRegistry()>
VIRTUAL edge: virtualinvoke r0.<androidx.fragment.app.FragmentViewLifecycleOwner: void initialize()>() in <androidx.fragment.app.FragmentViewLifecycleOwner: androidx.savedstate.SavedStateRegistry getSavedStateRegistry()> ==> <androidx.fragment.app.FragmentViewLifecycleOwner: void initialize()>
VIRTUAL edge: $r1 = virtualinvoke $r2.<androidx.savedstate.SavedStateRegistryController: androidx.savedstate.SavedStateRegistry getSavedStateRegistry()>() in <androidx.fragment.app.FragmentViewLifecycleOwner: androidx.savedstate.SavedStateRegistry getSavedStateRegistry()> ==> <androidx.savedstate.SavedStateRegistryController: androidx.savedstate.SavedStateRegistry getSavedStateRegistry()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getCanonicalName()>() in <androidx.lifecycle.Lifecycling: int resolveObserverCallbackType(java.lang.Class)> ==> <java.lang.Class: java.lang.String getCanonicalName()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.Package getPackage()>() in <androidx.lifecycle.Lifecycling: java.lang.reflect.Constructor generatedConstructor(java.lang.Class)> ==> <java.lang.Class: java.lang.Package getPackage()>
VIRTUAL edge: $r7 = virtualinvoke $r1.<java.lang.Class: java.lang.Class getSuperclass()>() in <androidx.lifecycle.Lifecycling: int resolveObserverCallbackType(java.lang.Class)> ==> <java.lang.Class: java.lang.Class getSuperclass()>
VIRTUAL edge: $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.String getCanonicalName()>() in <androidx.lifecycle.Lifecycling: java.lang.reflect.Constructor generatedConstructor(java.lang.Class)> ==> <java.lang.Class: java.lang.String getCanonicalName()>
VIRTUAL edge: $r11 = virtualinvoke $r1.<java.lang.Class: java.lang.Class[] getInterfaces()>() in <androidx.lifecycle.Lifecycling: int resolveObserverCallbackType(java.lang.Class)> ==> <java.lang.Class: java.lang.Class[] getInterfaces()>
VIRTUAL edge: $r11 = virtualinvoke $r9.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>($r10) in <androidx.lifecycle.Lifecycling: java.lang.reflect.Constructor generatedConstructor(java.lang.Class)> ==> <java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>
VIRTUAL edge: $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("selector") in <androidx.core.content.res.ColorStateListInflaterCompat: android.content.res.ColorStateList createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>("item") in <androidx.core.content.res.ColorStateListInflaterCompat: android.content.res.ColorStateList inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $r6 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>() in <androidx.appcompat.app.WindowDecorActionBar: androidx.appcompat.widget.DecorToolbar getDecorToolbar(android.view.View)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getSimpleName()>() in <androidx.appcompat.app.WindowDecorActionBar: androidx.appcompat.widget.DecorToolbar getDecorToolbar(android.view.View)> ==> <java.lang.Class: java.lang.String getSimpleName()>
VIRTUAL edge: virtualinvoke $r3.<androidx.appcompat.widget.ActionBarContextView: void setVisibility(int)>(0) in <androidx.appcompat.app.WindowDecorActionBar: void animateToMode(boolean)> ==> <androidx.appcompat.widget.ActionBarContextView: void setVisibility(int)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.Class: java.lang.String getSimpleName()>() in <androidx.appcompat.app.WindowDecorActionBar: void init(android.view.View)> ==> <java.lang.Class: java.lang.String getSimpleName()>
VIRTUAL edge: virtualinvoke $r4.<androidx.appcompat.widget.ActionBarContextView: void killMode()>() in <androidx.appcompat.app.WindowDecorActionBar: androidx.appcompat.view.ActionMode startActionMode(androidx.appcompat.view.ActionMode$Callback)> ==> <androidx.appcompat.widget.ActionBarContextView: void killMode()>
VIRTUAL edge: virtualinvoke $r4.<androidx.appcompat.widget.ActionBarContextView: void initForMode(androidx.appcompat.view.ActionMode)>($r2) in <androidx.appcompat.app.WindowDecorActionBar: androidx.appcompat.view.ActionMode startActionMode(androidx.appcompat.view.ActionMode$Callback)> ==> <androidx.appcompat.widget.ActionBarContextView: void initForMode(androidx.appcompat.view.ActionMode)>
VIRTUAL edge: $r2 = virtualinvoke $r13.<androidx.fragment.app.FragmentStateManager: androidx.fragment.app.Fragment getFragment()>() in <androidx.fragment.app.FragmentStateManager: void destroy()> ==> <androidx.fragment.app.FragmentStateManager: androidx.fragment.app.Fragment getFragment()>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r15) in <androidx.fragment.app.FragmentStateManager: void destroy()> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke $r4.<androidx.fragment.app.FragmentStateManager: androidx.fragment.app.Fragment getFragment()>() in <androidx.fragment.app.FragmentStateManager: void attach()> ==> <androidx.fragment.app.FragmentStateManager: androidx.fragment.app.Fragment getFragment()>
VIRTUAL edge: virtualinvoke $r4.<androidx.fragment.app.FragmentStateManager: void moveToExpectedState()>() in <androidx.fragment.app.FragmentStateManager: void attach()> ==> <androidx.fragment.app.FragmentStateManager: void moveToExpectedState()>
VIRTUAL edge: virtualinvoke $r10.<android.view.View: void addOnAttachStateChangeListener(android.view.View$OnAttachStateChangeListener)>($r17) in <androidx.fragment.app.FragmentStateManager: void createView()> ==> <androidx.fragment.app.FragmentStateManager$1: void onViewDetachedFromWindow(android.view.View)>
STATIC edge: $z0 = staticinvoke <androidx.core.view.KeyEventDispatcher: boolean dispatchKeyEvent(androidx.core.view.KeyEventDispatcher$Component,android.view.View,android.view.Window$Callback,android.view.KeyEvent)>(r0, $r3, r0, $r1) in <androidx.core.app.ComponentActivity: boolean dispatchKeyEvent(android.view.KeyEvent)> ==> <androidx.core.app.ComponentActivity: boolean superDispatchKeyEvent(android.view.KeyEvent)>
VIRTUAL edge: virtualinvoke $r1.<android.view.View: void addOnAttachStateChangeListener(android.view.View$OnAttachStateChangeListener)>(r0) in <androidx.appcompat.widget.ForwardingListener: void <init>(android.view.View)> ==> <androidx.appcompat.widget.ForwardingListener: void onViewAttachedToWindow(android.view.View)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.core.view.WindowInsetsCompat$BuilderImpl: void <init>(androidx.core.view.WindowInsetsCompat)> ==> <androidx.core.view.WindowInsetsCompat$BuilderImpl: void <init>()>
VIRTUAL edge: $i2 = virtualinvoke $r8.<androidx.lifecycle.Lifecycle$State: int ordinal()>() in <androidx.fragment.app.BackStackState: void <init>(androidx.fragment.app.BackStackRecord)> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.Class: java.lang.String getName()>() in <androidx.collection.LruCache: void trimToSize(int)> ==> <java.lang.Class: java.lang.String getName()>
VIRTUAL edge: $z0 = virtualinvoke $r6.<androidx.fragment.app.Fragment: boolean equals(java.lang.Object)>($r1) in <androidx.fragment.app.SpecialEffectsController: androidx.fragment.app.SpecialEffectsController$Operation findRunningOperation(androidx.fragment.app.Fragment)> ==> <androidx.fragment.app.Fragment: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r6.<androidx.fragment.app.Fragment: boolean equals(java.lang.Object)>($r1) in <androidx.fragment.app.SpecialEffectsController: androidx.fragment.app.SpecialEffectsController$Operation findPendingOperation(androidx.fragment.app.Fragment)> ==> <androidx.fragment.app.Fragment: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r5.<androidx.fragment.app.SpecialEffectsController$Operation: boolean isCanceled()>() in <androidx.fragment.app.SpecialEffectsController: androidx.fragment.app.SpecialEffectsController$Operation findRunningOperation(androidx.fragment.app.Fragment)> ==> <androidx.fragment.app.SpecialEffectsController$Operation: boolean isCanceled()>
VIRTUAL edge: $z0 = virtualinvoke $r5.<androidx.fragment.app.SpecialEffectsController$Operation: boolean isCanceled()>() in <androidx.fragment.app.SpecialEffectsController: androidx.fragment.app.SpecialEffectsController$Operation findPendingOperation(androidx.fragment.app.Fragment)> ==> <androidx.fragment.app.SpecialEffectsController$Operation: boolean isCanceled()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<androidx.fragment.app.FragmentStateManager: androidx.fragment.app.Fragment getFragment()>() in <androidx.fragment.app.FragmentStore: androidx.fragment.app.Fragment findActiveFragment(java.lang.String)> ==> <androidx.fragment.app.FragmentStateManager: androidx.fragment.app.Fragment getFragment()>
VIRTUAL edge: virtualinvoke $r5.<androidx.fragment.app.FragmentStateManager: void setFragmentManagerState(int)>($i0) in <androidx.fragment.app.FragmentStore: void dispatchStateChange(int)> ==> <androidx.fragment.app.FragmentStateManager: void setFragmentManagerState(int)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<androidx.fragment.app.FragmentStateManager: androidx.fragment.app.Fragment getFragment()>() in <androidx.fragment.app.FragmentStore: androidx.fragment.app.Fragment findFragmentByWho(java.lang.String)> ==> <androidx.fragment.app.FragmentStateManager: androidx.fragment.app.Fragment getFragment()>
VIRTUAL edge: $r7 = virtualinvoke $r6.<androidx.fragment.app.FragmentStateManager: androidx.fragment.app.Fragment getFragment()>() in <androidx.fragment.app.FragmentStore: java.util.ArrayList saveActiveFragments()> ==> <androidx.fragment.app.FragmentStateManager: androidx.fragment.app.Fragment getFragment()>
VIRTUAL edge: $r7 = virtualinvoke $r6.<androidx.fragment.app.FragmentStateManager: androidx.fragment.app.Fragment getFragment()>() in <androidx.fragment.app.FragmentStore: java.util.List getActiveFragments()> ==> <androidx.fragment.app.FragmentStateManager: androidx.fragment.app.Fragment getFragment()>
VIRTUAL edge: $r4 = virtualinvoke $r7.<androidx.fragment.app.FragmentStateManager: androidx.fragment.app.Fragment getFragment()>() in <androidx.fragment.app.FragmentStore: void moveToExpectedState()> ==> <androidx.fragment.app.FragmentStateManager: androidx.fragment.app.Fragment getFragment()>
VIRTUAL edge: $z0 = virtualinvoke $r4.<androidx.fragment.app.Fragment: boolean isInBackStack()>() in <androidx.fragment.app.FragmentStore: void moveToExpectedState()> ==> <androidx.fragment.app.Fragment: boolean isInBackStack()>
VIRTUAL edge: $r1 = virtualinvoke $r2.<androidx.core.view.WindowInsetsCompat$Impl: androidx.core.graphics.Insets getStableInsets()>() in <androidx.core.view.WindowInsetsCompat: androidx.core.graphics.Insets getStableInsets()> ==> <androidx.core.view.WindowInsetsCompat$Impl: androidx.core.graphics.Insets getStableInsets()>
VIRTUAL edge: virtualinvoke r0.<androidx.fragment.app.SpecialEffectsController$Operation: void complete()>() in <androidx.fragment.app.SpecialEffectsController$Operation: void cancel()> ==> <androidx.fragment.app.SpecialEffectsController$Operation: void complete()>
VIRTUAL edge: virtualinvoke $r3.<androidx.core.os.CancellationSignal: void setOnCancelListener(androidx.core.os.CancellationSignal$OnCancelListener)>($r7) in <androidx.fragment.app.SpecialEffectsController$Operation: void <init>(androidx.fragment.app.SpecialEffectsController$Operation$State,androidx.fragment.app.SpecialEffectsController$Operation$LifecycleImpact,androidx.fragment.app.Fragment,androidx.core.os.CancellationSignal)> ==> <androidx.fragment.app.SpecialEffectsController$Operation$1: void onCancel()>
VIRTUAL edge: $r1 = virtualinvoke $r2.<androidx.fragment.app.FragmentStateManager: androidx.fragment.app.Fragment getFragment()>() in <androidx.fragment.app.FragmentManager: void performPendingDeferredStart(androidx.fragment.app.FragmentStateManager)> ==> <androidx.fragment.app.FragmentStateManager: androidx.fragment.app.Fragment getFragment()>
VIRTUAL edge: virtualinvoke $r2.<androidx.fragment.app.FragmentStateManager: void moveToExpectedState()>() in <androidx.fragment.app.FragmentManager: void performPendingDeferredStart(androidx.fragment.app.FragmentStateManager)> ==> <androidx.fragment.app.FragmentStateManager: void moveToExpectedState()>
VIRTUAL edge: $r6 = virtualinvoke $r7.<androidx.fragment.app.FragmentStateManager: androidx.fragment.app.Fragment getFragment()>() in <androidx.fragment.app.FragmentManager: void moveToState(int,boolean)> ==> <androidx.fragment.app.FragmentStateManager: androidx.fragment.app.Fragment getFragment()>
VIRTUAL edge: $z0 = virtualinvoke $r6.<androidx.fragment.app.Fragment: boolean isInBackStack()>() in <androidx.fragment.app.FragmentManager: void moveToState(int,boolean)> ==> <androidx.fragment.app.Fragment: boolean isInBackStack()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<androidx.fragment.app.Fragment: boolean getPopDirection()>() in <androidx.fragment.app.FragmentManager: void moveFragmentToExpectedState(androidx.fragment.app.Fragment)> ==> <androidx.fragment.app.Fragment: boolean getPopDirection()>
VIRTUAL edge: $z1 = virtualinvoke $r1.<androidx.fragment.app.Fragment: boolean getPopDirection()>() in <androidx.fragment.app.FragmentManager: void completeShowHideFragment(androidx.fragment.app.Fragment)> ==> <androidx.fragment.app.Fragment: boolean getPopDirection()>
VIRTUAL edge: $r7 = virtualinvoke $r6.<androidx.fragment.app.FragmentStateManager: androidx.fragment.app.Fragment getFragment()>() in <androidx.fragment.app.FragmentManager: java.util.Set collectAllSpecialEffectsController()> ==> <androidx.fragment.app.FragmentStateManager: androidx.fragment.app.Fragment getFragment()>
VIRTUAL edge: virtualinvoke $r1.<androidx.fragment.app.Fragment: void onHiddenChanged(boolean)>($z0) in <androidx.fragment.app.FragmentManager: void completeShowHideFragment(androidx.fragment.app.Fragment)> ==> <androidx.fragment.app.Fragment: void onHiddenChanged(boolean)>
VIRTUAL edge: $r20 = virtualinvoke $r16.<androidx.activity.result.ActivityResultRegistry: androidx.activity.result.ActivityResultLauncher register(java.lang.String,androidx.activity.result.contract.ActivityResultContract,androidx.activity.result.ActivityResultCallback)>($r19, $r24, $r25) in <androidx.fragment.app.FragmentManager: void attachController(androidx.fragment.app.FragmentHostCallback,androidx.fragment.app.FragmentContainer,androidx.fragment.app.Fragment)> ==> <androidx.fragment.app.FragmentManager$9: void onActivityResult(java.lang.Object)>
VIRTUAL edge: $r5 = virtualinvoke $r14.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>() in <androidx.concurrent.futures.AbstractResolvableFuture: java.lang.Object getFutureValue(com.google.common.util.concurrent.ListenableFuture)> ==> <java.lang.Throwable: java.lang.Throwable getCause()>
VIRTUAL edge: $r20 = virtualinvoke $r16.<androidx.activity.result.ActivityResultRegistry: androidx.activity.result.ActivityResultLauncher register(java.lang.String,androidx.activity.result.contract.ActivityResultContract,androidx.activity.result.ActivityResultCallback)>($r19, $r26, $r27) in <androidx.fragment.app.FragmentManager: void attachController(androidx.fragment.app.FragmentHostCallback,androidx.fragment.app.FragmentContainer,androidx.fragment.app.Fragment)> ==> <androidx.fragment.app.FragmentManager$10: void onActivityResult(java.lang.Object)>
VIRTUAL edge: $r20 = virtualinvoke $r16.<androidx.activity.result.ActivityResultRegistry: androidx.activity.result.ActivityResultLauncher register(java.lang.String,androidx.activity.result.contract.ActivityResultContract,androidx.activity.result.ActivityResultCallback)>($r18, $r28, $r29) in <androidx.fragment.app.FragmentManager: void attachController(androidx.fragment.app.FragmentHostCallback,androidx.fragment.app.FragmentContainer,androidx.fragment.app.Fragment)> ==> <androidx.fragment.app.FragmentManager$11: void onActivityResult(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r6.<androidx.fragment.app.FragmentManagerViewModel: void onCleared()>() in <androidx.fragment.app.FragmentManagerViewModel: void clearNonConfigState(androidx.fragment.app.Fragment)> ==> <androidx.fragment.app.FragmentManagerViewModel: void onCleared()>
VIRTUAL edge: virtualinvoke $r7.<androidx.lifecycle.ViewModelStore: void clear()>() in <androidx.fragment.app.FragmentManagerViewModel: void clearNonConfigState(androidx.fragment.app.Fragment)> ==> <androidx.lifecycle.ViewModelStore: void clear()>
VIRTUAL edge: virtualinvoke $r1.<android.transition.Transition: android.transition.Transition removeListener(android.transition.Transition$TransitionListener)>(r0) in <androidx.fragment.app.FragmentTransitionCompat21$3: void onTransitionEnd(android.transition.Transition)> ==> <androidx.fragment.app.FragmentTransitionCompat21$3: void onTransitionResume(android.transition.Transition)>
VIRTUAL edge: virtualinvoke $r1.<android.transition.Transition: android.transition.Transition removeListener(android.transition.Transition$TransitionListener)>(r0) in <androidx.fragment.app.FragmentTransitionCompat21$2: void onTransitionEnd(android.transition.Transition)> ==> <androidx.fragment.app.FragmentTransitionCompat21$2: void onTransitionCancel(android.transition.Transition)>
VIRTUAL edge: virtualinvoke $r1.<android.transition.Transition: android.transition.Transition removeListener(android.transition.Transition$TransitionListener)>(r0) in <androidx.fragment.app.FragmentTransitionCompat21$3: void onTransitionEnd(android.transition.Transition)> ==> <androidx.fragment.app.FragmentTransitionCompat21$3: void onTransitionCancel(android.transition.Transition)>
VIRTUAL edge: virtualinvoke $r1.<android.transition.Transition: android.transition.Transition removeListener(android.transition.Transition$TransitionListener)>(r0) in <androidx.fragment.app.FragmentTransitionCompat21$3: void onTransitionEnd(android.transition.Transition)> ==> <androidx.fragment.app.FragmentTransitionCompat21$3: void onTransitionPause(android.transition.Transition)>
VIRTUAL edge: virtualinvoke $r1.<android.transition.Transition: android.transition.Transition removeListener(android.transition.Transition$TransitionListener)>(r0) in <androidx.fragment.app.FragmentTransitionCompat21$2: void onTransitionEnd(android.transition.Transition)> ==> <androidx.fragment.app.FragmentTransitionCompat21$2: void onTransitionPause(android.transition.Transition)>
VIRTUAL edge: virtualinvoke $r1.<android.transition.Transition: android.transition.Transition removeListener(android.transition.Transition$TransitionListener)>(r0) in <androidx.fragment.app.FragmentTransitionCompat21$2: void onTransitionEnd(android.transition.Transition)> ==> <androidx.fragment.app.FragmentTransitionCompat21$2: void onTransitionResume(android.transition.Transition)>
STATIC edge: staticinvoke <androidx.profileinstaller.ProfileInstaller: void writeProfile(android.content.Context,java.util.concurrent.Executor,androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback,boolean)>($r1, $r5, $r6, 1) in <androidx.profileinstaller.ProfileInstallReceiver: void onReceive(android.content.Context,android.content.Intent)> ==> <androidx.profileinstaller.ProfileInstallReceiver$ResultDiagnostics: void onDiagnosticReceived(int,java.lang.Object)>
STATIC edge: staticinvoke <androidx.profileinstaller.ProfileInstaller: void writeProfile(android.content.Context,java.util.concurrent.Executor,androidx.profileinstaller.ProfileInstaller$DiagnosticsCallback,boolean)>($r1, $r5, $r6, 1) in <androidx.profileinstaller.ProfileInstallReceiver: void onReceive(android.content.Context,android.content.Intent)> ==> <androidx.profileinstaller.ProfileInstallReceiver$ResultDiagnostics: void onResultReceived(int,java.lang.Object)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<androidx.fragment.app.FragmentManager: androidx.fragment.app.FragmentContainer getContainer()>() in <androidx.fragment.app.FragmentTransition: void calculatePopFragments(androidx.fragment.app.BackStackRecord,android.util.SparseArray,boolean)> ==> <androidx.fragment.app.FragmentManager: androidx.fragment.app.FragmentContainer getContainer()>
VIRTUAL edge: $r11 = virtualinvoke $r10.<androidx.fragment.app.FragmentManager: androidx.fragment.app.FragmentStateManager createOrGetFragmentStateManager(androidx.fragment.app.Fragment)>($r1) in <androidx.fragment.app.FragmentTransition: void addToFirstInLastOut(androidx.fragment.app.BackStackRecord,androidx.fragment.app.FragmentTransaction$Op,android.util.SparseArray,boolean,boolean)> ==> <androidx.fragment.app.FragmentManager: androidx.fragment.app.FragmentStateManager createOrGetFragmentStateManager(androidx.fragment.app.Fragment)>
VIRTUAL edge: virtualinvoke $r12.<androidx.fragment.app.FragmentStore: void makeActive(androidx.fragment.app.FragmentStateManager)>($r11) in <androidx.fragment.app.FragmentTransition: void addToFirstInLastOut(androidx.fragment.app.BackStackRecord,androidx.fragment.app.FragmentTransaction$Op,android.util.SparseArray,boolean,boolean)> ==> <androidx.fragment.app.FragmentStore: void makeActive(androidx.fragment.app.FragmentStateManager)>
VIRTUAL edge: virtualinvoke $r10.<androidx.fragment.app.FragmentManager: void moveToState(androidx.fragment.app.Fragment)>($r1) in <androidx.fragment.app.FragmentTransition: void addToFirstInLastOut(androidx.fragment.app.BackStackRecord,androidx.fragment.app.FragmentTransaction$Op,android.util.SparseArray,boolean,boolean)> ==> <androidx.fragment.app.FragmentManager: void moveToState(androidx.fragment.app.Fragment)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>($r0) in <androidx.fragment.app.FragmentTransition: androidx.fragment.app.FragmentTransitionImpl resolveSupportImpl()> ==> <java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.collection.SparseArrayCompat: void <init>(int)> ==> <androidx.collection.SparseArrayCompat: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>() in <androidx.appcompat.widget.DrawableUtils: void fixDrawable(android.graphics.drawable.Drawable)> ==> <java.lang.Class: java.lang.String getName()>
VIRTUAL edge: $z0 = virtualinvoke $r3.<androidx.collection.SimpleArrayMap: boolean isEmpty()>() in <androidx.appcompat.widget.ResourceManagerInternal: android.graphics.drawable.Drawable loadDrawableFromDelegates(android.content.Context,int)> ==> <androidx.collection.SimpleArrayMap: boolean isEmpty()>
VIRTUAL edge: $r5 = virtualinvoke $r3.<androidx.collection.SimpleArrayMap: java.lang.Object get(java.lang.Object)>($r6) in <androidx.appcompat.widget.ResourceManagerInternal: android.graphics.drawable.Drawable loadDrawableFromDelegates(android.content.Context,int)> ==> <androidx.collection.SimpleArrayMap: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $r3 = virtualinvoke $r4.<androidx.collection.SparseArrayCompat: java.lang.Object get(int)>($i0) in <androidx.appcompat.widget.ResourceManagerInternal: android.content.res.ColorStateList getTintListFromCache(android.content.Context,int)> ==> <androidx.collection.SparseArrayCompat: java.lang.Object get(int)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>() in <androidx.appcompat.widget.ResourceManagerInternal: boolean isVectorDrawable(android.graphics.drawable.Drawable)> ==> <java.lang.Class: java.lang.String getName()>
VIRTUAL edge: $r5 = virtualinvoke $r3.<androidx.collection.SimpleArrayMap: java.lang.Object get(java.lang.Object)>($r1) in <androidx.appcompat.widget.ResourceManagerInternal: android.graphics.drawable.Drawable loadDrawableFromDelegates(android.content.Context,int)> ==> <androidx.collection.SimpleArrayMap: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<androidx.lifecycle.LifecycleRegistry$ObserverWithState: androidx.lifecycle.Lifecycle$State getState()>() in <androidx.lifecycle.LifecycleRegistry: androidx.lifecycle.Lifecycle$State calculateTargetState(androidx.lifecycle.LifecycleObserver)> ==> <androidx.lifecycle.LifecycleRegistry$ObserverWithState: androidx.lifecycle.Lifecycle$State getState()>
VIRTUAL edge: virtualinvoke $r1.<androidx.lifecycle.ViewModel: void onCleared()>() in <androidx.lifecycle.ViewModelStore: void put(java.lang.String,androidx.lifecycle.ViewModel)> ==> <androidx.lifecycle.ViewModel: void onCleared()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <androidx.core.view.WindowInsetsCompat$Builder: void <init>(androidx.core.view.WindowInsetsCompat)> ==> <androidx.core.view.WindowInsetsCompat$Builder: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke $r9.<androidx.activity.result.ActivityResult: int getResultCode()>() in <androidx.activity.result.ActivityResultRegistry: androidx.activity.result.ActivityResultLauncher register(java.lang.String,androidx.activity.result.contract.ActivityResultContract,androidx.activity.result.ActivityResultCallback)> ==> <androidx.activity.result.ActivityResult: int getResultCode()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<androidx.activity.result.ActivityResult: android.content.Intent getData()>() in <androidx.activity.result.ActivityResultRegistry: androidx.activity.result.ActivityResultLauncher register(java.lang.String,androidx.activity.result.contract.ActivityResultContract,androidx.activity.result.ActivityResultCallback)> ==> <androidx.activity.result.ActivityResult: android.content.Intent getData()>
VIRTUAL edge: virtualinvoke $r3.<androidx.core.os.CancellationSignal: void setOnCancelListener(androidx.core.os.CancellationSignal$OnCancelListener)>($r7) in <androidx.fragment.app.FragmentAnim: void animateRemoveFragment(androidx.fragment.app.Fragment,androidx.fragment.app.FragmentAnim$AnimationOrAnimator,androidx.fragment.app.FragmentTransition$Callback)> ==> <androidx.fragment.app.FragmentAnim$1: void onCancel()>
VIRTUAL edge: virtualinvoke $r9.<android.view.animation.Animation: void setAnimationListener(android.view.animation.Animation$AnimationListener)>($r10) in <androidx.fragment.app.FragmentAnim: void animateRemoveFragment(androidx.fragment.app.Fragment,androidx.fragment.app.FragmentAnim$AnimationOrAnimator,androidx.fragment.app.FragmentTransition$Callback)> ==> <androidx.fragment.app.FragmentAnim$2: void onAnimationRepeat(android.view.animation.Animation)>
VIRTUAL edge: virtualinvoke $r9.<android.view.animation.Animation: void setAnimationListener(android.view.animation.Animation$AnimationListener)>($r10) in <androidx.fragment.app.FragmentAnim: void animateRemoveFragment(androidx.fragment.app.Fragment,androidx.fragment.app.FragmentAnim$AnimationOrAnimator,androidx.fragment.app.FragmentTransition$Callback)> ==> <androidx.fragment.app.FragmentAnim$2: void onAnimationStart(android.view.animation.Animation)>
VIRTUAL edge: $r2 = virtualinvoke $r7.<java.io.FileNotFoundException: java.lang.String getMessage()>() in <androidx.profileinstaller.DeviceProfileWriter: java.io.InputStream openStreamFromAssets(android.content.res.AssetManager,java.lang.String)> ==> <java.lang.Throwable: java.lang.String getMessage()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.Object: java.lang.Class getClass()>() in <androidx.core.view.KeyEventDispatcher: boolean actionBarOnMenuKeyEventPre28(android.app.ActionBar,android.view.KeyEvent)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("onMenuKeyEvent", $r1) in <androidx.core.view.KeyEventDispatcher: boolean actionBarOnMenuKeyEventPre28(android.app.ActionBar,android.view.KeyEvent)> ==> <java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r4) in <androidx.core.app.NotificationManagerCompat: java.util.Set getEnabledListenerPackages(android.content.Context)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<androidx.appcompat.view.menu.BaseMenuPresenter: void updateMenuView(boolean)>(1) in <androidx.appcompat.view.menu.BaseMenuPresenter: androidx.appcompat.view.menu.MenuView getMenuView(android.view.ViewGroup)> ==> <androidx.appcompat.view.menu.BaseMenuPresenter: void updateMenuView(boolean)>
VIRTUAL edge: $r10 = virtualinvoke r0.<androidx.appcompat.view.menu.BaseMenuPresenter: android.view.View getItemView(androidx.appcompat.view.menu.MenuItemImpl,android.view.View,android.view.ViewGroup)>($r6, $r7, $r2) in <androidx.appcompat.view.menu.BaseMenuPresenter: void updateMenuView(boolean)> ==> <androidx.appcompat.view.menu.BaseMenuPresenter: android.view.View getItemView(androidx.appcompat.view.menu.MenuItemImpl,android.view.View,android.view.ViewGroup)>
VIRTUAL edge: $z0 = virtualinvoke r0.<androidx.appcompat.view.menu.BaseMenuPresenter: boolean filterLeftoverView(android.view.ViewGroup,int)>($r2, $i0) in <androidx.appcompat.view.menu.BaseMenuPresenter: void updateMenuView(boolean)> ==> <androidx.appcompat.view.menu.BaseMenuPresenter: boolean filterLeftoverView(android.view.ViewGroup,int)>
VIRTUAL edge: $r4 = virtualinvoke $r10.<java.util.zip.DataFormatException: java.lang.String getMessage()>() in <androidx.profileinstaller.Encoding: byte[] readCompressed(java.io.InputStream,int,int)> ==> <java.lang.Throwable: java.lang.String getMessage()>
VIRTUAL edge: virtualinvoke $r4.<androidx.core.view.ViewPropertyAnimatorCompat: void cancel()>() in <androidx.appcompat.view.ViewPropertyAnimatorCompatSet: void cancel()> ==> <androidx.core.view.ViewPropertyAnimatorCompat: void cancel()>
VIRTUAL edge: virtualinvoke $r4.<androidx.core.view.ViewPropertyAnimatorCompat: androidx.core.view.ViewPropertyAnimatorCompat setListener(androidx.core.view.ViewPropertyAnimatorListener)>($r7) in <androidx.appcompat.view.ViewPropertyAnimatorCompatSet: void start()> ==> <androidx.core.view.ViewPropertyAnimatorCompat: androidx.core.view.ViewPropertyAnimatorCompat setListener(androidx.core.view.ViewPropertyAnimatorListener)>
VIRTUAL edge: virtualinvoke $r4.<androidx.appcompat.view.menu.MenuBuilder: boolean performItemAction(android.view.MenuItem,androidx.appcompat.view.menu.MenuPresenter,int)>($r1, r0, 0) in <androidx.appcompat.view.menu.ListMenuPresenter: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> ==> <androidx.appcompat.view.menu.MenuBuilder: boolean performItemAction(android.view.MenuItem,androidx.appcompat.view.menu.MenuPresenter,int)>
VIRTUAL edge: virtualinvoke $r3.<androidx.appcompat.view.menu.ExpandedMenuView: void setOnItemClickListener(android.widget.AdapterView$OnItemClickListener)>(r0) in <androidx.appcompat.view.menu.ListMenuPresenter: androidx.appcompat.view.menu.MenuView getMenuView(android.view.ViewGroup)> ==> <androidx.appcompat.view.menu.ListMenuPresenter: void setCallback(androidx.appcompat.view.menu.MenuPresenter$Callback)>
VIRTUAL edge: virtualinvoke $r3.<androidx.appcompat.view.menu.ExpandedMenuView: void setOnItemClickListener(android.widget.AdapterView$OnItemClickListener)>(r0) in <androidx.appcompat.view.menu.ListMenuPresenter: androidx.appcompat.view.menu.MenuView getMenuView(android.view.ViewGroup)> ==> <androidx.appcompat.view.menu.ListMenuPresenter: void initForMenu(android.content.Context,androidx.appcompat.view.menu.MenuBuilder)>
VIRTUAL edge: virtualinvoke $r5.<android.transition.Transition: android.transition.Transition addListener(android.transition.Transition$TransitionListener)>($r6) in <androidx.fragment.app.FragmentTransitionCompat21: void setListenerForTransitionEnd(androidx.fragment.app.Fragment,java.lang.Object,androidx.core.os.CancellationSignal,java.lang.Runnable)> ==> <androidx.fragment.app.FragmentTransitionCompat21$4: void onTransitionStart(android.transition.Transition)>
VIRTUAL edge: virtualinvoke $r5.<android.transition.Transition: android.transition.Transition addListener(android.transition.Transition$TransitionListener)>($r6) in <androidx.fragment.app.FragmentTransitionCompat21: void setListenerForTransitionEnd(androidx.fragment.app.Fragment,java.lang.Object,androidx.core.os.CancellationSignal,java.lang.Runnable)> ==> <androidx.fragment.app.FragmentTransitionCompat21$4: void onTransitionCancel(android.transition.Transition)>
VIRTUAL edge: virtualinvoke $r5.<android.transition.Transition: android.transition.Transition addListener(android.transition.Transition$TransitionListener)>($r6) in <androidx.fragment.app.FragmentTransitionCompat21: void setListenerForTransitionEnd(androidx.fragment.app.Fragment,java.lang.Object,androidx.core.os.CancellationSignal,java.lang.Runnable)> ==> <androidx.fragment.app.FragmentTransitionCompat21$4: void onTransitionResume(android.transition.Transition)>
VIRTUAL edge: virtualinvoke $r5.<android.transition.Transition: android.transition.Transition addListener(android.transition.Transition$TransitionListener)>($r6) in <androidx.fragment.app.FragmentTransitionCompat21: void setListenerForTransitionEnd(androidx.fragment.app.Fragment,java.lang.Object,androidx.core.os.CancellationSignal,java.lang.Runnable)> ==> <androidx.fragment.app.FragmentTransitionCompat21$4: void onTransitionPause(android.transition.Transition)>
SPECIAL edge: specialinvoke r0.<androidx.lifecycle.viewmodel.CreationExtras: void <init>()>() in <androidx.lifecycle.viewmodel.MutableCreationExtras: void <init>(androidx.lifecycle.viewmodel.CreationExtras)> ==> <androidx.lifecycle.viewmodel.MutableCreationExtras: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <androidx.core.os.LocaleListCompat: boolean equals(java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>() in <androidx.appcompat.app.AppCompatDelegateImpl: void <init>(android.content.Context,android.view.Window,androidx.appcompat.app.AppCompatCallback,java.lang.Object)> ==> <java.lang.Class: java.lang.String getName()>
VIRTUAL edge: $r3 = virtualinvoke $r5.<androidx.appcompat.app.ActionBar: androidx.appcompat.view.ActionMode startActionMode(androidx.appcompat.view.ActionMode$Callback)>($r4) in <androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.view.ActionMode startSupportActionMode(androidx.appcompat.view.ActionMode$Callback)> ==> <androidx.appcompat.app.AppCompatDelegateImpl$ActionModeCallbackWrapperV9: boolean onCreateActionMode(androidx.appcompat.view.ActionMode,android.view.Menu)>
VIRTUAL edge: $r3 = virtualinvoke $r5.<androidx.appcompat.app.ActionBar: androidx.appcompat.view.ActionMode startActionMode(androidx.appcompat.view.ActionMode$Callback)>($r4) in <androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.view.ActionMode startSupportActionMode(androidx.appcompat.view.ActionMode$Callback)> ==> <androidx.appcompat.app.AppCompatDelegateImpl$ActionModeCallbackWrapperV9: boolean onPrepareActionMode(androidx.appcompat.view.ActionMode,android.view.Menu)>
VIRTUAL edge: $r3 = virtualinvoke $r5.<androidx.appcompat.app.ActionBar: androidx.appcompat.view.ActionMode startActionMode(androidx.appcompat.view.ActionMode$Callback)>($r4) in <androidx.appcompat.app.AppCompatDelegateImpl: androidx.appcompat.view.ActionMode startSupportActionMode(androidx.appcompat.view.ActionMode$Callback)> ==> <androidx.appcompat.app.AppCompatDelegateImpl$ActionModeCallbackWrapperV9: void onDestroyActionMode(androidx.appcompat.view.ActionMode)>
STATIC edge: staticinvoke <androidx.core.view.ViewCompat: void setOnApplyWindowInsetsListener(android.view.View,androidx.core.view.OnApplyWindowInsetsListener)>($r7, $r20) in <androidx.appcompat.app.AppCompatDelegateImpl: android.view.ViewGroup createSubDecor()> ==> <androidx.appcompat.app.AppCompatDelegateImpl$3: androidx.core.view.WindowInsetsCompat onApplyWindowInsets(android.view.View,androidx.core.view.WindowInsetsCompat)>
STATIC edge: staticinvoke <androidx.appcompat.view.WindowCallbackWrapper$Api26Impl: void onPointerCaptureChanged(android.view.Window$Callback,boolean)>($r1, $z0) in <androidx.appcompat.view.WindowCallbackWrapper: void onPointerCaptureChanged(boolean)> ==> <androidx.appcompat.view.WindowCallbackWrapper: void onProvideKeyboardShortcuts(java.util.List,android.view.Menu,int)>
STATIC edge: staticinvoke <androidx.appcompat.view.WindowCallbackWrapper$Api26Impl: void onPointerCaptureChanged(android.view.Window$Callback,boolean)>($r1, $z0) in <androidx.appcompat.view.WindowCallbackWrapper: void onPointerCaptureChanged(boolean)> ==> <androidx.appcompat.view.WindowCallbackWrapper: boolean onCreatePanelMenu(int,android.view.Menu)>
STATIC edge: staticinvoke <androidx.appcompat.view.WindowCallbackWrapper$Api26Impl: void onPointerCaptureChanged(android.view.Window$Callback,boolean)>($r1, $z0) in <androidx.appcompat.view.WindowCallbackWrapper: void onPointerCaptureChanged(boolean)> ==> <androidx.appcompat.view.WindowCallbackWrapper: android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback,int)>
STATIC edge: staticinvoke <androidx.appcompat.view.WindowCallbackWrapper$Api26Impl: void onPointerCaptureChanged(android.view.Window$Callback,boolean)>($r1, $z0) in <androidx.appcompat.view.WindowCallbackWrapper: void onPointerCaptureChanged(boolean)> ==> <androidx.appcompat.view.WindowCallbackWrapper: boolean onPreparePanel(int,android.view.View,android.view.Menu)>
STATIC edge: staticinvoke <androidx.appcompat.view.WindowCallbackWrapper$Api26Impl: void onPointerCaptureChanged(android.view.Window$Callback,boolean)>($r1, $z0) in <androidx.appcompat.view.WindowCallbackWrapper: void onPointerCaptureChanged(boolean)> ==> <androidx.appcompat.view.WindowCallbackWrapper: boolean dispatchKeyEvent(android.view.KeyEvent)>
STATIC edge: staticinvoke <androidx.appcompat.view.WindowCallbackWrapper$Api26Impl: void onPointerCaptureChanged(android.view.Window$Callback,boolean)>($r1, $z0) in <androidx.appcompat.view.WindowCallbackWrapper: void onPointerCaptureChanged(boolean)> ==> <androidx.appcompat.view.WindowCallbackWrapper: boolean dispatchKeyShortcutEvent(android.view.KeyEvent)>
STATIC edge: staticinvoke <androidx.appcompat.view.WindowCallbackWrapper$Api26Impl: void onPointerCaptureChanged(android.view.Window$Callback,boolean)>($r1, $z0) in <androidx.appcompat.view.WindowCallbackWrapper: void onPointerCaptureChanged(boolean)> ==> <androidx.appcompat.view.WindowCallbackWrapper: android.view.View onCreatePanelView(int)>
STATIC edge: staticinvoke <androidx.appcompat.view.WindowCallbackWrapper$Api26Impl: void onPointerCaptureChanged(android.view.Window$Callback,boolean)>($r1, $z0) in <androidx.appcompat.view.WindowCallbackWrapper: void onPointerCaptureChanged(boolean)> ==> <androidx.appcompat.view.WindowCallbackWrapper: void onPanelClosed(int,android.view.Menu)>
STATIC edge: staticinvoke <androidx.appcompat.view.WindowCallbackWrapper$Api26Impl: void onPointerCaptureChanged(android.view.Window$Callback,boolean)>($r1, $z0) in <androidx.appcompat.view.WindowCallbackWrapper: void onPointerCaptureChanged(boolean)> ==> <androidx.appcompat.view.WindowCallbackWrapper: boolean onMenuOpened(int,android.view.Menu)>
